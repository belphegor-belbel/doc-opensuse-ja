<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-configure-cryptctl">
 <info>
  <title>cryptctl を利用したアプリケーション向けのストレージ暗号化</title>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <para>データベースなどのアプリケーションは、サードパーティ製の製品として提供される専用のサーバの形態で提供されることがあります。そのような環境を使用する場合、メーカー側のスタッフと連携してデータセンターのメンテナンスタスクを実行する必要があります。また、プライバシーの要件を満たすためにディスクの暗号化を行う必要があるかもしれません。</para>
   <para><command>cryptctl</command> は LUKS を利用して機密情報を含むディレクトリを暗号化するほか、下記のような追加機能も提供します:</para>
   <itemizedlist>
    <listitem>
     <para>暗号鍵を中央のサーバに配置することができます。通常は中央のサーバは顧客側の施設に設置します。</para>
    </listitem>
    <listitem>
     <para>不用意な再起動が発生したような場合でも、暗号化されたパーティションを自動的に再マウントすることができます。</para>
    </listitem>
   </itemizedlist>
  <para><command>cryptctl</command> は下記の 2 つのコンポーネントから構成されています:</para>
  <itemizedlist>
   <listitem>
    <para>1 つもしくは複数の暗号化されたパーティションをマウントするクライアントマシン。この場合、パーティションの暗号を解読するのに必要な鍵を恒久的な場所 (別のディスクなど) に保存しません。クライアントは、クラウドなどのホスティング環境が該当します。</para>
   </listitem>
   <listitem>
    <para>クライアント側からの要求に応じて、パーティションを解読するための暗号鍵を提供するサーバ。</para>
    <para><command>cryptctl</command> サーバを設定することで、 KMIP (Key Management Interoperability Protocol; 鍵管理相互運用プロトコル) 1.3 互換のサーバを構築することもできます。この場合、 <command>cryptctl</command> サーバにはクライアント向けの暗号鍵は保存されず、その代わり KMIP 互換のサーバ内に保存することになります。</para>
   </listitem>
  </itemizedlist>
  <warning>
   <title><command>cryptctl</command> サーバのメンテナンスについて</title>
   <para><command>cryptctl</command> サーバは暗号化されたディスクに対するタイムアウトを管理するほか、必要であれば暗号鍵そのものを保持することもできます。暗号鍵そのものを保持させる場合は、不正にアクセスされることがなく、信頼できるユーザからのみアクセスできるように設定する必要があります。</para>
   <para>これに加えて、サーバのバックアップは定期的に採取する必要があります。サーバのデータが失われてしまうと、クライアントがマウントする暗号化パーティションにもアクセスができなくなってしまうためです。</para>
  </warning>
  <para>暗号化を処理するため、 <command>cryptctl</command> は aes-xts-256 と 512 ビット鍵による LUKS を使用しています。暗号鍵は証明書の検証機能のある TLS を利用して転送されます。</para>
  <figure xml:id="fig-cryptctl-retrieve">
   <title><command>cryptctl</command> による鍵の取得 (KMIP サーバへの接続を行わない場合の例)</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="cryptctl-keyretrieval.png"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="cryptctl-keyretrieval.svg" width="70%"/>
    </imageobject>
    <textobject role="description"><phrase>クライアントはディスクの暗号鍵をサーバに問い合わせ、サーバがそれに応じています。</phrase></textobject>
   </mediaobject>
  </figure>
  <note>
   <title><command>cryptctl</command> のインストール</title>
   <para>下記の手順を実行する前に、まずはサーバやクライアントとして動作させる全てのマシン内に <package>cryptctl</package> パッケージがインストールされていることをご確認ください。</para>
  </note>
  <sect1 xml:id="sec-configure-cryptctl-server">
   <title><command>cryptctl</command> サーバの設定</title>
   <para><command>cryptctl</command> のクライアントを構築するよりも前に、 <command>cryptctl</command> サーバを設定する必要があります。</para>
   <para>まずはサーバとクライアントとの間で機密を保持するために使用する証明書を作成します。自己署名型の証明書であれば、一般的な手順で証明書を作成してください。公的な証明書を使用する場合は、サーバ向けの証明書を作成して証明機関に提出し、署名を受けてください。</para>
   <para>クライアント側の証明書も同様に、公的な証明機関で署名してもらうことができます。このような追加のセキュリティ機能を使用する場合は、あらかじめ証明機関の証明書を手元に用意してください。</para>
   <procedure>
    <step>
     <para><systemitem class="username">root</systemitem> で下記を実行します:</para>
     <screen>&prompt.root;<command>cryptctl init-server</command></screen>
    </step>
    <step>
     <para>それぞれ表示された質問に対して回答を入力し、 <keycap function="enter"/> を押していきます。このとき、既定値は質問の末尾に角括弧で括られて表示されます。</para>
     <substeps>
      <step>
       <para>まずは非常に強力なパスワードを生成し、そのパスワードが漏洩することの無いよう十分な保護を設定してください。このパスワードはサーバ内に登録されている全てのパーティションの解読を行うためのパスワードになります。</para>
      </step>
      <step>
       <para>次に PEM エンコードされた TLS 証明書、もしくは TLS 証明書のチェインのパスを指定します。自己署名型の証明書を使用する場合は、何も指定しないでください。また、パスを指定する場合は、絶対パスで指定してください。</para>
      </step>
      <step>
       <para>既定で表示されるホスト名以外の名前を使用したい場合は、ここでホスト名を指定してください。 <command>cryptctl</command> では、指定したホスト名を含む証明書を生成します。</para>
      </step>
      <step>
       <para>クライアント側からの解読要求を受け付けるネットワークインターフェイスの IP アドレスを指定し、続けてポート番号を指定します (既定のポートは 3737 です) 。</para>
       <para>IP アドレスの既定値である <systemitem class="ipaddress">0.0.0.0</systemitem> を使用すると、 <command>cryptctl</command> は IPv4 を利用する全てのネットワークインターフェイスを介して、クライアントからの要求を受け付けるようになります。</para>
       <!-- IPv6 should work too but not with 0.0.0.0, however: this is
       untested. - sknorr, 2016-12-02 -->
      </step>
      <step>
       <para>クライアントに対する暗号鍵を保存するための、サーバ内のディレクトリを指定します。</para>
      </step>
      <step>
       <para>次にクライアントとの通信を行う際、クライアントに対して認証を要求するかどうかを指定します。ここで <guimenu>No</guimenu> (いいえ) を選択すると、クライアント側からはディスクの UUID のみを認証として使用します (なお、いずれを選択した場合でも、サーバの証明書を利用して通信が暗号化されます) 。</para>
       <para><guimenu>Yes</guimenu> (はい) を選択した場合は、クライアントの証明書に署名する証明機関を PEM 形式で指定してください。</para>
      </step>
      <step>
       <para>次に KMIP 1.3 互換のサーバ (1 つまたは複数) を使用するかどうかを選択します。 KMIP 1.3 互換のサーバを使用すると、クライアントの暗号鍵をそこに保存することができるようになります。こちらを選択した場合は、 1 つまたは複数の KMIP 互換サーバのホスト名およびポートを指定してください。</para>
       <para>このほか、 KMIP サーバに対して使用するユーザ名やパスワード、証明機関の証明書などを設定します。また、 <command>cryptctl</command> のサーバで使用するクライアントの識別証明書を設定することもできます。</para>
       <important>
        <title>KMIP の再設定の難しさについて</title>
        <para>KMIP サーバを使用する場合、後からの再設定は簡単ではありません。この設定を変更するには、 <command>cryptctl</command> サーバだけでなく、クライアントについても設定を修正する必要があるためです。</para>
       </important>
      </step>
      <step>
       <para>最後に電子メールによる暗号化／解読要求の通知を行うため、 SMTP サーバを設定します。電子メールによる通知機能は、設定しなくてもかまいません。</para>
       <note>
        <title>パスワードで保護されたサーバについて</title>
        <para><command>cryptctl</command> では、パスワードによる認証が必要な SMTP サーバを指定して、電子メールを送信することはできません。認証が必要な場合は、ローカルの SMTP プロキシを設定してください。</para>
       </note>
      </step>
      <step>
       <para><command>cryptctl</command> サーバの起動を行うかどうかを尋ねられた場合は、 <literal>y</literal> (はい) と入力してください。</para>
      </step>
     </substeps>
    </step>
    <step>
     <para>設定が終わったら、 <systemitem class="daemon">cryptctl-server</systemitem> サービスの状態を確認します:</para>
     <screen>&prompt.root;<command>systemctl status cryptctl-server</command></screen>
    </step>
   </procedure>
   <para>サーバを後から再設定する場合は、下記のいずれかを行ってください:</para>
   <itemizedlist>
    <listitem>
     <para><command>cryptctl init-server</command> を再度実行します。 <command>cryptctl</command> は既存の設定値を既定値として表示しますので、必要な箇所のみを変更することになります。</para>
    </listitem>
    <listitem>
     <para>設定ファイルである <filename>/etc/sysconfig/cryptctl-server</filename> ファイルを直接編集してもかまいません。</para>
     <para>ただし直接編集する場合は、 <option>AUTH_PASSWORD_HASH</option> と <option>AUTH_PASSWORD_SALT</option>  の値を変更してはなりません。これらのオプションは、適切な手段で計算する必要があるためです。</para>
    </listitem>
   </itemizedlist>
  </sect1>
  <sect1 xml:id="sec-configure-cryptctl-client">
   <title><command>cryptctl</command> クライアントの設定</title>
   <para>下記に示す <command>cryptctl</command> の対話型の設定が、唯一の設定手段となります。</para>
   <para>まずは下記の要件を全て満たしていることを確認します:</para>
   <itemizedlist>
    <listitem>
     <para>ネットワーク内に <command>cryptctl</command> サーバが既に存在していること。</para>
    </listitem>
    <listitem>
     <para>暗号化の対象となるディレクトリが存在すること。</para>
    </listitem>
    <listitem>
     <para>暗号化対象のディレクトリを保持するのに十分なサイズのある、未使用のパーティションがクライアントマシン内に存在すること。</para>
    </listitem>
    <listitem>
     <para>自己署名型の証明書を使用する場合、サーバ側で生成された証明書 ( <filename>*.crt</filename> ファイル) をクライアント側にも配置する必要があります。クライアント側で信頼している証明機関で署名された証明書であれば、この必要はありません。</para>
    </listitem>
    <listitem>
     <para>サーバ側でクライアントを認証する際、証明書を利用して行うように設定した場合は、サーバ側で選択した証明機関の署名が付いた TLS 証明書を用意してください。</para>
     <remark>
      FIXME: needs openssl command-line-fu, or maybe xref to
      doc-sle/sec.apache2.ssl.certificate - though some parts there are
      somewhat Apache-specific, i.e. confusing here.
      - sknorr, 2017-09-06
     </remark>
    </listitem>
   </itemizedlist>
   <procedure>
    <step>
     <para><systemitem class="username">root</systemitem> で下記を実行します:</para>
     <screen>&prompt.root;<command>cryptctl encrypt</command></screen>
    </step>
    <step>
     <para>それぞれ表示された質問に対して回答を入力し、 <keycap function="enter"/> を押していきます。このとき、既定値は質問の末尾に角括弧で括られて表示されます。</para>
     <substeps>
      <step>
       <para>接続先となる <command>cryptctl</command> サーバのホスト名とポートを指定します。</para>
      </step>
      <step>
       <para>サーバ側で TLS 証明書を利用してクライアントの認証を行うように設定している場合は、対応する証明書とその鍵を指定します。証明書はサーバ側で選択した証明機関による署名が必要となります。</para>
      </step>
      <step>
       <para>次にサーバの証明書 (<filename>*.crt</filename> ファイル) の絶対パスを指定します。</para>
      </step>
      <step>
       <para>サーバを設定する際に指定した暗号化パスワードを入力します。</para>
      </step>
      <step>
       <para>暗号化の対象となるディレクトリを指定し、その後にそのディレクトリを暗号化したあとのデータを保存するための空きパーティションのパスを指定します。</para>
      </step>
      <step>
       <para>パーティションを同時に解読することのできるマシンの台数を指定します。</para>
       <para>続いてクライアントからの通信が途絶えた際、追加でパーティションの解読を許可するようにするまでの時間を、秒単位で指定します。</para>
       <para>マシンが何らかの理由で停止して再起動した場合には、パーティションを再度解読できるようにする必要があります。そのため一般には、クライアント側の再起動にかかる時間よりも少し短めの値を、タイムアウトとして設定する必要があります。</para>
       <important>
        <title>タイムアウトの設定値について</title>
        <para>タイムアウトとして設定する時間が長すぎると、初回の試行では暗号化されたパーティションの解読が失敗するようになります。 <command>cryptctl</command> では定期的に暗号鍵の取得を試すようになっていますが、次の試行までには時間が空きますので、遅延を発生させることになってしまいます。</para>
        <para>逆にタイムアウトが短すぎると、暗号化されたパーティションをそのままコピーするだけで、不正なマシンが暗号を解読できることになってしまいます。</para>
       </important>
      </step>
     </substeps>
    </step>
    <step>
     <para>暗号化を開始するには、 <literal>yes</literal> (はい) と入力します。</para>
     <para>すると、 <command>cryptctl</command> は指定したディレクトリの暗号化を行い、結果を空きパーティション内に保存するようになります。保存が完了すると、暗号化されたパーティションのマウントが行われます。ファイルシステムの種類は、暗号化前のファイルシステムと同じ種類になります。</para>
     <para>暗号化されたパーティションを作成する前に、 <command>cryptctl</command> は暗号化前のディレクトリ内にある内容を、 <literal>cryptctl-moved-</literal> という接頭辞の付いたディレクトリ内に移動します。</para>
    </step>
    <step>
     <para>ディレクトリが正しく暗号化されたことを確認するには、下記のように入力して実行します:</para>
     <screen>
&prompt.user;<command>lsblk -o NAME,MOUNTPOINT,UUID</command>
NAME                        MOUNTPOINT          UUID
[...]
sdc
└─sdc1                                          <replaceable>パーティションの_UUID</replaceable>
  └─cryptctl-unlocked-sdc1  /secret-partition   <replaceable>解読後の_UUID</replaceable>
      </screen>
     <para><command>cryptctl</command> では、暗号化されたパーティションを UUID で識別します。上記の例では、 <literal>sdc1</literal> の UUID がそれにあたります。</para>
     <para>サーバ側でディレクトリが解読されているかどうかを確認するには、 <command>cryptctl</command> コマンドを使用します:</para>
     <screen>&prompt.root;<command>cryptctl list-keys</command></screen>
     <para>正しく解読されていれば、下記のような出力が現れるはずです:</para>
     <screen>
2019/06/06 15:50:00 ReloadDB: successfully loaded database of 1 records
Total: 1 records (date and time are in zone EDT)
Used By     When                 UUID  Max.Users  Num.Users  Mount Point
<replaceable>IP_ADDRESS</replaceable>  2019-06-06 15:00:50  <replaceable>UUID</replaceable>  1          1          /secret-partition</screen>
     <para>解読できていないパーティションの場合は、下記のような出力になります:</para>
     <screen>2019/06/06 15:50:00 ReloadDB: successfully loaded database of 1 records
Total: 1 records (date and time are in zone EDT)
Used By      When                 UUID  Max.Users  Num.Users  Mount Point
             2019-06-06 15:00:50  <replaceable>UUID</replaceable>  1          1          /secret-partition</screen>
     <para><literal>Used by</literal> 列の違いに着目してください。</para>
     <para>表示された UUID が暗号化されたパーティションのものであることを確認してください。</para>
    </step>
    <step>
     <para>パーティションの暗号化が正しく動作していることを確認したら、あとはクライアント側にある元のディレクトリ (暗号化されていないディレクトリ) を削除してください。たとえば <command>rm</command> などを使用して削除します。より安全に削除したい場合は、削除を行う前にファイルに対して <command>shred -u</command> などを使用して、ファイルの内容を上書きしてもかまいません。</para>
     <important>
      <title><command>shred</command> コマンドはデータが完全に消すことを保証するわけではない問題について</title>
      <para>ストレージメディアの種類によっては、 <command>shred</command> コマンドを使用してもデータが完全には消えない場合があります。特に SSD などではウエアレベリングの仕組みが存在することから、 <command>shred</command> を実行しても同じ場所には書き込んでくれないこともあります。</para>
     </important>
    </step>
   </procedure>
   <para>クライアントからサーバに対する接続は、 <filename>/etc/sysconfig/cryptctl-client</filename> ファイルで設定します。このファイルは手作業で編集してもかまいません。</para>
   <para>クライアントのパーティションに対する暗号鍵は、サーバ内の <filename>/var/lib/cryptctl/keydb/<replaceable>パーティションの_UUID</replaceable></filename> 内に保存されています。</para>
  </sect1>

  <sect1 xml:id="sec-cryptctl-luks-fstab">
   <title>LUKS ボリューム向け /etc/fstab の設定</title>
   <para>LUKS で暗号化した新しいファイルシステムに対してマウントポイントを設定する場合、 &yast; では既定で <filename>/etc/fstab</filename> 無いに暗号化デバイスの名称を設定します (たとえば <filename>/dev/mapper/cr_sda1</filename> のようなデバイス名を使用します) 。 UUID やボリュームラベルではなくデバイス名を使用するのは、 systemd やその他の関連ツールでの取り扱いにあたって都合がよいためです。</para>
   <para>このような既定の動作を変更することもできます。具体的には熟練者向けパーティション設定か &ay; を使用します。</para>
   <para>なお、設定を変更した場合でも、既に設定されている <filename>/etc/fstab</filename> には影響がありません。新しくシステムにインストールする場合や、動作中のシステムに新しいパーティションを作成する場合など、新しくマウントするファイルシステムにのみ影響があります。</para>
   </sect1>

  <sect1 xml:id="sec-configure-cryptctl-status">
   <title>サーバ側のコマンドでパーティションの解読状態を確認する方法</title>
   <para><command>cryptctl</command> のクライアントが動作している場合、クライアント側からは 10 秒間隔で <command>cryptctl</command> のサーバに <quote>生存通知</quote> (ハートビート) を送信します。クライアント側で設定した時間以上にクライアント側からの生存通知がサーバに届かない場合、サーバはクライアントがオフラインになったものと判断します。これにより、別のクライアント (もしくは再起動後の同じクライアント) から接続ができるようになります。</para>
   <para>全ての鍵に対する使用状況を確認するには、下記のコマンドを入力して実行します:</para>
   <screen>
&prompt.root;<command>cryptctl list-keys</command>
   </screen>
   <para><literal>Num. Users</literal> 以下に、どの鍵が使用されているのかが表示されます。それぞれの鍵に対する詳細を表示したい場合は、下記のようなコマンドを入力して実行します:</para>
   <screen>
&prompt.root;<command>cryptctl show-key <replaceable>UUID</replaceable></command>
   </screen>
   <para>このコマンドを実行すると、マウントポイントやマウントオプション、使用時のオプションや鍵の最終取得時刻、そしてクライアントからの直近 3 回分の生存通知が表示されます。</para>
   <para>これに加えて、 <command>journalctl</command> コマンドを使用することで、鍵をいつ取得したのかのログを確認することができます。</para>
  </sect1>
  <sect1 xml:id="sec-configure-cryptctl-unlock">
   <title>手作業での暗号化パーティションの解読</title>
   <para>パーティションを手作業で解読するにあたっては、 2 種類の方法が存在しています。いずれもクライアント側で実行します:</para>
   <itemizedlist>
    <listitem>
     <formalpara>
      <title>オンライン解錠</title>
      <para>オンライン解錠を利用すると、タイムアウトの問題を回避したりユーザ制限を行ったりすることができます。この方式は、クライアントとサーバとの間がネットワークで繋がっているものの、クライアント側で自動マウントができないような場合に使用することができます。また、この方式を使用することで、全ての暗号化されたパーティションを解読することができます。</para>
     </formalpara>
     <para>オンライン解錠を実行するには、 <command>cryptctl online-unlock</command> コマンドを実行します。サーバ側で設定したパスワードを入力する必要があることに注意してください。</para>
    </listitem>
    <listitem>
     <formalpara>
      <title>オフライン解錠</title>
      <para>この方式は、クライアント側からサーバに接続できない状態や、接続すると何らかの理由で困ってしまうような場合に使用します。この方式を実行するには、サーバ側に暗号鍵を用意しておく必要があることに注意してください。また、この方式は最終手段としてのみ使用されるべきものであるほか、同時に 1 つのパーティションしか解錠できないことにも注意してください。</para>
     </formalpara>
     <para>オフライン解錠を実行するには、 <command>cryptctl offline-unlock</command> コマンドを実行します。これを実行するには、あらかじめ対象のパーティションに対応するサーバ側の鍵ファイル ( <filename>/var/lib/cryptctl/keydb/<replaceable>パーティションの_UUID</replaceable></filename> ) を用意しておく必要があります。</para>
    </listitem>
   </itemizedlist>
  </sect1>
  <sect1 xml:id="sec-configure-cryptctl-lock">
   <title>メンテナンス時の停止手順</title>
   <para>メンテナンス中にパーティションが不正に解読されてしまわないようにするため、メンテナンス時にはクライアント側を停止し、 <command>cryptctl</command> サーバを無効化しておくことをお勧めします。具体的には、下記のいずれかを実行します:</para>
   <itemizedlist>
    <listitem>
     <para><systemitem class="daemon">cryptctl-server</systemitem> サービスを停止します:</para>
     <screen>
&prompt.root;<command>systemctl stop cryptctl-server</command>
     </screen>
    </listitem>
    <listitem>
     <para><command>cryptctl</command> サーバをネットワークから切り離します。</para>
    </listitem>
   </itemizedlist>
  </sect1>
 <sect1 xml:id="sec-configure-cryptctl-ha">
  <title>cryptctl-server での HA 環境の構築</title>
  <para>メンテナンスの際には cryptctl-server を停止しておかないと必要なデータが正しく保存されなくなってしまう一方、これによって暗号鍵を利用しているシステムが動作できなくなり、システムの停止が発生してしまいます。このような問題を避けるため、 cryptctl-server で HA (高可用性) 環境を構築しておくことを強くお勧めします。この場合、少なくとも 2 台のノードから構成される &ha; クラスタを構築することになります。下記では、自己署名型の証明書を利用して cryptctl-server 向けの HA クラスタを構築するための手順を説明しています。</para>
  <para>まずは下記の要件を全て満たしていることを確認します:</para>
  <itemizedlist>
   <listitem>
    <para>少なくとも 2 台以上のサーバを用意します。これらは &sles; と &ha; 拡張の両方のほか、 cryptctl パッケージをインストールしておきます。また、全てのサーバは SSH を介して相互にアクセスできる必要があります。</para>
   </listitem>
   <listitem>
    <para>新しいクラスタを構築する場合は、クラスタの &haweb; 向けの追加 IP アドレス ( <replaceable>AdminIP</replaceable> ) を用意します。</para>
   </listitem>
   <listitem>
    <para>また、 cryptctl-server 向けに別途の IP アドレス ( <replaceable>CrypServerIP</replaceable> ) も用意します。</para>
   </listitem>
   <listitem>
    <para>さらに cryptctl-server 向けの DNS ホスト名 ( <replaceable>CrypServerHostName</replaceable> ) を用意します。このホスト名は、上述の IP アドレスを指し示すものとします。</para>
   </listitem>
   <listitem>
    <para>鍵を保存するための HA が有効化されたブロックデバイスか、 NFS 共有を用意します。</para>
    <para>下記の例では、 <filename>nfs-server.example.org/data/cryptctl-keys</filename> という名前の NFS 共有を使用します。この共有は <filename>/var/lib/cryptctl/keydb</filename> という標準的なディレクトリにマウントします。</para>
   </listitem>
   <listitem>
    <para>このほか、 SBD デバイスを使用しておくことを強くお勧めします。</para>
   </listitem>
  </itemizedlist>

  <procedure>
   <title>2 ノードの cryptctl HA クラスタの構築</title>
   <step>
    <para><replaceable>Node1</replaceable> (ノード#1) に <systemitem class="username">root</systemitem> でログインします。</para>
   </step>
   <step>
    <para><xref linkend="sec-configure-cryptctl-server"/> に書かれた手順で cryptctl-server を構築します。このとき、下記に注意してください:</para>
    <substeps>
     <step>
      <para>証明書を作成する場合は、 cryptctl サーバでの <replaceable>CrypServerHostName</replaceable> に対応する証明書を用意してください。ホスト名に対応する証明書 <emphasis>ではありません</emphasis> 。</para>
     </step>
     <step>
      <para>cryptctl サーバに用意した個別の IP アドレス <replaceable>CrypServerIP</replaceable> を使用してください。既定の IP アドレス設定をそのまま使用しては <emphasis>なりません</emphasis> 。</para>
     </step>
     <step>
      <para>KMIP サーバを構築してはなりません。</para>
     </step>
     <step>
      <para><command>cryptctl</command> サーバの起動を行うかどうかを尋ねられた場合は、 <literal>n</literal> (いいえ) と入力してください。</para>
     </step>
    </substeps>
   </step>
   <step>
    <para>2 ノードの HA クラスタを構築します:</para>
    <substeps>
     <step>
      <important>
       <para>ここでは cryptctl サーバを構築したマシンを <replaceable>Node1</replaceable> というホスト名であるものとします。</para>
      </important>
      <para>cryptctl サーバを設定したマシンで、最初のノードを起動します:</para>
      <screen>&prompt.root;<command>crm cluster init -i <replaceable>ネットワークデバイス名</replaceable> -A <replaceable>AdminIP</replaceable> -n <replaceable>ClusterName</replaceable></command></screen>
     </step>
     <step>
      <para>あとは <replaceable>Node2</replaceable> にログインして、クラスタへの参加を実施します:</para>
      <screen>&prompt.root;<command>ssh <replaceable>Node2</replaceable></command>
&prompt.root;<command>crm cluster join -y <replaceable>Node1</replaceable></command></screen>
     </step>
     <step>
      <para>さらに詳しい情報については、 <link xlink:href="https://documentation.suse.com/sle-ha/html/SLE-HA-all/article-installation.html">&haquick;</link> をご覧ください。</para>
     </step>
    </substeps>
   </step>
   <step>
    <para>cryptctl サーバに対するリソースグループを設定します:</para>
   </step>
   <step>
    <substeps>
     <step>
      <para>cryptcl の crm-shell-script を利用することで、全てのノードにおいて必要な全てのリソースエージェントを設定してファイルをコピーすることができます。まずは適切に構築できているかどうかを確認します:</para>
      <screen>&prompt.root;<command>crm script verify cryptctl  \
cert-path=/etc/cryptctl/servertls/<replaceable>CertificatFileName</replaceable> \
cert-key-path=/etc/cryptctl/servertls/<replaceable>CertificatKeyFileName</replaceable> \
virtual-ip:ip=<replaceable>CrypServerIP</replaceable> \
filesystem:device=<replaceable>DevicePath</replaceable>
filesystem:fstype=<replaceable>FileSystemType</replaceable></command></screen>
     </step>
     <step>
      <para>チェックが成功したら、下記のようにスクリプトを実行してクラスタグループの構築を行います:</para>
      <screen>&prompt.root;<command>crm script verify cryptctl  \
cert-path=/etc/cryptctl/servertls/<replaceable>CertificatFileName</replaceable> \
cert-key-path=/etc/cryptctl/servertls/<replaceable>CertificatKeyFileName</replaceable> \
virtual-ip:ip=<replaceable>CrypServerIP</replaceable> \
filesystem:device=<replaceable>DevicePath</replaceable>
filesystem:fstype=<replaceable>FileSystemType</replaceable></command></screen>
     </step>
    </substeps>
   </step>
   </procedure>
   <table xml:id="tab-parameters">
    <title>cryptctl crm スクリプトでリソースグループを設定するためのパラメータ一覧</title>
    <tgroup cols="4">
      <colspec colname="name"/>
      <colspec colname="obligytory"/>
      <colspec colname="default"/>
      <colspec colname="description"/>
      <thead>
        <row>
          <entry>
            <para>名前</para>
          </entry>
          <entry>
            <para>必須かどうか</para>
          </entry>
          <entry>
            <para>既定値</para>
          </entry>
          <entry>
            <para>説明</para>
          </entry>
        </row>
      </thead>
      <tbody>
        <row>
          <entry>id</entry>
          <entry>いいえ</entry>
          <entry>cryptctl</entry>
          <entry>リソースグループ名</entry>
        </row>
        <row>
          <entry>cert-path</entry>
          <entry>はい</entry>
          <entry>
          </entry>
          <entry>作成した証明書のフルパス</entry>
        </row>
        <row>
          <entry>cert-key-path</entry>
          <entry>はい</entry>
          <entry>
          </entry>
          <entry>作成した証明書に対応する機密鍵のフルパス</entry>
        </row>
        <row>
          <entry>virtual-ip:id</entry>
          <entry>いいえ</entry>
          <entry>cryptctl-vip</entry>
          <entry>cryptctl サーバの仮想 IP リソース ID</entry>
        </row>
        <row>
          <entry>virtual-ip:ip</entry>
          <entry>はい</entry>
          <entry>
          </entry>
          <entry>cryptctl サーバの仮想 IP アドレス</entry>
        </row>
        <row>
          <entry>virtual-ip:nic</entry>
          <entry>いいえ</entry>
          <entry>(virtual-ip リソースエージェントによって検出されます)</entry>
          <entry>cryptctl が接続を待ち受けるべきネットワークデバイス名 (IP アドレスからデバイス名が検出できない場合にのみ必要)</entry>
        </row>
        <row>
          <entry>virtual-ip:cidr_netmask</entry>
          <entry>いいえ</entry>
          <entry>(virtual-ip リソースエージェントによって検出されます)</entry>
          <entry>cryptctl の IP アドレスに対応するネットマスク (IP アドレスからネットマスクが検出できない場合にのみ必要)</entry>
        </row>
        <row>
          <entry>virtual-ip:broadcast</entry>
          <entry>いいえ</entry>
          <entry>(virtual-ip リソースエージェントによって検出されます)</entry>
          <entry>cryptctl サーバの IP アドレスに対応するブロードキャストアドレス (IP アドレスから検出できない場合にのみ必要)</entry>
        </row>
        <row>
          <entry>filesystem:id</entry>
          <entry>いいえ</entry>
          <entry>cryptctl-filesystem</entry>
          <entry>ディスクの暗号鍵とレコードを含むファイルシステムリソースの ID</entry>
        </row>
        <row>
          <entry>filesystem:device</entry>
          <entry>はい</entry>
          <entry>
          </entry>
          <entry>ファイルシステムを含むデバイス名。 <filename>/dev/sda<replaceable>...</replaceable></filename> のようにブロックデバイス名のほか、 <filename>server:/path</filename> のように NFS 共有を指定することができます。</entry>
        </row>
        <row>
          <entry>filesystem:directory</entry>
          <entry>いいえ</entry>
          <entry>/var/lib/cryptctl/keydb</entry>
          <entry>ファイルシステムのマウント先ディレクトリ名。 <filename>/dev/sda<replaceable>...</replaceable></filename> のようにブロックデバイス名のほか、 <filename>server:/path</filename> のように NFS 共有を指定することができます。</entry>
        </row>
        <row>
          <entry>filesystem:fstype</entry>
          <entry>はい</entry>
          <entry>
          </entry>
          <entry>ファイルシステムの種類 (NFS, XFS, EXT4 等)</entry>
        </row>
        <row>
          <entry>filesystem:options</entry>
          <entry>いいえ</entry>
          <entry>(選択したファイルシステムに対応する既定値と同じです)</entry>
          <entry>ファイルシステムのマウントオプション。</entry>
        </row>
      </tbody>
    </tgroup>
  </table>
 </sect1>
 <sect1 xml:id="sec-configure-cryptctl-more">
  <title>さらなる情報</title>
  <para>さらに詳しい情報については、プロジェクトのホームページ <link xlink:href="https://github.com/SUSE/cryptctl/"/> をご覧ください。</para>
 </sect1>
 </chapter>
