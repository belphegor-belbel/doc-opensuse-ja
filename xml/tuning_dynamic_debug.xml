<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-dynamic-debug">
  <title>ダイナミックデバッグ: カーネルのデバッグメッセージの調整</title>
  <info xmlns:d="http://docbook.org/ns/docbook">
    <abstract>
      <para>ダイナミックデバッグは Linux カーネル内に用意されているパワフルなデバッグ機能で、カーネルの再コンパイルやシステムの再起動を実施することなく、動的にデバッグメッセージの有効化や無効化を実施できる仕組みです。</para>
    </abstract>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  <revhistory xml:id="rh-cha-tuning-dynamic-debug">
   <revision>
     <date>2024-06-25</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>
  <para>ダイナミックデバッグは下記のような状況で使用します:</para>
  <itemizedlist>
    <listitem>
      <para>カーネル内部の問題の調査</para>
    </listitem>
    <listitem>
      <para>新しいハードウエアに対応するためのドライバ開発</para>
    </listitem>
    <listitem>
      <para>セキュリティイベントの追跡や監査</para>
    </listitem>
  </itemizedlist>
  <sect1 xml:id="sec-tuning-dynamic-debug-benefits">
    <title>ダイナミックデバッグの利点</title>

    <para>ダイナミックデバッグを使用することで、下記のような利点をもたらします:</para>

    <variablelist>
      <varlistentry>
        <term>リアルタイムなデバッグ</term>
        <listitem>
          <para>ダイナミックデバッグはシステムの再起動を行わずにデバッグメッセージを有効化できます。そのため、本番環境下で問題を調査する場合など、性能を損なってはならないような場合に有用です。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>選択的なデバッグ</term>
        <listitem>
          <para>デバッグメッセージの有効化をカーネル内のパーツ単位や個別のモジュール単位で設定することができます。これにより、必要な情報のみに絞って出力することができます。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>性能のチューニング</term>
        <listitem>
          <para>現在の解析要件に合わせてデバッグメッセージの有効／無効を切り替えることで、ダイナミックデバッグをカーネルの性能監視や最適化に使用することもできます。</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="sec-tuning-dynamic-debug-check">
    <title>ダイナミックデバッグの状態確認</title>

    <para>既定でダイナミックデバッグ機能の搭載されたカーネルがインストールされているはずですが、念のためダイナミックデバッグ機能が搭載されているかどうかを確認するには、下記のようなコマンドを root で実行します:</para>

<screen>&prompt.root;<command>zcat /proc/config.gz | grep CONFIG_DYNAMIC_DEBUG</command></screen>

    <para>ダイナミックデバッグ機能が組み込まれていれば、下記のような出力が現れるはずです:</para>

<screen>
CONFIG_DYNAMIC_DEBUG=y
CONFIG_DYNAMIC_DEBUG_CORE=y
</screen>
  </sect1>
  <sect1 xml:id="sec-tuning-dynamic-debug-use">
    <title>ダイナミックデバッグの使用</title>

    <para>動作中のカーネルに対して、特定のデバッグメッセージやログを有効化したい場合は、<command>echo</command> コマンドで <filename>/sys/kernel/debug/dynamic_debug/control</filename> ファイルに書き込みを行います。</para>

    <para>ダイナミックデバッグの簡単な使用手順は、下記のようになります:</para>

    <note>
      <para>ダイナミックデバッグの機能は、カーネルのソースコード内に組み込まれた <systemitem>pr_debug</systemitem> 等の特定のデバッグマクロに依存しています。これらのマクロはカーネルの開発者に対して、コード内でのデバッグメッセージ出力に使用されています。</para>
      <para>本章内での例は、動作中のカーネルでダイナミックデバッグが既に有効化されているはずであることから、 <systemitem>pr_debug</systemitem> マクロが正しく動作していることを前提にしています。</para>
    </note>

    <variablelist>
      <varlistentry>
        <term>特定のカーネルソースコードファイルに対するデバッグメッセージの有効化</term>
        <listitem>
          <para>たとえば特定のカーネルのソースコードファイル内にあるデバッグメッセージを有効化するには、下記のように入力して実行します:</para>
<screen>&prompt.root;<command>echo "file <replaceable>ファイル名.c</replaceable> +p" &gt; /sys/kernel/debug/dynamic_debug/control</command></screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>特定のカーネルモジュールに対するデバッグメッセージの有効化</term>
        <listitem>
          <para>特定のカーネルモジュール内にあるデバッグメッセージを有効化するには、下記のように入力して実行します:</para>
<screen>&prompt.root;<command>echo "module <replaceable>モジュール名</replaceable> +p" &gt; /sys/kernel/debug/dynamic_debug/control</command></screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>デバッグメッセージの無効化</term>
        <listitem>
          <para>特定のカーネルのソースコードやカーネルモジュールに対して有効化したデバッグメッセージを無効化したい場合は、 <command>echo</command> コマンドで <command>-p</command> オプションを指定します。たとえば下記のようになります:</para>
<screen>&prompt.root;<command>echo "file <replaceable>ファイル名.c</replaceable> -p" &gt; /sys/kernel/debug/dynamic_debug/control</command></screen>
<screen>&prompt.root;<command>echo "module <replaceable>モジュール名</replaceable> -p" &gt; /sys/kernel/debug/dynamic_debug/control</command></screen>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>ダイナミックデバッグに関する詳細な情報や使用例などについては、 <link xlink:href="https://www.kernel.org/doc/html/latest/admin-guide/dynamic-debug-howto.html">公式文書 (英語)</link> をお読みください。</para>
  </sect1>
  <sect1 xml:id="sec-tuning-dynamic-debug-view">
    <title>ダイナミックデバッグメッセージの表示</title>

    <para>上記までの手順で有効化し、その後に出力されたデバッグメッセージを表示するには、 <command>dmesg</command> コマンドを使用します。なお、 <command>grep</command> コマンドで出力をフィルタすると、より読みやすくなります:</para>

<screen>&prompt.root;<command>dmesg | grep -i "<replaceable>ファイル名.c</replaceable>"</command></screen>

    <para>また、生成されたメッセージを継続的に追跡したい場合は、 <command>tail</command> コマンドに <command>-f</command> オプションを指定して実行します:</para>

<screen>&prompt.root;<command>tail -f /var/log/messages</command></screen>
  </sect1>
</chapter>
