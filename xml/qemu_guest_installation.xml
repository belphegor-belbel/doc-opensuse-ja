<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-qemu-guest-inst">
 <title>ゲストのインストール</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
  </dm:docmanager>
 </info>
 <para><command>virt-manager</command> や <command>virt-install</command> など、 <systemitem class="library">libvirt</systemitem> ベースのツールを利用することで、仮想マシンの構築から管理までを便利に行うことができます。実態としては、これらは <command>qemu-system-ARCH</command> コマンドのラッパーとして動作していますが、 <systemitem class="library">libvirt</systemitem> ベースのツールを使用せずに <command>qemu-system-ARCH</command> を直接使用することもできます。</para>
 <warning>
  <title><command>qemu-system-ARCH</command> と libvirt の関係性について</title>
  <para><command>qemu-system-ARCH</command> で作成した <xref linkend="gloss-vt-vm"/> は、 <systemitem class="library">libvirt</systemitem> ベースのツールから参照することはできません。</para>
 </warning>
 <sect1 xml:id="cha-qemu-guest-inst-qemu-kvm">
  <title><command>qemu-system-ARCH</command> を利用した基本的なインストール</title>

  <para>下記の例では、 &sls; 11 をインストールした仮想マシンを作成します。各コマンドに対する詳細に名説明については、それぞれのマニュアルページをお読みください。</para>

  <para>仮想環境内で使用するシステムのイメージを作成していない場合は、まずそれをインストールメディアを利用して作成します。この場合、ハードディスクイメージを新規に作成して、インストールメディアのイメージを取得するか、インストールメディアそれ自身を用意します。</para>

  <para>まずは <command>qemu-img</command> でハードディスクを作成します。</para>

<screen>&prompt.user;qemu-img create<co xml:id="co-qemu-img-create"/> -f raw<co xml:id="co-qemu-img-format"/> /images/sles/hda<co xml:id="co-qemu-img-path"/> 8G<co xml:id="co-qemu-img-size"/></screen>

  <calloutlist>
   <callout arearefs="co-qemu-img-create">
    <para><option>create</option> を指定することで、 <command>qemu-img</command> に対して新しいイメージを作成するよう指示しています。</para>
   </callout>
   <callout arearefs="co-qemu-img-format">
    <para><option>-f</option> パラメータでディスク形式を指定しています。</para>
   </callout>
   <callout arearefs="co-qemu-img-path">
    <para>イメージファイルのフルパスを指定しています。</para>
   </callout>
   <callout arearefs="co-qemu-img-size">
    <para>イメージのサイズ (この場合は 8 GB) を指定しています。イメージは <xref linkend="gloss-vt-storage-sparse"/> として作成され、ディスクにデータが書き込まれていくことで実際のサイズが増えていく形態になります。ここで指定したサイズは、イメージファイルの最大サイズを指定していることになります。</para>
   </callout>
  </calloutlist>

  <para>少なくとも 1 台のハードディスクを作成したら、あとは <command>qemu-system-ARCH</command> を実行して、インストールシステムの起動を行います:</para>

<screen>&prompt.root;qemu-system-x86_64 -name "sles"<co xml:id="co-qemu-kvn-name"/>-machine accel=kvm -M pc<co xml:id="co-qemu-kvm-type"/> -m 768<co xml:id="co-qemu-kvm-memory"/> \
-smp 2<co xml:id="co-qemu-kvm-cpu"/> -boot d<co xml:id="co-qemu-kvm-boot"/> \
-drive file=/images/sles/hda,if=virtio,index=0,media=disk,format=raw<co xml:id="co-qemu-kvm-hdd"/> \
-drive file=/isos/&installmedia;,index=1,media=cdrom<co xml:id="co-qemu-kvm-cdrom"/> \
-net nic,model=virtio,macaddr=52:54:00:05:11:11<co xml:id="co-qemu-kvm-nic"/> -net user \
-vga cirrus<co xml:id="co-qemu-kvm-gfx"/> -balloon virtio<co xml:id="co-qemu-kvm-balloon"/></screen>

  <calloutlist>
   <callout arearefs="co-qemu-kvn-name">
    <para>ウインドウのタイトル部や VNC サーバに接続した際に表示される仮想マシンの名前を指定しています。この名前は他の仮想マシンと重複していてはなりません。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-type">
    <para>マシンの種類を指定します。設定可能な値の一覧を表示するには、 <command>qemu-system-ARCH</command> <option>-M ?</option> と入力して実行してください。なお <literal>pc</literal> を指定すると、既定値である <guimenu>Standard PC</guimenu> (標準 PC) を指定したものとみなされます。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-memory">
    <para>仮想マシンに対して割り当てる最大メモリ量を指定しています。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-cpu">
    <para>2 台のプロセッサが搭載された SMP システムであることを指定しています。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-boot">
    <para>起動の順序を指定しています。設定可能な値は <literal>a</literal> , <literal>b</literal> (フロッピィディスク 1 台目および 2 台目), <literal>c</literal> (1 台目のハードディスク), d <literal/> (1 台目の CD-ROM), <literal>n</literal> から <literal>p</literal> まで (ネットワークアダプタの 1 枚目から 3 枚目によるネットワーク起動) のいずれかです。既定値は <literal>c</literal> です。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-hdd">
    <para>1 台目 ( <literal>index=0</literal> ) のハードディスクを定義しています。ここでは、準仮想化 ( <literal>if=virtio</literal> ) ドライブとして提供し、 <literal>raw</literal> 形式を使用する設定が書かれています。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-cdrom">
    <para>2 台目 ( <literal>index=1</literal> ) のドライブは CD-ROM として動作するイメージドライブであることを指定しています。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-nic">
    <para>準仮想化 ( <literal>model=virtio</literal> ) ネットワークアダプタを、 MAC アドレス <literal>52:54:00:05:11:11</literal> で定義しています。なお、 MAC アドレスの重複が発生しないように設定してください。重複が発生すると、通信ができなくなってしまいます。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-gfx">
    <para>グラフィックカードを指定しています。 <literal>none</literal> を指定すると、グラフィックカードが無効化されます。</para>
   </callout>
   <callout arearefs="co-qemu-kvm-balloon">
    <para>準仮想化型のバルーンデバイスを定義し、メモリ量を動的に変更できるように設定しています (ただし <option>-m</option> で指定したサイズは超えないものとします) 。</para>
   </callout>
  </calloutlist>

  <para>ゲスト側のオペレーティングシステムのインストールが完了したら、あとは CD-ROM ドライブ無しで仮想マシンを起動することができます:</para>

<screen>&prompt.root;qemu-system-x86_64 -name "sles" -machine type=pc,accel=kvm -m 768 \
-smp 2 -boot c \
-drive file=/images/sles/hda,if=virtio,index=0,media=disk,format=raw \
-net nic,model=virtio,macaddr=52:54:00:05:11:11 \
-vga cirrus -balloon virtio
</screen>
 </sect1>
 <sect1 xml:id="cha-qemu-guest-inst-qemu-img">
  <title><command>qemu-img</command> を利用したディスクイメージの管理</title>

  <para>上記の章 (<xref linkend="cha-qemu-guest-inst-qemu-kvm"/>) では <command>qemu-img</command> コマンドを利用してハードディスクのイメージを作成してきましたが、このコマンドは一般的なディスク操作にも使用することができます。本章では、ディスクイメージをより柔軟に管理するための <command>qemu-img</command> のサブコマンドについて紹介しています。</para>

  <sect2 xml:id="cha-qemu-guest-inst-qemu-img-general-invocation">
   <title>qemu-img の実行に関する一般的な情報</title>
   <para><command>qemu-img</command> は <command>zypper</command> と同様に、サブコマンドを指定してさまざまな処理を行います。それぞれのサブコマンドにはそれぞれのオプションが用意されています。オプションによっては一般的なもののほか、サブコマンド特有のものも存在しています。オプションの一覧について、詳しくはマニュアルページ ( <command>man 1 qemu-img</command> ) をお読みください。また、 <command>qemu-img</command> は、下記のような書式で実行します:</para>
<screen>&prompt.user;qemu-img <replaceable>サブコマンド</replaceable> <replaceable>[オプション]</replaceable></screen>
   <para>また、下記のようなサブコマンドに対応しています:</para>
   <variablelist>
    <varlistentry>
     <term><literal>create</literal></term>
     <listitem>
      <para>ファイルシステム内に新しいディスクイメージを作成します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>check</literal></term>
     <listitem>
      <para>既存のディスクイメージ内にエラーがないかどうかをチェックします。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>compare</literal></term>
     <listitem>
      <para>2 つのイメージファイル内に同じ内容が含まれているかどうかを確認します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>map</literal></term>
     <listitem>
      <para>イメージファイル名とそのファイルチェインのメタデータをダンプ出力します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>amend</literal></term>
     <listitem>
      <para>指定したイメージファイルに対して、イメージ形式固有のオプションを修正します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>convert</literal></term>
     <listitem>
      <para>既存のディスクイメージを異なる形式に変換して新しいディスクイメージを作成します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>info</literal></term>
     <listitem>
      <para>ディスクイメージに関する情報を表示します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>snapshot</literal></term>
     <listitem>
      <para>既存のディスクイメージに対するスナップショットを管理します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>commit</literal></term>
     <listitem>
      <para>既存のディスクイメージに対する変更を適用します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>rebase</literal></term>
     <listitem>
      <para>既存のイメージを利用して新しいベースイメージを作成します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>resize</literal></term>
     <listitem>
      <para>既存のディスクイメージのサイズを拡張／縮小します。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="cha-qemu-guest-inst-qemu-img-create">
   <title>ディスクイメージの作成／変換／検査</title>
   <para>本章では、ディスクイメージの作成方法や状態の確認方法、一方の形式のディスクイメージの他方の形式への変換、そしてディスクイメージの詳細情報の取得方法について説明しています。</para>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-create">
    <title>qemu-img create</title>
    <para><command>qemu-img create</command> は &vmguest; のオペレーティングシステム向けに新しいディスクイメージを作成するコマンドです。このコマンドは下記のような書式で実行します:</para>
<screen>&prompt.user;qemu-img create -f fmt<co xml:id="co-qemu-img-create-f"/> -o options<co xml:id="co-qemu-img-create-o"/> fname<co xml:id="co-qemu-img-create-filename"/> size<co xml:id="co-qemu-img-create-size"/></screen>
    <calloutlist>
     <callout arearefs="co-qemu-img-create-f">
      <para>作成するイメージの形式を指定します。サポートされている形式は、 <literal>raw</literal> , <literal>qcow2</literal> の 2 種類です。</para>
     </callout>
     <callout arearefs="co-qemu-img-create-o">
      <para>イメージ形式によっては、コマンドラインに追加のオプションを指定することができるものもあります。この追加のオプションは <literal>-o</literal> オプションで指定します。 <literal>raw</literal> イメージ形式の場合は <literal>size</literal> オプションにのみ対応しています。そのため、コマンドの末尾でサイズを指定する代わりに、 <literal>-o size=8G</literal> のように指定してサイズを設定することもできます。</para>
     </callout>
     <callout arearefs="co-qemu-img-create-filename">
      <para>作成すべきディスクイメージファイルのフルパスを指定します。</para>
     </callout>
     <callout arearefs="co-qemu-img-create-size">
      <para>作成するディスクイメージのサイズを指定します (<literal>-o size=<replaceable>&lt;イメージサイズ&gt;</replaceable></literal> オプションを指定しなかった場合) 。サイズ指定では、それぞれ下記の単位接尾辞を使用することができます: <literal>K</literal> (キロバイト), <literal>M</literal> (メガバイト), <literal>G</literal> (ギガバイト), <literal>T</literal> (テラバイト)</para>
     </callout>
    </calloutlist>
    <para>たとえば新しいディスクイメージ <filename>sles.raw</filename> を <filename>/images</filename> ディレクトリ内に作成し、最大サイズを 4 GB として設定したい場合は、下記のコマンドを入力して実行します:</para>
<screen>&prompt.user;qemu-img create -f raw -o size=4G /images/sles.raw
Formatting '/images/sles.raw', fmt=raw size=4294967296

&prompt.user;ls -l /images/sles.raw
-rw-r--r-- 1 tux users 4294967296 Nov 15 15:56 /images/sles.raw

&prompt.user;qemu-img info /images/sles.raw
image: /images/sles11.raw
file format: raw
virtual size: 4.0G (4294967296 bytes)
disk size: 0
</screen>
    <para>上記の通り、新しく作成したイメージの <emphasis>仮想的な</emphasis> サイズは 4 GB ですが、実際のサイズは 0 バイトになっています。これは、イメージに対してまだ何もデータを書き込んでいないためです。</para>
    <tip>
     <title>btrfs ファイルシステム内での &vmguest; イメージについて</title>
     <para>btrfs ファイルシステム内にディスクイメージを作成する必要がある場合、 btrfs に搭載されたコピーオンライト機能によって、性能劣化が発生する場合があります。この場合に備えて、 <option>nocow=on</option> オプションを指定してイメージを作成することができます:</para>
<screen>&prompt.user;qemu-img create -o nocow=on test.img 8G</screen>
     <para>なお、コピーオンライト機能を使用したい (たとえばスナップショットの作成や仮想マシン間を跨いだ共有など) 場合は、 <option>nocow</option> オプションを指定せずに実行してください。</para>
    </tip>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-convert">
    <title>qemu-img convert</title>
    <para><command>qemu-img convert</command> はディスクイメージを他の形式に変換するためのコマンドです。 &qemu; でサポートされるイメージ形式の一覧を表示したい場合は、 <command>qemu-img</command> <option>-h</option> と入力して実行し、出力の末尾のほうをご覧ください。このコマンドは下記のような書式になっています:</para>
<screen>&prompt.user;qemu-img convert -c<co xml:id="co-qemu-img-convert-c"/> -f fmt<co xml:id="co-qemu-img-convert-fmt"/> -O out_fmt<co xml:id="co-qemu-img-convert-ofmt"/> -o options<co xml:id="co-qemu-img-convert-o"/> fname<co xml:id="co-qemu-img-convert-fname"/> out_fname<co xml:id="co-qemu-img-convert-ofname"/></screen>
    <calloutlist>
     <callout arearefs="co-qemu-img-convert-c">
      <para>作成するディスクイメージを圧縮するための指定です。 <literal>qcow</literal> および <literal>qcow2</literal> 形式のみで指定することができます。</para>
     </callout>
     <callout arearefs="co-qemu-img-convert-fmt">
      <para>元となるディスクイメージの形式を指定します。通常は自動検出されるため、省略してもかまいません。</para>
     </callout>
     <callout arearefs="co-qemu-img-convert-ofmt">
      <para>作成するディスクイメージの形式を指定します。</para>
     </callout>
     <callout arearefs="co-qemu-img-convert-o">
      <para>作成するディスクイメージ形式に対する追加のオプションを指定します。 <literal>-o ?</literal> とオプションを入力して実行すると、指定したディスクイメージ形式で利用できるオプションの一覧を表示することができます。</para>
     </callout>
     <callout arearefs="co-qemu-img-convert-fname">
      <para>変換元となるディスクイメージのパスを指定します。</para>
     </callout>
     <callout arearefs="co-qemu-img-convert-ofname">
      <para>変換先のディスクイメージのパスを指定します。</para>
     </callout>
    </calloutlist>
<screen>&prompt.user;qemu-img convert -O vmdk /images/sles.raw \
/images/sles.vmdk

&prompt.user;ls -l /images/
-rw-r--r-- 1 tux users 4294967296 16. lis 10.50 sles.raw
-rw-r--r-- 1 tux users 2574450688 16. lis 14.18 sles.vmdk
</screen>
    <para>選択したイメージ形式で利用可能なオプションの一覧を表示するには、下記のようなコマンドを入力して実行します (下記の <literal>vmdk</literal> を使用したい形式に置き換えて実行してください):</para>
<screen>&prompt.user;qemu-img convert -O vmdk /images/sles.raw \
/images/sles.vmdk -o ?
Supported options:
size             Virtual disk size
backing_file     File name of a base image
compat6          VMDK version 6 image
subformat        VMDK flat extent format, can be one of {monolithicSparse \
    (default) | monolithicFlat | twoGbMaxExtentSparse | twoGbMaxExtentFlat}
scsi             SCSI image
</screen>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-check">
    <title>qemu-img check</title>
    <para><command>qemu-img check</command> コマンドは、既存のディスクイメージ内にエラーが無いかどうかを調査します。なお、ディスクイメージ形式によっては、この機能に対応していないものもあります。このコマンドは下記のような書式で実行します:</para>
<screen>&prompt.user;qemu-img check -f fmt<co xml:id="co-qemu-img-check-fmt"/> fname<co xml:id="co-qemu-img-check-fname"/></screen>
    <calloutlist>
     <callout arearefs="co-qemu-img-check-fmt">
      <para>元となるディスクイメージの形式を指定します。通常は自動検出されるため、省略してもかまいません。</para>
     </callout>
     <callout arearefs="co-qemu-img-check-fname">
      <para>確認を行うディスクイメージのパスを指定します。</para>
     </callout>
    </calloutlist>
    <para>何もエラーが検出されない場合、コマンドは何も出力を行いません。それ以外の場合、それぞれのエラーと発生したエラーの数が表示されます。</para>
<screen>&prompt.user;qemu-img check -f qcow2 /images/sles.qcow2
ERROR: invalid cluster offset=0x2af0000
[...]
ERROR: invalid cluster offset=0x34ab0000
378 errors were found on the image.
</screen>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-create-incr">
    <title>既存のディスクイメージのサイズ拡張</title>
    <para>新しいイメージを作成する場合、イメージを作成する前に最大サイズを指定しなければなりません (詳しくは <xref linkend="cha-qemu-guest-inst-qemu-img-create-create"/> をお読みください) 。ですが、 &vmguest; をインストールしてしばらく使用していると、最初に指定したサイズでは容量が不足してしまうことがあります。このような場合は、容量を増やして対応することができます。</para>
    <para>既存のディスクイメージを 2 GB だけ拡張したい場合は、たとえば下記のように入力して実行します:</para>
<screen>&prompt.user;qemu-img resize /images/sles.raw +2GB</screen>
    <note>
     <para>ディスクイメージサイズの変更を行うには、ディスクイメージの形式が <literal>raw</literal> , <literal>qcow2</literal> のいずれかでなければなりません。それ以外の形式のイメージのサイズを変更したい場合は、 <command>qemu-img convert</command> でサイズ変更可能な形式に変換してから実施してください。</para>
    </note>
    <para>これでイメージファイルの末尾には 2 GB の空き領域が現れることになります。あとは既存のパーティションをサイズ変更するか、もしくは新しくパーティションを作成することで、その領域を使用できるようになります。</para>
   </sect3>
   <sect3 xml:id="qemu-qcow2-advanced-options">
    <title>qcow2 ファイル形式向けの高度なオプション</title>
    <para><emphasis>qcow2</emphasis> は &qemu; で使用されるメインのディスクイメージ形式です。サイズを必要に応じて拡張する機能が用意されているほか、仮想マシン側で実際に必要とされているサイズのみを割り当てる機能があります。</para>
    <para>qcow2 形式のファイルは固定のサイズを 1 つの単位としてまとめられています。これらの単位は <emphasis>クラスタ</emphasis> と呼ばれます。ゲスト側からの見た目での仮想ディスクは、このクラスタのサイズごとに区切られているものとして提供されます。 &qemu; の既定では、クラスタのサイズは 64&nbsp;kB に設定されていますが、新しいイメージを作成する際に異なるサイズを設定することもできます:</para>
<screen>&prompt.user;qemu-img create -f qcow2 -o cluster_size=128K virt_disk.qcow2 4G</screen>
    <para>qcow2 形式のイメージには、 L1, L2 テーブルと呼ばれる、 2 階層のテーブルセットが含まれています。 L1 テーブルはディスクイメージごとに 1 つしか存在しませんが、 L2 テーブルはイメージファイルの大きさに合わせて多数のものが存在しています。</para>
    <para>仮想ディスクへの読み込みや書き込みが発生すると、 &qemu; は対応する L2 テーブルを読み込んで、必要なデータの場所を検出します。それぞれの I/O 操作に対応したテーブルの読み込み処理にはシステムのリソース消費が伴いますので、 &qemu; ではディスクアクセスの速度を向上させるため、メモリ内に L2 テーブルのキャッシュを保持するようになっています。</para>
    <sect4>
     <title>適切なキャッシュサイズの選択</title>
     <para>キャッシュサイズは割り当て済みの領域の量にあわせて決まります。 L2 キャッシュは下記の仮想ディスクサイズの計算式が出発点となります:</para>
<screen><replaceable>ディスクサイズ</replaceable> = <replaceable>L2_キャッシュのサイズ</replaceable> * <replaceable>クラスタサイズ</replaceable> / 8</screen>
     <para>既定のクラスタサイズである 64&nbsp;kB であれば、上記の式は下記のようになります:</para>
<screen><replaceable>ディスクサイズ</replaceable> = <replaceable>L2_キャッシュのサイズ</replaceable> * 8192</screen>
     <para>このことから、既定のクラスタサイズであるとすると、ディスク領域をマッピングするためのキャッシュは、下記のようになります:</para>
<screen><replaceable>L2_キャッシュのサイズ</replaceable> = <replaceable>ディスクサイズ_(GB)</replaceable> * 131072</screen>
     <para>&qemu; では、既定で L2 テーブルのキャッシュが 1&nbsp;MB (1048576 バイト) に設定されています。上記の数式に当てはめると、 1&nbsp;MB のキャッシュはディスクサイズで 8&nbsp;GB (1048576 / 131072) 分になります。つまり、作成する仮想ディスクのサイズが 8&nbsp;GB までであれば、 L2 テーブルのキャッシュサイズは十分であることになります。それより大きいディスクの場合は、 L2 テーブルのキャッシュサイズを増やすことによって、ディスクの速度を上げることができます。</para>
    </sect4>
    <sect4>
     <title>キャッシュサイズの設定</title>
     <para>キャッシュサイズの指定を行うには、 &qemu; のコマンドラインに対して <option>-drive</option> オプションを指定します。それ以外の方法としては、 QMP との通信を行っている場合、 <command>blockdev-add</command> コマンドを使用することもできます。 QMP に関する詳細は、 <xref linkend="qemu-monitor-qmp"/> をお読みください。</para>
     <para>それぞれ下記のオプションを指定することで、仮想化ゲストのキャッシュサイズを設定することができます:</para>
     <variablelist>
      <varlistentry>
       <term>l2-cache-size</term>
       <listitem>
        <para>L2 テーブルキャッシュの最大サイズを指定します。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>refcount-cache-size</term>
       <listitem>
        <para><emphasis>refcount</emphasis> ブロックキャッシュの最大サイズを指定します。 <emphasis>refcount</emphasis> に関する詳細については、 <link xlink:href="https://raw.githubusercontent.com/qemu/qemu/master/docs/qcow2-cache.txt"/> をお読みください。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>cache-size</term>
       <listitem>
        <para>両方のキャッシュのサイズの合計最大サイズを指定します。</para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para>上記のオプションを指定する場合は、下記に注意してください:</para>
     <itemizedlist>
      <listitem>
       <para>L2 および refcount ブロックのキャッシュサイズは、クラスタサイズの倍数である必要があります。</para>
      </listitem>
      <listitem>
       <para>いずれかのオプションのみを指定した場合、 &qemu; は指定しなかったほうのオプションを自動調整します。具体的には、 L2 キャッシュが refcount キャッシュよりも 4 倍大きくなるようにします。</para>
      </listitem>
     </itemizedlist>
     <para>refcount キャッシュは L2 キャッシュほど頻繁に使用されるものではありませんので、下記のように比較的小さな値にしておくことができます:</para>
<screen>&prompt.root;qemu-system-ARCH [...] \
 -drive file=disk_image.qcow2,l2-cache-size=4194304,refcount-cache-size=262144</screen>
    </sect4>
    <sect4>
     <title>メモリ使用率の削減</title>
     <para>キャッシュサイズを大きくすると、それだけメモリの使用量も増えてしまいます。それぞれの qcow2 ファイルには個別の L2 キャッシュが存在する仕組みであるため、多数の巨大なディスクイメージを使用していると、かなりの量のメモリを使用する結果になってしまいます。メモリの消費は、ゲストの構築作業内でバッキングファイル ( <xref linkend="cha-qemu-guest-inst-qemu-img-effect"/> ) を使用したり、スナップショット (see <xref linkend="cha-qemu-guest-inst-qemu-img-snapshots"/> ) を作成したりすることで、より大きくなってしまいます。</para>
     <para>このような理由から、 &qemu; では <option>cache-clean-interval</option> という設定が提供されています。これは全てのキャッシュ項目に対する設定で、指定した秒数以上アクセスのない項目があった場合、それらをメモリから削除するための設定です。</para>
     <para>下記の例では、 10 分間アクセスの無かった全てのキャッシュ項目を削除することになります:</para>
<screen>&prompt.root;qemu-system-ARCH [...] -drive file=hd.qcow2,cache-clean-interval=600</screen>
     <para>このオプションを指定しない場合、既定値である 0 が適用され、この機能が無効化されます。</para>
    </sect4>
   </sect3>
  </sect2>

  <sect2 xml:id="cha-qemu-guest-inst-qemu-img-snapshots">
   <title>qemu-img を利用した仮想マシンのスナップショット管理</title>
   <para><xref linkend="gloss-vt-vm"/> のスナップショットは &vmguest; の動作中に採取することのできるスナップショットです。スナップショットにはプロセッサ (CPU) やメモリ (RAM) のほか、デバイスや全ての書き込み可能なディスクに関する状態が含まれます。</para>
   <para>スナップショット機能は、お使いの仮想マシンでの特定の状態を保存したい場合に有用です。たとえば仮想化サーバ内でネットワークサービスを設定し、いつでもその時点に戻すことができて欲しいような場合などがあります。それ以外にも、何らかの実験的な作業を行って不安定になってしまう前に、仮想マシンをシャットダウンしてからバックアップを作成するようなことを行うこともできます。本章では後者について説明しています。前者については <xref linkend="cha-qemu-monitor"/> で説明しています。</para>
   <para>スナップショットを使用するには、お使いの &vmguest; 内に少なくとも 1 つ以上の書き込み可能な <literal>qcow2</literal> 形式のディスクイメージが存在しなければなりません。このようなデバイスは通常、 1 台目の仮想ハードディスクであるはずです。</para>
   <para><xref linkend="gloss-vt-vm"/> のスナップショットは、対話型の &qemu; モニタ内で <literal>savevm</literal> コマンドを実行することで作成することができます。スナップショットを分かりやすくするために、 <emphasis>タグ</emphasis> を指定しておくこともできます。 &qemu; モニタに関する詳細については、 <xref linkend="cha-qemu-monitor"/> をお読みください。</para>
   <para><literal>qcow2</literal> ディスクイメージ内にスナップショットを保存したあとは、 <command>qemu-img snapshot</command> コマンドで内容を調査することができます。</para>
   <warning>
    <title>&vmguest; のシャットダウンについて</title>
    <para>仮想マシンが動作している場合、 <command>qemu-img snapshot</command> コマンドで仮想マシンのスナップショットを作成したり、削除したりしてはなりません。動作中にこれらを実施してしまうと、仮想マシンの状態を持つディスクイメージが破壊されてしまう場合があります。</para>
   </warning>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-snapshots-l">
    <title>既存のスナップショット一覧の表示</title>
    <para><command>qemu-img snapshot -l</command> <replaceable>ディスクイメージ</replaceable> のように入力して実行すると、 <replaceable>ディスクイメージ</replaceable> で指定したディスクイメージ内に保存されている全てのスナップショットを表示することができます。この一覧表示は、 &vmguest; の動作中でも表示することができます。</para>
<screen>&prompt.user;qemu-img snapshot -l /images/sles.qcow2
Snapshot list:
ID<co xml:id="co-qemu-img-snapshot-l-id"/>       TAG<co xml:id="co-qemu-img-snapshot-l-tag"/>               VM SIZE<co xml:id="co-qemu-img-snapshot-l-size"/>        DATE<co xml:id="co-qemu-img-snapshot-l-date"/>          VM CLOCK<co xml:id="co-qemu-img-snapshot-l-clock"/>
1         booting                4.4M 2013-11-22 10:51:10   00:00:20.476
2         booted                 184M 2013-11-22 10:53:03   00:02:05.394
3         logged_in              273M 2013-11-22 11:00:25   00:04:34.843
4         ff_and_term_running    372M 2013-11-22 11:12:27   00:08:44.965</screen>
    <calloutlist>
     <callout arearefs="co-qemu-img-snapshot-l-id">
      <para>スナップショットの識別番号です。通常は自動的に割り当てられます。</para>
     </callout>
     <callout arearefs="co-qemu-img-snapshot-l-tag">
      <para>スナップショットの説明 (タグ) です。識別用に用意されているものです。</para>
     </callout>
     <callout arearefs="co-qemu-img-snapshot-l-size">
      <para>スナップショットが占有するディスク領域です。なお、動作中のアプリケーションがメモリを多く使用していればいるほど、スナップショットのサイズが大きくなります。</para>
     </callout>
     <callout arearefs="co-qemu-img-snapshot-l-date">
      <para>スナップショットを作成した日時を表しています。</para>
     </callout>
     <callout arearefs="co-qemu-img-snapshot-l-clock">
      <para>仮想マシンのクロック状態を表しています。</para>
     </callout>
    </calloutlist>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-snapshots-c">
    <title>電源の入っていない仮想マシンに対するスナップショットの作成</title>
    <para>仮想マシンの電源が切れている状態で、現在の状態に対するスナップショットを作成するには、 <command>qemu-img snapshot -c</command> <replaceable>スナップショットのタイトル</replaceable> <replaceable>ディスクイメージ</replaceable> のように入力して実行します。</para>
<screen>&prompt.user;qemu-img snapshot -c backup_snapshot /images/sles.qcow2</screen>
<screen>&prompt.user;qemu-img snapshot -l /images/sles.qcow2
Snapshot list:
ID        TAG                 VM SIZE                DATE       VM CLOCK
1         booting                4.4M 2013-11-22 10:51:10   00:00:20.476
2         booted                 184M 2013-11-22 10:53:03   00:02:05.394
3         logged_in              273M 2013-11-22 11:00:25   00:04:34.843
4         ff_and_term_running    372M 2013-11-22 11:12:27   00:08:44.965
5         backup_snapshot           0 2013-11-22 14:14:00   00:00:00.000</screen>
    <para>&vmguest; 側で何らかの問題が発生し、保存されているスナップショットに戻す必要が生じた場合 (たとえば ID 5 に戻したい場合) 、 &vmguest; の電源を落としてから下記のようなコマンドを実行します:</para>
<screen>&prompt.user;qemu-img snapshot -a 5 /images/sles.qcow2</screen>
    <para>上記を実行したあとは、通常通り <command>qemu-system-ARCH</command> で仮想マシンを起動することで、スナップショット番号 5 の状態から起動を行うことができます。</para>
    <note>
     <para>なお、 <command>qemu-img snapshot -c</command> のコマンドは &qemu; モニタ (詳しくは <xref linkend="cha-qemu-monitor"/> をお読みください) の <literal>savevm</literal> コマンドとは関係がありません。たとえば &qemu; モニタで <literal>savevm</literal> を実行して作成したスナップショットを、 <command>qemu-img snapshot -a</command> で適用するようなことはできません。</para>
    </note>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-snapshots-d">
    <title>スナップショットの削除</title>
    <para><command>qemu-img snapshot -d</command> <replaceable>スナップショット_ID</replaceable> <replaceable>ディスクイメージ</replaceable> のように入力して実行することで、仮想マシンに対する古いスナップショットや不要なスナップショットを削除することができます。これによりスナップショットが占有していた <literal>qcow2</literal> ディスクイメージ内の領域が解放されることになります:</para>
<screen>&prompt.user;qemu-img snapshot -d 2 /images/sles.qcow2</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="cha-qemu-guest-inst-qemu-img-effect">
   <title>ディスクイメージの効率的な使用</title>
   <para>まずは下記のような状況を想像してみてください。あなたはサーバの管理者で、複数の仮想化オペレーティングシステムを動作させて管理を行っています。これらのシステムのうち、 1 つのグループは特定のディストリビューションをベースにしていますが、その他のグループは異なる (おそらくは Unix 以外の) プラットフォームを使用しています。さらに複雑なことに、それぞれの仮想ゲストシステムは同じディストリビューションをベースにしていますが、使用している部署や部門が異なるため、構成も異なっているような状態です。ファイルサーバについては Web サーバとは構成やサービスなどが異なっていますが、いずれも <phrase os="sles;sled">&slsreg;</phrase> <phrase os="osuse">&opensuse;</phrase> をベースにしているものとします。</para>
   <para>このような場合、 <quote>ベース</quote> となるディスクイメージを作成して対応するようなことができます。このベースイメージは、仮想マシンの雛形として使用することができますので、何度もオペレーティングシステムをインストールしたりする手間を省くことができます。</para>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-base-and-derived">
    <title>ベースイメージと派生イメージ</title>
    <para>まずは通常の手順でディスクイメージを作成し、目的のシステムをインストールしてください。詳しくは <xref linkend="cha-qemu-guest-inst-qemu-kvm"/> と <xref linkend="cha-qemu-guest-inst-qemu-img-create"/> をお読みください。あとはそのイメージをベースイメージとして、新しいイメージファイルを作成するだけです。これで <emphasis>派生</emphasis> イメージを作成することができたことになります。なお、ベースイメージを利用して起動してはなりません。必ず派生イメージのほうを起動してください。また、 1 つのベースイメージから複数の派生イメージを作成することもできます。そのため、ベースイメージのほうを変更してしまうと、派生関係が壊れてしまうことになります。派生イメージを利用して起動を行うと、 &qemu; は変更点を派生イメージのほうにのみ書き込むようになります。それに対して、ベースイメージは読み込み専用となります。</para>
    <para>ベースイメージを作成する場合は、オペレーティングシステムを新規にインストールし (必要であれば登録作業などを行い) 、修正 (パッチ) などはインストールせず、アプリケーションについてもインストールや削除を行わないようにしておくことをお勧めします。必要であれば、そのベースイメージを元に、最新の修正を適用したもう 1 つのベースイメージを作成してもかまいません。</para>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-create-derived">
    <title>派生イメージの作成</title>
    <note>
     <para>ベースイメージには <literal>raw</literal> 形式を使用することができますが、派生イメージには <literal>raw</literal> 形式を使用することができません。これは、 <literal>raw</literal> 形式は <literal>backing_file</literal> オプションに対応していないためです。下記の例では、派生イメージに <literal>qcow2</literal> 形式を使用します。</para>
    </note>
    <para>たとえば <filename>/images/sles_base.raw</filename> が <literal>raw</literal> 形式のベースイメージであるとします。</para>
<screen>&prompt.user;qemu-img info /images/sles_base.raw
image: /images/sles_base.raw
file format: raw
virtual size: 4.0G (4294967296 bytes)
disk size: 2.4G</screen>
    <para>イメージの予約サイズは 4 GB で実サイズは 2.4 GB 、そして形式が <literal>raw</literal> であることがわかります。あとは <filename>/images/sles_base.raw</filename> ファイルに対する派生イメージを作成します:</para>
<screen>&prompt.user;qemu-img create -f qcow2 /images/sles_derived.qcow2 \
-o backing_file=/images/sles_base.raw
Formatting '/images/sles_derived.qcow2', fmt=qcow2 size=4294967296 \
backing_file='/images/sles_base.raw' encryption=off cluster_size=0
</screen>
    <para>派生イメージの詳細を確認します:</para>
<screen>&prompt.user;qemu-img info /images/sles_derived.qcow2
image: /images/sles_derived.qcow2
file format: qcow2
virtual size: 4.0G (4294967296 bytes)
disk size: 140K
cluster_size: 65536
backing file: /images/sles_base.raw \
(actual path: /images/sles_base.raw)</screen>
    <para>派生イメージの予約サイズはベースイメージと同じサイズ (4 GB) になっていますが、実サイズは 140 KB しかありません。これは、派生イメージにはベースイメージからの変更点のみを記録する仕組みであるためです。あとは派生イメージを利用して仮想マシンを起動し、必要に応じて登録などの処理を行い、最新の修正を適用してください。不要なパッケージを削除してもかまいませんし、必要な新しいパッケージをインストールしてもかまいません。あとは &vmguest; をシャットダウンし、再度派生イメージの状態を確認してみます:</para>
<screen>&prompt.user;qemu-img info /images/sles_derived.qcow2
image: /images/sles_derived.qcow2
file format: qcow2
virtual size: 4.0G (4294967296 bytes)
disk size: 1.1G
cluster_size: 65536
backing file: /images/sles_base.raw \
(actual path: /images/sles_base.raw)</screen>
    <para>上記の <literal>disk size</literal> の値にもあるとおり、この例では実サイズが 1.1 GB まで拡張しました。ここには、ベースイメージからのファイルシステム内の変更点が含まれています。</para>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-rebase">
    <title>派生イメージの再ベース</title>
    <para>派生イメージの修正 (修正の適用、必要なアプリケーションのインストール、各種の設定変更等々) を行うことで、必要な環境を構築することができます。ここからベースイメージをマージ (併合) することができるほか、新しいベースイメージを元に派生イメージを作り直すこともできます。</para>
    <para>元のベースイメージ (例: <filename>/images/sles_base.raw</filename> ) には、新規にインストールしたシステムが含まれています。このベースイメージを雛形として、最新のセキュリティ更新などをインストールして、新しいベースイメージを作成することができます。新しいベースイメージからも派生イメージを作成して、必要なアプリケーションやサービスなどを動作させることができます。なお、新しいベースイメージは元のベースイメージから独立させることができます。このような新しいベースイメージの作成を、 <emphasis>再ベース</emphasis> と呼びます。</para>
<screen>&prompt.user;qemu-img convert /images/sles_derived.qcow2 \
-O raw /images/sles_base2.raw</screen>
    <para>上記のコマンドを実行すると、 <literal>raw</literal> 形式で新しいベースイメージ <filename>/images/sles_base2.raw</filename> を作成することができます。</para>
<screen>&prompt.user;qemu-img info /images/sles_base2.raw
image: /images/sles11_base2.raw
file format: raw
virtual size: 4.0G (4294967296 bytes)
disk size: 2.8G</screen>
    <para>新しいイメージは元のイメージに比べて 0.4 ギガバイトほど大きくなっています。このイメージファイルはベースイメージを使用していませんので、ここから新しい派生イメージを作成することができます。これにより、組織の要件にあわせ、より洗練された仮想ディスクイメージ階層を作成することで、時間と手間の両方を削減できるようになります。</para>
   </sect3>
   <sect3 xml:id="cha-qemu-guest-inst-qemu-img-effect-mount">
    <title>&vmhost; 側でのイメージのマウント</title>
    <para>仮想ディスクイメージは、ホストシステム内でマウントすることもできます。なお、あらかじめ <xref linkend="chap-guestfs"/> を読むとともに、仮想マシンイメージにアクセスするための専用ツールを使用しておくことを強くお勧めします。ただし、どうしても手作業でこれを実施しなければならないような場合、本章をお読みのうえ作業を行ってください。</para>
    <para>Linux システムでは、 <literal>raw</literal> 形式のディスクイメージであれば、ループバックデバイスを利用して内部のパーティションをマウントすることができます。最初の例は複雑ではありますがわかりやすいもの、 2 つ目の例は直感的なものになっています:</para>
    <procedure>
     <title>パーティションオフセット値を指定したディスクイメージのマウント</title>
     <step>
      <para>まずはマウントしたいディスクイメージに対して <emphasis>loop</emphasis> デバイスを割り当てます。</para>
<screen>&prompt.user;losetup /dev/loop0 /images/sles_base.raw</screen>
     </step>
     <step>
      <para><emphasis>セクタサイズ</emphasis> の項目を探し、マウントしたいパーティションの <emphasis>セクタ番号</emphasis> の開始位置を判断します。</para>
<screen>&prompt.user;fdisk -lu /dev/loop0

ディスク /dev/loop0: 4294 MB, 4294967296 バイト
単位: セクタ (1 * 512 = 512 <co xml:id="co-qemu-img-loopback-sector-size"/>バイト)
セクタサイズ (論理 / 物理): 512 バイト / 512 バイト
I/O サイズ (最小 / 推奨): 512 バイト / 512 バイト
ディスクラベルのタイプ: dos
ディスク識別子: 0x000ceca8

デバイス       起動   開始位置    終了位置     セクタ       Id  タイプ
/dev/loop0p1              63     1542239      771088+  82  Linux スワップ / Solaris
/dev/loop0p2   *     1542240<co xml:id="co-qemu-img-loopback-sector-start"/>    8385929     3421845   83  Linux</screen>
      <calloutlist>
       <callout arearefs="co-qemu-img-loopback-sector-size">
        <para>ディスクのセクタサイズを表しています。</para>
       </callout>
       <callout arearefs="co-qemu-img-loopback-sector-start">
        <para>パーティションのセクタ開始位置を表しています。</para>
       </callout>
      </calloutlist>
     </step>
     <step>
      <para>開始位置を計算します:</para>
      <para><literal><replaceable>セクタサイズ</replaceable> * <replaceable>開始位置_(セクタ)</replaceable> = 512 * 1542240 = 789626880 </literal></para>
     </step>
     <step>
      <para>いったんループバックデバイスの割り当てを解除したあと、計算結果をもとに offset 値を指定して、特定のディレクトリにマウントします。</para>
<screen>&prompt.user;losetup -d /dev/loop0
&prompt.user;mount -o loop,offset=789626880 \
/images/sles_base.raw /mnt/sles/
&prompt.user;ls -l /mnt/sles/
total 112
drwxr-xr-x   2 root root  4096 Nov 16 10:02 bin
drwxr-xr-x   3 root root  4096 Nov 16 10:27 boot
drwxr-xr-x   5 root root  4096 Nov 16 09:11 dev
[...]
drwxrwxrwt  14 root root  4096 Nov 24 09:50 tmp
drwxr-xr-x  12 root root  4096 Nov 16 09:16 usr
drwxr-xr-x  15 root root  4096 Nov 16 09:22 var
</screen>
     </step>
     <step>
      <para>あとはマウントしたパーティションに対して必要な作業を実施し、完了したらマウントを解除します。</para>
<screen>&prompt.user;cp /etc/X11/xorg.conf /mnt/sles/root/tmp
&prompt.user;ls -l /mnt/sles/root/tmp
&prompt.user;umount /mnt/sles/</screen>
     </step>
    </procedure>
    <warning>
     <title>使用中のイメージに対して書き込みを行ってはならない件について</title>
     <para>動作中の仮想マシンが使用するパーティションを <literal>読み書き可能な</literal> モードでマウントしてはなりません。読み書き可能な状態でマウントしてしまうと、パーティションを破壊する結果になるほか、 &vmguest; 全体を破壊する結果になってしまいます。</para>
    </warning>
   </sect3>
  </sect2>
 </sect1>
</chapter>
