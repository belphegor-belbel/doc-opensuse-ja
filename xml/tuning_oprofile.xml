<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<!--
   Contact (2011-10-10): tonyj@suse.de
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-oprofile">
<!--
    http://oprofile.sourceforge.net/news/
    http://linuxtips.pbwiki.com/Oprofile-Tutorial
    http://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-oprofile.html
    http://people.redhat.com/wcohen/FedoraCore2OProfileTutorial.txt

    Info Provider: Vojtech Pavlik <vojtech@suse.de>
-->
 <title>&oprof;: システム全体に対するプロファイラ</title>
 <info>
      <abstract>
        <para>&oprof; は動的なプログラム分析のためのプロファイラです。動作中のプログラムに対する振る舞いを調査して、情報を収集します。この情報は表示することができるため、さらなる最適化のためのヒントとすることができます。</para>
        <para>&oprof; を使用するにあたって、再コンパイルやラッパーライブラリの使用は必要ありません。カーネルに適用すべきパッチもありません。負荷とサンプリング周期にもよりますが、アプリケーションをプロファイルしている間、少しだけオーバーヘッドが現れます。</para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
	<dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <!--
    http://oprofile.sourceforge.net/news/
    http://linuxtips.pbwiki.com/Oprofile-Tutorial
    http://www.centos.org/docs/5/html/Deployment_Guide-en-US/ch-oprofile.html
    http://people.redhat.com/wcohen/FedoraCore2OProfileTutorial.txt

    Info Provider: Vojtech Pavlik <vojtech@suse.de>
-->
 <sect1 xml:id="sec-tuning-oprofile-overview">
  <title>考え方の概要</title>

  <para>&oprof; はカーネルドライバとデーモンから構成され、データを収集することができます。また、多くのプロセッサに搭載されている、ハードウエア側のパフォーマンスカウンタを利用して測定を行います。 &oprof; はカーネルやカーネルモジュール、カーネルの割り込みハンドラやシステムの共有ライブラリ、その他のアプリケーションなど、全てのコードをプロファイルすることができます。</para>

  <para>新しいプロセッサであれば、パフォーマンスカウンタと呼ばれるハードウエアを介してプロファイルを行うことができます。プロセッサ側の使用にも依存しますが、様々なカウンタが用意され、それらはイベントの発生回数をカウントするようプログラムすることができます。また、それぞれのカウンタには、どれくらいの間隔でサンプルを採取したのかを示す値が用意されています。値が低いほど多く使用されたことになります。</para>

  <para>なお、事後の作業で全ての情報を収集し、インストラクションアドレスは関数名に変換されます。</para>
 </sect1>
 <sect1 xml:id="sec-tuning-oprofile-install">
  <title>インストールと要件</title>

  <para>&oprof; を使用するには <systemitem class="resource">oprofile</systemitem> パッケージをインストールします。 <phrase os="sles;sled"> &oprof; は &x86-64; や &zseries; 、 &power; プロセッサで動作します。</phrase></para>

  <para>なお、プロファイル対象のアプリケーションに対応する <filename>*-debuginfo</filename> パッケージをインストールしておくことをお勧めします。カーネルをプロファイルする場合は、カーネルの <filename>debuginfo</filename> パッケージもインストールしてください。</para>
 </sect1>
 <sect1 xml:id="sec-tuning-oprofile-utils">
  <title>利用可能な &oprof; ユーティリティ</title>

  <para>&oprof; にはプロファイルを行ったりそのデータを収集したりする目的で、いくつかのユーティリティが提供されています。下記の一覧には、本章で使用するプログラムの概要を説明しています:</para>

  <variablelist>
   <varlistentry>
    <term><command>opannotate</command></term>
    <listitem>
     <para>注釈付きソースやアセンブリリストとプロファイル情報を出力するためのユーティリティです。注釈付きのレポートは <command>addr2line</command> と組み合わせて使用され、ホットスポットが存在しうるソースコードのファイルとその行を識別することができます。詳しくは <command>man addr2line</command> をお読みください。</para>
    </listitem>
   </varlistentry>
<!--<varlistentry>
    <term><command>oparchive</command></term>
    <listitem>
     <para>Generates an archive with your measurements.</para>
    </listitem>
   </varlistentry>-->
   <varlistentry>
    <term><command>operf</command></term>
    <listitem>
     <para>プロファイラツールです。プロファイリングを停止すると、既定では <filename><replaceable>カレントディレクトリ</replaceable>/oprofile_data/samples/current</filename> にデータを保存しますので、ここから <command>opreport</command> コマンドなどで処理できるようになります。</para>
    </listitem>
   </varlistentry>
<!--<varlistentry>
    <term><command>opgprof</command></term>
    <listitem>
     <para>Produce profiled data in gprof format.</para>
    </listitem>
   </varlistentry>-->
   <varlistentry>
    <term><command>ophelp</command></term>
    <listitem>
     <para>利用可能なイベントと、その短い説明を一覧表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>opimport</command></term>
    <listitem>
     <para>異なるバイナリ形式で書かれたサンプルデータベースファイルを、ネイティブ形式に変換します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>opreport</command></term>
    <listitem>
     <para>プロファイルしたデータからレポートを生成します。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-tuning-oprofile-using">
  <title>&oprof; の使用</title>

  <para>&oprof; を使用することで、カーネルとアプリケーションの両方をプロファイルすることができます。カーネルをプロファイルする場合は、 &oprof; に対して <filename>vmlinuz*</filename> ファイルの検索先を指定するため、 <option>--vmlinux</option> オプションで場所を指定します (一般に <filename>/boot</filename> です) 。カーネルモジュールをプロファイルする必要がある場合も、 &oprof; は自動的にそれを行います。ただし、念のため <link xlink:href="https://oprofile.sourceforge.net/doc/kernel-profiling.html"/> (英語) をお読みになることをお勧めします。</para>

  <para>アプリケーションをプロファイルする際、ほとんどの場合においてカーネルのプロファイルは不要になります。そのため、 <option>--no-vmlinux</option> オプションを指定して情報量を減らしておくことをお勧めします。</para>

  <sect2 xml:id="sec-tuning-oprofile-using-report">
   <title>レポートの作成</title>
   <para>アプリケーション <replaceable>COMMAND</replaceable> に対するプロファイルを行うため、デーモンを起動してデータを収集し、デーモンを停止させたあとレポートを作成するまでの手順を説明します。</para>
   <procedure>
    <step>
     <para>シェルを開いて &rootuser; になります。</para>
    </step>
    <step>
     <para>Linux カーネルを含めてプロファイルするかどうかを判断し、それぞれを行います:</para>
     <substeps performance="required">
      <step>
       <formalpara>
        <title>Linux カーネルを利用したプロファイル</title>
        <para><command>operf</command> は無圧縮のイメージのみを扱うことができますので、下記のようにコマンドを入力して実行します:</para>
       </formalpara>
<screen>&prompt.user;cp /boot/vmlinux-`uname -r`.gz /tmp
&prompt.user;gunzip /tmp/vmlinux*.gz
&prompt.user;operf--vmlinux=/tmp/vmlinux* <replaceable>COMMAND</replaceable>
</screen>
      </step>
      <step>
       <formalpara>
        <title>Linux カーネルを利用しないプロファイル</title>
        <para>下記のようにコマンドを入力して実行します:</para>
       </formalpara>
<screen>&prompt.root;operf --no-vmlinux <replaceable>COMMAND</replaceable></screen>
       <para>出力内に一方の関数から他方の関数を呼び出している様子を表示させたい場合は、 <option>--callgraph</option> を指定して最大の <replaceable>深さ</replaceable> を設定してください:</para>
<screen>&prompt.root;operf --no-vmlinux --callgraph
<replaceable>深さ</replaceable> <replaceable>COMMAND</replaceable></screen>
      </step>
     </substeps>
    </step>
    <step>
     <para><command>operf</command> はデータを <filename><replaceable>カレントディレクトリ</replaceable>/oprofile_data/samples/current</filename> に書き込みます。 <command>operf</command> コマンドが終了したら (もしくは <keycombo><keycap function="control"/> <keycap>C</keycap></keycombo> で停止させたら) 、<command>oreport</command> を利用して解析を行うことができます:</para>
<screen>&prompt.root;opreport
Overflow stats not available
CPU: CPU with timer interrupt, speed 0 MHz (estimated)
Profiling through timer interrupt
          TIMER:0|
  samples|      %|
------------------
    84877 98.3226 no-vmlinux
...</screen>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-tuning-oprofile-events">
   <title>イベント設定の取得</title>
   <para>イベントを設定するための一般的な手順は下記のとおりです:</para>
   <procedure>
    <step>
     <para>まずは <literal>CPU-CLK_UNHALTED</literal> と <literal>INST_RETIRED</literal> の各イベントを利用して、最適化の可能性を探ります。</para>
    </step>
    <step>
     <para>特定のイベントを利用してボトルネックを探ります。イベントの一覧を表示するには、 <command>perf list</command> と入力して実行してください。</para>
    </step>
   </procedure>
   <para>特定のイベントをプロファイルする必要がある場合は、まずお使いのプロセッサ側がそのイベントに対応しているかどうかを調べる必要があります。具体的には、 <command>ophelp</command> コマンドを実行します (下記は Intel Core i5 CPU での出力例です):</para>
<screen>&prompt.root;<command>ophelp</command>
oprofile: available events for CPU type "Intel Architectural Perfmon"

See Intel 64 and IA-32 Architectures Software Developer's Manual
Volume 3B (Document 253669) Chapter 18 for architectural perfmon events
This is a limited set of fallback events because oprofile does not know your CPU
CPU_CLK_UNHALTED: (counter: all))
        Clock cycles when not halted (min count: 6000)
INST_RETIRED: (counter: all))
        number of instructions retired (min count: 6000)
LLC_MISSES: (counter: all))
        Last level cache demand requests from this core that missed the LLC (min count: 6000)
        Unit masks (default 0x41)
        ----------
        0x41: No unit mask
LLC_REFS: (counter: all))
        Last level cache demand requests from this core (min count: 6000)
        Unit masks (default 0x4f)
        ----------
        0x4f: No unit mask
BR_MISS_PRED_RETIRED: (counter: all))
        number of mispredicted branches retired (precise) (min count: 500)</screen>
   <para><option>--event</option> オプションでパフォーマンスカウンタイベントを指定します。複数のオプションを指定してもかまいません。このオプションはイベント名 (<command>ophelp</command> で表示される名前) とサンプリングレートを指定します。たとえば下記のようになります:</para>
<screen>&prompt.root;operf --events CPU_CLK_UNHALTED:100000</screen>
   <warning>
    <title><literal>CPU_CLK_UNHALTED</literal> に対するサンプリングレート設定について</title>
    <para>サンプリングレートを低く設定しすぎてしまうと、システムの性能を著しく低下させてしまう危険性がありますし、逆にサンプリングレートを高く設定してしまうと、データの意味が無くなってしまうほどシステムの負荷が重くなります。そのため、 &oprof; を入れることで性能を落とすことなく、かつ負荷が高くなりすぎないような値を探り、設定するようにしてください。</para>
   </warning>
<!--
  <example id="ex-tuning-oprofile-eventsyntax">
   <title>Event syntax</title>
   <screen>NAME:COUNT:UNITMASK:KERNEL:USER</screen>
  </example>

  <para>The description for each keyword is explained in the following
   table:</para>

  <table id="tab-tuning-oprofile-eventsyntax">
   <title>Syntax description of events</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry><para>Keyword</para></entry>
      <entry><para>Description</para></entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><para><literal>name</literal></para></entry>
      <entry><para>Symbolic event name, for example <literal>CPU_CLK_UNHALTED</literal></para></entry>
     </row>
     <row>
      <entry><para><literal>count</literal></para></entry>
      <entry><para>Counter reset value, for example <literal>10000</literal></para></entry>
     </row>
     <row>
      <entry><para><literal>unitmask</literal></para></entry>
      <entry><para>Unit mask from the <command>ophelp</command> output,
       for example <literal>0x41</literal></para></entry>
     </row>
      <row>
      <entry><para><literal>kernel</literal></para></entry>
      <entry><para>Profile kernel code? 0=no, 1=yes</para></entry>
     </row>
      <row>
      <entry><para><literal>user</literal></para></entry>
      <entry><para>Profile user space code? 0=no, 1=yes</para></entry>
     </row>
   </tbody>
   </tgroup>
  </table>

  <para>Find detailed information about supported events in the directory
   <filename>/usr/share/oprofile/<replaceable>ARCH</replaceable>/<replaceable>PRODUCT</replaceable>/events</filename>.
  </para>
  -->
<!--<para>The number of events that can be monitored depends on the number
   of counters of your processor. Run the following command to determine
   the available counters for your processor:</para>
  <screen>ls -d /dev/oprofile/[0-9]*</screen>
  <para>The following examples shows how to use the
   <option>&#x2d;&#x2d;event</option> option:</para>-->
  </sect2>
 </sect1>
 <!-- no longer available, see bsc #1090432
 <sect1 xml:id="sec-tuning-oprofile-gui">
  <title>Using &oprof;'s GUI</title>

  <para>
   The GUI for &oprof; can be started as &rootuser; with
   <command>oprof_start</command>, see
   <xref linkend="fig-tuning-oprofile"/>. Select your events and change the
   counter, if necessary. Every green line is added to the list of checked
   events. Hover the mouse over the line to see a help text in the status
   line below. Use the <guimenu>Configuration</guimenu> tab to set the
   buffer and CPU size, the verbose option and others. Click
   <guimenu>Start</guimenu> to execute &oprof;.
  </para>

  <figure xml:id="fig-tuning-oprofile">
   <title>GUI for &oprof;</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="oprofile-gui.png" width="50%"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="oprofile-gui.png" width="45%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
-->
 <sect1 xml:id="sec-tuning-oprofiles-report">
  <title>レポートの生成</title>

  <para>レポートを生成する前に、まずは <command>operf</command> が停止していることを確認してください。また、 <option>--session-dir</option> でデータのディレクトリを指定していない場合、 <command>operf</command> はデータを <replaceable>カレントディレクトリ</replaceable>/oprofile_data/samples/current に書き込みます。なお、 <command>opreport</command> や <command>opannotate</command> のようなレポートツールは、既定で上述のディレクトリを使用します。</para>

  <para>何もパラメータを指定しないで <command>opreport</command> を実行すると、詳しい説明を表示することができます。オプションとして実行ファイル名を指定すると、その実行ファイルからのプロファイルデータのみを取得します。また C++ 言語で書かれたアプリケーションを解析したい場合は、 <option>--demangle smart</option> オプションを指定してください。</para>

  <para><command>opannotate</command> はソースコードからの注釈情報を生成します。下記のようなオプションを指定して実行してください:</para>

<screen>&prompt.root;<command>opannotate</command> --source \
   --base-dirs=<replaceable>ベースディレクトリ</replaceable> \
   --search-dirs=<replaceable>検索ディレクトリ</replaceable> \
   --output-dir=annotated/ \
   /lib/libfoo.so</screen>

  <para><option>--base-dir</option> には、デバッグソースファイルから削除されたパス情報をカンマ区切りで指定します。ここで指定したパスは <option>--search-dirs</option> で指定したパスよりも優先して検索されます。また、 <option>--search-dirs</option> には、ソースファイルを検索するパスをカンマ区切りで指定します。</para>

  <note>
   <title>注釈付きソースの不正確性について</title>
   <para>コンパイラの最適化の仕組みによってコードが削除されることがあるほか、別の場所に現れたりすることがあります。詳しい仕組みについては、 <link xlink:href="https://oprofile.sourceforge.net/doc/debug-info.html"/> (英語) をお読みください。</para>
  </note>
 </sect1>
 <sect1 xml:id="sec-tuning-oprofile-moreinfo">
  <title>さらなる情報</title>

  <para>本章では短い概要しか説明していません。詳しい情報を得るには、下記のリンク先を参照してください (いずれも英語のみの提供です):</para>

  <variablelist>
   <varlistentry>
    <term><link xlink:href="https://oprofile.sourceforge.net"/></term>
    <listitem>
     <para>プロジェクトの Web ページです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>マニュアルページ</term>
    <listitem>
     <para>様々なツールのオプションに関する詳しい説明が書かれています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/usr/share/doc/packages/oprofile/oprofile.html</filename></term>
    <listitem>
     <para>&oprof; のマニュアルが配置されています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="https://developer.intel.com/"/></term>
    <listitem>
     <para>Intel プロセッサ向けのアーキテクチャリファレンスです。</para>
    </listitem>
   </varlistentry>
<!--taroth 2014-08-29:  daps linkcheck reported following link(s) as broken-->
<!-- <varlistentry>
    <term><ulink url="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/22007.pdf"/>
    </term>
    <listitem>
     <para>
      Architecture reference for AMD Athlon/Opteron/Phenom/Turion.
     </para>
    </listitem>
   </varlistentry>-->
   <varlistentry os="sles">
    <term><link xlink:href="https://www.ibm.com/support/knowledgecenter/ssw_aix_71/assembler/idalangref_arch_overview.html"/></term>
    <listitem>
     <para>IBM iSeries, pSeries, ブレードサーバシステム内にある PowerPC64 プロセッサ向けのアーキテクチャリファレンスです。</para>
    </listitem>
   </varlistentry>
<!-- 2010-05-03: Disabled on behalf of jblunck -->
<!--<varlistentry>
    <term><xref linkend="cha-tuning-perfmon2"/></term>
    <listitem>
     <para>Consult this chapter for performance optimization with
      performance monitoring unit (PMU) of your processor.</para>
    </listitem>
   </varlistentry>-->
  </variablelist>
 </sect1>
</chapter>
