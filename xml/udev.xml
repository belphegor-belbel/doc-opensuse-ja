<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.udev">
 <title><systemitem class="service">udev</systemitem> による動的なカーネルデバイス管理</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>カーネルは、それが実行中であったとしても、ほぼ全てのデバイスを追加したり削除したりすることができます。また、デバイスの状態の変化 (デバイスの接続や取り外し) についても、その情報をユーザスペース側に配信する必要がありますし、接続時や認識時に設定を行なう必要もあります。また、デバイスによっては、ユーザ側にその認識状態を知らせる必要があるものもあります。 <systemitem class="service">udev</systemitem> では、 <filename>/dev</filename> ディレクトリ内にあるデバイスノードファイルやシンボリックリンクファイルを動的に管理するのに必要な、インフラストラクチャを提供しています。また、 <systemitem class="service">udev</systemitem> のルールでは、カーネルのデバイスイベントを処理する外部プログラムを定義する機能も提供しています。これにより <systemitem class="service">udev</systemitem> は、カーネルのデバイス処理の一部として独自のスクリプトを動作させることができるほか、デバイスの処理時に必要な追加のデータを要求したり、取り込んだりすることができるようになっています。</para>
 <sect1 xml:id="sec.udev.devdir">
  <title><filename>/dev</filename> ディレクトリ</title>

  <para><filename>/dev</filename> ディレクトリ内にあるデバイスノードは、対応するカーネルデバイスへのアクセス機能を提供します。 <systemitem class="service">udev</systemitem> を使用する環境では、 <filename>/dev</filename> ディレクトリはカーネル側での現状を反映したものになっています。それぞれのカーネルデバイスはデバイスファイルという形で提供され、システムからデバイスが取り外されると、デバイスノードも削除されるようになっています。</para>

  <para><filename>/dev</filename> ディレクトリの内容は一時的なファイルシステムとして用意されているもので、システムが起動するたびに新しくデバイスファイルを作成しています。手作業でデバイスファイルを作成したり変更したりしても、そのような構造から、システムを再起動するとリセットされてしまいます。 <filename>/dev</filename> 内に、カーネル側の認識とは無関係に、固定で配置すべきファイルやディレクトリがある場合は、 systemd-tmpfiles を利用して作成する必要があります。設定ファイルはそれぞれ <filename>/usr/lib/tmpfiles.d/</filename> と <filename>/etc/tmpfiles.d/</filename> にあります。詳しくは <systemitem>systemd-tmpfiles(8)</systemitem> のマニュアルページをお読みください。</para>
 </sect1>
 <sect1 xml:id="sec.udev.kernel">
  <title>カーネルの <systemitem class="service">uevent</systemitem> と <systemitem class="service">udev</systemitem></title>

  <para>必要なデバイス情報は <systemitem class="filesystem">sysfs</systemitem> ファイルシステム経由で開示されています。それぞれのデバイスに対して、カーネルが認識し準備を行なうと、デバイス名のディレクトリを作成します。ここには属性ファイルのほか、デバイス固有のプロパティファイルなどが含まれています。</para>

  <para>デバイスが追加されたり削除されたりすると、カーネルは uevent を送信し、 <systemitem class="service">udev</systemitem> に変更を通知します。 <systemitem class="service">udev</systemitem> デーモンは、その起動時に <filename>/etc/udev/rules.d/*.rules</filename> にあるファイルから設定されている全てのルールを読み込み、メモリ内に保持します。ルールファイルを変更したり、追加もしくは削除を行なったりした場合は、 <command>udevadm control --reload</command> コマンドでデーモン側に再読み込みを依頼することができます。 <systemitem class="service">udev</systemitem> のルールとその文法について、詳しくは <xref linkend="sec.udev.rules"/> をお読みください。</para>

  <para>受信したそれぞれのイベントは、読み込んだルールに対して適合可否を判断します。ルール側では環境キーを追加したり変更したりすることができるほか、作成すべきデバイスノードの名前を指定したり、ノードを指し示すシンボリックリンクを追加したり、デバイスノードの作成後に実行すべきプログラムなどを指定したりすることができます。なお、 <systemitem class="service">uevent</systemitem> はカーネルの netlink ソケットを介して受信されます。</para>
 </sect1>
 <sect1 xml:id="sec.udev.drivers">
  <title>ドライバ／カーネルモジュール／デバイス</title>

  <para>カーネルのバスドライバがデバイスを探索します。カーネルは検出されたデバイスごとに内部デバイス構造を作成し、ドライバコアが uevent を <systemitem class="service">udev</systemitem> デーモンに送信します。バスデバイスは特殊な書式の ID で識別され、その ID にはデバイスの種類が示されています。また、バスごとに ID の割り当てルールが存在していて、それらは <envar>MODALIAS</envar> と呼ばれています。カーネルはデバイスの情報を取得して <envar>MODALIAS</envar> ID 文字列を生成し、イベントと共にその文字列を送信します。たとえば USB マウスの場合、下記のようになります:</para>

<screen>MODALIAS=usb:v046DpC03Ed2000dc00dsc00dp00ic03isc01ip02</screen>

  <para>それぞれのデバイスドライバには、自身が扱うことのできる既知の別名一覧が含まれています。この一覧はカーネルモジュールファイル自身に含まれています。 depmod プログラムは、利用可能な全てのモジュール内にある ID の一覧を読み込んで、 <filename>/lib/modules</filename> 内にある対応するディレクトリ内に <filename>modules.alias</filename> ファイルを作成します。このような構造になっていることから、モジュールの読み込みは、それぞれのイベント時に <literal>MODALIAS</literal> キーを取得し、 <command>modprobe</command> を呼び出すだけの簡単な作業で済むようになっています。 <command>modprobe $MODALIAS</command> を呼び出すと、モジュール側で提供されている別名と、デバイス向けに作成した別名を比較して、一致する項目があれば読み込むようになっています。これらの全ては <systemitem class="service">udev</systemitem> によって発動される処理です。</para>
 </sect1>
 <sect1 xml:id="sec.udev.boot">
  <title>システムの起動と初期デバイス設定</title>

  <para>システムの起動時、 <systemitem class="service">udev</systemitem> が動作する前に発生したデバイスのイベントは、読み込まれずに失われてしまいます。これは、これらのイベントを処理するインフラストラクチャがルートファイルシステム内に存在しているため、起動処理中には利用できないためです。このような問題を解決するため、カーネル側では <systemitem class="filesystem">sysfs</systemitem> ファイルシステム内の各デバイスのディレクトリ内に <filename>uevent</filename> ファイルを用意しています。このファイルに <literal>add</literal> を書き込むと、カーネルは起動時に送信したものと同じイベントを再送するようになっています。 <filename>/sys</filename> ディレクトリ内にある全ての <filename>uevent</filename> ファイルに対して、同じことを繰り返すことで、必要なデバイスノードの作成とデバイスの設定を行なうことができるようになっています。</para>

  <para>たとえば起動時に USB マウスを接続していた場合、ドライバは起動時には利用できないため、初期の起動ロジックでは準備が行なわれません。そのため、デバイスの検出イベントは失われ、デバイスに対応するカーネルモジュールの検出も失敗します。そのため <systemitem class="service">udev</systemitem> では、ルートファイルシステムの準備が完了した段階で、接続されている全てのデバイスを手作業で検索するのではなく、カーネルから発せられた起動時の全てのイベントを取得します。これにより、 USB マウスのイベントが届くようになりますので、ルートファイルシステム内のカーネルモジュールを読み込んで初期化することができるようになっています。</para>

  <para>ユーザスペース側では、起動時にデバイスを接続しても起動後にデバイスを接続しても、目に見える違いはありません。いずれの場合も、同じルールが適用され、同じ設定プログラムが動作します。</para>
 </sect1>
 <sect1 xml:id="sec.udev.debug">
  <title>動作中の <systemitem class="service">udev</systemitem> デーモンの監視</title>

  <para><command>udevadm monitor</command> プログラムを利用することで、ドライバコアのイベントや <systemitem class="service">udev</systemitem> のイベント処理のタイミングを視覚化することができます。</para>

<screen>UEVENT[1185238505.276660] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1 (usb)
UDEV  [1185238505.279198] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1 (usb)
UEVENT[1185238505.279527] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0 (usb)
UDEV  [1185238505.285573] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0 (usb)
UEVENT[1185238505.298878] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10 (input)
UDEV  [1185238505.305026] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10 (input)
UEVENT[1185238505.305442] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/mouse2 (input)
UEVENT[1185238505.306440] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/event4 (input)
UDEV  [1185238505.325384] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/event4 (input)
UDEV  [1185238505.342257] add   /devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10/mouse2 (input)</screen>

  <para><literal>UEVENT</literal> の行には、カーネルが netlink 経由で送信したイベントが表示されています。 <literal>UDEV</literal> の行には、完了した <systemitem class="service">udev</systemitem> のイベントハンドラが表示されています。それぞれのタイミングはマイクロ秒単位で示されています。 <literal>UEVENT</literal> から <literal>UDEV</literal> までの時間は、 <systemitem class="service">udev</systemitem> がイベントを処理するのにかかった時間か、もしくは <systemitem class="service">udev</systemitem> が関連するイベントを待機していて遅延した時間を示しています。たとえばハードディスクのパーティションに関するイベントは、メインのディスクのイベント内で、ハードウエアに対して問い合わせを行なった結果を待たなければならないため、その分だけ遅延することになります。</para>

  <para><command>udevadm monitor --env</command> を実行すると、完全なイベント環境を表示することができます:</para>

<screen>ACTION=add
DEVPATH=/devices/pci0000:00/0000:00:1d.2/usb3/3-1/3-1:1.0/input/input10
SUBSYSTEM=input
SEQNUM=1181
NAME="Logitech USB-PS/2 Optical Mouse"
PHYS="usb-0000:00:1d.2-1/input0"
UNIQ=""
EV=7
KEY=70000 0 0 0 0
REL=103
MODALIAS=input:b0003v046DpC03Ee0110-e0,1,2,k110,111,112,r0,1,8,amlsfw</screen>

  <para><systemitem class="service">udev</systemitem> はメッセージを syslog にも送信します。どのメッセージを syslog に送信するかを決定する、既定の syslog の優先順位は、 <systemitem class="service">udev</systemitem> の設定ファイルである <filename>/etc/udev/udev.conf</filename> で設定します。実行中のデーモンのログの優先順位は、 <command>udevadm control --log_priority=</command> <replaceable>レベル/番号</replaceable> で設定することができます。</para>
 </sect1>
 <sect1 xml:id="sec.udev.rules">
  <title><systemitem class="service">udev</systemitem> ルールによるカーネルのデバイスイベント処理の調整</title>

  <para><systemitem class="service">udev</systemitem> のルールは、カーネルがイベント自身に付与するプロパティ情報のほか、カーネルが <filename>sysfs</filename> で開示する任意の情報を条件として設定することができます。このほか、外部プログラムから追加の情報を取得することもできます。また、それぞれのイベントは提供されている全てのルールに対して適合可否を判断します。全てのルールは <filename>/etc/udev/rules.d</filename> 内に配置されます。</para>

  <para>ルールファイルの各行には、少なくとも 1 つ以上のキーと値の対が含まれています。キーには 2 種類のものがあり、それぞれマッチ (適合可否) キーと代入キーと呼ばれています。ルール内のマッチキーで指定された全ての条件が満たされると、そのルールが適用され、代入キーに対して値が割り当てられます。また、マッチキーのルールではデバイスノードの名前を指定することができるほか、ノードを指し示すシンボリックリンクを追加したり、イベント処理の一部として指定したプログラムを起動したりすることができます。なお、いずれのルールにも該当しない場合は、デバイスノードを作成する際に既定のデバイス名が使われます。ルールの文法やマッチキーの一覧、およびデータの取り込み方法などについては、 <systemitem class="service">udev</systemitem> のマニュアルページをお読みください。下記の例では、 <systemitem class="service">udev</systemitem> のルールに関する基本的な文法の説明を行なっています。ルールの例は、 <filename>/etc/udev/rules.d/50-udev-default.rules</filename> にある <systemitem class="service">udev</systemitem> の既定のルールから引用されているものです。</para>

  <example xml:id="ex.rules">
   <title><systemitem class="service">udev</systemitem> ルールの例</title>
<screen># コンソール
KERNEL=="console", MODE="0600", OPTIONS="last_rule"

# シリアルデバイス
KERNEL=="ttyUSB*", ATTRS{product}=="[Pp]alm*Handheld*", SYMLINK+="pilot"

# プリンタ
SUBSYSTEM=="usb", KERNEL=="lp*", NAME="usb/%k", SYMLINK+="usb%k", GROUP="lp"

# カーネルファームウエアローダ
SUBSYSTEM=="firmware", ACTION=="add", RUN+="firmware.sh"</screen>
  </example>

  <para><systemitem>console</systemitem> のルールには 3 種類のキーが設定されています。 1 つ目はマッチキー ( <literal>KERNEL</literal> ) で、残りの 2 つは代入キーになっています ( <literal>MODE</literal> , <literal>OPTIONS</literal> ) 。 <literal>KERNEL</literal> のマッチキーは、種類が <literal>console</literal> である任意のデバイスに適合するものです。この場合は正確一致で比較処理が行なわれ、正確に一致した場合にのみルールが実行されます。 <literal>MODE</literal> キーはデバイスノードに対するアクセス権の設定を示すもので、この場合はこのデバイスの所有者のみが読み書きできるルールになります。最後の <literal>OPTIONS</literal> キーは、この種類の任意のデバイスに対して、最後に適用すべきルールであることを示しています。この種類のデバイスの場合、これ以降のルールは適用されなくなります。</para>

  <para><systemitem>serial devices</systemitem> のルールは既に <filename>50-udev-default.rules</filename> から削除されているルールですが、ルールを理解するには格好の材料です。ここには 2 種類のマッチキー ( <literal>KERNEL</literal> と <literal>ATTRS</literal> ) と、 1 種類の代入キー ( <literal>SYMLINK</literal> ) が書かれています。 <literal>KERNEL</literal> キーはデバイスの種類が <literal>ttyUSB</literal> である任意のデバイスに適合するものです。ここでは <literal>*</literal> というワイルドカードを指定しているため、正確一致ではなく複数の種類にマッチできるようになっています。 2 つ目のマッチキーである <literal>ATTRS</literal> では、種類が <literal>ttyUSB</literal> である任意のデバイスに対して、 <literal>sysfs</literal> 内にある <filename>product</filename> という属性ファイルを読み込んで、特定の文字列に合致するかどうかを調べています。代入キー ( <literal>SYMLINK</literal> ) は、このデバイスに対するシンボリックリンクを <filename>/dev/pilot</filename> として作成するよう指示しています。このキーで使用されている ( <literal>+=</literal> ) という演算子は <systemitem class="service">udev</systemitem> に対して、以前のルールや後続のルールで他のシンボリックリンクを作成している場合でも、そのルールを適用することを示しています。なお、このルールには 2 種類のマッチキーがありますので、両方の条件に合致した場合にのみルールが適用されることにも注意してください。</para>

  <para><systemitem>printer</systemitem> ルールは USB プリンタを扱うためのルールで、ルール全体を適用する際の条件となる 2 種類のマッチキー ( <literal>SUBSYSTEM</literal> および <literal>KERNEL</literal> ) が含まれています。また、 3 種類の代入キーは、それぞれこの種類のデバイスの命名ルール ( <literal>NAME</literal> ) やデバイスのシンボリックリンクの作成方法 ( <literal>SYMLINK</literal> ) 、そしてこの種類のデバイスに対するグループメンバー設定 ( <literal>GROUP</literal> ) が書かれています。また、 <literal>KERNEL</literal> 内には <literal>*</literal> というワイルドカードが含まれているため、複数の <literal>lp</literal> プリンタデバイスに合致する仕組みになっていのす。また、 <literal>NAME</literal> と <literal>SYMLINK</literal> には置換が設定されていて、これによって内部デバイス名からそれぞれを拡張できるようになっています。たとえば <literal>lp</literal> という内部名の最初の USB プリンタであれば、 <filename>/dev/usblp0</filename> のような名前になります。</para>

  <para><systemitem>kernel firmware loader</systemitem> は <systemitem class="service">udev</systemitem> から実行時に外部のヘルパースクリプトを実行して、追加のファームウエアを読み込むためのものです。 <literal>SUBSYSTEM</literal> のマッチキーは <literal>firmware</literal> サブシステムを検索します。 <literal>ACTION</literal> キーは、 <literal>firmware</literal> サブシステムに属する任意のデバイスが追加されたかどうかを判断しています。 <literal>RUN+=</literal> キーは <literal>firmware.sh</literal> スクリプトの実行を指定していて、これによってファームウエアの読み込みを行ないます。</para>

  <para>全てのルールに対して適用される、一般的な規約は下記の通りです:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>それぞれのルールには、カンマ区切りで 1 つまたは複数のキー／値の対を指定します。</para>
   </listitem>
   <listitem>
    <para>キーの操作は演算子で決定します。 <systemitem class="service">udev</systemitem> では複数の演算子に対応しています。</para>
   </listitem>
   <listitem>
    <para>それぞれの値は引用符で括らなければなりません。</para>
   </listitem>
   <listitem>
    <para>ルールファイル内の 1 行は 1 つのルールに対応します。ルールが 1 行に収まらない場合は、シェルでの記法と同じく、行末に <literal>\</literal> を記述して次の行に続けます。</para>
   </listitem>
   <listitem>
    <para><systemitem class="service">udev</systemitem> のルールでは、シェル形式のパターンマッチに対応しています。具体的には <literal>*</literal> , <literal>?</literal> , <literal>[]</literal> の各パターンを利用することができます。</para>
   </listitem>
   <listitem>
    <para><systemitem class="service">udev</systemitem> では置換に対応しています。</para>
   </listitem>
  </itemizedlist>

  <sect2 xml:id="sec.udev.rules.ops">
   <title><systemitem class="service">udev</systemitem> ルール内での演算子の使用</title>
   <para>代入キーの場合は、代入するキーの種類によって利用できる演算子が異なります。マッチキーの場合は通常、値と比較するための様々な演算子を利用することができます。マッチキーでは、下記の演算子を指定することができます:</para>
   <variablelist>
    <varlistentry>
     <term><literal>==</literal></term>
     <listitem>
      <para>一致しているかどうかを判断します。値にパターンマッチが指定されている場合は、そのパターンに一致するかどうかを判断します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>!=</literal></term>
     <listitem>
      <para>不一致を判断します。値にパターンマッチが指定されている場合は、そのパターンに一致していないかどうかを判断します。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>代入キーの場合は、下記の演算子を指定することができます:</para>
   <variablelist>
    <varlistentry>
     <term><literal>=</literal></term>
     <listitem>
      <para>キーに対して値を代入します。以前に値や値のリストが代入されていた場合は、その値は消去され、指定した単一の値が代入されます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>+=</literal></term>
     <listitem>
      <para>項目の一覧内に値を追加します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>:=</literal></term>
     <listitem>
      <para>最終値を代入します。後続のルールで変更ができなくなります。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.udev.rules.subst">
   <title><systemitem class="service">udev</systemitem> ルール内での置換の使用</title>
   <para><systemitem class="service">udev</systemitem> ではプレースホルダや置換の仕組みを利用することができます。これは他のスクリプトでも利用できる仕組みに似たもので、 <systemitem class="service">udev</systemitem> のルールでは下記のものを使用することができます:</para>
   <variablelist>
    <varlistentry>
     <term><literal>%r</literal> , <literal>$root</literal></term>
     <listitem>
      <para>デバイスのディレクトリ (既定では <filename>/dev</filename>)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%p</literal> , <literal>$devpath</literal></term>
     <listitem>
      <para><envar>DEVPATH</envar> の値</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%k</literal> , <literal>$kernel</literal></term>
     <listitem>
      <para><envar>KERNEL</envar> の値もしくは内部デバイス名</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%n</literal> , <literal>$number</literal></term>
     <listitem>
      <para>デバイスの番号</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%N</literal> , <literal>$tempnode</literal></term>
     <listitem>
      <para>デバイスファイルの一時的な名前</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%M</literal> , <literal>$major</literal></term>
     <listitem>
      <para>デバイスのメジャー番号</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%m</literal> , <literal>$minor</literal></term>
     <listitem>
      <para>デバイスのマイナー番号</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%s{<replaceable>属性名</replaceable>}</literal> , <literal>$attr{<replaceable>属性名</replaceable>}</literal></term>
     <listitem>
      <para><filename>sysfs</filename> の属性の値 (<replaceable>属性名</replaceable> で名前を指定します)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%E{<replaceable>変数名</replaceable>}</literal> , <literal>$env{<replaceable>変数名</replaceable>}</literal></term>
     <listitem>
      <para>環境変数の値 (<replaceable>変数名</replaceable> で名前を指定します)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%c</literal> , <literal>$result</literal></term>
     <listitem>
      <para><envar>PROGRAM</envar> の出力</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>%%</literal></term>
     <listitem>
      <para><literal>%</literal> 文字そのもの</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>$$</literal></term>
     <listitem>
      <para><literal>$</literal> 文字そのもの</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.udev.rules.match">
   <title><systemitem class="service">udev</systemitem> マッチキーの使用</title>
   <para>マッチキーは <systemitem class="service">udev</systemitem> のルールを適用する際、条件を指定するものです。下記のマッチキーを使用することができます:</para>
   <variablelist>
    <varlistentry>
     <term><literal>ACTION</literal></term>
     <listitem>
      <para>イベントアクションの名前 (デバイスを追加する場合は <literal>add</literal> に、デバイスを削除する場合は <literal>remove</literal> になります)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DEVPATH</literal></term>
     <listitem>
      <para>イベントデバイスのデバイスパス (たとえば <literal>DEVPATH=/bus/pci/drivers/ipw3945</literal> のように指定すると、 ipw3945 ドライバに関連する全てのイベントに合致するようになります)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>KERNEL</literal></term>
     <listitem>
      <para>イベントデバイスの内部 (カーネル) 名</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>SUBSYSTEM</literal></term>
     <listitem>
      <para>イベントデバイスのサブシステム名 (たとえば <literal>SUBSYSTEM=usb</literal> のように指定すると、 USB デバイスに関連する全てのイベントに合致するようになります)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ATTR{<replaceable>ファイル名</replaceable>}</literal></term>
     <listitem>
      <para>イベントの <systemitem class="filesystem">sysfs</systemitem> 属性 (たとえば <filename>vendor</filename> 内に特定の文字列が含まれているかどうかを調べるには、 <literal>ATTR{vendor}=="On[sS]tream"</literal> のように指定します)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>KERNELS</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、該当するデバイス名を上位方向に検索させる指定</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>SUBSYSTEMS</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、該当するデバイスのサブシステム名を上位方向に検索させる指定</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>DRIVERS</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、該当するデバイスのドライバ名を上位方向に検索させる指定</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ATTRS{<replaceable>ファイル名</replaceable>}</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、該当する <systemitem class="filesystem">sysfs</systemitem> の属性名を上位方向に検索させる指定</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ENV{<replaceable>キー</replaceable>}</literal></term>
     <listitem>
      <para>環境変数の値 (たとえば <literal>ENV{ID_BUS}="ieee1394"</literal> のように指定すると、 FireWire バス ID に関連する全てのイベントに合致するようになります)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>PROGRAM</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して外部プログラムを実行する指定 (成功を表わす場合、プログラムは 0 を返さなければなりません。また、プログラムが STDOUT に出力した実行結果は、 <literal>RESULT</literal> キーでチェックすることができます)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>RESULT</literal></term>
     <listitem>
      <para>直近の <literal>PROGRAM</literal> の出力 (<literal>PROGRAM</literal> キーと同じルール内に含めるか、後続のルールで指定する必要があります)</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec.udev.rules.assign">
   <title><systemitem class="service">udev</systemitem> 代入キーの使用</title>
   <para>上述のように合致すべき条件を指定するマッチキーとは異なり、代入キーでは<systemitem class="service">udev</systemitem> が管理するデバイスノードに対して、値や名前、アクションなどを代入します。</para>
   <variablelist>
    <varlistentry>
     <term><literal>NAME</literal></term>
     <listitem>
      <para>作成すべきデバイスノードの名前 (ルール内でデバイスノード名が設定されると、<literal>NAME</literal> キーがある他のルールは全て無視されるようになります)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>SYMLINK</literal></term>
     <listitem>
      <para>このノードに対して作成すべき関連シンボリックリンクの名前 (特定のデバイスノードに対して、複数のルールでシンボリックリンクを作成することができます。また、 1 つのルール内でも、スペースで区切って指定することで、複数のシンボリックリンクを作成することができます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>OWNER, GROUP, MODE</literal></term>
     <listitem>
      <para>新しいデバイスノードのアクセス権 (ここで何らかの値を指定すると、内蔵されている既定のルールが上書きされます)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ATTR{<replaceable>キー</replaceable>}</literal></term>
     <listitem>
      <para>イベントデバイスの <systemitem class="filesystem">sysfs</systemitem> 属性に対して書き込むべき値 (<literal>==</literal> 演算子を使用した場合、このキーはマッチキーとして作用し、特定の <systemitem class="filesystem">sysfs</systemitem> 属性と比較が行なわれることに注意してください)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ENV{<replaceable>キー</replaceable>}</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、この環境変数に設定すべき値 (<literal>==</literal> 演算子を使用した場合、このキーはマッチキーとして作用し、特定の <systemitem class="filesystem">sysfs</systemitem> 属性と比較が行なわれることに注意してください)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>RUN</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、このデバイス向けに実行すべきプログラムの一覧への追加 (ただし、後続の処理が遅延したりすることのないよう、非常に短時間で終了する処理にしてください)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>LABEL</literal></term>
     <listitem>
      <para><literal>GOTO</literal> でジャンプできる先のラベル指定</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>GOTO</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、ラベルで指定した位置までいくつかのルールを読み飛ばす指定</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>IMPORT{<replaceable>種類</replaceable>}</literal></term>
     <listitem>
      <para>外部プログラムの出力などをイベント環境に読み込む指定 (<systemitem class="service">udev</systemitem> は複数の種類の変数を取り込むことができます。種類を指定しない場合、<systemitem class="service">udev</systemitem> はファイルのアクセス権をもとに実行可否を自身で判断するようになります)</para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para><literal>program</literal> を指定すると、 <systemitem class="service">udev</systemitem> は外部プログラムを実行して出力を取り込みます。</para>
       </listitem>
       <listitem>
        <para><literal>file</literal> を指定すると、 <systemitem class="service">udev</systemitem> はテキストファイルから取り込みを行ないます。</para>
       </listitem>
       <listitem>
        <para><literal>parent</literal> を指定すると、 <systemitem class="service">udev</systemitem> は親デバイスに保存されているキーを取り込みます。</para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>WAIT_FOR_SYSFS</literal></term>
     <listitem>
      <para><systemitem class="service">udev</systemitem> に対して、指定した <systemitem class="filesystem">sysfs</systemitem> ファイルが作成されるまで待機する指定 (たとえば <literal>WAIT_FOR_SYSFS="ioerr_cnt"</literal> のように指定すると、 <systemitem class="service">udev</systemitem> は <filename>ioerr_cnt</filename> ファイルが作成されるまで待機します)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>OPTIONS</literal></term>
     <listitem>
      <para><literal>OPTION</literal> キーには下記のような値を指定することができます:</para>
      <itemizedlist mark="bullet" spacing="normal">
       <listitem>
        <para><literal>last_rule</literal> を指定すると、 <systemitem class="service">udev</systemitem> は後続の全てのルールを無視するようになります。</para>
       </listitem>
       <listitem>
        <para><literal>ignore_device</literal> を指定すると、 <systemitem class="service">udev</systemitem> はこのイベントを完全に無視するようになります。</para>
       </listitem>
       <listitem>
        <para><literal>ignore_remove</literal> を指定すると、 <systemitem class="service">udev</systemitem> はこのデバイスに対して後から発生する全ての削除イベントを無視するようになります。</para>
       </listitem>
       <listitem>
        <para><literal>all_partitions</literal> を指定すると、 <systemitem class="service">udev</systemitem> はブロックデバイス内に存在する全てのパーティションに対して、デバイスノードを作成するようになります。</para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.udev.persdev">
  <title>デバイスの命名の恒久化</title>

  <para>動的なデバイスディレクトリと <systemitem class="service">udev</systemitem> ルールの構造により、デバイスの認識順序や接続方式によらず、全てのディスクデバイスに対して、一貫した命名を行なうことができるようになっています。カーネルが作成するそれぞれのブロックデバイスは、バスやドライブの種類、ファイルシステムに対して特別な知識のあるツールが検証して作成することになります。カーネルが提供するデバイスノード名と共に、 <systemitem class="service">udev</systemitem> ではそのデバイスを指し示す一貫したシンボリックリンクを作成します:</para>

<screen>/dev/disk
|-- by-id
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B -&gt; ../../sda
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B-part1 -&gt; ../../sda1
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B-part6 -&gt; ../../sda6
|   |-- scsi-SATA_HTS726060M9AT00_MRH453M4HWHG7B-part7 -&gt; ../../sda7
|   |-- usb-Generic_STORAGE_DEVICE_02773 -&gt; ../../sdd
|   `-- usb-Generic_STORAGE_DEVICE_02773-part1 -&gt; ../../sdd1
|-- by-label
|   |-- Photos -&gt; ../../sdd1
|   |-- SUSE10 -&gt; ../../sda7
|   `-- devel -&gt; ../../sda6
|-- by-path
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0 -&gt; ../../sda
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0-part1 -&gt; ../../sda1
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0-part6 -&gt; ../../sda6
|   |-- pci-0000:00:1f.2-scsi-0:0:0:0-part7 -&gt; ../../sda7
|   |-- pci-0000:00:1f.2-scsi-1:0:0:0 -&gt; ../../sr0
|   |-- usb-02773:0:0:2 -&gt; ../../sdd
|   |-- usb-02773:0:0:2-part1 -&gt; ../../sdd1
`-- by-uuid
    |-- 159a47a4-e6e6-40be-a757-a629991479ae -&gt; ../../sda7
    |-- 3e999973-00c9-4917-9442-b7633bd95b9e -&gt; ../../sda6
    `-- 4210-8F8C -&gt; ../../sdd1</screen>
 </sect1>
 <sect1 xml:id="sec.udev.files">
  <title><systemitem class="service">udev</systemitem> で使用されるファイル</title>

  <variablelist>
   <varlistentry>
    <term><filename>/sys/*</filename></term>
    <listitem>
     <para>Linux カーネルが提供する仮想ファイルシステムで、既知のすべてのデバイスに対する情報を保持しています。この情報は、 <systemitem class="service">udev</systemitem> が <filename>/dev</filename> 内にデバイスノードを作成する際に用いられます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/dev/*</filename></term>
    <listitem>
     <para>動的に作成されたデバイスノードと、 systemd-tmpfiles で指定された固定の内容が含まれます。詳しくは <systemitem>systemd-tmpfiles(8)</systemitem> のマニュアルページをお読みください。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>下記のファイルやディレクトリは、 <systemitem class="service">udev</systemitem> インフラストラクチャにとって重要なものとなっています:</para>

  <variablelist>
   <varlistentry>
    <term><filename>/etc/udev/udev.conf</filename></term>
    <listitem>
     <para><systemitem class="service">udev</systemitem> のメインの設定ファイルです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/etc/udev/rules.d/*</filename></term>
    <listitem>
     <para>
      System-specific <systemitem class="service">udev</systemitem> event
      matching rules. You can add custom rules here to modify or override
      the default rules from <filename>/usr/lib/udev/rules.d/*</filename>.
     </para>
     <para>
      Files are parsed in alphanumeric order. Rules from files with a higher
      priority modify or override rules with lower priority. The lower the
      number, the higher the priority.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/usr/lib/udev/*</filename></term>
    <listitem>
     <para>
      Default <systemitem class="service">udev</systemitem> event matching
      rules. The files in this directory are owned by packages and will be
      overwritten by updates. Do not add, remove or edit files here, use
      <filename>/etc/udev/rules.d</filename> instead.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/usr/lib/udev/*</filename></term>
    <listitem>
     <para><systemitem class="service">udev</systemitem> のルールから呼び出されるヘルパープログラムです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/usr/lib/tmpfiles.d/</filename> および <filename>/etc/tmpfiles.d/</filename></term>
    <listitem>
     <para><filename>/dev</filename> 以下に配置する固定の内容を設定する場所です。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec.udev.moreinfo">
  <title>さらなる情報</title>

  <para><systemitem class="service">udev</systemitem> のインフラストラクチャについて、詳しくは下記のマニュアルページをお読みください:</para>

  <variablelist>
   <varlistentry>
    <term><systemitem class="service">udev</systemitem></term>
    <listitem>
     <para><systemitem class="service">udev</systemitem> に関する一般的な情報のほか、ルールやその他の重要な設定問題について説明しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>udevadm</command></term>
    <listitem>
     <para><command>udevadm</command> は <systemitem class="service">udev</systemitem> の実行時の振る舞いを制御する際に使用するもので、カーネルイベントの要求やイベントキューの管理、シンプルなデバッグ機構などが提供されています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem class="daemon">udevd</systemitem></term>
    <listitem>
     <para><systemitem class="daemon">udev</systemitem> イベント管理デーモンに関する情報が記されています。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
