<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="CreateProfile-Software">
  <title>ソフトウエア</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <para><remark role="fixme">Add a short description</remark></para>

   <sect2 xml:id="Software-Selections-base-product" os="sles;sled">
    <title>製品の選択</title>
    <para>&productname; 15 およびそれ以降のバージョンでは、全ての製品は 1 枚のインストールメディアとして提供されるようになっています。そのため、 <tag class="element">product</tag> タグを指定してインストールしたい製品を選択する必要があることになります。</para>
    <para><tag class="element">product</tag> タグ内で設定可能な値は下記のとおりです:</para>

    <variablelist>
     <varlistentry>
      <term>SLES</term>
      <listitem>
       <para>&sls;</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SLE_HPC</term>
      <listitem>
       <para>&slehpc;</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SLE_RT</term>
      <listitem>
       <para>&slert;</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SLES_SAP</term>
      <listitem>
       <para>&sles4sap;</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SLED</term>
      <listitem>
       <para>&sled;</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SUSE-Manager-Server</term>
      <listitem>
       <para>SUSE Manager Server</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SUSE-Manager-Retail-Branch-Server</term>
      <listitem>
       <para>SUSE Manager for Retail</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SUSE-Manager-Proxy</term>
      <listitem>
       <para>SUSE Manager Proxy</para>
      </listitem>
     </varlistentry>
    </variablelist>
    <example>
     <title>明示的な製品選択</title>
     <para>下記の例では、 &sled; を製品として選択しています:</para>
<screen>&lt;software&gt;
  &lt;products config:type="list"&gt;
    &lt;product&gt;SLED&lt;/product&gt;
  &lt;/products&gt;
&lt;/software&gt;
</screen>
    </example>
    <para>場合によっては、 1 枚のメディア内に 1 つの製品しか含まれていないものもあります。このような場合は、上述のようにして製品を明示的に指定する必要はありません。 &ay; 側で利用可能な製品を自動的に判断します。</para>
    <note>
     <title>古いバージョンの &ay; で使用していたファイルの使用</title>
     <para>古いバージョンの &productname; で使用していた &ay; 設定ファイルを使用していたり、移行しようとしていたりする場合は、特別な考慮を行なう必要があります。詳しくは <xref linkend="sec-ay-12vs15-product-selection"/> をお読みください。</para>
    </note>
   </sect2>

   <sect2 xml:id="Software-Selections-sles10">
    <title>パターンやパッケージの選択</title>
    <para>パターンやパッケージは下記のようにして設定します:</para>
    <example>
     <title>パターンやパッケージのセクションを利用した設定ファイル内でのパッケージ選択</title>
<screen>&lt;software&gt;
  &lt;patterns config:type="list"&gt;
    &lt;pattern&gt;directory_server&lt;/pattern&gt;
  &lt;/patterns&gt;
  &lt;packages config:type="list"&gt;
    &lt;package&gt;apache&lt;/package&gt;
    &lt;package&gt;postfix&lt;/package&gt;
  &lt;/packages&gt;
  &lt;do_online_update config:type="boolean"&gt;true&lt;/do_online_update&gt;
&lt;/software&gt;</screen>
    </example>
    <note>
     <title>パッケージとパターンの名前について</title>
     <para>値にはパッケージ名もしくはパターン名を指定します。バージョンが変わることによってパッケージ名が変更されることもありますが、その場合はプロファイル内に設定した名前を変更する必要があります。</para>
    </note>
   </sect2>

   <sect2 xml:id="Software-Selections-images" os="osuse">
    <title>イメージの配置</title>
    <para>インストールにかかる時間を削減するため、イメージを利用してインストールすることができます。</para>
    <example>
     <title>イメージの配置の有効化</title>
<screen>&lt;!-- 注意! software セクション内には記述しません! --&gt;
&lt;deploy_image&gt;
  &lt;image_installation config:type="boolean"&gt;false&lt;/image_installation&gt;
&lt;/deploy_image&gt;</screen>
    </example>
   </sect2>

   <sect2 xml:id="Software-Selections-additional">
    <title>追加のパッケージやカスタマイズしたパッケージ、もしくは独自の製品のインストール</title>
    <para>DVD-ROM 内に用意されているパッケージに加えて、必要であればカスタマイズしたカーネルなど、外部のパッケージをインストールすることもできます。なお、カスタマイズしたカーネルを使用する場合は、 &suse; パッケージとの互換性があるものでなければならないほか、同じ場所にインストールしなければならないことにも注意してください。</para>
    <para>従来のバージョンとは異なり、独自のパッケージや外部のパッケージをインストールするにあたって、特別なリソースを設定する必要はありません。その代わり、インストール元のリポジトリに必要なパッケージを追加したあと、パッケージデータベースを再作成する必要があります。</para>
    <para>このような作業に対応するため、リポジトリ内に存在するパッケージを調べてパッケージデータベースを作成するためのスクリプトが用意されています。これは <command>/usr/bin/create_package_descr</command> というコマンドになります。このコマンドは openSUSE Build Service 内の <literal>inst-source-utils</literal> パッケージ内に含まれています。なお、データベースを作成する際、全ての言語は英語にリセットされます。</para>
    <example>
     <title>inst-source-utils.rpm 追加パッケージを利用したパッケージデータベースの作成</title>
     <para>DVD 内のファイルを <literal>/usr/local/DVDs/LATEST</literal> に展開します。</para>
<screen>&prompt.user;cp /tmp/inst-source-utils-2016.7.26-1.2.noarch.rpm /usr/local/DVDs/LATEST/suse/noarch
&prompt.user;cd /usr/local/DVDs/LATEST/suse
&prompt.user;create_package_descr -d /usr/local/CDs/LATEST/suse</screen>
    </example>
    <para>上記の例では、 <filename>/usr/local/CDs/LATEST/suse</filename> 以下にアーキテクチャ (例: <literal>x86_64</literal>) に依存するパッケージと依存しないパッケージ (<literal>noarch</literal>) の両方が存在するものとします。他のアーキテクチャの場合は少し異なるかもしれません。</para>
    <para>この方式を使用することで、あらかじめ決められた最新のパッケージを提供する最新のリポジトリを提供できるようになります。また、この方式を使用することで、独自の CD-ROM を簡単に作成することもできます。</para>
    <para>たとえば SDK (&sdk;) のような独自モジュールを追加したい場合は、インストール元となるディレクトリのルートディレクトリに対して、 <filename>add_on_products.xml</filename> ファイルを追加します。</para>
    <para>下記の例では、基本製品のリポジトリ内に SDK モジュールを追加する方法を示しています。 SDK のリポジトリそのものは <filename>/sdk</filename> 内にあるものとします。</para>
    <example>
     <title><filename>add_on_products.xml</filename></title>
     <para>このファイルは、基本製品内に SDK モジュールを追加するためのファイルです。</para>
<screen>
&lt;?xml version="1.0"?&gt;
&lt;add_on_products xmlns="http://www.suse.com/1.0/yast2ns"
   xmlns:config="http://www.suse.com/1.0/configns"&gt;
   &lt;product_items config:type="list"&gt;
      &lt;product_item&gt;
         &lt;name&gt;SUSE Linux Enterprise Software Development Kit&lt;/name&gt;
         &lt;url&gt;relurl:////sdk?alias=SLE_SDK&lt;/url&gt;
         &lt;path&gt;/&lt;/path&gt;
         &lt;-- Users are asked whether to add such a product --&gt;
         &lt;ask_user config:type="boolean"&gt;false&lt;/ask_user&gt;
         &lt;-- Defines the default state of pre-selected state in case of ask_user used. --&gt;
         &lt;selected config:type="boolean"&gt;true&lt;/selected&gt;
      &lt;/product_item&gt;
   &lt;/product_items&gt;
&lt;/add_on_products&gt;
</screen>
    </example>
    <!-- fs 2018-05-09
         The following does not make sense, need to ask author what was intended
    <para>
     With a normal installation now the SDK module will be installed
     automatically. It will not be done via an &ay; installation. An
     additional entry would be needed for in the &ay; control file
     <literal>add-on</literal> section.
     </para>
     -->
    <para>上記のような特別な例のほかにも、その他のモジュールや拡張、アドオン製品などをそれぞれ別々のディレクトリに配置して、 &ay; のインストール時に追加するようなことも実現することができます。</para>
    <para>製品やモジュールの情報を持たないリポジトリであっても、インストール時に追加を行なうことができます。これらは <literal>その他のアドオン</literal> と呼ばれます。</para>
    <remark>
     FIXME: The SLE SDK does not exist anymore, example below needs to be
     updated. - sknorr, 2020-07-02
    </remark>
    <example>
     <title>SDK 拡張とユーザ定義リポジトリの追加</title>
<screen>&lt;add-on&gt;
  &lt;add_on_products config:type="list"&gt;
    &lt;listentry&gt;
      &lt;media_url&gt;cd:///sdk&lt;/media_url&gt;
      &lt;product&gt;sle-sdk&lt;/product&gt;
      &lt;alias&gt;SLES SDK&lt;/alias&gt;
      &lt;product_dir&gt;/&lt;/product_dir&gt;
      &lt;priority config:type="integer"&gt;20&lt;/priority&gt;
      &lt;ask_on_error config:type="boolean"&gt;false&lt;/ask_on_error&gt;
      &lt;confirm_license config:type="boolean"&gt;false&lt;/confirm_license&gt;
      &lt;name&gt;SUSE Linux Enterprise Software Development Kit&lt;/name&gt;
    &lt;/listentry&gt;
  &lt;/add_on_products&gt;
  &lt;add_on_others config:type="list"&gt;
    &lt;listentry&gt;
      &lt;media_url&gt;https://download.opensuse.org/repositories/YaST:/Head/openSUSE_Leap_15.1/&lt;/media_url&gt;
      &lt;alias&gt;yast2_head&lt;/alias&gt;
      &lt;priority config:type="integer"&gt;30&lt;/priority&gt;
      &lt;name&gt;Latest YaST2 packages from OBS&lt;/name&gt;
    &lt;/listentry&gt;
  &lt;/add_on_others&gt;
&lt;/add-on&gt;</screen>
    </example>
    <para><literal>add_on_others</literal> と <literal>add_on_products</literal> のセクションでは、それぞれ同じ値に対応しています:</para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>
         <para>属性</para>
        </entry>
        <entry>
         <para>値</para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para><literal>media_url</literal></para>
        </entry>
        <entry>
         <para>製品の URL を指定します。 <literal>cd:///</literal> , <literal>http://</literal> , <literal>ftp://</literal> などのプレフィクスを使用することができます。この項目は必須です。</para>
         <para>&sle; のパッケージ DVD などのように複数の製品が含まれるメディアを使用する場合は、 URL パスが複数製品のメディアのルートディレクトリを指し示すように設定し、 <literal>product_dir</literal> でそれぞれの製品を指定する必要があります (詳しくは下記をお読みください) 。</para>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>product</literal></para>
        </entry>
        <entry>
         <para>アドオンが製品である場合、内部向けの製品名を指定します。 <command>zypper products</command> を実行すると、インストール済みの製品名を表示することができます。</para>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>alias</literal></para>
        </entry>
        <entry>
         <para>リポジトリの別名を指定します。ユーザ側で任意の名前を設定することができます。</para>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>product_dir</literal></para>
        </entry>
        <entry>
         <para>製品のサブディレクトリを指定します。この属性は、 &sle; のパッケージ DVD など、複数の製品が含まれるメディアである場合にのみ使用します。</para>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>priority</literal></para>
        </entry>
        <entry>
         <para>リポジトリに対して設定する libzypp の優先順位を指定します。 1 が最も高い優先順位を表わし、数値が大きくなればなるほど、優先順位が低くなります。既定値は 99 です。</para>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>ask_on_error</literal></para>
        </entry>
        <entry>
         <para>&ay; に対して、指定した場所にアドオン製品やモジュール、拡張のリポジトリが存在しない場合、タイムアウトエラーを報告するのではなく、ユーザに対して尋ねるように設定するかどうかを指定します。ユーザに対して尋ねたい場合は、 ask_on_error を <literal>true</literal> に設定します (既定値は <literal>false</literal> です) 。</para>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>confirm_license</literal></para>
        </entry>
        <entry>
         <para>ユーザに対してライセンスへの同意を求めるかどうかを指定します。既定値は <literal>false</literal> です。</para>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>name</literal></para>
        </entry>
        <entry>
         <para>リポジトリ名を指定します。 <command>zypper lr</command> コマンドを実行することで、追加されたリポジトリの名前を表示することができます。</para>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>

    <para>&ay; で未署名のインストールソースを使用するには、 &ay; の制御ファイル内で下記のような内容を設定し、チェックを無効化してください。</para>
    <note>
     <title>未署名のインストールソースの制限について</title>
     <para>ここでの署名チェックの無効化は、自動インストール処理内の第 1 ステージにのみ適用されます。第 2 ステージでのインストールは、 &ay; の設定ではなく、インストール済みのシステムでの設定に従って動作します。</para>
    </note>
    <para>下記のような XML 構造内に、必要な要素を追加していきます:</para>
<screen>&lt;general&gt;
  &lt;signature-handling&gt;
    ...
  &lt;/signature-handling&gt;
&lt;/general&gt;</screen>
    <para>下記に示す全てのオプションの既定値は <literal>false</literal> です。また、オプションが <literal>false</literal> に設定されていて、パッケージやリポジトリに対する対象のテストが失敗した場合、特に何もメッセージが表示されることなく無視され、パッケージがインストールされなくなります。なお、どの値を <literal>true</literal> に設定したとしても、そこには潜在的なセキュリティリスクが存在することに注意してください。また、サードパーティ製のインストール元を利用してインストールを行なう場合、これらの設定を行なってはなりません。</para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>
         <para>属性</para>
        </entry>
        <entry>
         <para>値</para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para><literal>accept_unsigned_file</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; はコンテンツファイルなどが未署名であっても、受け入れるようになります。</para>
<screen>&lt;accept_unsigned_file config:type="boolean"
&gt;true&lt;/accept_unsigned_file&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_file_without_checksum</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; はコンテンツファイルなどのチェックサムが存在しない場合であっても、受け入れるようになります。</para>
<screen>&lt;accept_file_without_checksum config:type="boolean"
&gt;true&lt;/accept_file_without_checksum&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_verification_failed</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; は署名の検証が失敗した場合でもファイルを受け入れるようになります。</para>
<screen>&lt;accept_verification_failed config:type="boolean"
&gt;true&lt;/accept_verification_failed&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_unknown_gpg_key</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; はインストール元に新しい GPG 鍵が存在し、その鍵でコンテンツファイルに署名されている場合、それを受け付けるようになります。</para>
         <screen>&lt;accept_unknown_gpg_key config:type="boolean"
&gt;true&lt;/accept_unknown_gpg_key&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_non_trusted_gpg_key</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、既知ではあるもののまだ信頼していない鍵を受け付けるようになります。</para>
         <screen>&lt;accept_non_trusted_gpg_key config:type="boolean"
&gt;true&lt;/accept_non_trusted_gpg_key&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>import_gpg_key</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; はインストール元にある新しい GPG 鍵を受け付け、データベース内に取り込むようになります。</para>
         <screen>&lt;import_gpg_key config:type="boolean"
&gt;true&lt;/import_gpg_key&gt;</screen>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
    <para>それぞれのアドオン製品や拡張ごとに、署名の処理方法を設定することもできます。下記に示す要素は、個別のアドオン製品やモジュール、拡張などの中の <literal>signature-handling</literal> セクション内に設定しなければならないものです。いずれの設定も任意です。何も設定しない場合、 <literal>general</literal> セクション内のグローバルな署名処理設定が適用されます。</para>
    <informaltable>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>
         <para>属性</para>
        </entry>
        <entry>
         <para>値</para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry>
         <para><literal>accept_unsigned_file</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; は対象のアドオン製品に対して、コンテンツファイルなどが未署名であっても、受け入れるようにします。</para>
         <screen>&lt;accept_unsigned_file config:type="boolean"
&gt;true&lt;/accept_unsigned_file&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_file_without_checksum</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; は対象のアドオン製品に対して、コンテンツファイルなどのチェックサムが存在しない場合であっても、受け入れるようにします。</para>
<screen>&lt;accept_file_without_checksum config:type="boolean"
&gt;true&lt;/accept_file_without_checksum&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_verification_failed</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、 &ay; は対象のアドオン製品に対して、署名の検証が失敗した場合でもファイルを受け入れるようにします。</para>
<screen>&lt;accept_verification_failed config:type="boolean"
&gt;true&lt;/accept_verification_failed&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_unknown_gpg_key</literal></para>
        </entry>
        <entry>
         <para><literal>all</literal> を <literal>true</literal> に設定した場合、 &ay; は対象のアドオン製品に対して、インストール元にある新しい GPG 鍵を受け付け、データベース内に取り込むようにします。</para>
<screen>&lt;accept_unknown_gpg_key&gt;
  &lt;all config:type="boolean"&gt;true&lt;/all&gt;
&lt;/accept_unknown_gpg_key&gt;</screen>
         <para>鍵を個別に指定することもできます。</para>
<screen>&lt;accept_unknown_gpg_key&gt;
  &lt;all config:type="boolean"&gt;false&lt;/all&gt;
  &lt;keys config:type="list"&gt;
    &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt;
  &lt;/keys&gt;
&lt;/accept_unknown_gpg_key&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>accept_non_trusted_gpg_key</literal></para>
        </entry>
        <entry>
         <para><literal>true</literal> に設定した場合、対象のアドオン製品に対して、既知ではあるもののまだ信頼していない鍵を受け付けるようにします。</para>
         <para>全ての鍵を信頼する場合は下記のように設定します:</para>
<screen>&lt;accept_non_trusted_gpg_key&gt;
  &lt;all config:type="boolean"&gt;true&lt;/all&gt;
&lt;/accept_non_trusted_gpg_key&gt;</screen>
         <para>特定の鍵のみを信頼する場合は下記のように設定します:</para>
<screen>&lt;accept_non_trusted_gpg_key&gt;
  &lt;all config:type="boolean"&gt;false&lt;/all&gt;
  &lt;keys config:type="list"&gt;
    &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt;
  &lt;/keys&gt;
&lt;/accept_non_trusted_gpg_key&gt;</screen>
        </entry>
       </row>
       <row>
        <entry>
         <para><literal>import_gpg_key</literal></para>
        </entry>
        <entry>
         <para><literal>all</literal> を <literal>true</literal> に設定した場合、 &ay; はインストール元にある全ての GPG 鍵を受け入れ、データベース内に取り込むようにします。</para>
<screen>&lt;import_gpg_key&gt;
  &lt;all config:type="boolean"&gt;true&lt;/all&gt;
&lt;/import_gpg_key&gt;</screen>
         <para>鍵を個別に指定することもできます:</para>
<screen>&lt;import_gpg_key&gt;
  &lt;all config:type="boolean"&gt;false&lt;/all&gt;
  &lt;keys config:type="list"&gt;
    &lt;keyid&gt;3B3011B76B9D6523&lt;/keyid&gt;
  &lt;/keys&gt;
&lt;/import_gpg_key&gt;</screen>
        </entry>
       </row>
      </tbody>
     </tgroup>
    </informaltable>
   </sect2>

   <sect2 xml:id="Software-Selections-kernel">
    <title>カーネルパッケージ</title>
    <para>カーネルパッケージはパッケージの選択の中に含めることができません。必要なカーネルはインストール時に自動判断されるためです。パッケージの選択内にカーネルパッケージを入れてしまうと、ほとんどの場合、矛盾が発生してインストールが失敗することになります。</para>
    <para>特定の種類のカーネルを強制したい場合は、 <literal>kernel</literal> プロパティで設定を行なってください。下記は既定のカーネル (kernel-default) を強制する場合の例です。下記のように設定することで、環境によらずに指定したカーネルをインストールするようになります。</para>
    <example>
     <title>制御ファイル内でのカーネルセクション</title>
<screen>&lt;software&gt;
  &lt;kernel&gt;kernel-default&lt;/kernel&gt;
  ...
&lt;/software&gt;</screen>
    </example>
   </sect2>

   <sect2 xml:id="Software-Selections-remove-packs">
    <title>自動選択したパッケージの削除</title>
    <para>依存関係にあるパッケージや推奨パッケージなど、いくつかのパッケージが自動的に選択されてインストールされることがあります。</para>
    <para>これらのパッケージを削除してしまうと、システムの一貫性を損なうことになるほか、同類のサービスを提供するような代替パッケージをインストールしない限り、基本的なパッケージについても、削除を行なわないことをお勧めします。最も分かりやすい例がメール転送エージェント (MTA) です。既定では <systemitem>postfix</systemitem> がインストールされますが、 <systemitem>sendmail</systemitem> のような他の MTA をインストールすれば、 postfix を一覧から削除することができます (ただし、 sendmail は &productname; では提供されていません) 。下記の例では、このように postfix を sendmail に置き換える場合の例を示しています:</para>
    <example>
     <title>制御ファイル内でのパッケージ選択</title>
<screen>&lt;software&gt;
  &lt;packages config:type="list"&gt;
    &lt;package&gt;sendmail&lt;/package&gt;
  &lt;/packages&gt;
  &lt;remove-packages config:type="list"&gt;
    &lt;package&gt;postfix&lt;/package&gt;
  &lt;/remove-packages&gt;
&lt;/software&gt;</screen>
    </example>

    <note>
     <title>パッケージ削除の失敗について</title>
     <para>パターン (詳しくは <xref linkend="Software-Selections-sles10"/> をお読みください) の一部として設定されているパッケージについては、削除を行なうことができません。このようなパッケージを削除しようとすると、下記のようなエラーメッセージを表示してインストールが失敗してしまいます:</para>
     <screen>パッケージ解決器の実行に失敗しました。
      &ay; プロファイルのソフトウエアのセクションを確認してください。</screen>
    </note>

   </sect2>

   <sect2 xml:id="Software-Selections-recommend-packs">
    <title>推奨されるパッケージやパターンのインストール</title>
    <para>既定では、推奨される全てのパッケージ／パターンがインストールされます。必要なパッケージのみをインストールしてパッケージ数を減らしたい場合は、 <literal>install_recommended</literal> フラグを設定して、この動作を切り替えることができます。ただし、このフラグは新規インストールの場合にのみ適用されるものであり、アップグレードの場合には無視されます。</para>
<screen>&lt;software&gt;
  &lt;install_recommended config:type="boolean"&gt;false
  &lt;/install_recommended&gt;
&lt;/software&gt;</screen>

    <para><emphasis>既定値</emphasis>: 設定ファイル内でフラグが設定されていない場合、推奨されるパッケージは <emphasis>全て</emphasis> インストールされますが、推奨されるパターンについては <emphasis>インストールされません</emphasis> 。</para>

   </sect2>

   <sect2 xml:id="Software-Selections-stage2-packs">
    <title>第 2 ステージでのパッケージのインストール</title>
    <para>再起動後の第 2 ステージでパッケージをインストールしたい場合は、下記のようにして <literal>post-packages</literal> 要素を設定します:</para>
<screen>&lt;software&gt;
  &lt;post-packages config:type="list"&gt;
    &lt;package&gt;yast2-cim&lt;/package&gt;
  &lt;/post-packages&gt;
&lt;/software&gt;</screen>
   </sect2>

   <sect2 xml:id="Software-Selections-stage2-patterns">
    <title>第 2 ステージでのパターンのインストール</title>
    <para>第 2 ステージでパターンをインストールすることもできます。下記のようにして <literal>post-patterns</literal> 要素を設定してください:</para>
<screen>&lt;software&gt;
  &lt;post-patterns config:type="list"&gt;
    &lt;pattern&gt;apparmor&lt;/pattern&gt;
  &lt;/post-patterns&gt;
&lt;/software&gt;</screen>
   </sect2>

   <sect2 xml:id="Software-Selections-stage2-update">
    <title>第 2 ステージでのオンライン更新</title>
    <para>インストールの末尾にオンライン更新を行なうこともできます。オンライン更新を行ないたい場合は、 <literal>do_online_update</literal> を <literal>true</literal> に設定してください。なおオンライン更新の処理は、たとえば suse-register/customer-center のセクションでオンライン更新用のリポジトリを設定していたり、 post-script 内でリポジトリを設定したりしている場合にのみ意味があります。第 1 ステージの add-on セクションで既にオンライン更新用のリポジトリを設定している場合は、 &ay; は当初の段階から最新のパッケージをインストールすることになります。なお、オンライン更新でカーネルを更新した場合、第 2 ステージの終了後に再起動処理が動作します。</para>
<screen>&lt;software&gt;
  &lt;do_online_update config:type="boolean"&gt;true&lt;/do_online_update&gt;
&lt;/software&gt;</screen>
   </sect2>
  </sect1>
