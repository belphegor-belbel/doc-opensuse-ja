<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-audit-comp">
 <title>Linux 監査システムの概要</title>
 <info>
      <abstract>
        <para>本バージョンの &productname; に同梱されている Linux 監査フレームワークは、 CAPP (Controlled Access Protection Profiles) 互換の監査システムとして提供され、セキュリティに関連するイベントを確実に収集します。監査記録からは、セキュリティポリシーへの違反有無と、それが誰によって行われたものであるのかを調べることができます。</para>
        <para>監査フレームワークは CC-CAPP/EAL (Common Criteria-Controlled Access Protection Profiles/Evaluation Assurance Level) の認証を受ける際に重要な要件となるものです。また、 Common Criteria (CC) for Information Technology Security Information は、独立したセキュリティ評価に対する国際標準です。 Common Criteria の仕組みにより、顧客が任意の IT 製品に対するセキュリティレベルを判断し、ミッションクリティカルな環境への導入を支援することができます。</para>
        <para>Common Criteria でのセキュリティ評価には、 2 種類の評価要件セット (機能要件／保証要件) があります。機能要件は評価対象の製品のセキュリティ属性を記述するもので、 Controlled Access Protection Profiles (CAPP) のもとまとめられるものです。一方の保証要件は、 Evaluation Assurance Level (EAL) に従ってまとめられるものです。 EAL は、評価者がセキュリティ属性を判断するにあたって、それが存在し、効果があって、実装されていることを確認するためのすべての作業を記述するものです。この種類の作業には、たとえば開発者によるセキュリティの脆弱性の検索、修正処理、テストなどの文書化が含まれます。</para>
        <para>このガイドでは、監査システムの動作概要と、設定方法について説明しています。 Common Criteria に関する一般的な情報については、 <link xlink:href="https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%A2%E3%83%B3%E3%82%AF%E3%83%A9%E3%82%A4%E3%83%86%E3%83%AA%E3%82%A2">コモンクライテリア (Wikipedia)</link> などの情報をお読みください。</para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>Linux 監査システムでは、お使いのシステム内で発生している内容を非常に細かく分析することによって、セキュリティをより強固にする支援を行います。ただし、それ自身でセキュリティが強化されるわけではありません。つまり、コードの誤動作や様々な脆弱性からシステムを保護するわけではありません。その代わり、監査システムではそれらの問題を追跡し、 &aa; などのそれらを保護するための様々な仕組みを使用するよう促すためのものです。</para>
 <para>監査システムは複数のコンポーネントから構成される仕組みですが、それぞれがフレームワーク全体に重要な機能を提供しています。監査システムのカーネルモジュールは、システムコールを中継し、その際に関連するイベントを記録します。また <systemitem class="daemon">auditd</systemitem> デーモンは、監査レポートをディスクに記録します。このほか、様々なコマンドラインユーティリティを利用することで、監査証跡の表示や問い合わせ、書庫保存などを行うことができます。</para>
 <para>監査システムは下記の機能を提供します:</para>
 <variablelist>
  <varlistentry>
   <term>ユーザとプロセスとの関連づけ</term>
   <listitem>
    <para>監査システムはプロセスとそれを起動したユーザ ID との間の関連づけを行います。これにより、管理者やセキュリティ責任者が、プロセスを所有しているユーザを正確に追跡することができるほか、システム内での不審な動作を検出することができるようになります。</para>
    <important>
     <title>ユーザ ID の名前変更について</title>
     <para>監査デーモンは UID の変更を処理しません。そのため、たとえばユーザ名 <literal>tux</literal> の UID を <literal>uid=1001</literal> から <literal>uid=2000</literal> に変更したり、廃止したりすることは避けてください。このような作業を行ってしまった場合は、 <command>auditctl</command> データ (監査ルール) を変更する必要が発生してしまうほか、古いデータを正しく取得できなくなってしまうことがあります。</para>
    </important>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>監査証跡の確認</term>
   <listitem>
    <para>Linux 監査システムでは、監査レポートのディスクへの書き込みだけでなく、レポートを人間にとって読みやすい形式に変換する処理も行います。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>特定の監査イベントの確認</term>
   <listitem>
    <para>監査システムでは、監査レポート内の特定のイベントのみを抽出するためのユーティリティを提供しています。下記の検索条件を指定することができます:</para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>ユーザ</para>
     </listitem>
     <listitem>
      <para>グループ</para>
     </listitem>
     <listitem>
      <para>監査 ID</para>
     </listitem>
     <listitem>
      <para>リモートホスト名</para>
     </listitem>
     <listitem>
      <para>リモートホストアドレス</para>
     </listitem>
     <listitem>
      <para>システムコール</para>
     </listitem>
     <listitem>
      <para>システムコールのパラメータ</para>
     </listitem>
     <listitem>
      <para>ファイル</para>
     </listitem>
     <listitem>
      <para>ファイル操作</para>
     </listitem>
     <listitem>
      <para>成功もしくは失敗</para>
     </listitem>
    </itemizedlist>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>選択的監査の適用</term>
   <listitem>
    <para>監査システムにはフィルタリング機能が用意され、注目対象のイベントに対して監査レポートを作成することができるほか、特定のイベントのみを記録するよう監査システムを構成することもできます。このほか、独自のルールセットを作成して、これらの記録のみを実施するよう監査デーモンを構成することもできます。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>レポートデータの可用性の保証</term>
   <listitem>
    <para>監査レポートは &rootuser; が所有するもので、 &rootuser; のみが削除することができます。それ以外のユーザは監査ログを削除できません。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>監査データの喪失保護</term>
   <listitem>
    <para>カーネルのメモリが不足した場合や監査デーモンのバックログが超過した場合、もしくは監査デーモンの流量制限を超過した場合、監査デーモンはシステムのシャットダウンを実施して、監査システムの監視から外れないように設定することができます。このシャットダウンは、監査システムの中枢部からシステムの即時停止を求めるもので、この場合は直近のログがディスクに書き込まれることはありません。既定の設定では、システムの停止ではなく、 syslog への警告記録のみを行うように設定されています。</para>
    <para>ログの記録に必要なディスク領域が不足した場合、監査システムに対してクリーンなシャットダウンを求めるように設定することもできます。既定の設定では、ディスク領域が不足した場合、ログを停止するように設定されています。</para>
   </listitem>
  </varlistentry>
 </variablelist>
 <sect1 xml:id="sec-audit-bigpicture">
  <title>Linux 監査システムのコンポーネント紹介</title>

  <para>下記の図には、監査システムでの様々なコンポーネントと、相互作用の関係を示しています:</para>

  <figure xml:id="fig-audit-components">
   <title>Linux 監査システムのコンポーネント紹介</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="audit_components.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="audit_components.svg" width="75%" format="SVG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>実線の矢印はコンポーネント間でのデータの流れを、点線の矢印はコンポーネント間の制御を表しています。</para>

  <variablelist>
   <varlistentry>
    <term>auditd</term>
    <listitem>
     <para>監査デーモンは、アプリケーションやシステムの動作によって生成され、監査カーネルインターフェイスを介して提供された監査メッセージを、ディスクに書き込む責任を持つデーモンです。監査デーモンは &systemd; によって起動されます。監査システムの (起動時の) 設定は、 <filename>/etc/audit/auditd.conf</filename> で制御します。 <systemitem class="daemon">auditd</systemitem> に関する詳細情報と設定方法について、詳しくは <xref linkend="sec-audit-auditd"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>auditctl</command></term>
    <listitem>
     <para><command>auditctl</command> ユーティリティは、監査システムを制御するためのユーティリティです。ログ生成に関わるパラメータのほか、監査インターフェイスのカーネル設定や、どのイベントを追跡するかのルールなどを設定することができます。<command>auditctl</command> に関する詳細は、 <xref linkend="sec-audit-auditctl"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>監査ルール</term>
    <listitem>
     <para><filename>/etc/audit/audit.rules</filename> ファイルには、 <command>auditctl</command> コマンドのシーケンスが含まれていて、監査デーモンの起動直後のシステム起動時に読み込まれる内容が記述されています。監査ルールに関する詳細は、 <xref linkend="sec-audit-rules"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>aureport</term>
    <listitem>
     <para><command>aureport</command> ユーティリティは、監査イベントログから独自のレポートを作成することができるユーティリティです。このレポート生成は簡単にスクリプトに組み込むことができますし、出力は他のアプリケーションから使用することができる (たとえば結果のグラフ化など) ようになっています。 <command>aureport</command> に関する詳細は、<xref linkend="sec-audit-aureport"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ausearch</term>
    <listitem>
     <para><command>ausearch</command> ユーティリティは監査ログ内を検索するためのユーティリティで、様々なキーを指定してイベントを検索したり、様々なログ形式の属性を指定して検索したりすることができるようになっています。 <command>ausearch</command> に関する詳細は、<xref linkend="sec-audit-ausearch"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>audispd</term>
    <listitem>
     <para>監査ディスパッチャデーモン ( <systemitem class="daemon">audispd</systemitem> ) は、監査ログをディスクに書き込む代わりに (もしくはディスクに書き込むのと並行して) 、他のアプリケーションにイベント通知を中継することのできるデーモンです。 <systemitem class="daemon">audispd</systemitem> に関する詳細は、 <xref linkend="sec-audit-audisp"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>autrace</term>
    <listitem>
     <para><command>autrace</command> は <command>strace</command> のように、特定のプロセスを追跡するためのユーティリティです。 <command>autrace</command> の出力についても、監査ログに記録されるようになっています。 <command>autrace</command> に関する詳細は、 <xref linkend="sec-audit-autrace"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>aulast</term>
    <listitem>
     <para><command>last</command> コマンドのように、ユーザが直近にログインした日時を一覧表示します。 <command>aulast</command> は過去の監査ログ (もしくは指定した監査ログファイル) を読み込んで、指定した日時範囲におけるユーザのログインおよびログアウトを一覧で表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>aulastlog</term>
    <listitem>
     <para><command>lastlog</command> コマンドのように、マシンに対する最新のログイン日時を一覧表示します。ログイン名のほか、ポートと最終ログイン日時が表示されます。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-audit-auditd">
  <title>監査デーモンの設定</title>

  <para>監査ログの生成やそのログの処理を行う前に、まずは監査デーモン自身の設定を行います。 <!-- fs 2016-11-17: bsc #918655 Not sure where this can be configured now (not in /etc/audit/auditd.conf); therefore keeping this as reference Configure how the Audit system functions in <filename>/etc/audit/auditd.conf</filename>. </para> <para> The most important configuration parameters in <filename>/etc/sysconfig/auditd</filename> are: </para><screen>AUDITD_LANG="en_US"AUDITD_DISABLE_CONTEXTS="no"</screen> <variablelist> <varlistentry> <term><envar>AUDITD_LANG</envar> </term> <listitem> <para> The locale information used by audit. The default setting is <literal>en_US</literal>. Setting it to <literal>none</literal> would remove all locale information from audit's environment. </para> </listitem> </varlistentry> <varlistentry> <term><envar>AUDITD_DISABLE_CONTEXTS</envar> </term> <listitem> <para> Disable system call auditing by default. Set to <literal>no</literal> for full audit functionality including file and directory watches and system call auditing. </para> </listitem> </varlistentry> </variablelist> <para>--> 設定ファイル <filename>/etc/audit/auditd.conf</filename> では、デーモンの起動時にどのようにして監査システムを動作させるのかを設定します。ほとんどの用途では、 &productname; に同梱されている既定の設定のままでかまいません。 CAPP 環境向けに使用する場合は、ほとんどのパラメータに調整が必要です。下記に利用可能なパラメータの主な概要を示します:</para>

<screen>log_file = /var/log/audit/audit.log
log_format = RAW
log_group = root
priority_boost = 4
flush = INCREMENTAL
freq = 20
num_logs = 5
disp_qos = lossy
dispatcher = /sbin/audispd
name_format = NONE
##name = mydomain
max_log_file = 6
max_log_file_action = ROTATE
space_left = 75
space_left_action = SYSLOG
action_mail_acct = root
admin_space_left = 50
admin_space_left_action = SUSPEND
disk_full_action = SUSPEND
disk_error_action = SUSPEND
##tcp_listen_port =
tcp_listen_queue = 5
tcp_max_per_addr = 1
##tcp_client_ports = 1024-65535
tcp_client_max_idle = 0
cp_client_max_idle = 0</screen>

  <para>CAPP の要件を満たすよう環境を設定する必要があるかどうかによって異なりますが、必要である場合は監査デーモンの設定をより厳密に行う必要があります。 CAPP の要件を満たす場合は、 <quote>CAPP 環境について</quote> と書かれた注記に従って設定を行ってください。</para>

  <variablelist>
   <varlistentry>
    <term><literal>log_file</literal> , <literal>log_format</literal> , <literal>log_group</literal></term>
    <listitem>
     <para><literal>log_file</literal> では、監査ログの保存先の場所を指定します。 <literal>log_format</literal> はディスクへの監査ログの書き込み方法を、 <literal>log_group</literal> は監査ログを所有するグループの指定をそれぞれ行います。 <literal>log_format</literal> では <literal>raw</literal> (カーネルが送信したメッセージをそのまま保存する) か <literal>nolog</literal> (メッセージを廃棄してディスクには書き込まない) のいずれかを指定します。なお、 <literal>nolog</literal> を指定しても、監査ディスパッチャへ送信されるデータには影響がありません。既定の設定は <literal>raw</literal> です。なお、 <command>aureport</command> や <command>ausearch</command> を使用して、監査ログからレポートを作成したり、監査ログに対して問い合わせを行ったりしたい場合は、監査ログを保存しておく必要があります。また、 <literal>log_group</literal> ではグループ名のほか、グループ ID で指定することもできます。</para>
     <note>
      <title>CAPP 環境について</title>
      <para>CAPP 環境では、監査ログは独自のパーティション内に保存しなければなりません。これを実現するには、まず監査デーモン向けの領域を確認して、他のプロセスからの書き込みが混在していないかどうかをお確かめください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>priority_boost</literal></term>
    <listitem>
     <para>監査デーモンが獲得する優先度ブースト (nice 値) を指定します。 0 から 20 までの範囲で指定することができます。 nice 値は優先度ブーストの値をマイナスにした値になります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>flush</literal> および <literal>freq</literal></term>
    <listitem>
     <para>ディスクに対して監査ログを書き込む際のパラメータ指定を行います。 <literal>flush</literal> に設定可能な値は <literal>none</literal> , <literal>incremental</literal> , <literal>data</literal> , <literal>sync</literal> のいずれかです。 <literal>none</literal> を指定した場合、監査デーモンは監査データをディスクに書き込むにあたって、特に何の処理も行いません。 <literal>incremental</literal> を指定すると、監査デーモンはディスクに書き込む際、明示的にフラッシュ処理を行います。 <literal>incremental</literal> を指定した場合は、頻度 (<literal>freq</literal>) もあわせて設定しなければなりません。たとえば <literal>freq</literal> に <literal>20</literal> を指定すると、監査デーモンは 20 レコードごとにカーネルに対してディスクへのフラッシュを要求します。 <literal>flush</literal> に <literal>data</literal> を指定すると、データ部分のみのフラッシュを毎回実施し、 <literal>sync</literal> を指定すると、データとメタデータの両方に対して、フラッシュを毎回実施するようになります。</para>
     <note>
      <title>CAPP 環境について</title>
      <para>CAPP 環境では、監査証跡を常に最新に維持しておかなければなりません。そのため、 <literal>flush</literal> パラメータには <literal>sync</literal> もしくは <literal>data</literal> を指定します。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>num_logs</literal></term>
    <listitem>
     <para><literal>max_log_file_action</literal> で <literal>rotate</literal> を指定した場合、どれだけの数のログファイルを残しておくのかを指定します。設定可能な値は <literal>0</literal> から <literal>99</literal> までです。 <literal>2</literal> より小さい値を指定すると、ログファイルの切り替えを行わない意味になります。また、残すログの数を増やした場合は、その際に監査デーモンの処理が増えることになります。 <systemitem class="daemon">auditd</systemitem> がログファイルを切り替える際には、カーネルから届く新しいデータを即時に処理できなくなり、バックログ状態 (<systemitem class="daemon">auditd</systemitem> が失敗フラグに従って処理を行う状態。詳しくは <xref linkend="sec-audit-auditctl"/> を参照) になります。このような状況下では、バックログ制限を設定しておくことをお勧めします。バックログ制限は <filename>/etc/audit/audit.rules</filename> 内の <literal>-b</literal> の値を変更することで調整することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>disp_qos</literal> および <literal>dispatcher</literal></term>
    <listitem>
     <para>ディスパッチャは監査デーモンの起動時に開始される仕組みです。監査デーモンは監査メッセージを中継して、 <literal>dispatcher</literal> 内で指定したアプリケーションにメッセージを渡します。ただし、アプリケーションは &rootuser; で動作しなければならないものであるため、セキュリティ上の信頼性の高いものでなければなりません。また <literal>disp_qos</literal> では、監査デーモンとディスパッチャの間の通信手段を指定することができます。 <literal>lossy</literal> (喪失を許容する) もしくは <literal>lossless</literal> (喪失を許容しない) のいずれかを指定します。</para>
     <para><literal>lossy</literal> を選択した場合、監査デーモンはメッセージキューが一杯になると、監査メッセージを廃棄することがあります。これらのイベントは <literal>log_format</literal> が <literal>raw</literal> に設定されていればディスク内に書き込まれますが、ディスパッチャには届けられません。逆に <literal>lossless</literal> を指定すると、メッセージキューに空きがない場合、監査ログのディスクへの書き込みがブロックされるようになります。既定値は <literal>lossy</literal> です。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>name_format</literal> および <literal>name</literal></term>
    <listitem>
     <para><literal>name_format</literal> はコンピュータ名の解決方法を指定するパラメータです。設定可能な値は、 <literal>none</literal> (名前解決を行わない), <literal>hostname</literal> (<command>gethostname</command> で名前を解決する), <literal>fqd</literal> (DNS 参照を介して完全修飾ドメイン名を取得する), <literal>numeric</literal> (IP アドレス), <literal>user</literal> のいずれかです。 <literal>user</literal> は独自の名前を設定する指定で、その名前を <literal>name</literal> で指定します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>max_log_file</literal> および <literal>max_log_file_action</literal></term>
    <listitem>
     <para><literal>max_log_file</literal> は数値を指定するパラメータで、ログファイルの最大ファイルサイズをメガバイト単位で指定します。ここで指定した値に到達した場合に実行される処理を <literal>max_log_file_action</literal> で指定します。 <literal>max_log_file_action</literal> に指定可能な値は <literal>ignore</literal> , <literal>syslog</literal> , <literal>suspend</literal> , <literal>rotate</literal> , <literal>keep_logs</literal> のいずれかです。 <literal>ignore</literal> を指定した場合は、サイズ制限に到達しても何も行いません。 <literal>syslog</literal> は警告メッセージを syslog に対して送信し、 <literal>suspend</literal> は監査デーモンに対して、ログのディスクへの書き込みを停止させるが、監査デーモンはそのまま動作し続ける意味になります。 <literal>rotate</literal> を指定すると、 <literal>num_logs</literal> の設定に従ってログをローテーションします。 <literal>keep_logs</literal> でも同じようにログをローテーションしますが、この場合は <literal>num_log</literal> の設定を使用せず、すべてのログを保持する意味になります。</para>
     <note>
      <title>CAPP 環境について</title>
      <para>CAPP 環境で監査証跡を完全に残しておくには、 <literal>keep_logs</literal> を使用すべきです。監査ログ用の個別のパーティションを設定している場合は、 <literal>max_log_file</literal> と <literal>num_logs</literal> の設定を調整して、パーティション内の領域をすべて使用するよう設定してください。なお、ローテーションのファイル数が増えると、監査イベントの受信を再開するまでに時間を要することがあることに注意してください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="var-audit-auditd-space-left">
    <term><literal>space_left</literal> および <literal>space_left_action</literal></term>
    <listitem>
     <para><literal>space_left</literal> は数値を指定するパラメータで、監査デーモンが残り容量を監視する際の閾 (しきい) 値をメガバイト単位で指定します。閾値を超過した際に実行される処理を <literal>space_left_action</literal> で指定します。このパラメータに指定可能な値は、 <literal>ignore</literal> , <literal>syslog</literal> , <literal>email</literal> , <literal>exec</literal> , <literal>suspend</literal> , <literal>single</literal> , <literal>halt</literal> のいずれかです。 <literal>ignore</literal> を指定した場合は、閾値に到達しても何も行いません。 <literal>syslog</literal> は警告メッセージを syslog に対して送信し、 <literal>email</literal> は <literal>action_mail_acct</literal> で指定したアカウントに対して、電子メールを送信します。 <literal>exec</literal> は値の後ろにスクリプトのパスを指定することで、そのスクリプトを実行します。なお、スクリプトに対してはパラメータを指定することができませんので、注意してください。 <literal>suspend</literal> は監査デーモンに対して、ログのディスクへの書き込みを停止させるが、監査デーモンはそのまま動作し続ける意味になります。 <literal>single</literal> はシステムに対して、シングルユーザモードへの移行を指示します。 <literal>halt</literal> はシステムを完全にシャットダウンさせる意味になります。</para>
     <note>
      <title>CAPP 環境について</title>
      <para><literal>space_left</literal> の値を調整して、管理者に対して警告を処理するのに十分な時間を確保するとともに、監査デーモンがその間動作し続けるのに十分な容量を確保するようにしてください。ディスク領域の解放を行うには <command>aureport -t</command> コマンドを使用することができるほか、古いログを別途の書庫用パーティションやリソースにコピーしてもかまいません。 <literal>space_left</literal> に指定する値は、お使いの環境の用途によって大きく異なります。また、 <literal>space_left_action</literal> は <literal>email</literal> を指定してください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>action_mail_acct</literal></term>
    <listitem>
     <para>警告メッセージの送信先となる電子メールアドレス、もしくは別名を指定します。既定値は <literal>root</literal> ですが、その他のローカルアカウントを電子メールアドレスとして指定することができるほか、ネットワークが正しく設定されていて、 <filename>/usr/lib/sendmail</filename> が存在していれば、リモートのアカウントでもかまいません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>admin_space_left</literal> および <literal>admin_space_left_action</literal></term>
    <listitem>
     <para><literal>admin_space_left</literal> は数値を指定するパラメータで、ディスク領域の残りをメガバイト単位で指定します。システムがこの制限よりも少ないディスク領域しか残されていない場合、管理者は最後のチャンスとして、この警告に応じて監査ログ向けの空きディスク領域を確保できるようになります。なお、 <literal>admin_space_left</literal> の値は <literal>space_left</literal> よりも小さい値であるべきです。 <literal>admin_space_left_action</literal> に指定可能な値は、 <literal>space_left_action</literal> と同じです。</para>
     <note>
      <title>CAPP 環境について</title>
      <para>管理者の作業内容を記録することができる程度の値を <literal>admin_space_left</literal> に指定してください。また、 <literal>admin_space_left_action </literal> は <literal>single</literal> にしてください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>disk_full_action</literal></term>
    <listitem>
     <para>監査ログ用のディスク領域を使い果たした場合に、システムが取るべきアクションを指定します。指定可能な値は <literal>ignore</literal> , <literal>syslog</literal> , <literal>rotate</literal> , <literal>exec</literal> , <literal>suspend</literal> , <literal>single</literal> , <literal>halt</literal> のいずれかです。値の詳しい意味については、 <xref linkend="var-audit-auditd-space-left"/> をお読みください。</para>
     <note>
      <title>CAPP 環境について</title>
      <para><literal>disk_full_action</literal> はディスクの空き容量が全く残っていない場合に発動するもので、これ以上の監査ログを書き込むことができない状態であることを示しています。そのため、システムをシングルユーザモードに移行させる ( <literal>single</literal> ) か、完全にシャットダウン ( <literal>halt</literal> ) してください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>disk_error_action</literal></term>
    <listitem>
     <para>監査デーモンがログをディスクに書き込む際、およびログをローテーションする際に、ディスクエラーを検知した場合、どのような処理を行うべきかを指定します。指定可能な値は <literal>space_left_action</literal> と同じです。</para>
     <note>
      <title>CAPP 環境について</title>
      <para>何らかのハードウエア障害に関しては、ご自身のサイト内のポリシーに従って、 <literal>syslog</literal> , <literal>single</literal> , <literal>halt</literal> のいずれかを指定してください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>tcp_listen_port</literal> , <literal>tcp_listen_queue</literal> , <literal>tcp_client_ports</literal> , <literal>tcp_client_max_idle</literal> , <literal>tcp_max_per_addr</literal></term>
    <listitem>
     <para>監査デーモンは他の監査デーモンからのイベントを受け付けることもできます。 TCP パラメータは、そのようなイベント受信に関する設定を行います。 <literal>tcp_listen_port</literal> には、 1 から 65535 までの範囲で、 <systemitem class="daemon">auditd</systemitem> が接続を待ち受けるべきポートを指定します。 <literal>tcp_listen_queue</literal> は、待機中として保持すべき最大の接続数を指定します。あまりにも小さい値を指定してしまうと、たとえばサイト内の停電時など、一斉に監査イベントを受信するような場合に耐えられなくなってしまいます。 <literal>tcp_client_ports</literal> では、クライアント側で許可するポート範囲を指定します。ここでは単一のポート番号のほか、ハイフンで区切って複数のポートを指定することもできます (たとえば 1-1023 のように指定すると、いわゆる特権ポートからの接続のみを受け付けることになります) 。</para>
     <para>なお、この設定で単一のポートだけを指定してしまうと、クライアント側の監査システムを再起動するのが難しくなってしまいます。なぜなら、同じアドレスの同じポート番号は、しばらくの間 TIME_WAIT 状態に遷移するため、再利用できなくなるためです。クライアント側の監査デーモンの応答がなくなってしまった場合は、 <systemitem class="daemon">auditd</systemitem> がその旨を警告します。また、サーバ側で通信のない状態を検知して自動切断したい場合は、 <literal>tcp_client_max_idle</literal> を指定してください。なお、この設定はすべてのクライアントに対して適用されるため、クライアント側のハートビート設定の 2 倍程度か、それより大きい値を指定してください。 <literal>tcp_max_per_addr</literal> では、同一の IP アドレスからの同時接続許可数を数値で指定します。</para>
     <tip>
      <para>監査デーモンへの接続の際、 root (CAP_NET_BIND_SERVICE) 以外からの接続を拒否する目的で、サーバもクライアントも特権ポートを使用することをお勧めします。</para>
     </tip>
    </listitem>
   </varlistentry>
  </variablelist>

  <para><filename>/etc/audit/auditd.conf</filename> でのデーモン設定が完了したら、次は監査デーモンが監査する範囲の制御と、デーモンが適切に動作するために必要な十分なリソースの割り当てと制限を行います。</para>
 </sect1>
 <sect1 xml:id="sec-audit-auditctl">
  <title><command>auditctl</command> による監査システムの制御</title>

  <para><command>auditctl</command> は状態の制御のほか、監査デーモンの基本的なシステムパラメータを設定することができます。このほか、システム内で実施される監査範囲の制御を行うこともできます。監査ルールを使用することで、 <command>auditctl</command> はお使いのシステム内のどのコンポーネントを監査するのか、およびどの範囲までを監査するのかを制御することができます。監査ルールは <command>auditctl</command> コマンドを使用してコマンドラインから渡すことができるほか、ルールセットを作成して監査デーモン側で処理させることもできます。既定では、 <systemitem class="daemon">auditd</systemitem> は <filename>/etc/audit/audit.rules</filename> にある監査ルールを使用するようになっています。監査ルールに関する詳細は、 <xref linkend="sec-audit-rules"/> をお読みください。</para>

  <para>基本的な監査システムパラメータを制御するための主な <command>auditctl</command> コマンドは下記のとおりです:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para><command>auditctl</command> <option>-e</option>: 監査の有効化と無効化</para>
   </listitem>
   <listitem>
    <para><command>auditctl</command> <option>-f</option>: 失敗フラグの制御</para>
   </listitem>
   <listitem>
    <para><command>auditctl</command> <option>-r</option>: 監査メッセージの流量制限の制御</para>
   </listitem>
   <listitem>
    <para><command>auditctl</command> <option>-b</option>: バックログ制限の制御</para>
   </listitem>
   <listitem>
    <para><command>auditctl</command> <option>-s</option>: 監査デーモンに関する現在の状態の表示</para>
   </listitem>
   <listitem>
     <para><command>auditctl</command> <option>-S</option> では監査対象とするシステムコールを指定します。なお、お使いのシステムで <command>auditctl -S</command> を実行する際は、 <option>-F arch=b64</option> を指定して、アーキテクチャの間違いに関する警告が発生しないようにしてください。</para>
   </listitem>
  </itemizedlist>

  <para><option>-e</option> , <option>-f</option> , <option>-r</option> , <option>-b</option> オプションは <filename>audit.rules</filename> ファイル内でも指定することができます。これにより、監査デーモンの起動時に毎回入力するような手間を省くことができます。</para>

  <para><command>auditctl</command> <option>-s</option> で監査デーモンの状態を問い合わせる場合や、 <command>auditctl</command> <option>-e<replaceable>フラグ</replaceable></option> で状態フラグを変更する場合は、状態メッセージ (上述のパラメータに関する情報を含む) が出力されます。下記は、一般的な監査状態のメッセージ例を示しています。</para>

  <example xml:id="ex-auditctl-status">
   <title><command>auditctl</command> <option>-s</option> の出力例</title>
<screen>
enabled 1
failure 1
pid 790
rate_limit 0
backlog_limit 64
lost 0
backlog 0
backlog_wait_time 15000
loginuid_immutable 0 unlocked    
</screen>
  </example>

  <table xml:id="tab-audit-auditctl">
   <title>監査状態フラグ</title>
   <tgroup cols="3">
    <thead>
     <row>
      <entry>
       <para>フラグ</para>
      </entry>
      <entry>
       <para>意味 [取り得る値]</para>
      </entry>
      <entry>
       <para>コマンド</para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para><literal>enabled</literal></para>
      </entry>
      <entry>
       <para>有効化フラグを設定します。 [0..2] 0=無効, 1=有効, 2=有効にして設定をロックダウンします。なお、この有効化フラグはシステムコールのログにのみ適用されるものであり、その他のイベントについては効果がありません (詳しくは<package>audit-devel</package> パッケージ内の <command>man 3 audit_set_enabled</command> をお読みください) 。</para>
      </entry>
      <entry>
       <para><command>auditctl</command> <option>-e [0|1|2]</option></para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>flag</literal></para>
      </entry>
      <entry>
       <para>失敗フラグを設定します。 [0..2] 0=何もしない, 1=printk, 2=panic (ディスクへの書き込み待ちのデータを書き込むことなく、即時に停止する)</para>
      </entry>
      <entry>
       <para><command>auditctl</command> <option>-f [0|1|2]</option></para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>pid</literal></para>
      </entry>
      <entry>
       <para><systemitem class="daemon">auditd</systemitem> のプロセス ID を表します。</para>
      </entry>
      <entry>
       <para>&mdash;</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>rate_limit</literal></para>
      </entry>
      <entry>
       <para>メッセージの流量制限 (毎秒メッセージ数) を設定します。この値にゼロより大きい値が設定され、その値を超過した場合は、失敗フラグ内で設定した動作を実行します。</para>
      </entry>
      <entry>
       <para><command>auditctl</command> <option>-r <replaceable>流量</replaceable></option></para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>backlog_limit</literal></para>
      </entry>
      <entry>
       <para>未処理の監査バッファの最大サイズを指定します。すべてのバッファが使用中になると、失敗フラグ内で設定した動作を実行します。</para>
      </entry>
      <entry>
       <para><command>auditctl</command> <option>-b <replaceable>バックログ</replaceable></option></para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>lost</literal></para>
      </entry>
      <entry>
       <para>現時点までに喪失した監査メッセージの数を表します。</para>
      </entry>
      <entry>
       <para>&mdash;</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>backlog</literal></para>
      </entry>
      <entry>
       <para>現時点での未処理の監査バッファ数を表します。</para>
      </entry>
      <entry>
       <para>&mdash;</para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect1>
 <sect1 xml:id="sec-audit-rules">
  <title>監査システムに対するパラメータ指定</title>

  <para>監査システムに対するコマンドは <command>auditctl</command> コマンドを利用してシェルから個別に実行することもできますし、 <command>auditctl -</command> <option>R</option> のように指定して、ファイルから読み込んで一括処理することもできます。後者のやり方は起動時のスクリプトでも使用していて、監査デーモンの起動後に、 <filename>/etc/audit/audit.rules</filename> ファイルからルールを読み込む目的で使用しています。ルールは上から順に実行されます。それぞれのルールは、それぞれが <command>auditctl</command> のコマンドに展開されます。ルールファイル内で使用する書式は、 <command>auditctl</command> コマンドと同じです。</para>

  <para>動作中の監査システムを <command>auditctl</command> で設定変更しても、その変更点はシステムの再起動で失われてしまいます。恒久的に変更したい場合は、 <filename>/etc/audit/audit.rules</filename> ファイルに追加するとともに、現時点で監査デーモン内に読み込まれていない場合は、 <command>systemctl restart auditd</command> を実行して、監査システムを再起動してください。</para>

  <example xml:id="ex-audit-rules-sysparam">
   <title>監査ルール例: 監査システムのパラメータ</title>
<screen>-b 1000<co xml:id="co-aurules-b"/>
-f 1<co xml:id="co-aurules-f"/>
-r 10<co xml:id="co-aurules-r"/>
-e 1<co xml:id="co-aurules-e"/></screen>
  </example>

  <calloutlist>
   <callout arearefs="co-aurules-b">
    <para>未処理の監査バッファの最大数を指定しています。ログの発生頻度にも依存しますが、監査の負荷がシステムにとって重すぎない程度の値に設定してください。</para>
   </callout>
   <callout arearefs="co-aurules-f">
    <para>使用する失敗フラグを指定しています。指定可能な値は <xref linkend="tab-audit-auditctl"/> をご覧ください。</para>
   </callout>
   <callout arearefs="co-aurules-r">
    <para>カーネル側で発信される最大流量のメッセージ数を指定しています。詳しくは <xref linkend="tab-audit-auditctl"/> をご覧ください。</para>
   </callout>
   <callout arearefs="co-aurules-e">
    <para>監査サブシステムの有効化／無効化を設定しています。</para>
   </callout>
  </calloutlist>

  <para>監査の仕組みを使用することで、重要なファイルや設定、リソースなどのファイルシステムアクセスを追跡することができるようになります。また、これらに対して監視を設定してキーを割り当てることで、ログ内でより見つけやすくすることができます。</para>

  <example xml:id="ex-audit-rules-fs">
   <title>監査ルール例: ファイルシステムの監査</title>
<screen>-w /etc/shadow<co xml:id="co-aurules-fs"/>
-w /etc -p rx<co xml:id="co-aurules-fsmode"/>
-w /etc/passwd -k fk_passwd -p rwxa<co xml:id="co-aurules-fskey"/></screen>
   <calloutlist>
    <callout arearefs="co-aurules-fs">
     <para><literal>-w</literal> オプションは、指定したファイル (この例では <filename>/etc/shadow</filename>) に対する監視を監査システムに設定しています。このファイルに対するアクセス許可要求に関わるすべてのシステムコールが、分析の対象となります。</para>
    </callout>
    <callout arearefs="co-aurules-fsmode">
     <para>このルールは <filename>/etc</filename> ディレクトリに対する監視を追加していて、読み込みと実行のアクセスに対するフィルタリングを設定 ( <literal>-p rx</literal> ) しています。これら 2 種類の許可に関わるシステムコールが分析の対象となります。ディレクトリに対する監視では、新しいファイルの作成と既存のファイルの削除のみが記録の対象となります。特定のディレクトリ内にあるファイルに対して、より詳しいイベントを監視したい場合は、それぞれのファイルに対してルールを作成してください。ただし、監視を設定する前に、あらかじめファイルが存在していなければなりません。なお、ファイル作成時点からの監査には対応していません。</para>
    </callout>
    <callout arearefs="co-aurules-fskey">
     <para>このルールは、 <filename>/etc/passwd</filename> ファイルに対する監視を追加しています。このとき、読み込みと書き込み、実行と属性変更を監視しています。 <literal>-k</literal> オプションを指定すると、後から特定のイベントを検索する (たとえば <command>ausearch</command>など) 目的で、監査ログ内にキーを書き込むことができます。なお、複数のルールに対して同じキーを指定しておくことで、それらをまとめて出力することもできるようになります。逆に、 1 つのルールに複数のキーを設定することもできます。</para>
    </callout>
   </calloutlist>
  </example>

  <para>システムコールの監査では、アプリケーションよりも下のレベルで、システムの動作を追跡することができます。これらのルールを設計する際は、多数のシステムコールに対して監査を行うと、システムの負荷が上昇するだけでなく、ディスク領域も不足する危険性があることに注意してください。追跡対象のイベントと、それらのフィルタリング方法については、より具体的に設定するようにしてください。</para>

  <example xml:id="ex-audit-rules-syscall">
   <title>監査ルール例: システムコールの監査</title>
<screen>-a exit,always -S mkdir<co xml:id="co-aurules-scalladd"/>
-a exit,always -S access -F a1=4<co xml:id="co-aurules-scallfilter"/>
-a exit,always -S ipc -F a0=2<co xml:id="co-aurules-scallipc"/>
-a exit,always -S open -F success!=0<co xml:id="co-aurules-scalls"/>
-a task,always -F auid=0<co xml:id="co-aurules-scalltask"/>
-a task,always -F uid=0 -F auid=501 -F gid=wheel<co xml:id="co-aurules-scallsu"/></screen>
  </example>

  <calloutlist>
   <callout arearefs="co-aurules-scalladd">
    <para>このルールは <systemitem>mkdir</systemitem> システムコールに対する監査を設定しています。 <literal>-a</literal> オプションは、システムコールルールを追加するためのオプションです。この監査は、 <systemitem>mkdir</systemitem> システムコールが実行されるたびに毎回 ( <literal>exit</literal> , <literal>always</literal> ) 行われます。また、 <literal>-S</literal> オプションでは、このルールの適用先となるシステムコール名を指定しています。</para>
   </callout>
   <callout arearefs="co-aurules-scallfilter">
    <para>このルールは access システムコールに対する監査を設定していますが、システムコールの 2 番目のパラメータ ( <literal>mode</literal> ) が <literal>4</literal> ( <literal>R_OK</literal> ) である場合にのみ監査を行っています。 <literal>exit,always</literal> は監査システムに対して、このシステムコールへの突入時に監査コンテキストを追加し、監査発生時にレポートを書き出すように指定しています。</para>
   </callout>
   <callout arearefs="co-aurules-scallipc">
    <para>このルールは IPC 多重化システムコールに対して監査コンテキストを設定しています。特定の <literal>ipc</literal> システムコールは最初の syscall パラメータとして渡され、 <option>-F a0=<replaceable>IPC_コール番号</replaceable></option> の指定で選択することができます。</para>
   </callout>
   <callout arearefs="co-aurules-scalls">
    <para>このルールは open システムコールが失敗した場合に対する監査を設定しています。</para>
   </callout>
   <callout arearefs="co-aurules-scalltask">
    <para>このルールはタスクルール (キーワード: <literal>task</literal> ) の例です。これはこれまでのルールとは異なり、 fork や clone されるプロセスに適用されます。これらの種類のイベントにフィルタを設定したい場合は、 fork の時点で既知の状態にあるフィールドのみを使用することができます。具体的には UID, GID, AUID です。この例では、監査 ID が <literal>0</literal> であるすべてのタスクに対して監査を行っています。</para>
   </callout>
   <callout arearefs="co-aurules-scallsu">
    <para>最後のルールはフィルタを複雑に設定した場合の例です。すべてのフィルタオプションが組み合わせられていて、それらを論理積 (AND) で結んでいます。つまり、このルールは監査 ID が <literal>501</literal> であり、 &rootuser; で実行され、かつグループが <literal>wheel</literal> であるものに適用されます。監査 ID はユーザのログイン時にプロセスに対して設定されます。この ID は、そのユーザの初期プロセスから起動されたすべての子プロセスに渡されます。ユーザが自身の識別情報を変更した場合でも、監査 ID は変わらずそのままであり続けるため、元のユーザの動きをそのまま追跡できることになります。</para>
   </callout>
  </calloutlist>

  <tip>
   <title>システムコールパラメータのフィルタリングについて</title>
   <para>システムコールパラメータのフィルタリングについて、詳しくは <xref linkend="sec-audit-scenipc"/> をお読みください。</para>
  </tip>

  <para>監査システムにはルールを追加するだけでなく、ルールを削除することもできます。ルール全体を一括で削除することができるほか、個別のシステムコールルールやファイル／ディレクトリの監視ルールを削除することができます:</para>

  <example xml:id="ex-audit-ruledel">
   <title>監査ルールとイベントの削除</title>
<screen>-D<co xml:id="co-aurules-d"/>
-d exit,always -S mkdir<co xml:id="co-aurules-scalldel"/>
-W /etc<co xml:id="co-aurules-fsdel"/></screen>
  </example>

  <calloutlist>
   <callout arearefs="co-aurules-d">
    <para>監査ルールのキューを消去して、既存のルールをすべて削除します。このルールは <filename>/etc/audit/audit.rules</filename> 内の冒頭で使用すべきもので、ルールを適用し直す際に、それまでに存在したルールをいったん削除するために設定します。もちろん <command>auditctl</command> <option>-D</option> のように入力して実行し、 <command>autrace</command> を実行する前に <filename>audit.rules</filename> 内にある既存のトレース規則をいったん削除しておくような使い方もできます。</para>
   </callout>
   <callout arearefs="co-aurules-scalldel">
    <para>このルールでは、システムコールのルールを削除しています。ルールキューから削除する必要のあるシステムコールを指定する場合は、その前に <literal>-d</literal> オプションを指定する必要があるほか、 <literal>-d</literal> は正確にマッチするものでなければなりません。</para>
   </callout>
   <callout arearefs="co-aurules-fsdel">
    <para>このルールでは、監査システムのルールキューから <filename>/etc</filename> ディレクトリに対するルールを破棄するよう指定しています。このルール削除では、パーミッションのフィルタリングやキーのオプション指定にかかわらず、すべての <filename>/etc</filename> を含むディレクトリの監視を削除します。</para>
   </callout>
  </calloutlist>

  <para>現時点での監査設定で使用しているルールの概要を知りたい場合は、 <command>auditctl</command> <option>-l</option> と入力して実行します。このコマンドは、 1 ルールあたり 1 行で表示します。</para>

  <example>
   <title><command>auditctl</command> <option>-l</option> によるルール一覧の表示</title>
<screen>exit,always watch=/etc perm=rx
exit,always watch=/etc/passwd perm=rwxa key=fk_passwd
exit,always watch=/etc/shadow perm=rwxa
exit,always syscall=mkdir
exit,always a1=4 (0x4) syscall=access
exit,always a0=2 (0x2) syscall=ipc
exit,always success!=0 syscall=open</screen>
  </example>

  <note>
   <title>フィルタルールの作成について</title>
   <para>様々なフィルタオプションを組み合わせることで、より洗練された監査ルールを構築することができます。監査フィルタルールを構築する際に利用可能なオプションのほか、一般的な監査ルールに関する詳細については、 <command>auditctl(8)</command> のマニュアルページをお読みください。</para>
  </note>
 </sect1>
 <sect1 xml:id="sec-audit-aureport">
  <title>監査ログの仕組みとレポートの生成</title>

  <para><command>aureport</command> ユーティリティが何かをするものなのかを知るには、まず監査デーモンが生成するログの構造について知っておく必要があるほか、イベント内にどのような情報が存在するのかを知っておく必要があります。これにより、要件に対応できる最適なレポートタイプを判断することができるようになります。</para>

  <sect2 xml:id="sec-audit-aureport-ustand">
   <title>監査ログの仕組み</title>
   <para>下記の例には、監査デーモンが記録した 2 種類の典型的なイベントと、それらの証跡が示されています。監査ログは、ローテーションしたものを含め、 <filename>/var/log/audit</filename> 内に保存されます。最初の例はシンプルな <command>less</command> コマンドの例です。 2 つ目の例は、監査デーモンが動作しているマシンに対して、ユーザがリモートからログインしようとしている際の PAM の動作に対して、記録されているログを示しています。</para>
   <para>
     The logs record two types of information: record types and event 
     fields. The record types are identified by <literal>type=</literal> in
     each log entry. Event fields are all other items on the left side of
     the equals signs. In the following examples, 
     <literal>type=SYSCALL</literal> and <literal>type=CWD</literal>are 
     record types, and <literal>arch=c000003e</literal> and
     <literal>syscall=2</literal> are event fields, followed by their values.
   </para>
   <para>
     Refer to the <filename>/usr/include/libaudit.h</filename> file (from the
     <package>audit-devel</package> package) to see
     a complete list of record types and their definitions.
   </para>
   <para>
     Run the <command>ausyscall --dump</command> command to see a table of 
     syscall numbers, and what they represent:
   </para>
   <screen>&prompt.user;ausyscall --dump
Using x86_64 syscall table:
0       read
1       write
2       open
3       close
4       stat
5       fstat
[...]</screen>
   <para>下記の例には、監査デーモンが記録した 2 種類の典型的なイベントと、それらの証跡が示されています。監査ログは、ローテーションしたものを含め、 <filename>/var/log/audit</filename> 内に保存されます。最初の例はシンプルな <command>less</command> コマンドの例です。 2 つ目の例は、監査デーモンが動作しているマシンに対して、ユーザがリモートからログインしようとしている際の PAM の動作に対して、記録されているログを示しています。</para>
   <example xml:id="ex-audit-aureport-logtrail">
    <title>シンプルな監査イベント例: 監査ログの表示</title>
<screen>type=SYSCALL msg=audit(1234874638.599:5207): arch=c000003e syscall=2 success=yes exit=4 a0=62fb60 a1=0 a2=31 a3=0 items=1 ppid=25400 pid
=25616 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts1 ses=1164 comm="less" exe="/usr/bin/less" key="doc_log"
type=CWD msg=audit(1234874638.599:5207):  cwd="/root"
type=PATH msg=audit(1234874638.599:5207): item=0 name="/var/log/audit/audit.log" inode=1219041 dev=08:06 mode=0100644 ouid=0 ogid=0 rdev=00:00</screen>
   </example>
   <para>上記のイベントは <command>less /var/log/audit/audit.log</command> を実行した場合のログで、 3 種類のメッセージが記録されています。これらのすべては密接にリンクしているため、その他の情報が無ければ意味を理解するのが難しいものと思います。最初のメッセージには下記の情報が記録されています:</para>
   <variablelist>
    <varlistentry>
     <term><literal>type</literal></term>
     <listitem>
      <para>記録されたイベントの種類を示しています。この場合は <literal>SYSCALL</literal> という種類で、システムコールによる記録であることを示しています。それ以外には <literal>CWD</literal> という種類のイベントもあり、これはシステムコール時点でのカレントディレクトリを示しています。次の <literal>PATH</literal> という種類のイベントは、システムコールに渡されたパスに関する情報が示されています。 open システムコールは 1 つのパラメータを取るシステムコールであることから、 <literal>PATH</literal> イベントも 1 つだけ生成されます。ここで重要となるのが、 <literal>PATH</literal> イベントはパス名の文字列パラメータを報告するだけで、それ以外の解釈については何も行わないものである点です。そのため、相対パスを指定した場合は、 <literal>CWD</literal> のイベントで示されたカレントディレクトリの情報とあわせて、手作業で絶対パスに戻さなければならないことになります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>msg</literal></term>
     <listitem>
<!-- hint: Unix time: 1175176190.105 = Thu Mar 29 15:49:50 2007 -->
<!-- perl -le 'print scalar localtime ...' -->
      <para>括弧内にはメッセージ ID が書かれています。メッセージ ID は 2 種類のパーツから構成されていて、 <literal>:</literal> の前は Unix エポックタイムを、後ろは実際のイベント ID を表しています。同じシステムコール内であれば、同じイベント ID が割り当てられます。アプリケーションがさらに別のシステムコールを行うと、イベント ID が新たに割り当てられます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>arch</literal></term>
     <listitem>
      <para>システムコールに対応する CPU アーキテクチャを示しています。この情報は <command>ausearch</command> コマンドでログを検索する際、 <option>-i</option> オプションを指定するとデコードすることができます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>syscall</literal></term>
     <listitem>
      <para>このシステムコールに対して <command>strace</command> で表示することのできる、システムコールの種類を表しています。このデータは <filename>/usr/include/asm/unistd.h</filename> ファイル内に示されていて、アーキテクチャによって番号体系が異なります。このアーキテクチャでは、 <literal>syscall=2</literal> は open システムコール (詳しくは <command>man open(2)</command> をお読みください) を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>success</literal></term>
     <listitem>
      <para>システムコールが成功したか、失敗したかを示しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>exit</literal></term>
     <listitem>
      <para>システムコールの返り値を表しています。この例では <command>open</command> システムコールに対する返り値ですが、これは作成されたファイルディスクリプタ番号を表しています。返り値の意味はシステムコールによって異なります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>a0</literal> から <literal>a3</literal></term>
     <listitem>
      <para>数値形式で表現された、システムコールの最初の 4 つのパラメータです。これらはシステムコールによって異なる解釈になります。この例 (<command>open</command> システムコール) では、下記のように解釈します:</para>
<screen>a0=62fb60 a1=8000 a2=31 a3=0</screen>
      <para><literal>a0</literal> はパス名の開始アドレスを表しています。 <literal>a1</literal> はフラグを表していて、 16 進数の <literal>8000</literal> は 8 進数でいうと <literal>100000</literal> にあたることから、 <literal>O_LARGEFILE</literal> というフラグを指定していることになります。また <literal>a2</literal> はモード指定で、 <literal>O_CREAT</literal> を指定していないことから、使用していないパラメータであることがわかります。 <remark>jsegitz 2014-07-22: a2 is 31, not unused</remark> <literal>a3</literal> は <command>open</command> システムコールでは使用していないパラメータです。それぞれのパラメータの意味については、マニュアルページをお読みください。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>items</literal></term>
     <listitem>
      <para>アプリケーションに渡された文字列の数を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ppid</literal></term>
     <listitem>
      <para>このプロセスの親のプロセス ID を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>pid</literal></term>
     <listitem>
      <para>このプロセスのプロセス ID を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>auid</literal></term>
     <listitem>
      <para>監査 ID を表しています。監査 ID はユーザのログイン時にプロセスに対して設定されます。この ID は、そのユーザの初期プロセスから起動されたすべての子プロセスに渡されます。ユーザが自身の識別情報を変更した場合 (たとえば &rootuser; になった場合) でも、監査 ID は変わらずそのままであり続けるため、元のユーザの動きをそのまま追跡できることになります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>uid</literal></term>
     <listitem>
      <para>プロセスを起動したユーザの実ユーザ ID を表しています。この場合は <literal>0</literal> であることから、 &rootuser; であることになります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>gid</literal></term>
     <listitem>
      <para>プロセスを起動したユーザの実グループ ID を表しています。この場合は <literal>0</literal> であることから、 &rootuser; であることになります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>euid</literal> , <literal>suid</literal> , <literal>fsuid</literal></term>
     <listitem>
      <para>プロセスを起動したユーザの実効ユーザ ID, Set User ID, ファイルシステムユーザ ID をそれぞれ表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>egid</literal> , <literal>sgid</literal> , <literal>fsgid</literal></term>
     <listitem>
      <para>プロセスを起動したユーザの実効グループ ID, Set Group ID, ファイルシステムグループ ID をそれぞれ表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>tty</literal></term>
     <listitem>
      <para>アプリケーションを起動した端末を表しています。この場合は、 SSH セッション内で疑似端末 (pts) を使用していることを表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ses</literal></term>
     <listitem>
      <para>ログインセッション ID を表しています。このプロセス属性はユーザのログイン時に設定されるほか、どのプロセスも特定のユーザログインに結びつけることができます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>comm</literal></term>
     <listitem>
      <para>タスクリストに表示されるアプリケーション名を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>exe</literal></term>
     <listitem>
      <para>バイナリプログラムに対する解決済みパス名を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>subj</literal></term>
     <listitem>
      <para><systemitem class="daemon">auditd</systemitem> は、プロセスに対して &aa; などのセキュリティコンテキストが割り当てられている場合、その内容を記録することができます。この場合は <literal>unconstrained</literal> になっていますが、これは &aa; でプロセスが保護されていないことを表しています。プロセスが何らかの制限を受けた場合、バイナリパス名と &aa; のプロファイルモードも記録されます。</para>
      <remark>jsegitz 2014-07-22: doesn't show in the example</remark>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>key</literal></term>
     <listitem>
      <para>多数のディレクトリやファイルに対して監査を行っている際、監視対象の判別用にキー文字列を指定することができます。これらのキーを <command>ausearch</command> に指定すると、そのキーに合致するもののみを表示することができます。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para><command>less</command> コマンドが生成した 2 つ目のメッセージには、 <command>less</command> コマンドを実行した時点でのカレントディレクトリを表しています。</para>
   <para>3 つ目のメッセージの意味は下記のとおりです (<literal>type</literal> と <literal>message</literal> のフラグは既に説明しているとおりです):</para>
   <variablelist>
    <varlistentry>
     <term><literal>item</literal></term>
     <listitem>
      <para>この例では、 <literal>item</literal> は <literal>a0</literal> パラメータを表しています。ここには元々の <literal>SYSCALL</literal> メッセージ内に対応する、パス名が書かれています。 <command>cp</command> や <command>mv</command> などのように、複数のパスパラメータを指定する場合は、さらに <literal>PATH</literal> イベントが生成されて記録されることになります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>name</literal></term>
     <listitem>
      <para>open システムコールのパラメータとして渡されたパス名を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>inode</literal></term>
     <listitem>
      <para><literal>name</literal> に対応する inode 番号を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>dev</literal></term>
     <listitem>
      <para>ファイルが保存されているデバイスを表しています。この場合、 <literal>08:06</literal> と書かれていますので、 <literal>/dev/sda1</literal> もしくは <quote>最初の IDE デバイス上の最初のパーティション</quote> であることを示しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>mode</literal></term>
     <listitem>
      <para>ファイルのアクセス許可を数値で表現したものです。この場合は &rootuser; が読み書きの権限を持ち、グループ (&rootuser;) は読み込みのみ、その他のユーザはファイルへのアクセス権を持たない設定になっています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>ouid</literal> と <literal>ogid</literal></term>
     <listitem>
      <para>inode が指し示すものに対する UID と GID を表しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>rdev</literal></term>
     <listitem>
      <para>この例では意味を持たないものです。 <literal>rdev</literal> はブロックデバイスやキャラクタデバイスの場合にのみ意味を持つもので、ファイルでは意味を持ちません。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para><xref linkend="ex-audit-aureport-sshd"/> には、 SSH 接続を受け付けた際の監査イベントを示しています。ほとんどのメッセージは PAM スタックに関連するもので、 SSH PAM の処理における様々なステージを表しています。また、いくつかの監査メッセージは入れ子になっていて、それぞれの PAM の処理段階を示しています。監査システムでは PAM の処理についても記録を行いますが、独自のメッセージタイプが割り当てられます:</para>
   <example xml:id="ex-audit-aureport-sshd">
    <title>複雑な監査イベント例: SSH でのログイン</title>
<screen>type=USER_AUTH msg=audit(1234877011.791:7731): user pid=26127 uid=0 <co xml:id="co-audit-sshd-auth"/>
auid=4294967295 ses=4294967295 msg='op=PAM:authentication acct="root" exe="/usr/sbin/sshd"
(hostname=&wsIname;, addr=&wsIip;, terminal=ssh res=success)'
type=USER_ACCT msg=audit(1234877011.795:7732): user pid=26127 uid=0 <co xml:id="co-audit-sshd-acct"/>
auid=4294967295 ses=4294967295 msg='op=PAM:accounting acct="root" exe="/usr/sbin/sshd"
(hostname=&wsIname;, addr=&wsIip;, terminal=ssh res=success)'
type=CRED_ACQ msg=audit(1234877011.799:7733): user pid=26125 uid=0 <co xml:id="co-audit-sshd-acq"/>
auid=4294967295 ses=4294967295 msg='op=PAM:setcred acct="root" exe="/usr/sbin/sshd"
(hostname=&wsIname;, addr=&wsIip;, terminal=/dev/pts/0 res=success)'
type=LOGIN msg=audit(1234877011.799:7734): login pid=26125 uid=0
old auid=4294967295 new auid=0 old ses=4294967295 new ses=1172
type=USER_START msg=audit(1234877011.799:7735): user pid=26125 uid=0 <co xml:id="co-audit-sshd-start"/>
auid=0 ses=1172 msg='op=PAM:session_open acct="root" exe="/usr/sbin/sshd"
(hostname=&wsIname;, addr=&wsIip;, terminal=/dev/pts/0 res=success)'
type=USER_LOGIN msg=audit(1234877011.823:7736): user pid=26128 uid=0 <co xml:id="co-audit-sshd-login"/>
auid=0 ses=1172 msg='uid=0: exe="/usr/sbin/sshd"
(hostname=&wsIname;, addr=&wsIip;, terminal=/dev/pts/0 res=success)'
type=CRED_REFR msg=audit(1234877011.828:7737): user pid=26128 uid=0 <co xml:id="co-audit-sshd-refr"/>
auid=0 ses=1172 msg='op=PAM:setcred acct="root" exe="/usr/sbin/sshd"
(hostname=&wsIname;, addr=&wsIip;, terminal=/dev/pts/0 res=success)'</screen>
   </example>
   <calloutlist>
    <callout arearefs="co-audit-sshd-auth">
     <para>リモートのホスト (&wsIname;, &wsIip;) から &rootuser; に対してユーザ認証が求められ、それが成功したことを PAM が報告しています。ここで使用されている端末は <literal>ssh</literal> になっています。</para>
    </callout>
    <callout arearefs="co-audit-sshd-acct">
     <para>PAM は、ユーザにログイン権限があることを確認した、と報告しています。</para>
    </callout>
    <callout arearefs="co-audit-sshd-acq">
     <para>PAM はログインにあたって適切な資格情報が必要である旨を報告するとともに、端末が通常の端末 ( <literal>/dev/pts0</literal> ) に変更されたことを報告しています。</para>
    </callout>
    <callout arearefs="co-audit-sshd-start">
     <para>PAM は、 &rootuser; に対してセッションを開くことができたことを報告しています。</para>
    </callout>
    <callout arearefs="co-audit-sshd-login">
     <para>ユーザのログインが成功したことを示しています。このイベントは <command>aureport</command> <option>-l</option> でユーザログイン情報を報告させる際に、使用されるイベントです。</para>
    </callout>
    <callout arearefs="co-audit-sshd-refr">
     <para>PAM は資格情報を再取得したことを報告しています。</para>
    </callout>
   </calloutlist>
  </sect2>

  <sect2 xml:id="sec-audit-aureport-gen">
   <title>独自の監査レポートの生成</title>
   <para><filename>/var/log/audit</filename> ディレクトリ内にある未加工の監査レポートは、非常にかさばって理解しにくいものになってしまっています。必要なメッセージを簡単に取得できるようにするには、 <command>aureport</command> ユーティリティを利用して、独自にレポートを作成してください。</para>
   <para>下記の利用例では、 <command>aureport</command> で生成することのできる、いくつかのレポートタイプについて説明しています:</para>
   <variablelist>
    <varlistentry>
     <term>他のファイルからの監査ログ読み込み</term>
     <listitem>
      <para>監査ログを他のマシンに移動させた場合や、それぞれのマシンに接続することなく、ローカルのマシン内で複数のマシンの監査ログを分析したりしたい場合は、対象となるログファイルをローカルに移動したあと、 <command>aureport</command> を利用してローカルで分析してください:</para>
<screen>&prompt.sudo;<command>aureport -if myfile</command>

Summary Report
======================
Range of time in logs: 2009年02月03日 14:13:38.225 - 2009年02月17日 14:52:27.971
Selected time for report: 2009年02月03日 14:13:38 - 2009年02月17日 14:52:27.971
Number of changes in configuration: 13
Number of changes to accounts, groups, or roles: 0
Number of logins: 6
Number of failed logins: 13
Number of authentications: 7
Number of failed authentications: 573
Number of users: 1
Number of terminals: 9
Number of host names: 4
Number of executables: 17
Number of files: 279
Number of AVC's: 0
Number of MAC events: 0
Number of failed syscalls: 994
Number of anomaly events: 0
Number of responses to anomaly events: 0
Number of crypto events: 0
Number of keys: 2
Number of process IDs: 1211
Number of events: 5320</screen>
      <para>上記のコマンドでは <command>aureport</command> に何もパラメータを指定しておらず、 <filename>myfile</filename> 内に含まれているログ情報から、標準的で一般的な概要レポートのみを生成するように指定しています。より詳しいレポートを作成したい場合は、 <option>-if</option> オプションに加えて、必要なオプションを指定してください。たとえば特定の時間帯のログインレポートのみを生成したい場合は、下記のように入力して実行します:</para>
<screen>&prompt.sudo;<command>aureport -l -ts 14:00 -te 15:00 -if myfile</command>

Login Report
============================================
# date time auid host term exe success event
============================================
1. 2017年02月09日 14:21:09 root: &wsIip; sshd /usr/sbin/sshd no 7718
2. 2017年02月09日 14:21:15 0 &wsI; /dev/pts/3 /usr/sbin/sshd yes 7724</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>数値表現の文字列変換</term>
     <listitem>
      <para>ユーザ ID などの情報は数値で出力されます。これらを読みやすいテキスト形式に変換するには、 <command>aureport</command> コマンドに <option>-i</option> オプションを追加してください。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>大まかな概要レポートの作成</term>
     <listitem>
      <para>現在の監査統計情報 (イベント数, ログイン数, プロセス数など) のみを知りたい場合は、 <command>aureport</command> に何もパラメータを指定せずに実行してください。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>失敗イベントの概要レポートの作成</term>
     <listitem>
      <para>純粋な <command>aureport</command> の概要統計情報を失敗イベントのみの統計情報に変更したい場合は、 <command>aureport</command> <option>--failed</option> のように入力して実行します:</para>
<screen>&prompt.sudo;<command>aureport --failed</command>

Failed Summary Report
======================
Range of time in logs: 2009年02月03日 14:13:38.225 - 2009年02月17日 14:57:35.183
Selected time for report: 2009年02月03日 14:13:38 - 2009年02月17日 14:57:35.183
Number of changes in configuration: 0
Number of changes to accounts, groups, or roles: 0
Number of logins: 0
Number of failed logins: 13
Number of authentications: 0
Number of failed authentications: 574
Number of users: 1
Number of terminals: 5
Number of host names: 4
Number of executables: 11
Number of files: 77
Number of AVC's: 0
Number of MAC events: 0
Number of failed syscalls: 994
Number of anomaly events: 0
Number of responses to anomaly events: 0
Number of crypto events: 0
Number of keys: 2
Number of process IDs: 708
Number of events: 1583</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>成功イベントの概要レポートの作成</term>
     <listitem>
      <para>純粋な <command>aureport</command> の概要統計情報を成功イベントのみの統計情報に変更したい場合は、 <command>aureport</command> <option>--success</option> のように入力して実行します:</para>
<screen>&prompt.sudo;<command>aureport --success</command>

Success Summary Report
======================
Range of time in logs: 2009年02月03日 14:13:38.225 - 2009年02月17日 15:00:01.535
Selected time for report: 2009年02月03日 14:13:38 - 2009年02月17日 15:00:01.535
Number of changes in configuration: 13
Number of changes to accounts, groups, or roles: 0
Number of logins: 6
Number of failed logins: 0
Number of authentications: 7
Number of failed authentications: 0
Number of users: 1
Number of terminals: 7
Number of host names: 3
Number of executables: 16
Number of files: 215
Number of AVC's: 0
Number of MAC events: 0
Number of failed syscalls: 0
Number of anomaly events: 0
Number of responses to anomaly events: 0
Number of crypto events: 0
Number of keys: 2
Number of process IDs: 558
Number of events: 3739</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>概要レポートの作成</term>
     <listitem>
      <para>専用の概要レポート (全体概要／失敗概要／成功概要) に加えて、 <option>--summary</option> オプションと他のオプションを併用することで、指定した分野のみの概要レポートを作成することもできます。ただし、すべてのオプションがレポートに対応しているわけではありません。この例では、ユーザのログインイベントに関する概要レポートを作成しています:</para>
<screen>&prompt.sudo;<command>aureport -u -i --summary</command>

User Summary Report
===========================
total  auid
===========================
5640  root
13  &exampleuser_plain;
3  &exampleuserII_plain;</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>イベント一覧レポートの作成</term>
     <listitem>
      <para>監査デーモンが記録したイベントの概要を取得するには、 <command>aureport</command> <option>-e</option> コマンドを使用します。このコマンドは順序番号付きのリストで、すべてのイベントに対する日付と時刻、イベント番号と種類、そして監査 ID を出力します。</para>
<screen>&prompt.sudo;aureport -e -ts 14:00 -te 14:21

Event Report
===================================
# date time event type auid success
===================================
1. 2009年02月17日 14:20:27 7462 DAEMON_START 0 yes
2. 2009年02月17日 14:20:27 7715 CONFIG_CHANGE 0 yes
3. 2009年02月17日 14:20:57 7716 USER_END 0 yes
4. 2009年02月17日 14:20:57 7717 CRED_DISP 0 yes
5. 2009年02月17日 14:21:09 7718 USER_LOGIN -1 no
6. 2009年02月17日 14:21:15 7719 USER_AUTH -1 yes
7. 2009年02月17日 14:21:15 7720 USER_ACCT -1 yes
8. 2009年02月17日 14:21:15 7721 CRED_ACQ -1 yes
9. 2009年02月17日 14:21:15 7722 LOGIN 0 yes
10. 2009年02月17日 14:21:15 7723 USER_START 0 yes
11. 2009年02月17日 14:21:15 7724 USER_LOGIN 0 yes
12. 2009年02月17日 14:21:15 7725 CRED_REFR 0 yes</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>すべてのプロセスイベントからのレポート作成</term>
     <listitem>
      <para>プロセスの観点からログを分析したい場合は、 <command>aureport</command> <option>-p</option> コマンドを使用します。このコマンドは順序番号付きのリストで、プロセス関連のイベントを列挙します。これには日付と時刻、プロセス ID と実行ファイルの名前、システムコールと監査 ID 、イベント番号が含まれます。</para>
<screen><command>aureport -p</command>

Process ID Report
======================================
# date time pid exe syscall auid event
======================================
1. 2009年02月13日 15:30:01 32742 /usr/sbin/cron 0 0 35
2. 2009年02月13日 15:30:01 32742 /usr/sbin/cron 0 0 36
3. 2009年02月13日 15:38:34 32734 /usr/lib/gdm/gdm-session-worker 0 -1 37</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>すべてのシステムコールイベントからのレポート作成</term>
     <listitem>
      <para>システムコールの観点からログを分析したい場合は、 <command>aureport</command> <option>-s</option> コマンドを使用します。このコマンドは順序番号付きのリストで、システムコール関連のイベントを列挙します。これには日付と時刻、システムコールの回数とそのコールを使用したコマンドの名前、監査 ID とイベント番号が含まれます。</para>
<screen>&prompt.sudo;<command>aureport -s</command>

Syscall Report
=======================================
# date time syscall pid comm auid event
=======================================
1. 2009年02月16日 17:45:01 2 20343 cron -1 2279
2. 2009年02月16日 17:45:02 83 20350 mktemp 0 2284
3. 2009年02月16日 17:45:02 83 20351 mkdir 0 2285</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>すべての実行ファイルイベントからのレポート作成</term>
     <listitem>
      <para>実行ファイルの観点からログを分析したい場合は、 <command>aureport</command> <option>-x</option> コマンドを使用します。このコマンドは順序番号付きのリストで、実行ファイル関連のイベントを列挙します。これには日付と時刻、実行ファイルの名前と実行していた端末、実行していたホストと監査 ID 、イベント番号が含まれます。</para>
<screen><command>aureport -x</command>

Executable Report
====================================
# date time exe term host auid event
====================================
1. 2009年02月13日 15:08:26 /usr/sbin/sshd sshd &wsIip; -1 12
2. 2009年02月13日 15:08:28 /usr/lib/gdm/gdm-session-worker :0 ? -1 13
3. 2009年02月13日 15:08:28 /usr/sbin/sshd ssh &wsIip; -1 14</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ファイルに関するレポート作成</term>
     <listitem>
      <para>ファイルアクセスの観点からログを分析したい場合は、 <command>aureport</command> <option>-f</option> コマンドを使用します。このコマンドは順序番号付きのリストで、アクセスしているファイル、アクセスに使用したシステムコールの数と成功可否、実行ファイルと監査 ID 、イベント番号が含まれます。</para>
<screen>&prompt.sudo;<command>aureport -f</command>

File Report
===============================================
# date time file syscall success exe auid event
===============================================
1. 2009年02月16日 17:45:01 /etc/shadow 2 yes /usr/sbin/cron -1 2279
2. 2009年02月16日 17:45:02 /tmp/ 83 yes /bin/mktemp 0 2284
3. 2009年02月16日 17:45:02 /var 83 no /bin/mkdir 0 2285</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ユーザに関するレポートの作成</term>
     <listitem>
      <para>システム内で、どのユーザが何の実行ファイルを実行させたのかを監査ログから調べ、レポートとしてまとめたい場合は、 <command>aureport</command> <option>-u</option> コマンドを使用します。このコマンドは順序番号付きのリストで、日付や時刻、監査 ID や使用した端末とホスト、実行ファイルの名前とイベント ID がそれぞれ示されます。</para>
<screen><command>aureport -u</command>

User ID Report
====================================
# date time auid term host exe event
====================================
1. 2009年02月13日 15:08:26 -1 sshd &wsIip; /usr/sbin/sshd 12
2. 2009年02月13日 15:08:28 -1 :0 ? /usr/lib/gdm/gdm-session-worker 13
3. 2009年02月13日 08:25:39 -1 ssh &wsIIip; /usr/sbin/sshd 14</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ログインに関するレポートの作成</term>
     <listitem>
      <para>マシンに対するログイン試行に着目してレポートを作成するには、 <command>aureport</command> <option>-l</option> コマンドを使用します。このコマンドは順序番号付きのリストで、日付や時刻、監査 ID や使用したホストおよび端末、実行ファイルの名前と試行の成功可否、イベント ID がそれぞれ含まれる、ログイン関連のレポートを生成します。</para>
<screen>&prompt.sudo;<command>aureport -l -i</command>

Login Report
============================================
# date time auid host term exe success event
============================================
1. 2009年02月13日 15:08:31 tux: &wsIip; sshd /usr/sbin/sshd no 19
2. 2009年02月16日 12:39:05 root: &wsIIip; sshd /usr/sbin/sshd no 2108
3. 2009年02月17日 15:29:07 geeko: ? tty3 /bin/login yes 7809</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>特定の時刻範囲に限定したレポート作成</term>
     <listitem>
      <para>特定の時刻範囲に限定してログを分析したい場合、たとえば 2009 年 2 月 16 日の日中時間帯のみを調べたい場合は、まず対象のデータが現在の <filename>audit.log</filename> 内に含まれているか、それとも既にローテーションされてしまったものかどうかを確認します。これは <command>aureport</command> <option>-t</option> を実行することで判別することができます。</para>
<screen><command>aureport -t</command>

Log Time Range Report
=====================
/var/log/audit/audit.log: 2009年02月03日 14:13:38.225 - 2009年02月17日 15:30:01.636</screen>
      <para>現在の <filename>audit.log</filename> ファイル内に必要な時間帯のデータがすべて含まれていれば、通常通りにレポートを作成します。そうでない場合は、 <command>aureport</command> コマンドに <option>-if</option> オプションを指定し、必要なデータを含むログファイルを指定します。</para>
      <para>あとは開始日時と終了日時を指定して、作成するレポートの種類を選ぶオプションを加えます。下記の例では、ログイン試行に着目してレポートを作成しています:</para>
<screen>&prompt.sudo;<command>aureport -ts 02/16/09 8:00 -te 02/16/09 18:00 -l</command>

Login Report
============================================
# date time auid host term exe success event
============================================
1. 2009年02月16日 12:39:05 root: &wsIip; sshd /usr/sbin/sshd no 2108
2. 2009年02月16日 12:39:12 0 &wsIip; /dev/pts/1 /usr/sbin/sshd yes 2114
3. 2009年02月16日 13:09:28 root: &wsIip; sshd /usr/sbin/sshd no 2131
4. 2009年02月16日 13:09:32 root: &wsIip; sshd /usr/sbin/sshd no 2133
5. 2009年02月16日 13:09:37 0 &wsIip; /dev/pts/2 /usr/sbin/sshd yes 2139</screen>
      <para>開始日時は <option>-ts</option> で指定します。指定した日時と同じか、それより後のイベントがレポート内に出力されます。日付部分を省略した場合、 <command>aureport</command> は <emphasis>今日</emphasis> を指定したものとして扱います。時刻部分を省略した場合は、日付の切り替わった深夜を開始時刻として指定したものとして扱います。<!-- NOTE: More explanations are needed for Japanese; date should be "month/day/year" format --> なお、日付は <replaceable>月</replaceable>/<replaceable>日</replaceable>/<replaceable>年</replaceable> の形式で指定することに注意してください。 <!-- fs 2016-11-17: /etc/sysconfig/audit has been removed without replacement Use the 24 clock notation rather than the 12 hour one and adjust the date format to your locale (specified in <filename>/etc/sysconfig/audit</filename> under <envar>AUDITD_LANG</envar>, default is <literal>en_US</literal>).--></para>
      <para>終了日時は <option>-te</option> で指定します。指定した日時と同じか、それより前のイベントがレポート内に出力されます。日付を省略した場合、 <command>aureport</command> は <emphasis>今日</emphasis> を指定したものとして扱います。また、時刻部分を省略した場合、 <command>aureport</command> は <emphasis>現在時刻</emphasis> を指定したものとして扱います。指定可能な書式は <option>-ts</option> と同じです。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>概要を除き、レポートは表形式で標準出力に出力されます。つまり、出力された情報を他のコマンドに取り込むことが用意であることになります。たとえば <xref linkend="sec-audit-auviz"/> で紹介されている可視化スクリプトを使用すると、監査デーモンが生成したデータをさらに詳しく処理することができます。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-audit-ausearch">
  <title><command>ausearch</command> による監査デーモンログへの問い合わせ</title>

  <para><command>aureport</command> では、システム内で何が起こっているのかを概要レベルで表示することができますが、特定のイベントの詳細までは追うことができません。特定のイベントを追跡したい場合は、 <command>ausearch</command> ツールを使用します。</para>

  <para><command>ausearch</command> コマンドは <filename>/var/log/audit/audit.log</filename> にある監査ログ内を検索するためのツールで、キーや語句などを条件に指定して検索することができます。ただし、すべてのレコードタイプに同じ項目が含まれているわけではないことに注意してください。たとえば <literal>PATH</literal> レコードの場合、 <literal>hostname</literal> や <literal>uid</literal> の項目はありません。</para>

  <para>検索を行う場合、必要なレコードをすべて抽出できるような適切な検索条件を指定してください。その一方、特定のレコードタイプを抽出したり、それに付随するその他の関連レコードを抽出したりすることもできます。これは、カーネル内の様々な箇所で、イベントに関連する複数のレコードを出力する仕組みであるためです。たとえば <command>open</command> システムコールの場合、 <literal>SYSCALL</literal> レコードだけでなく <literal>PATH</literal> レコードも同時に出力されます。</para>

  <tip>
   <title>複数の検索オプションの使用について</title>
   <para>複数のコマンドラインオプションを指定すると、それらは論理積 (AND) 演算子で結びつけられ、検索を絞り込む用途として使用することができます。</para>
  </tip>

  <variablelist>
   <varlistentry>
    <term>他のファイルからの監査ログ読み込み</term>
    <listitem>
     <para>監査ログを他のマシンに移動させた場合や、それぞれのマシンに接続することなく、ローカルのマシン内で複数のマシンの監査ログを分析したりしたい場合は、対象となるログファイルをローカルに移動したあと、 <command>ausearch</command> を利用してローカルで分析してください:</para>
<screen>&prompt.sudo;<command>ausearch -</command> <replaceable>オプション</replaceable> -if <replaceable>ファイル名</replaceable></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>数値表現の文字列変換</term>
    <listitem>
     <para>ユーザ ID などの情報は数値で出力されます。これらを読みやすいテキスト形式に変換するには、 <command>ausearch</command> コマンドに <option>-i</option> オプションを追加してください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>監査イベント ID での検索</term>
    <listitem>
     <para>既に監査レポートを作成している場合や、 <command>autrace</command> を実行している場合は、ログ内の特定のイベントに対して、証跡を分析する必要があります。 <xref linkend="sec-audit-aureport"/> で説明しているほとんどの種類のレポートには、出力内に監査イベント ID が含まれます。監査イベント ID は監査メッセージ ID の第 2 パートの部分ですが、ここには Unix エポックのタイムスタンプと監査イベント ID がコロン区切りで書かれています。また、同じシステムコール内であれば、同じイベント ID が割り当てられます。 <command>ausearch</command> でこのイベント ID を使用することで、ログ内のイベント証跡を取得することができます。</para>
     <para>下記のようにしてコマンドを使用してください:</para>
<screen>&prompt.sudo;<command>ausearch -a 5207</command>
----
time-&gt;Tue Feb 17 13:43:58 2009
type=PATH msg=audit(1234874638.599:5207): item=0 name="/var/log/audit/audit.log" inode=1219041 dev=08:06 mode=0100644 ouid=0 ogid=0 rdev=00:00
type=CWD msg=audit(1234874638.599:5207):  cwd="/root"
type=SYSCALL msg=audit(1234874638.599:5207): arch=c000003e syscall=2 success=yes exit=4 a0=62fb60 a1=0 a2=31 a3=0 items=1 ppid=25400 pid=25616 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts1 ses=1164 comm="less" exe="/usr/bin/less" key="doc_log"</screen>
     <para><command>ausearch</command> <option>-a</option> コマンドを使用すると、指定したイベント ID に関連するログ内のすべてのレコードを検索して、表示します。このオプションは、他のオプションと組み合わせて指定することもできます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>メッセージタイプによる検索</term>
    <listitem>
     <para>特定のメッセージタイプの監査レコードを検索するには、 <command>ausearch</command> <option>-m <replaceable>メッセージタイプ</replaceable></option> コマンドを実行します。指定できるメッセージタイプには、 <literal>PATH</literal> , <literal>SYSCALL</literal> , <literal>USER_LOGIN</literal> などがあります。メッセージタイプを指定せずに <command>ausearch</command> <option>-m</option> を実行すると、すべてのメッセージタイプの一覧を表示することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ログイン ID による検索</term>
    <listitem>
     <para>特定のログインユーザ ID に関連するレコードを表示するには、<command>ausearch</command> <option>-ul</option> コマンドを使用します。このコマンドは、指定したログインユーザ ID に関連し、ログインに成功したすべてのレコードを取得します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ユーザ ID による検索</term>
    <listitem>
     <para>特定の実ユーザ ID および実効ユーザ ID の両方に関連するレコードを表示するには、 <command>ausearch</command> <option>-ua</option> コマンドを使用します。特定の実ユーザ ID に関連するレコードを表示するには、 <command>ausearch</command> <option>-ui <replaceable>UID</replaceable></option> のように入力して実行します。特定の実効ユーザ ID に関連するレコードを表示するには、 <command>ausearch</command> <option>-ue <replaceable>EUID</replaceable></option> のように入力して実行します。実ユーザ ID での検索はプロセスを作成したユーザの ID を、実効ユーザ ID での検索は、そのプロセスを実行するのに必要なユーザ ID と権限の ID を意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>グループ ID による検索</term>
    <listitem>
     <para>特定の実グループ ID および実効グループ ID の両方に関連するレコードを表示するには、 <command>ausearch</command> <option>-ga</option> コマンドを使用します。特定の実グループ ID に関連するレコードを表示するには、 <command>ausearch</command> <option>-gi <replaceable>GID</replaceable></option> のように入力して実行します。特定の実効グループ ID に関連するレコードを表示するには、 <command>ausearch</command> <option>-ge <replaceable>EGID</replaceable></option> のように入力して実行します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>コマンドライン名による検索</term>
    <listitem>
     <para>特定のコマンドに関連するレコードを表示するには、 <command>ausearch</command> <option>-c <replaceable>コマンド名</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-c less</option> のように入力して実行すると、 <command>less</command> コマンドに関連するすべてのレコードを表示することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>実行ファイル名による検索</term>
    <listitem>
     <para>特定の実行ファイルに関連するレコードを表示するには、 <command>ausearch</command> <option>-x <replaceable>実行ファイルのパス</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-x /usr/bin/less</option> のように入力して実行すると、 <command>/usr/bin/less</command> の実行ファイルに関連するすべてのレコードを表示することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>システムコール名による検索</term>
    <listitem>
     <para>特定のシステムコールに関連するレコードを表示するには、 <command>ausearch</command> <option>-sc <replaceable>システムコール名</replaceable></option> コマンドを使用します。たとえば <command>ausearch -sc open</command> のように入力して実行すると、 <command>open</command> システムコールに関連するすべてのレコードを表示することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>プロセス ID による検索</term>
    <listitem>
     <para>特定のプロセス ID に関連するレコードを表示するには、 <command>ausearch</command> <option>-p <replaceable>プロセス_ID</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-p 13368</option> のように入力して実行すると、指定したプロセス ID に関連するすべてのレコードを表示することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>イベントもしくはシステムコールの成功可否による検索</term>
    <listitem>
     <para>システムコールの成功可否を指定してレコードを表示するには、 <command>ausearch</command> <option>-sv <replaceable>成功可否</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-sv yes</option> のように入力して実行すると、成功したシステムコールに関連するすべてのレコードを表示することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ファイル名による検索</term>
    <listitem>
     <para>ファイル名を指定してレコードを表示するには、 <command>ausearch</command> <option>-f <replaceable>ファイル名</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-f /foo/bar</option> のように入力して実行すると、 <filename>/foo/bar</filename> ファイルに関連するすべてのレコードを表示することができます。なお、ファイル名だけの指定でも問題なく動作しますが、相対パスでの指定はできません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>端末による検索</term>
    <listitem>
     <para>特定の端末に関連するレコードを表示するには、 <command>ausearch</command> <option>-tm <replaceable>端末名</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-tm ssh</option> のように入力して実行すると、 SSH 端末に関連するすべてのレコードを表示することができますし、 <command>ausearch</command> <option>-tm tty</option> のように入力して実行すると、コンソールに関連するすべてのレコードを表示することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ホスト名による検索</term>
    <listitem>
     <para>特定のホストに関連するレコードを表示するには、 <command>ausearch</command> <option>-hn <replaceable>ホスト名</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-hn &wsIname;</option> のように入力して実行します。ホスト名や完全修飾ホスト名、ネットワークアドレスのいずれかを指定することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>キー項目による検索</term>
    <listitem>
     <para>あらかじめ特定の種類のイベントを識別するために設定して記録しておいたキー項目を指定してレコードを表示するには、 <command>ausearch</command> <option>-k <replaceable>キー項目</replaceable></option> コマンドを使用します。たとえば <command>ausearch</command> <option>-k CFG_etc</option> のように入力して実行すると、 <literal>CFG_etc</literal> というキーを含むレコードのみを表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><!-- NOTE: Does it work? --> 単語による検索</term>
    <listitem>
     <para><!-- NOTE: "-w" is used to set a string-based search to the whole-word match? --> <!-- View records that contain a certain string assigned in the audit rule set to identify events of a particular type. The whole string will be matched on file name, host name, and terminal. Use the <command>ausearch</command> <option>-w <replaceable>WORD</replaceable></option> . --></para>
     <remark>jsegitz 2014-07-23: also matches SELinux context</remark>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>特定の時刻範囲に限定した検索</term>
    <listitem>
     <para><option>-ts</option> と <option>-te</option> の各オプションを指定することで、特定の時間帯範囲のものを検索することができるようになります。 <option>-ts</option> オプションでは開始日時を、 <option>-te</option> オプションでは終了日時をそれぞれ指定します。これらのオプションは、上述の任意のオプションと組み合わせて使用することができます。また、使用方法は <command>aureport</command> と同じです。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-audit-autrace">
  <title><command>autrace</command> によるプロセスの解析</title>

  <para>監査システムでは、設定したルールを利用してシステムを監視するだけでなく、 <command>autrace</command> コマンドを使用することで、特定のプロセス専用の監査を実施することもできます。 <command>autrace</command> は <command>strace</command> コマンドのように動作するコマンドですが、少し異なる情報を採取します。また、 <command>autrace</command> の出力は <filename>/var/log/audit/audit.log</filename> に書き込まれ、標準的な監査ログ項目と同様の書式で出力されます。</para>

  <para>プロセスに対して <command>autrace</command> を実行する前に、まずはキュー内から監査ルールすべてを削除して、 <command>autrace</command> 自身の監査と衝突しないようにしておいてください。監査ルールの削除は <command>auditctl</command> <option>-D</option> で行います。これにより、すべての通常監査が停止します。</para>

<screen>&prompt.sudo;<command>auditctl -D</command>

No rules

<command>autrace /usr/bin/less</command>

Waiting to execute: /usr/bin/less
Cleaning up...
No rules
Trace complete. You can locate the records with 'ausearch -i -p 7642'</screen>

  <para><command>autrace</command> で実行ファイルを指定する際には、必ずフルパスで指定してください。追跡が完了すると、 <command>autrace</command> はトレースのイベント ID を通知しますので、証跡を <command>ausearch</command> で検索できるようになります。作業後は監査ルールを元に戻すため、 <command>systemctl restart auditd</command> と入力して実行してください。</para>
 </sect1>
 <sect1 xml:id="sec-audit-auviz">
  <title>監査データの可視化</title>

  <para><filename>/var/log/audit/audit.log</filename> にある監査証跡も、 <xref linkend="sec-audit-aureport-gen"/> で説明している様々な種類の <command>aureport</command> のレポートも、ユーザが読む場合にはある程度の経験が必要となります。 <command>aureport</command> の出力は表形式であるため、 sed, Perl, awk などのスクリプトを使用することで、容易に監査データを可視化することができます。</para>

  <para>可視化に対応するスクリプト (詳しくは <xref linkend="sec-audit-viz"/> をお読みください) は、 &productname; やその他の Linux ディストリビューションで、読みやすい監査出力を作成するための標準的な Linux ツールの使い方の例となっているものです。下記の例では、純粋なテキスト形式の監査レポートを、グラフに変換する作業を行っています。</para>

  <para>最初の例では、プログラムとシステムコールの対応付けを可視化しているものです。この種類のデータを取得するには、最終的なグラフを生成するための元となるデータを <command>aureport</command> で作成する必要があります:</para>

<screen>&prompt.sudo;<command>aureport -s -i</command>

Syscall Report
=======================================
# date time syscall pid comm auid event
=======================================
1. 2009年02月16日 17:45:01 open 20343 cron unset 2279
2. 2009年02月16日 17:45:02 mkdir 20350 mktemp root 2284
3. 2009年02月16日 17:45:02 mkdir 20351 mkdir root 2285
...</screen>

  <para>このレポートに対して可視化スクリプトが行うべき最初の処理は、必要な列の情報のみを抽出することです。この例では、 <literal>syscall</literal> と <literal>comm</literal> の列になります。出力は並べ替えられたあと重複を排除し、グラフ作成プログラム自身に渡すことになります:</para>

<screen>LC_ALL=C aureport -s -i | awk '/^[0-9]/ { print $6" "$4 }' | sort | uniq | mkgraph</screen>


<!-- fs 2016-11-17:
     /etc/sysconfig/auditd has been removed without replacement

  <note>
   <title>Adjusting the locale</title>
   <para>
    Depending on your choice of locale in
    <filename>/etc/sysconfig/auditd</filename>, your
    <command>aureport</command> output might contain an additional data
    column for AM/PM on time stamps. To avoid having this confuse your
    scripts, precede your script calls with <literal>LC_ALL=C</literal> to
    reset the locale and use the 24 hour time format.
   </para>
  </note>
-->

  <figure xml:id="fig-audit-mkgraph">
   <title>フローグラフ: プログラムとシステムコールの関係性</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="audit_mkgraph.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="audit_mkgraph.png" width="100%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>2 つ目の例では、様々な種類のイベントとそのログ記録数をまとめたグラフです。この種類のグラフを作成するにあたって、 <command>aureport</command> で対応するコマンドは <command>aureport -e</command> です:</para>

<screen>&prompt.sudo;aureport -e -i --summary

Event Summary Report
======================
total  type
======================
2434  SYSCALL
816  USER_START
816  USER_ACCT
814  CRED_ACQ
810  LOGIN
806  CRED_DISP
779  USER_END
99  CONFIG_CHANGE
52  USER_LOGIN</screen>

  <para>この種類のレポートは既に 2 列のみの出力になっていることから、単純にグラフ作成プログラムに渡して棒グラフにするだけです。</para>

<screen>&prompt.sudo;aureport -e -i --summary  | mkbar events</screen>

  <figure xml:id="fig-audit-mkbar">
   <title>棒グラフ: 一般的なイベントの種類</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="audit_mkbar.png" width="75%" format="PNG"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="audit_mkbar.png" width="100%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>監査データの可視化の背景となる情報について、詳しくは <link xlink:href="http://people.redhat.com/sgrubb/audit/visualize/index.html"/> (英語) をお読みください。</para>
 </sect1>
 <sect1 xml:id="sec-audit-audisp">
  <title>監査イベント通知の中継</title>

  <para>監査システムでは、リアルタイムに外部プログラムを呼び出して、 <systemitem class="daemon">auditd</systemitem> にアクセスしたり、使用したりすることができます。この機能は <emphasis>監査ディスパッチャ</emphasis> と呼ばれる仕組みで、たとえば侵入検知システムなどが <systemitem class="daemon">auditd</systemitem> を使用し、より詳しい検知情報を取得したりすることができます。</para>

  <para><systemitem class="daemon">audispd</systemitem> は監査ディスパッチャを制御するためのデーモンです。通常は <systemitem class="daemon">auditd</systemitem> から起動されます。 <systemitem class="daemon">audispd</systemitem> はリアルタイムに監査イベントを取得して、分析を行いたい各プログラムにそれらを配信する処理を行います。 <systemitem class="daemon"><!-- NOTE: not auditd? -->audispd</systemitem> の設定は <filename>/etc/audisp/audispd.conf</filename> になります。このファイルには下記のようなオプションを記述します:</para>

  <variablelist>
   <varlistentry>
    <term><literal>q_depth</literal></term>
    <listitem>
     <para>監査ディスパッチャの内部キューのサイズを指定します。 syslog 内に監査イベントの喪失を表すメッセージが現れた場合は、この値を増やしてください。既定値は 80 です。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>overflow_action</literal></term>
    <listitem>
     <para>監査ディスパッチャの内部キューが溢れてしまった場合、監査デーモンがどのように対応するのかを指定します。指定可能な値は <option>ignore</option> (何もしない), <option>syslog</option> (syslog に警告を発する), <option>suspend</option> (audispd に対してイベントの処理を停止させる), <option>single</option> (コンピュータシステムをシングルユーザモードに移行させる), <option>halt</option> (システムをシャットダウンする) のいずれかです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>priority_boost</literal></term>
    <listitem>
     <para>監査イベントディスパッチャに対する優先度設定を指定します (監査デーモン自身の優先度からの相対指定です) 。既定値は 4 で、優先度を変更しません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>name_format</literal></term>
    <listitem>
     <para>監査イベント内へ挿入するコンピュータノード名の設定方法を指定します。指定可能な値は <option>none</option> (コンピュータ名を挿入しない), <option>hostname</option> (<systemitem>gethostname</systemitem> システムコールで取得した名前), <option>fqd</option> (マシンの完全修飾ホスト名), <option>numeric</option> (マシンの IP アドレス), <option>user</option> (<option>name</option> オプションで指定する任意の値) のいずれかです。既定値は <option>none</option> です。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>name</literal></term>
    <listitem>
     <para>マシンを識別するためのユーザ定義の名前です。このオプションを動作させるには、 <option>name_format</option> オプションが <option>user</option> でなければなりません。それ以外の場合、このオプションは無視されます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>max_restarts</literal></term>
    <listitem>
     <para>非負の整数を入れる項目で、監査イベントディスパッチャに対して、何回までクラッシュしたプラグインを再起動しようとするかを指定します。既定値は 10 です。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <example>
   <title>/etc/audisp/audispd.conf の例</title>
<screen>
  q_depth = 80
  overflow_action = SYSLOG
  priority_boost = 4
  name_format = HOSTNAME
  #name = mydomain</screen>
  </example>

  <para>プラグインプログラムでは、自身の設定ファイルを <systemitem class="daemon">audispd</systemitem> プラグイン専用のディレクトリにインストールします。このディレクトリは既定では <filename>/etc/audisp/plugins.d</filename> になっています。プラグインの設定ファイルには、下記のようなオプションがあります:</para>

  <variablelist>
   <varlistentry>
    <term><literal>active</literal></term>
    <listitem>
     <para>プログラムが <systemitem class="daemon">audispd</systemitem> を使用するかどうかを指定します。指定可能な値は <option>yes</option> (はい), <option>no</option> (いいえ) のいずれかです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>direction</literal></term>
    <listitem>
     <para>プラグインと監査システムの通信方法を指定します。これはイベントディスパッチャに対して、イベントの流れる方向を示すことになります。指定可能な値は <option>in</option> (入力), <option>out</option> (出力) のいずれかです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>path</literal></term>
    <listitem>
     <para>プラグインの実行ファイルに対する絶対パスを指定します。内部プラグインの場合、ここにはプラグイン名を指定します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>type</literal></term>
    <listitem>
     <para>プラグインの動作方法を指定します。指定可能な値は <option>builtin</option>, <option>always</option> のいずれかです。 <option>builtin</option> は内部プラグイン ( <literal>af_unix</literal> および <literal>syslog</literal> ) であることを示すもので、 <option>always</option> はほとんどすべて (ただし全てではありません) のプラグイン向けの値です。既定値は <option>always</option> です。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>args</literal></term>
    <listitem>
     <para>プラグインプログラムに渡すパラメータを指定します。通常、プラグインプログラムは自身の設定ファイルからパラメータを読み込む仕組みであるため、何もパラメータを指定する必要はありません。また、 2 個までのパラメータに対応しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>format</literal></term>
    <listitem>
     <para>監査ディスパッチャがプラグインプログラムに渡すデータの形式を指定します。指定可能な値は <option>binary</option>, <option>string</option> のいずれかです。 <option>binary</option> はイベントディスパッチャが監査デーモンから受信したデータをそのまま渡す指定で、 <option>string</option> はディスパッチャに対して、イベントデータを監査処理ライブラリで処理できる文字列に変換する指定です。既定値は <option>string</option> です。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <example>
   <title>/etc/audisp/plugins.d/syslog.conf の例</title>
<screen>
  active = no
  direction = out
  path = builtin_syslog
  type = builtin
  args = LOG_INFO
  format = string</screen>
  </example>
 </sect1>
</chapter>
