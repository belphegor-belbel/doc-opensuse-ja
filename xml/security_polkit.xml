<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-polkit">

 <title>&pk; 認可フレームワーク</title>
 <info xmlns:d="http://docbook.org/ns/docbook">
      <abstract>
        <para>&pk; はグラフィカルな Linux デスクトップ環境で使用される認可フレームワークで、システムでの権限管理をより精密に行うための仕組みです。従来の Linux システムでは、最高位のシステム権限を持つユーザとして &rootuser; を規定し、それ以外のユーザやグループと分離していましたが、サウンドハードウエアにアクセスするための <literal>audio</literal> グループなどのように、 &rootuser; とは別の権限構成も存在していました。このような構成では、特定の状態にある場合にのみ許可したり、一時的に許可したりするようなことが実現できませんでした。</para>
        <para>このような場合、通常は <command>sudo</command> コマンドなどで &rootuser; に成り代わり、特権を得て作業を行うことになりますが、 &pk; では要件に応じて特定のユーザやグループに対して、必要な権限のみを与えることができます。権限は処理と権限内容を記した設定ファイル内で動的に対応することができます。</para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
        <dm:translation>yes</dm:translation>
      </dm:docmanager>
 <revhistory xml:id="rh-cha-security-polkit">
   <revision>
     <date>2024-06-26</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>

 <sect1 xml:id="sec-security-polkit-oview">
  <title>考え方の概要</title>

  <para>&pk; は複数のコンポーネント (部品) から構成されています。まず <command>polkitd</command> は裏で動作する特権サービスで、 &pk; の設定ファイルを読み込んで必要な認証チェックを実施します。 &pk; 対応のアプリケーションは認証要求を <command>polkitd</command> に送信しますが、このとき特権を持たない &pk; 認証エージェントが動作して、 <command>polkitd</command> が求める認証要求を表示します。ここでユーザが対話的に入力した値は、エージェントを介して <command>polkitd</command> に送信されます。</para>

  <para>&pk; での <emphasis>アクション</emphasis> は、 &pk; の認可ルールに記された 1 つの処理を意味します。このアクションはたとえば、コンピュータを再起動したいなどの意図を表します。それぞれのアクションには唯一の ID が設定され、たとえばコンピュータの再起動であれば <literal>org.freedesktop.login1.reboot</literal> という名称が割り当てられています。</para>

  <sect2 xml:id="sec-security-polkit-agents">
   <title>認証エージェント</title>
   <para>ユーザが完全機能のデスクトップ環境内でグラフィカルなセッションを開始すると、認可エージェントが裏で自動的に起動されます。このエージェントは何らかの認証が必要となった場合にのみ表に現れるだけで、それ以外の状況では表には全く現れません。なお、テキストモードで起動した場合や SSH 経由でログインした場合は自動で起動されませんので、以降はグラフィカルなセッションを想定して記しています。</para>
  </sect2>

  <sect2 xml:id="sec-security-polkit-structure">
   <title>&pk; の設定</title>
   <para>&pk; の設定は、 <emphasis>アクション</emphasis> と <emphasis>認可ルール</emphasis> を元にして作られています:</para>
   <variablelist>
    <varlistentry>
     <term>アクション (ファイルの拡張子 <filename>*.policy</filename> )</term>
     <listitem>
      <para>XML ファイル形式で記述され、 <filename>/usr/share/polkit-1/actions</filename> 内に配置されます。それぞれのファイルは 1 つ以上のアクションを定義していて、それぞれのアクションには説明と既定のアクセス許可が設定されます。システム管理者側では独自のルールを作成することができますが、 &pk; 側が提供するファイルについては、編集してはなりません。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>認可ルール (ファイルの拡張子 <filename>*.rules</filename> )</term>
     <listitem>
      <para>ルールは JavaScript プログラミング言語で記述され、 2 箇所に配置されます。システムが提供するパッケージの場合は <filename>/usr/share/polkit-1/rules.d </filename> に、独自に作成するファイルの場合は <filename>/etc/polkit-1/rules.d</filename> にそれぞれ配置します。それぞれのルールファイルには既定の認可設定のほか、複雑なロジックで権限を判断するようなことができます。たとえばルールファイルでは制限の厳しいアクセス許可を上書きすることができるほか、特定のユーザには認証 <!-- NOTE: wrong? --> 無しで実行できるようにしたりすることができます。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-polkit-oview-commands">
   <title>&pk; のユーティリティ</title>
   <para>&pk; には、特定の作業を行うためのコマンドが用意されています (より詳しい説明については、それぞれのマニュアルページをお読みください):</para>
   <variablelist>
    <varlistentry>
     <term><command>pkaction</command></term>
     <listitem>
      <para>設定済みのアクションに対して詳細を取得します。詳しくは <xref linkend="sec-security-polkit-query"/> をお読みください。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkcheck</command></term>
     <listitem>
      <para>特定の &pk; のアクションに対して、プロセスが認可されているかどうかを確認します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkexec</command></term>
     <listitem>
      <para>&pk; の認可設定に従って、異なるユーザでプログラムを実行できるようにします。 <command>su</command> や <command>sudo</command> に似た仕組みです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>pkttyagent</command></term>
     <listitem>
      <para>テキスト型の認証エージェントを起動します。このエージェントは、デスクトップ環境側に独自の認証エージェントが存在しない場合に使用されます。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-security-polkit-types">
  <title>認可の種類</title>

  <para>&pk; を有効化したプロセスが権限操作を行うと、このプロセスに対して権限が設定されているかどうかを &pk; に尋ねる処理を行います。 &pk; はそのプロセスに対して設定されているポリシーを元にして、応答を返します。応答は <literal>yes</literal> (はい), <literal>no</literal> (いいえ), <literal>authentication needed</literal> (要認証) のいずれかとなります。 <literal>authentication needed</literal> (要認証) の場合はユーザに対して認証ダイアログを表示し、必要な認可を得る処理を行います。</para>

  <sect2 xml:id="sec-security-polkit-policies-implicit">
   <title>暗黙の認可</title>
   <para>特定のアクションに対して専用の &pk; JavaScript ルールが記述されていない場合、その結果は、 &pk; のポリシーファイルの各アクションに対して設定されている暗黙の認可設定に従って決定されます。この暗黙の認可設定には <literal>allow_active</literal> , <literal>allow_inactive</literal> , <literal>allow_any</literal> の 3 種類があります。 <literal>allow_active</literal> は動作中のセッション内にいるユーザに適用されるもので、テキストモードやグラフィカルユーザインターフェイスでログインしているユーザに適用されます。なお、ログイン中であっても、ユーザがコンソールを切り替えるなどして動作中でなくなると、 <literal>allow_inactive</literal> が適用されます。また、 <literal>allow_any</literal> は SSH や VNC などでログインしているリモートのユーザなど、それ以外の状況下で適用されます。これらそれぞれに対して、下記に示すいずれかの認可を割り当てることができます:</para>
   <variablelist>
    <varlistentry>
     <term>no</term>
     <listitem>
      <para>そのアクションに対して決して認可を与えないようにします。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>yes</term>
     <listitem>
      <para>認証情報を入力することなく、そのアクションに対して常に認可を与えるようにします。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_self</term>
     <listitem>
      <para>権限を要求した際、自分自身のパスワードを入力させるようにします。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_self_keep</term>
     <listitem>
      <para><literal>auth_self</literal> に似ていますが、認証情報を一定時間だけ保持します。つまり、同じアプリケーションから繰り返し同じアクションを実行した場合、パスワードの入力を求めなくなります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_admin</term>
     <listitem>
      <para>権限を要求した際、管理者 (&rootuser;) のパスワードを入力させるようにします。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>auth_admin_keep</term>
     <listitem>
      <para><literal>auth_self_keep</literal> と同様に、管理者 (&rootuser;) のパスワードを一定時間だけ保持します。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-polkit-policies-default">
   <title>&suse; 既定の権限</title>
   <para>ここまでに説明してきた &pk; のポリシーファイル内の暗黙の認可設定は、アプリケーションの開発者が規定した既定の暗黙ポリシーセットが元になっています。このようなポリシーは <quote>提供元の既定値</quote> と呼ばれます。提供元の既定値で設定された権限は、既定の &suse; システムで有効化されていない場合もあります。 &productname; では、提供元の既定値を上書きする独自の権限セットを用意していますが、これには 3 種類のセットが含まれています:</para>
   <variablelist>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.easy</filename></term>
     <listitem>
      <para>利用者が管理者自身であり、それ以外には誰も使用しないような、単一のデスクトップシステム向けの権限セットです。使いやすさを重視した設定であるため、セキュリティという観点では弱い設定です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.standard</filename></term>
     <listitem>
      <para>ほとんどのシステムに対して適用できる均衡の取れた権限セットです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/etc/polkit-default-privs.restrictive</filename></term>
     <listitem>
      <para>使いやすさを犠牲にして、考えられる攻撃手法をできる限り無効化することを目指した、より保守的な権限セットです。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>既定の権限を切り替えたい場合は、 <filename>/etc/sysconfig/security</filename> ファイル内にある <varname>POLKIT_DEFAULT_PRIVS</varname> の値を、 <literal>easy</literal> , <literal>standard</literal> , <literal>restrictive</literal> のいずれかに設定してください。設定が終わったら、 &rootuser; で <command>set_polkit_default_privs</command> を実行します。</para>
   <para>上述のファイルについては変更してはなりません。独自の権限セットを構築したい場合は、 <filename>/etc/polkit-default-privs.local</filename> で設定してください。詳しくは <xref linkend="sec-security-polkit-change-modify-config-implicit"/> をお読みください。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-polkit-query">
  <title>権限の問い合わせ</title>

  <para>権限を問い合わせたい場合は、 &pk; に含まれている <command>pkaction</command> コマンドを使用します。</para>

  <para>&pk; には権限を変更したり、他のユーザでコマンドを実行したりするためのコマンドラインツールが付属しています (概要は <xref linkend="sec-security-polkit-oview-commands"/> で説明しています) 。またそれぞれの既存のポリシーには、識別のための名前が設定されています。利用可能なポリシーを一覧で表示したい場合は、 <command>pkaction</command> コマンドをお使いください。詳しくは <command>man pkaction</command> をお読みください。</para>

  <para>特定のポリシー (例: <literal>org.freedesktop.login1.reboot</literal>) に対して、必要な認可情報を表示したい場合は、 <command>pkaction</command> を下記のように実行します:</para>

  <screen>&prompt.user;<command>pkaction -v --action-id=org.freedesktop.login1.reboot</command>
org.freedesktop.login1.reboot:
  description:       Reboot the system
  message:           Authentication is required to allow rebooting the system
  vendor:            The systemd Project
  vendor_url:        http://www.freedesktop.org/wiki/Software/systemd
  icon:
  implicit any:      auth_admin_keep
  implicit inactive: auth_admin_keep
  implicit active:   yes</screen>

  <note>
   <title>&productname; における <command>pkaction</command> の制限事項について</title>
   <para><command>pkaction</command> は提供元の既定値に対してのみ作用するもので、提供元の既定値を上書きする SUSE の既定値に対しては作用しないことに注意してください。そのため、出力結果は注意して解釈する必要があります。</para>
  </note>
 </sect1>
 <sect1 xml:id="sec-security-polkit-change-modify-config">
  <title>&pk; の設定変更</title>

  <para>たとえば特定のチーム内に配布するコンピュータをセットアップするような場合など、複数のマシンに同じポリシーセットを設定したいような場合、 &pk; の設定を修正する必要があります。このほか、 &pk; の認可設定をカスタマイズすることで、特定のアクションに対するセキュリティを強化したり、よく使用されるアクションに対して繰り返しのパスワード入力を省略したりなどを行うこともできます。ただし、認証無しで &pk; のアクションを不用意に実行できるように設定してしまうと、設定によっては完全な &rootuser; 権限を得る結果になってしまうこともあります。そのため、 &pk; で認証設定を弱くする場合は、お使いの環境下でシステムのセキュリティを侵さない範囲でのみ設定するようにしてください。</para>

  <sect2 xml:id="sec-security-polkit-change-modify-config-actions">
   <title>&pk; ポリシーファイルの上書き</title>
   <para>お使いのシステムでどのようなアクションが利用できるのかは、どのパッケージをインストールしているのかによって決まります。概要を表示したい場合は、 <command>pkaction</command> を実行して、定義済みの全ルールを一覧で表示させてください。</para>
   <para>下記では、例として <command>gparted</command> コマンド ( <quote>&gnome; パーティションエディタ</quote> ) における &pk; との連携例を示しています。</para>
   <para><filename>/usr/share/polkit-1/actions/org.opensuse.policykit.gparted.policy</filename> ファイルには、下記のような内容が書かれています:</para>
<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE policyconfig PUBLIC
 "-//freedesktop//DTD PolicyKit Policy Configuration 1.0//EN"
 "http://www.freedesktop.org/standards/PolicyKit/1.0/policyconfig.dtd"&gt;
&lt;policyconfig&gt; <co xml:id="co-polkit-actions-policyconfig"/>

  &lt;action id="org-opensuse-polkit-gparted"&gt; <co xml:id="co-polkit-actions-action"/>
    &lt;message&gt;Authentication is required to run the GParted Partition Editor&lt;/message&gt;
    &lt;icon_name&gt;gparted&lt;/icon_name&gt;
    &lt;defaults&gt; <co xml:id="co-polkit-actions-defaults"/>
      &lt;allow_any&gt;auth_admin&lt;/allow_any&gt;
      &lt;allow_inactive&gt;auth_admin&lt;/allow_inactive&gt;
     &lt; allow_active&gt;auth_admin&lt;/allow_active&gt;
    &lt;/defaults&gt;
    &lt;annotate <co xml:id="co-polkit-actions-annotate"/>
      key="org.freedesktop.policykit.exec.path"&gt;/usr/sbin/gparted&lt;/annotate&gt;
    &lt;annotate <xref linkend="co-polkit-actions-annotate"/>
      key="org.freedesktop.policykit.exec.allow_gui"&gt;true&lt;/annotate&gt;
  &lt;/action&gt;

&lt;/policyconfig&gt;</screen>
   <calloutlist>
    <callout arearefs="co-polkit-actions-policyconfig">
     <para>ポリシーファイルの XML ルート要素です。</para>
    </callout>
    <callout arearefs="co-polkit-actions-action">
     <para>このポリシー内で唯一設定されたアクションの開始位置です。</para>
    </callout>
    <callout arearefs="co-polkit-actions-defaults">
     <para>ここには暗黙の認可が設定されています。</para>
    </callout>
    <callout arearefs="co-polkit-actions-annotate">
     <para><literal>annotate</literal> 要素には、 &pk; がアクションを実行する際の方法に関わる設定が書かれています。この例では、 gparted 実行ファイルのパスのほか、グラフィカルな表示を許可するための設定が書かれています。この要素は &pk; のツールである <command>pkexec</command> を使用する際に必要な設定です。</para>
    </callout>
   </calloutlist>
   <para>独自のポリシーを追加したい場合は、上記のような構造で <filename>.policy</filename> ファイルを作成し、 <literal>id</literal> 属性に適切な値を設定して、既定のアクセス許可を記述してください。</para>
   <note>
    <title>以前の名称 PolicyKit について</title>
    <para>&pk; 認可フレームワークは以前、 PolicyKit という名称で呼ばれていました。このことから、 XML 文書の属性値などには古い名称が残っている場合があります。</para>
   </note>
  </sect2>

  <sect2 xml:id="sec-security-polkit-change-modify-config-authrules">
   <title>JavaScript 認可ルールの追加</title>
   <para>独自の認可ルールを作成することで、暗黙の認可を上書きして動作させることができます。独自のルールを作成する場合は、 <filename>/etc/polkit-1/rules.d/</filename> ディレクトリ内にファイルを作成してください。</para>
   <para>このディレクトリにファイルを配置する場合、ファイル名は 2 桁の数字ではじめ、ハイフンで区切ってその後ろにわかりやすい名前を続けて、末尾は <filename>.rules</filename> で終わらせるようにしてください。これらのファイル内の関数は、並べ替えられた順に実行されます。たとえば <filename>00-foo.rules</filename> ファイルは <filename>60-bar.rules</filename> や <filename>90-default-privs.rules</filename> ファイルの前に実行されます。</para>
   <para>ルールファイル内はスクリプト形式で、まずアクション ID (<filename>.policy</filename> ファイルで定義されている値) が特定のものであるかどうかをチェックします。たとえば <command>gparted</command> というコマンドを <systemitem class="groupname">admin</systemitem> グループ内の任意のユーザに対して許可したい場合は、 <literal>org.opensuse.policykit.gparted</literal> のアクション ID に対して、下記のような処理を記述します:</para>
<screen>/* Allow users in admin group to run GParted without authentication */
polkit.addRule(function(action, subject) {
    if (action.id == "org.opensuse.policykit.gparted" &amp;&amp;
        subject.isInGroup("admin")) {
        return polkit.Result.YES;
    }
});</screen>
   <para>&pk; API 内で提供されている全てのクラスとメソッドについて、詳しくは <link xlink:href="https://www.freedesktop.org/software/polkit/docs/latest/ref-api.html"/> をお読みください。</para>
  </sect2>

  <sect2 xml:id="sec-security-polkit-change-modify-config-implicit">
   <title>&suse; 既定の権限設定の変更</title>
   <para><xref linkend="sec-security-polkit-policies-default"/> で説明しているとおり、 &suse; では、提供元の開発者が設定した &pk; の暗黙の認可設定を上書きする設定を提供しています。それ以外の独自の権限については、 <filename>/etc/polkit-default-privs.local</filename> ファイル内に記述してください。ここで定義された権限は、その他の設定ファイル内に書かれているものよりも常に優先して適用されます。独自の権限セットを定義したい場合は、下記のようにして行います:</para>
   <procedure xml:id="pro-custom-privileges">
    <title>既定の権限設定の変更</title>
    <step>
     <para><filename>/etc/polkit-default-privs.local</filename> ファイルを編集します。権限を定義するには、下記のような形式で各アクション向けの行を記述します:</para>
<screen><replaceable>&lt;アクション-ID&gt;</replaceable>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<replaceable>&lt;任意のセッションに対する認可指定&gt;</replaceable>:<replaceable>&lt;非動作中のセッションに対する認可指定&gt;</replaceable>:<replaceable>&lt;動作中のセッションに対する認可指定&gt;</replaceable></screen>
     <para>3 種類全てのカテゴリに対して同じ設定を適用したい場合は、下記のように 1 つだけ値を指定してもかまいません:</para>
<screen><replaceable>&lt;アクション-ID&gt;</replaceable>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<replaceable>&lt;全てのセッションに対する認可指定&gt;</replaceable></screen>
     <para>たとえば、下記のように指定します:</para>
<screen>org.freedesktop.color-manager.modify-profile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;auth_admin_keep</screen>
    </step>
    <step>
     <para>あとは設定を反映させるため、 &rootuser; で下記を実行します:</para>
     <screen>&prompt.root;<command>/sbin/set_polkit_default_privs</command></screen>
    </step>
   </procedure>
   <para>SUSE での &pk; 既定値に関する詳しいドキュメンテーションについては、 <command>man polkit-default-privs</command> をお読みください。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-polkit-change-defaults">
  <title>&suse; 既定の権限設定の復元</title>

  <para>認可設定を &suse; 提供の既定値に戻したい場合は、下記の手順を実施します:</para>

  <procedure xml:id="pro-restore-polkit-defaults">
   <title>&productname; の既定値の復元</title>
   <step>
    <para>まずは <xref linkend="sec-security-polkit-policies-default"/> で説明している設定値のいずれかを選択します。</para>
   </step>
   <step>
    <para><filename>/etc/polkit-default-privs.local</filename> に記述している全ての上書き設定を削除します。</para>
   </step>
   <step>
    <para>あとは <command>set_polkit_default_privs</command> を実行すると、既定値に戻すことができます。</para>
   </step>
  </procedure>
 </sect1>
</chapter>
