<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-network">
 <title>基本的なネットワーキング</title>
 <info>
  <abstract>
   <para>Linux には、全ての種類のネットワーク構成で利用することのできる、様々なネットワークツールやネットワーク機能が用意されています。ネットワークカードを利用したアクセス設定は &yast; で行なうことができます。もちろん手作業での設定も可能です。本章では、ごく基本的な構造と、関連するネットワーク設定ファイルについて説明しています。</para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>Linux や他の Unix オペレーティングシステムでは、 TCP/IP プロトコルを使用します。これは単一のネットワークプロトコルを指す用語ではなく、様々なサービスを提供するネットワークプロトコルファミリを指す用語です。 <xref linkend="tab-net-basic-tcpproto"/> に示されているプロトコルの一覧は、 TCP/IP を介して 2 台のマシン間でデータを交換するために提供されているものです。また、 TCP/IP で構成されたネットワークを世界中に広げたものを、 <quote>インターネット</quote> と呼びます。</para>
 <para>RFC とは <emphasis>Request for Comments</emphasis> の略で、様々なインターネットプロトコルやオペレーティングシステムでの実装手順のほか、応用例などを説明している文書です。言い換えると、 RFC の文書はインターネットプロトコルの構造と仕組みを説明しているものになります。 RFC について、詳しくは <link xlink:href="http://www.ietf.org/rfc.html"/> (英語) をお読みください。</para>
 <variablelist xml:id="tab-net-basic-tcpproto">
  <title>TCP/IP プロトコルファミリで使用される主なプロトコル</title>
  <varlistentry>
   <term>TCP</term>
   <listitem>
    <para>伝送制御プロトコル (Transmission Control Protocol) と呼ばれるプロトコルで、接続指向のプロトコルです。アプリケーションからもたらされた送信データは、一連のデータとしてオペレーティングシステム側で書式変換が行なわれます。宛先のホストにその変換済みのデータが到着すると、逆変換を行なって元のデータに戻して、受信側のアプリケーションに配信されます。 TCP では途中のデータが喪失してしまったり、順序が入れ替わってしまったりした場合でも、それを修復して元通りの構成に戻す機能を備えています。つまり、 TCP は順序が重要となるデータを送信する際に便利な仕組みです。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>UDP</term>
   <listitem>
    <para>ユーザデータグラムプロトコル (User Datagram Protocol) と呼ばれるプロトコルで、接続制御のないプロトコルです。アプリケーションからもたらされた送信データは、書式変換のみを行なって送信されます。受信側では逆変換を行ないますが、受信側での到着順序については保証が無く、場合によってはデータを喪失してしまうこともあります。 UDP はひとかたまり (パケット) のデータを送信する際に便利なプロトコルで、 TCP よりも遅延を少なくすることができます。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>ICMP</term>
   <listitem>
    <para>インターネット制御メッセージプロトコル (Internet Control Message Protocol) と呼ばれるプロトコルで、エンドユーザ側で使用するプロトコルではなく、ネットワーク内でのエラー報告を行なったり、 TCP/IP データ伝送に参加している機器を制御したりするためのプロトコルです。これに加えて、 ping というプログラムを利用してネットワークの通信が成立しているかどうかを調べるプロトコルも用意されています。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>IGMP</term>
   <listitem>
    <para>インターネットグループ管理プロトコル (Internet Group Management Protocol) と呼ばれるプロトコルで、 IP マルチキャストと呼ばれる仕組みを実装する際、それに参加するマシンの動作を制御するためのプロトコルです。</para>
   </listitem>
  </varlistentry>
 </variablelist>
 <para><xref linkend="fig-net-basic-OSI"/> に示されているとおり、コンピュータ間でのデータ交換は階層 (レイヤ) 型の構造で処理されます。ネットワーク層は実際には IP (インターネットプロトコル) を介した通信で、 IP の上にトランスポート層の TCP (伝送制御プロトコル) が乗り、順序保証やある程度のセキュリティが確保されたデータ転送を実現しています。また、 IP 層はその下にあるハードウエア依存のプロトコル (例: イーサネット) 上で動作しています。</para>
 <figure xml:id="fig-net-basic-OSI">
  <title>TCP/IP での単純化したレイヤモデル</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata width="100%" fileref="net_basic_osi.svg" format="SVG"/>
   </imageobject>
   <imageobject role="html">
    <imagedata width="75%" fileref="net_basic_osi.png" format="PNG"/>
   </imageobject>
  </mediaobject>
 </figure>
 <para>上の図では、各レイヤに対して 1 つもしくは 2 つの例を示しています。レイヤは <emphasis>抽象レベル</emphasis> とも呼べる仕組みで、低いレイヤほどハードウエアに近く、高いレイヤほどハードウエアからは離れた、独立した存在になっています。また、それぞれのレイヤには、名前からおおよそ推測のできる独自の機能が用意されています。なお、データリンク層と物理層は、イーサネットなどの物理的なネットワークを表わしています。</para>
 <para>ほぼ全てのハードウエアプロトコルがパケット指向の仕組みで動作します。具体的には、送信すべきデータは 1 回では送信しきれないことから、 <emphasis>パケット</emphasis> と呼ばれる単位でまとめられます。 TCP/IP の場合、パケットの最大サイズはおおよそ 64 KB 程度になりますが、ネットワークハードウエア側ではより厳しい制限があることから、実際にはもっと小さな単位で送信されるようになります。たとえばイーサネットの場合、これは 1500 バイト程度のもので、イーサネット経由で TCP/IP パケットを送信する場合も、この単位で送信することになります。</para>
 <para>それぞれのレイヤが自身の機能を提供するため、データパケット内にはそれぞれのレイヤが必要とする情報を保存しなければなりません。この情報は、パケット内では <emphasis>プロトコルヘッダ</emphasis> と呼ばれ、この中に情報を保存します。プロトコルヘッダは、名前の通り実際のデータよりも前に置かれますので、たとえばイーサネットケーブル上を通過する TCP/IP データパケットの場合は、 <xref linkend="fig-net-basic-TCPPaket"/> で示す図のようになります。なお、チェックサム (checksum) のみが冒頭ではなく、末尾に付いています。このような仕組みにより、ネットワークハードウエアでの処理を容易にしています。</para>
 <figure xml:id="fig-net-basic-TCPPaket">
  <title>TCP/IP イーサネットパケット</title>
  <mediaobject>
   <imageobject role="fo">
    <imagedata width="80%" fileref="net_basic_tcppacket.svg" format="SVG"/>
   </imageobject>
   <imageobject role="html">
    <imagedata width="75%" fileref="net_basic_tcppacket.png" format="PNG"/>
   </imageobject>
  </mediaobject>
 </figure>
 <para>アプリケーションがネットワークを介してデータを送信する際、データはそれぞれのレイヤを通過します。物理レイヤを除き、全てのレイヤが Linux カーネルで実装されています。それぞれのレイヤはデータを準備して次のレイヤに送信する仕組みになっていて、最も下のレイヤがデータ送信に対する最終的な責任を負う構造になっています。データを受信した場合は、この逆順で処理が行なわれます。タマネギの皮のように、受信したデータからそれぞれのプロトコルヘッダを削除していって、最終的にはトランスポート層がアプリケーションにデータを提供します。このような構造により、それぞれのレイヤは隣り合ったレイヤとだけやりとりを行なえば十分な仕組みになっていますので、アプリケーション側では 100 メガビット毎秒の FDDI ネットワークなのか、それとも 56 キロビット毎秒のモデム接続なのかを気にせずに通信できるようになっています。同様に、パケットが正しい形式に変換されている限り、データ回線側もデータの種類を気にする必要はありません。</para>
 <sect1 xml:id="sec-network-addresses">
  <title>IP アドレスとルーティング</title>

  <para>本章では、 IPv4 ネットワークに限定して説明しています。 IPv4 プロトコルの後継である IPv6 プロトコルについては、 <xref linkend="sec-network-ipv6"/> をお読みください。</para>

  <sect2 xml:id="sec-network-addresses-ip">
   <title>IP アドレス</title>
   <para>インターネットに接続されているコンピュータには、他のコンピュータと重複しない 32 ビットのアドレスが付与されています。この 32 ビット (4 バイト) は通常、 <xref linkend="aus-net-basic-ipaddress"/> の 2 行目のような書式で記述します。</para>
   <example xml:id="aus-net-basic-ipaddress">
    <title>IP アドレスの書き方</title>
<screen>IP アドレス (バイナリ):  11000000 10101000 00000000 00010100
IP アドレス (10 進数) :      192.     168.       0.      20</screen>
   </example>
   <para>10 進数の表示では、 4 バイトそれぞれを 10 進数で表わし、ピリオドでそれぞれを区切ります。 IP アドレスはホストやネットワークインターフェイスに割り当てるもので、世界中を通して唯一のものでなければなりません。一部例外もありますが、本章の説明では省略します。</para>
   <para>IP アドレスは階層構造型の仕組みで作られています。 1990 年代までは、 IP アドレスに <quote>クラス</quote> と呼ばれる分類が設定され、厳格に守られてきました。しかしながら、このような構造は柔軟性に欠けるため、現在は使用されていません。現在は <emphasis>クラスレスルーティング</emphasis> (CIDR, Classless InterDomain Routing) と呼ばれる仕組みで、クラスを使用しないようになっています。</para>
  </sect2>

  <sect2 xml:id="sec-network-addresses-route">
   <title>ネットマスクとルーティング</title>
   <para>ネットマスクとは、サブネットのアドレス範囲を定義するために使用するものです。 2 つのアドレスが同じサブネット内にある場合、それらは直接通信することができます。同じサブネット内に無い場合は、そのサブネットに到達するまでの中継器 (ゲートウエイ) のアドレスを介して、通信を行なう必要があります。 2 つの IP アドレスが同じサブネット内にあるかどうかを確認するには、それぞれのアドレスをネットマスクで <quote>論理積 (AND)</quote> して、結果が同じであるかどうかを調べます。結果が異なる場合、双方が通信する際にはゲートウエイを介して通信する必要があることになります。</para>
   <para>ネットマスクの仕組みについて知るには、まず <xref linkend="tab-net-basic-netmask"/> をご覧ください。ネットマスクは 32 ビットの値で、 IP アドレスのどの部分までがサブネットであるのかを示しています。サブネット側に属する部分が <literal>1</literal> に、それ以外の部分が <literal>0</literal> になっていますので、論理積 (AND) を取れば、ネットワーク部分だけを抽出できることになります。言い換えると、より小さなサブネットほど <literal>1</literal> の数が多いことになります。また、ネットマスクは <literal>1</literal> が連続して現われることから、 <literal>1</literal> の長さでネットマスクを表わすこともできます。たとえば <xref linkend="tab-net-basic-netmask"/> では 24 個の <literal>1</literal> になっていますので、前者を <literal>192.168.0.0/24</literal> と記述することができます。</para>
   <example xml:id="tab-net-basic-netmask">
    <title>IP アドレスとネットマスクのつながり</title>
<screen>IP アドレス (192.168.0.20) : 11000000 10101000 00000000 00010100
ネットマスク(255.255.255.0): 11111111 11111111 11111111 00000000
---------------------------------------------------------------
論理積の結果:                11000000 10101000 00000000 00000000
10 進数への変換結果:              192.     168.       0.       0

IP アドレス (213.95.15.200): 11010101 10111111 00001111 11001000
ネットマスク(255.255.255.0): 11111111 11111111 11111111 00000000
---------------------------------------------------------------
論理積の結果:                11010101 10111111 00001111 00000000
10 進数への変換結果:              213.      95.      15.       0</screen>
   </example>
   <para>もう 1 つの例を挙げましょう。同じ LAN 内に接続されているコンピュータの場合、それら全ては同じサブネット内に存在していて、直接アクセスすることができます。スイッチやブリッジで物理的に区切られている場合でも、これらのホスト同士は直接アクセスすることができます。</para>
   <para>逆に、異なるサブネットの IP アドレス同士は、ゲートウエイの介在無しにはアクセスすることができません。最もよくある環境では、ゲートウエイは 1 台だけで、そのゲートウエイが全てのサブネットに対するアクセスを中継します。環境によっては、複数のゲートウエイが存在していたりすることもあります。</para>
   <para>このように、お使いのネットワーク内にゲートウエイが存在する場合は、異なるサブネット宛の通信は全てゲートウエイを介して接続します。ゲートウエイはホスト間で通信を行なうのと同じ手順で、一方から他方にデータ (パケット) を中継します。ただし、各パケットには TTL (Time To Live) という値が設定されていて、ゲートウエイを通過するごとに 1 つずつ減らされ、 0 になると廃棄されてしまいます。</para>
   <variablelist xml:id="net-basic-spezial-net">
    <title>様々なアドレス</title>
    <varlistentry>
     <term>ネットワークアドレス</term>
     <listitem>
      <para>このアドレスは、コンピュータの IP アドレスとネットマスクの論理積を取った結果で、 <xref linkend="tab-net-basic-netmask"/> の図では <literal>論理積の結果</literal> として示しているものです。このアドレスは、コンピュータに割り当てることができません。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ブロードキャストアドレス</term>
     <listitem>
      <para>このアドレスは、 <quote>そのサブネット内にある全てのホスト</quote> を意味するアドレスです。このアドレスを生成するには、ネットマスクの <literal>1</literal> と <literal>0</literal> を入れ替えて、 IP アドレスとの論理和 (OR) を取った値になります。上記の例では、 192.168.0.255 となります。このアドレスも、コンピュータに割り当てることができません。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ローカルホスト</term>
     <listitem>
      <para><systemitem class="ipaddress">127.0.0.1</systemitem> というアドレスは特殊扱いのアドレスで、各ホストの　<quote>ループバックデバイス</quote> に割り当てます。このアドレスを指定することで、自分自身のコンピュータにアクセスすることができるようになっています。より正確に表現すると、このアドレスは <systemitem class="ipaddress">127.0.0.0/8</systemitem> というネットワークアドレスで、 IPv4 の規格として決められているものです。なお、 IPv6 の場合は、ループバックアドレスは 1 つだけ  ( <systemitem class="ipaddress">::1</systemitem> ) になっています。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>IP アドレスは全世界で唯一のものでなければならないことから、適当にアドレスを割り当てて良いというものではありません。ただし、内部で使用するためだけの <quote>プライベート IP アドレス</quote> と呼ばれるアドレスがあり、インターネットには直接接続しない環境下で使用することができるようになっています。これらのアドレス帯域は RFC&nbsp;1597 で規定されているもので、 <xref linkend="tab-net-basic-privat-net"/> に一覧を示しています。</para>
   <table xml:id="tab-net-basic-privat-net">
    <title>プライベート IP アドレスの範囲</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>ネットワーク／ネットマスク</para>
       </entry>
       <entry>
        <para>範囲</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para><systemitem class="ipaddress">10.0.0.0</systemitem> / <systemitem class="netmask">255.0.0.0</systemitem></para>
       </entry>
       <entry>
        <para><systemitem class="ipaddress">10.x.x.x</systemitem></para>
       </entry>
      </row>
      <row>
       <entry>
        <para><systemitem class="ipaddress">172.16.0.0</systemitem> / <systemitem class="netmask">255.240.0.0</systemitem></para>
       </entry>
       <entry>
        <para><systemitem class="ipaddress">172.16.x.x</systemitem> &ndash; <systemitem class="ipaddress">172.31.x.x</systemitem></para>
       </entry>
      </row>
      <row>
       <entry>
        <para><systemitem class="ipaddress">192.168.0.0</systemitem> / <systemitem class="netmask">255.255.0.0</systemitem></para>
       </entry>
       <entry>
        <para><systemitem class="ipaddress">192.168.x.x</systemitem></para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-network-ipv6">
  <title>IPv6&mdash;次世代インターネット</title>

  <important arch="zseries" os="sles">
   <title>&zseries; での IPv6 サポートについて</title>
   <para>&zseries; ハードウエアで CTC/IUCV のネットワーク接続をお使いの場合、 IPv6 には対応していません。</para>
  </important>

  <para>World Wide Web (WWW) の普及に伴い、インターネットは爆発的に拡大しています。それに伴い、過去 15 年の間に TCP/IP を介して通信するコンピュータも、爆発的な数に膨れあがってきています。 CERN ( <link xlink:href="http://public.web.cern.ch"/> ) の Tim Berners-Lee 氏が 1990 年に WWW を発明して以降、数千台規模のインターネットホストが、今は 1 億台以上にもなってきています。</para>

  <para>上述のとおり、 IPv4 アドレスは 32 ビットしかありません。また、ネットワークの管理上の都合から、かなりの数の IP アドレスが使用できなくなってしまっています。また上述のとおり、サブネットは 2 進数で表記するため、 2 のべき乗 - 2 個 (ネットワークアドレスとブロードキャストアドレス) のアドレスしか利用できません。たとえば 128 台のコンピュータをインターネットに接続する場合、 256 個のアドレスのサブネット (実際には 256 - 2 = 254 個のアドレスが利用可能) を利用する必要があります。</para>

  <para>なお、現在の IPv4 プロトコルには、 DHCP や NAT (ネットワークアドレス変換 (Network Address Translation)) の仕組みがあり、アドレスが枯渇する問題を回避しうる仕組みを備えています。また、上述のプライベートアドレスを併用して、それぞれを個別に管理することでも、確実に枯渇を防いでいます。ただ、このような構成は雑用を増やすばかりで、管理の負担も増やす結果になってしまっています。また、 IPv4 のネットワーク内でホストを構築するには、そのホストに割り当てるアドレスとサブネットマスク、ゲートウエイのアドレスとネームサーバのアドレス (必要であれば) をそれぞれ設定することになります。これら全ての設定を知っておく必要があるため、それなりの手間にもなってしまいます。</para>

  <para>IPv6 を利用することで、アドレスの枯渇と複雑化した設定を過去のものにすることができます。下記の章では、 IPv6 で改善された内容や新しい内容を紹介しているほか、 IPv4 からの移行方法についても説明しています。</para>

  <sect2 xml:id="sec-network-ipv6-adv">
   <title>利点</title>
   <para>最も重要で、最も目立つ改善点として、アドレス領域の巨大化があります。 IPv4 では 32 ビットしかなかったアドレスが、 IPv6 では 128 ビットの巨大なアドレス領域になっています。これにより、数千兆個ものアドレスを割り当てることができるようになります。</para>
   <para>しかしながら、 IPv6 アドレスはアドレス領域を拡張しただけではありません。内部構造を新しくすることで、システムとネットワークに関する情報をより効率的に処理できるようになっています。詳しくは <xref linkend="sec-network-ipv6-address"/> をお読みください。</para>
   <para>新しいプロトコルにおける利点の一覧は下記のとおりです:</para>
   <variablelist>
    <varlistentry>
     <term>自動設定</term>
     <listitem>
      <para>IPv6 ではネットワークを <quote>プラグ&amp;プレイ</quote> 対応に進化させています。これにより、新しいコンピュータを (ローカルの) ネットワークに接続する際、手作業での設定作業を全く必要としなくなっています。コンピュータを新しく接続すると、自動設定の仕組みが動作し、ルータが提供する情報をもとにして独自のアドレスを割り当てます。これは <emphasis>neighbor discovery</emphasis> (ND) プロトコルと呼ばれる仕組みです。この方法では、管理者側で行なう作業は何もなく、 IPv4 で自動的なアドレス割り当てを実現していた DHCP サーバのように、アドレスを割り当てるための中央サーバも不要です。</para>
      <para>ルータがスイッチに接続されている場合でも、ルータはネットワークに接続するための情報を定期的に発信し続けます。詳しくは RFC 2462 と <systemitem>radvd.conf(5)</systemitem> のマニュアルページ、そして RFC 3315 をお読みください。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>モビリティ</term>
     <listitem>
      <para>IPv6 では、 1 つのネットワークインターフェイスに対して複数のアドレスを割り当てることができます。この仕組みにより、複数のネットワークに簡単に接続することができるため、携帯電話の事業者が提供する国際ローミングのように使用することができます。たとえばお使いの携帯電話を海外に持ち出した場合、その電話機は自動的にその地域の携帯電話サービスに接続しますが、どの国でも同じ番号のまま発着信できて、国内にいる場合と全く同じ使い心地で使用することができます。これと同じような仕組みを利用することができます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>セキュリティ</term>
     <listitem>
      <para>IPv4 ではネットワークセキュリティ (IPsec) がオプション扱いでしたが、 IPv6 では IPsec が中枢機能の 1 つとなり、盗聴の可能性があり得るインターネットの世界で、機密の守られた通信を行なうことができるようになっています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>後方互換性</term>
     <listitem>
      <para>現実的には、インターネット全体を一気に IPv4 から IPv6 に移行することは不可能です。そのため、インターネット内だけでなく、それぞれのシステムにも両方のプロトコルを共存させる仕組みが必須となります。このような要件から、互換アドレス (IPv4 アドレスを容易に IPv6 アドレスに変換できるアドレス) が用意され、トンネルを介してアクセスできる仕組みになっています。詳しくは <xref linkend="sec-network-ipv6-coexist"/> をお読みください。システム側では <emphasis>デュアルスタック IP</emphasis> と呼ばれる技術により、両方のプロトコルに対応し、どちらのプロトコルを経由してもインターネットにアクセスできる構造になっています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>マルチキャストを利用した独自サービス</term>
     <listitem>
      <para>IPv4 では、 SMB などのサービスでブロードキャストを利用し、ローカルネットワーク内の全てのホストにパケットを送信していました。 IPv6 では、より精密なアプローチである <emphasis>マルチキャスト</emphasis> を利用して、特定のグループ内の全体に情報を伝えることができるようになっています。これは全てのホストに通知する <emphasis>ブロードキャスト</emphasis> とも、特定の 1 台のホストのみに通信する <emphasis>ユニキャスト</emphasis> とも異なる仕組みです。どのホストがグループとして割り当てられるのかは、それぞれの用途によって異なります。あらかじめ決められたグループとしては、全てのネームサーバ (<emphasis>全ネームサーバ マルチキャストグループ</emphasis>) や全てのルータ (<emphasis>全ルータ マルチキャストグループ</emphasis>) などがあります。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-address">
   <title>アドレスの種類と構造</title>
   <para>上述のとおり、現在の IP プロトコルには 2 種類の大きな制限があります。 IP アドレスの枯渇と、それに伴って発生する経路制御 (ルーティング) テーブルの複雑化、そしてその運用の煩雑さです。 IPv6 では、アドレス領域を拡張することによって前者を解決していますし、後者についてはネットワークアドレスを構造化し、より整理された管理を行なうと共に、 <emphasis>マルチホーミング</emphasis> (複数のアドレスを 1 台のデバイスに設定し、複数のネットワークそれぞれにアクセスできる機能) でそれらを解決しています。</para>
   <para>IPv6 を扱うにあたっては、まずアドレスの種類について知っておくことをお勧めします:</para>
   <variablelist>
    <varlistentry>
     <term>ユニキャスト</term>
     <listitem>
      <para>この種類のアドレスは、厳密に 1 つのネットワークインターフェイスに関連づけられるものです。このアドレス宛に発信されたパケットは、特定の 1 台に宛てて送信されます。そのため、ユニキャストのアドレスは、ネットワーク内やインターネットで、特定のホスト同士が通信する際に使用します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>マルチキャスト</term>
     <listitem>
      <para>この種類のアドレスは、ネットワークインターフェイスのグループに関連づけられるものです。このアドレス宛に発信されたパケットは、グループに属する全ての宛先に送信されます。マルチキャストアドレスは、主に特定のネットワークサービスが使用するもので、特定のグループに属するホストに対して通信する際に使用します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>エニーキャスト</term>
     <listitem>
      <para>この種類のアドレスも、ネットワークインターフェイスのグループに関連づけられるものです。ただし、このアドレス宛に発信されたパケットは、ルーティングプロトコルの仕組みに従って、最も送信者に近いグループのメンバーに配信されます。エニーキャストアドレスは、特定のサービスを提供するサーバが、インターネット内に多数存在するような場合に利用します。同じ種類のサービスのサーバは、同じエニーキャストアドレスを持ちます。通常はルーティングプロトコルの仕組みで最も近いサーバに送信されますが、そのサーバが利用できない場合は 2 番目に近いサーバに、そのサーバも利用できない場合は 3 番目に近いサーバに、のように配信されます。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>IPv6 アドレスは 4 桁のフィールド 8 個で構成されています。それぞれのフィールドは 16 ビットの値を 16 進数で表わす仕組みで、フィールド間はコロン ( <literal>:</literal> ) で区切ります。また、 16 進数の上位の桁が 0 であった場合は 0 を省略して表記しますが、逆に下位の桁が 0 であった場合には省略を行ないません。また、特定のフィールドが完全な 0 であった場合にはそのフィールドの表記を省略して、 <literal>::</literal> と表わします。ただし <literal>::</literal> は 1 つしか設定できません。アドレス表記の例を下記に示します (いずれも同じアドレスを表わしています):</para>
   <example xml:id="aus-netz-ipv6-add">
    <title>IPv6 アドレスの例</title>
<screen>fe80 : 0000 : 0000 : 0000 : 0000 : 10 : 1000 : 1a4
fe80 :    0 :    0 :    0 :    0 : 10 : 1000 : 1a4
fe80 :                           : 10 : 1000 : 1a4</screen>
   </example>
   <para>IPv6 アドレスは、それぞれのパートごとにそれぞれの意味があります。最初のいくつかのバイトはプレフィクスとアドレスの種類を表わします。中央の部分はアドレスのネットワークパートと呼ばれ、場合によっては使用しません。末尾の部分はホストパートと呼ばれ、特定のホストを表わす部分になります。また、 IPv6 でのネットマスクはアドレスの末尾にスラッシュを置き、その後ろにプレフィクスの長さをビット数で表わします。たとえば <xref linkend="aus-netz-ipv6-addpre"/> のアドレスの場合は、最初の 64 ビットまでがアドレスのネットワークパートで、残りの 64 ビットがホストパートであることを示しています。これを言い換えると、 <literal>64</literal> とは左側から 64 ビット分までがネットワークパートであることになります。 IPv4 では、論理積 (AND) を利用して同じサブネットかどうかを判断していましたが、 IPv6 ではビット数のみを使用して判断します。</para>
   <example xml:id="aus-netz-ipv6-addpre">
    <title>プレフィクス長付きの IPv6 アドレス</title>
<screen>fe80::10:1000:1a4/64</screen>
   </example>
   <para>IPv6 には、いくつかの定義済みプレフィクスが存在しています。そのうちのいくつかを <xref linkend="list-net-basic-ipv6-prefix"/> で示します。</para>
   <variablelist xml:id="list-net-basic-ipv6-prefix">
    <title>様々な IPv6 プレフィクス</title>
    <varlistentry>
     <term><systemitem class="ipaddress">00</systemitem></term>
     <listitem>
      <para>IPv4 アドレスと IPv4 over IPv6 互換アドレスを表わします。これらは IPv4 との互換性を維持するために使用されているもので、ルータが IPv6 パケットを IPv4 パケットに変換できるようにするために使用します。このほか、ループバックデバイス向けのアドレスなどもこのプレフィクスを使用しています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>最初の 1 桁が <systemitem class="ipaddress">2</systemitem> または <systemitem class="ipaddress">3</systemitem></term>
     <listitem>
      <para>集約可能なグローバルユニキャストアドレス (Aggregatable global unicast addresses) と呼ばれるものです。 IPv4 の場合と同様に、インターフェイスに対して特定のサブネットの一部を構成するために割り当てられるものです。現時点では、下記のアドレス領域が存在しています: <systemitem class="ipaddress">2001::/16</systemitem> (本番用アドレス領域) および <systemitem class="ipaddress">2002::/16</systemitem> (6to4 用アドレス領域)</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">fe80::/10</systemitem></term>
     <listitem>
      <para>リンクローカルアドレスと呼ばれ、このプレフィクスを持ったアドレスは経路制御を行なうべきではなく、そのため同じサブネット内にしかアクセスできないアドレスです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">fec0::/10</systemitem></term>
     <listitem>
      <para>サイトローカルアドレスと呼ばれ、経路制御を行なってもかまわないものの、所属する特定の組織内でのみ使用すべきものです。実際には、 <systemitem class="ipaddress">10.x.x.x</systemitem> などの IPv6 アドレスにおけるプライベートアドレスとも呼べるものです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">ff</systemitem></term>
     <listitem>
      <para>これらはマルチキャストアドレスです。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>ユニキャストアドレスには、 3 種類の基本コンポーネントが含まれています:</para>
   <variablelist>
    <varlistentry>
     <term>パブリックトポロジ</term>
     <listitem>
      <para>最初の部分 (上述のプレフィクスを含む) は、一般的なインターネットを介してパケットを経路制御する際に使用します。インターネットアクセスを提供する企業や団体の情報を含む部分です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>サイトトポロジ</term>
     <listitem>
      <para>2 つ目の部分には、パケットの配信先のサブネットに関する経路情報が含まれています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>インターフェイス ID</term>
     <listitem>
      <para>3 つ目の部分には、パケットの配信先となるインターフェイスを識別するための情報が含まれています。このような構造により、 MAC アドレスをそのままアドレスとすることができるようになっています。 MAC アドレスが全世界で唯一の番号であると仮定すると、ハードウエアの製造元が固定の識別子をデバイスに割り当てていることになりますので、設定の手順も大きく単純化することができることになります。実際のところ、最初の 64 ビットのアドレスは <literal>EUI-64</literal> トークンを構成する値で、最後の 48 ビットは MAC アドレスから、残りの 24 ビットはトークンの種類を示す特殊な情報として設定されています。また、 PPP ベースのインターフェイスのように、 MAC アドレスを持たないものに対しても、 <literal>EUI-64</literal> を割り当てることができます。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>このような基本的なネットワーク構造に加えて、 IPv6 では 5 種類のユニキャストアドレスが規定されています:</para>
   <variablelist>
    <varlistentry>
     <term><systemitem class="ipaddress">::</systemitem> (未指定)</term>
     <listitem>
      <para>このアドレスは、インターフェイスを起動する際に初期のアドレスとして使用するものです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem class="ipaddress">::1</systemitem> (ループバック)</term>
     <listitem>
      <para>ループバックデバイスのアドレスです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv4 互換アドレス</term>
     <listitem>
      <para>この IPv6 アドレスは IPv4 アドレスを示すもので、 96 ビットのゼロをプレフィクスとして設定します。この種類の互換アドレスはトンネリング (詳しくは <xref linkend="sec-network-ipv6-coexist"/> をお読みください) で使用され、 IPv4 と IPv6 のホストが、純粋な IPv4 環境内で互いに通信できるようにするものです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv6 にマッピングされた IPv4 アドレス</term>
     <listitem>
      <para>この種類のアドレスは、純粋に IPv4 のアドレスを IPv6 表記になおしたものです。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ローカルアドレス</term>
     <listitem>
      <para>ローカルアドレスとしては、下記の 2 種類のものが存在します:</para>
      <variablelist>
       <varlistentry>
        <term>リンクローカル</term>
        <listitem>
         <para>この種類のアドレスは、ローカルのサブネット内でのみ使用することができます。この種類のアドレスを発信元または送信先に持つパケットは、インターネットや他のサブネットに配信すべきではありません。これらのアドレスに対しては、特別なプレフィクス ( <systemitem class="ipaddress">fe80::/10</systemitem> ) が設定され、末尾にはネットワークカードのインターフェイス ID と、残りはゼロで埋められたアドレスになります。この種類のアドレスは、同じサブネット内に存在する他のホストとの通信に使用し、自動設定を目的として使用します。</para>
        </listitem>
       </varlistentry>
       <varlistentry>
        <term>サイトローカル</term>
        <listitem>
         <para>この種類のアドレスは他のサブネットに配信してもかまわないものの、インターネットに対しては配信すべきではありません。企業内や団体内などの中でのみ使用すべきものです。イントラネットと呼ばれるネットワークで使用されるもので、 IPv4 で言うところのプライベートアドレスと同じ意味を持ちます。また、このアドレスには特殊なプレフィクス ( <systemitem class="ipaddress">fec0::/10</systemitem> ) が設定され、末尾にはネットワークカードのインターフェイス ID と、残りはゼロで埋められたアドレスになります。</para>
        </listitem>
       </varlistentry>
      </variablelist>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>IPv6 で全く新しい機能としては、それぞれのネットワークインターフェイスが複数のアドレスを持つのが一般的である、という機能があります。これにより、複数のネットワークにアクセスするにあたっても、同じインターフェイスを使用することができるようになります。これらのネットワークのうちいずれかは、 MAC アドレスと既知のプレフィクスを利用して完全に自動化された設定を行なうことができます。そのため、 IPv6 が有効化されてさえいれば、ローカルネットワーク内の全てのホストがリンクローカルアドレスで通信できることになります。なお、 MAC アドレスが IPv6 アドレスの一部となることから、世界中で使用される IPv6 アドレスもまた唯一のものになります。アドレスの残りの部分は <emphasis>サイトトポロジ</emphasis> とか <emphasis>パブリックトポロジ</emphasis> などと呼ばれますが、これはコンピュータの接続するネットワークに従って決まります。</para>
   <para>特定のコンピュータが異なるネットワークに属するコンピュータと通信を行なう場合、少なくとも 2 種類のアドレスを必要とします。 1 つは <emphasis>ホームアドレス</emphasis> と呼ばれ、インターフェイス ID だけでなく、通常属するホームネットワークに関する識別子 (および対応するプレフィクス) を持つものです。ホームアドレスは固定のアドレスであり、通常は変化するものではありません。ただし、モバイルホスト宛の全てのパケットは、家庭内にいてもどこか別の場所にいても、必ず配信することができるようになっています。これは、 IPv6 で新しい機能として導入された <emphasis>ステートレス自動設定</emphasis> と <emphasis>近隣探索</emphasis> によって実現されています。ホームアドレスに加えて、モバイルホストでは接続先に対応する 1 つ以上の追加アドレスが設定されます。これらは <emphasis>ケア・オブ (気付) アドレス</emphasis> と呼ばれます。また、ホームネットワークには、そのホストが別の場所にいるような場合に、そのホスト宛の通信を別の場所に転送する機能を備えています。 IPv6 環境では、この処理は <emphasis>ホームエージェント</emphasis> と呼ばれる仕組みが実装しています。これはホームアドレス宛の全てのパケットを、トンネルを介して中継する仕組みで、逆にケア・オブアドレス宛の通信は、特にパケットを迂回させることなくモバイルのホスト宛に転送されます。</para>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-coexist">
   <title>IPv4 と IPv6 の共存</title>
   <para>インターネットにおいて、全てのホストに対する IPv4 から IPv6 への以降は、順次進められている状況です。この場合は、両方のプロトコルが共存することになります。 1 つのシステム内での共存は、両方のプロトコルを実装する <emphasis>デュアルスタック</emphasis> の仕組みによって成り立っています。ただし、 IPv6 が有効化されたホストがどのようにして IPv4 のホストと通信するのか、および IPv6 パケットがどのように現在の (主に IPv4 ベースの) ネットワークで配送されていくのかが疑問になります。このような問題を解決するために、トンネリングと互換アドレスと呼ばれる仕組みが用意されています (詳しくは <xref linkend="sec-network-ipv6-address"/> をお読みください。</para>
   <para>IPv6 のホストは (世界中にある) IPv4 ネットワーク内では孤立した存在で、トンネルを通して通信を行なうことになります。 IPv6 パケットは IPv4 パケットとしてカプセル化され、 IPv4 のネットワークを移動します。このような IPv4 ホスト同士の接続を、 <emphasis>トンネル</emphasis> と呼びます。これを実現するためには、パケットには IPv6 の宛先アドレス (もしくは対応するプレフィクス) と、トンネルの出口となるリモートホストの IPv4 アドレスが含まれていなければなりません。ホストの管理者同士が合意して構築した基本的なトンネルは、 <emphasis>スタティック (静的) トンネリング</emphasis> と呼ばれます。</para>
   <para>しかしながら、スタティックトンネリングの設定やメンテナンスには双方にとって手間のかかるもので、日々の負担にもなってしまいます。そのため、 IPv6 では 3 種類の <emphasis>ダイナミック (動的) トンネリング</emphasis> 方式が用意されています:</para>
   <variablelist>
    <varlistentry>
     <term>6over4</term>
     <listitem>
      <para>IPv6 パケットは自動的に IPv4 パケットとしてカプセル化され、マルチキャストに対応した IPv4 ネットワーク内に送信されます。 IPv6 からの見た目では、ネットワーク全体 (つまりインターネット) が巨大なローカルエリアネットワーク (LAN) であるかのように扱われます。これにより、 IPv4 トンネルの受信側を決定できることになります。しかしながら、インターネットの世界ではマルチキャストが十分に普及していないことから、この方法は規模の拡大には十分に対応できない状況です。そのため、この方法はマルチキャストを利用できる小さな企業や団体などに対する解決方法にとどまっています。なお、この方式の仕様は、 RFC 2529 に規定されています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>6to4</term>
     <listitem>
      <para>この方法を利用すると、 IPv6 アドレスから IPv4 アドレスを自動生成して、孤立した IPv6 ホストを IPv4 ネットワークと通信できるようにします。ただし、 IPv6 とインターネットとの間での通信ら大して、いくつかの問題が報告されています。この方式は RFC 3056 に規定されています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv6 トンネルブローカー</term>
     <listitem>
      <para>この方法は、 IPv6 ホスト向けの専用トンネルを提供する特別なサーバを使用します。この方式は RFC 3053 に規定されています。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-config">
   <title>IPv6 の設定</title>
<!--
-    To disable or enable IPv6 on an installed system, start &yast;, open the
-    <menuchoice><guimenu>System</guimenu><guimenu>Network
-      Settings</guimenu></menuchoice> dialog and in the <guimenu>Global
-     Options</guimenu> tab, check or uncheck <guimenu>Enable IPv6</guimenu>.
-    <remark>TODO: Find out what the "disable autoload of the kernel module for
-     ipv6" means - is this a required manual step to be done outside of network
-    configuration?</remark>
+    To disable or enable IPv6 on an installed system, use &yast;
+    <guimenu>Network Card</guimenu>. Do not change the method and click
+    <guimenu>Next</guimenu>.
+    Then select a card and click <menuchoice>
+     <guimenu>Advanced</guimenu>
+     <guimenu>IPv6</guimenu></menuchoice>
+    in the <guimenu>Address</guimenu> tab.

-->
   <para>IPv6 を設定するには、通常は個別のコンピュータに対して作業を行なう必要はありません。これは、 IPv6 は既定で有効化されているためです。インストール済みのシステムで IPv6 を有効化もしくは無効化するには、 &yast; を起動して <guimenu>ネットワークの設定</guimenu> モジュールを起動します。 <guimenu>グローバルオプション</guimenu> のタブ内に、 <guimenu>IPv6 を有効にする</guimenu> のチェックボックスがありますので、必要に応じてチェックを入れるか外すかしてください。 <!--To enable or disable IPv6 manually, edit <filename>/etc/modprobe.d/50-ipv6.conf</filename> and restart the system.--> また、再起動するまでの間、一時的に IPv6 を有効化するには、 <systemitem class="username">root</systemitem> で <command>modprobe</command> <option>-i ipv6</option> を実行します。なお、いったんモジュールを読み込んでしまうと、再起動以外の手段では読み込みを解除することができなくなりますので、ご注意ください。</para>
   <para>IPv6 の自動設定の考え方により、ネットワークカードには <emphasis>リンクローカル</emphasis> のアドレスが割り当てられます。また、通常はワークステーション内でのルーティングテーブル管理は行ないません。 <emphasis>ルータアドバタイズメントプロトコル</emphasis> を利用することで、ワークステーション側からネットワークルータに問い合わせを行ない、プレフィクスと使用すべきゲートウエイに関する情報を取得します。通常は radvd プログラムを利用することで、 IPv6 ルータを構築します。そのほか、 zebra や quagga などを利用して、アドレス設定とルーティングを行なうこともできます。</para>
<!-- 2014-04-15, ke: Karol will add this man page to the wicked
   package as well -->
   <para><filename>/etc/sysconfig/network</filename> ファイルを利用して様々な種類のトンネルを設定する方法について、詳しくは <literal>ifcfg-tunnel</literal> のマニュアルページ ( <command>man ifcfg-tunnel</command> ) をお読みください。</para>
  </sect2>

  <sect2 xml:id="sec-network-ipv6-moreinfo">
   <title>さらなる情報</title>
   <para>これまでの章での説明は、 IPv6 の一部のみをカバーしたものであって、全てを説明しているわけではありません。この新しいプロトコルに関するより詳しい情報をご希望の場合は、下記のオンライン文書やブックをご覧ください:</para>
   <variablelist>
    <varlistentry>
     <term><link xlink:href="http://www.ipv6.org/"/></term>
     <listitem>
      <para>IPv6 に関する全ての出発点です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="http://www.ipv6day.org"/></term>
     <listitem>
      <para>ご自身で IPv6 ネットワークを始めるにあたっての情報が提供されています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="http://www.ipv6-to-standard.org/"/></term>
     <listitem>
      <para>IPv6 対応の製品の一覧が提供されています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><link xlink:href="http://www.bieringer.de/linux/IPv6/"/></term>
     <listitem>
      <para>ここには、 Linux における IPv6 の HOWTO や、 IPv6 関連の様々なリンクが提供されています。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>RFC 2460</term>
     <listitem>
      <para>IPv6 に関する基礎 RFC です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>IPv6 Essentials</term>
     <listitem>
      <para>Silvia Hagen 氏による IPv6 の主要な要素を説明した書籍です (ISBN 0-596-00125-8) 。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-network-nameres">
  <title>名前解決</title>

  <para>DNS は 1 つもしくは複数の名前を IP アドレスに割り当てたり、逆に IP アドレスを名前に割り当てたりすることのできる仕組みです。 DNS サービスを提供する側の Linux では、この変換を bind と呼ばれる特別な種類のソフトウエアで賄います。サービスを提供する側のコンピュータを、一般に <emphasis>ネームサーバ</emphasis> と呼びます。また、 DNS は階層型のシステムで、それぞれの階層をピリオドで区切ります。ただし、 IP アドレスにある階層構造とは独立して運用されています。</para>

  <para>たとえば <systemitem class="fqdomainname">&wsIname;</systemitem> のような完全な名前は、 <systemitem class="fqdomainname">ホスト名.ドメイン名</systemitem> のような形式で記述します。この完全な名前を <emphasis>完全修飾ドメイン名</emphasis> (Fully Qualified Domain Name; FQDN) と呼びます。また、ドメイン名 (例: <systemitem class="domainname">&exampledomain;</systemitem> ) の末尾は <emphasis>トップレベルドメイン</emphasis> (Top Level Domain; TLD) と呼びます。 上述の例では、 <systemitem class="domainname">com</systemitem> がそれにあたります。</para>

  <para>TLD の割り当ては、歴史的な事情からかなり複雑なことになっています。以前は、 3 文字の TLD はアメリカ合衆国が使用し、残りの国では、 2 文字の ISO 国コードを TLD として使用していました。これに加えて、 2000 年にはより長い TLD が導入され、様々な用途で使用されるようになりました (例: <systemitem class="domainname">.info</systemitem> , <systemitem class="domainname">.name</systemitem> , <systemitem class="domainname">.museum</systemitem> など) 。</para>

  <para>インターネットが始まったばかりの頃 (1990 年以前) 、インターネット上の全てのマシンの名前を保存するために、 <filename>/etc/hosts</filename> が使われてきました。ところが、インターネットに接続するコンピュータの台数が爆発的に増えることによって、それは一瞬で非現実的なものになってしまいました。このような経験から、ホスト名を管理するための分散データベースを開発して、それを世界中に広げることにしました。このデータベースはネームサーバに似た仕組みで、インターネット内の全てのホストを保持するには不十分であるものの、他のネームサーバにリクエストを転送できる仕組みを備えていました。</para>

  <para>階層構造の頂点には <emphasis>ルートネームサーバ</emphasis> と呼ばれるサーバが存在しています。これらのルートネームサーバは、トップレベルドメインを管理する存在で、ネットワークインフォメーションセンター (Network Information Center; NIC) が管理しています。それぞれのルートネームサーバは、どのネームサーバがどのトップレベルドメインを管理しているのかを知っています。トップレベルドメインの NIC は <link xlink:href="http://www.internic.net"/> です。</para>

  <para>DNS はホスト名の解決を行なうだけではありません。ドメイン全体の電子メールを受信するホストなどの情報 (<emphasis>Mail Exchanger (MX)</emphasis>) も保持しています。</para>

  <para>お使いのマシンから IP アドレスを解決できるようにするためには、少なくとも 1 台のネームサーバの IP アドレスが必要となります。ネームサーバの設定を行なうには、 &yast; をお使いください。 <phrase os="sles;osuse">&productnamereg; における具体的なネームサーバ設定については、 <xref linkend="sec-network-yast-change-host"/> をお読みください。また、独自のネームサーバを構築したい場合は、 <xref linkend="cha-dns"/> をお読みください。</phrase></para>

  <para><literal>whois</literal> と呼ばれるプロトコルは、 DNS と密接な関係を持つプロトコルです。このプロトコルは、特定のドメインに対する管理情報などを問い合わせることができます。</para>

<!-- bug 349467 -->

  <note>
   <title>マルチキャスト DNS と .local ドメイン名について</title>
   <para><literal>.local</literal> のトップレベルドメイン名はリンクローカルドメインと呼ばれるもので、このドメイン宛の DNS リクエストは、通常の DNS リクエストではなく、マルチキャスト DNS リクエストとして送信されます。既に <literal>.local</literal> というドメインをネームサーバの設定で使用している場合は、 <filename>/etc/host.conf</filename> で無効化する必要があります。詳しくは <filename>host.conf</filename> のマニュアルページをお読みください。</para>
   <para>インストール時にマルチキャスト DNS を使用しないようにするには、起動パラメータに <literal>nomdns=1</literal> を指定してください。</para>
   <para>マルチキャスト DNS についての詳細は、 <link xlink:href="http://www.multicastdns.org"/> をお読みください。</para>
  </note>
 </sect1>
 <xi:include href="net_yast.xml"/>
 <xi:include os="sled;osuse" href="networkmanager.xml"/>
 <xi:include href="net_wicked.xml"/>
 <xi:include os="sles;osuse" href="net_router.xml"/>
 <xi:include href="net_bonding.xml"/>
 <xi:include href="net_teaming.xml"/>
 <xi:include os="sles;osuse" href="net_sdn.xml"/>
</chapter>
