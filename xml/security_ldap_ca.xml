<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-security-ldap-server-ca">
 <title>Using CA certificates for TLS</title>
 <para>
  You can manage the CA certificates for &ds389; with the following command
  line tools: <command>certutil</command>, <command>openssl</command>, and
  <command>pk12util</command>.
 </para>
 <para>
  For testing purposes, you can create a self-signed certificate with
  <command>dscreate</command>. Find the certificate at
  <filename>/etc/dirsrv/slapd-localhost/ca.crt</filename>. For remote administration,
  copy the certificate to a readable location. For production environments,
  contact a CA authority of your organization's choice and request a server
  certificate, a client certificate, and a root certificate.
 </para>
 <para>
 Make sure to meet the following requirements before executing the procedure below:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    You have a server certificate and a private key to use for the TLS connection.
   </para>
  </listitem>
  <listitem>
   <para>
    You have set up an NSS (Network Security Services) database (for example,
    with the <command>certutil</command> command).
   </para>
  </listitem>
 </itemizedlist>

 <procedure>
  <para>
  Before you can import an existing private key and certificate into the NSS
  (Network Security Services) database, you need to create a bundle of the
  private key and the server certificate. This results in a <filename>*.p12</filename>
  file.
  </para>
  <important>
  <title><filename>*.p12</filename> file and friendly name</title>
  <para>
   When creating the PKCS12 bundle, you must encode a friendly name
   in the <filename>*.p12</filename> file.
  </para>
  <para>
   Make sure to use <literal>Server-Cert</literal> as the friendly name. Otherwise
   the TLS connection will fail, because the &ds389; searches for this exact string.
  </para>
  <para>
    Keep in mind that the friendly name cannot be changed after you
    import the <filename>*.p12</filename> file into the NSS
    database.
  </para>
 </important>
 <step>
  <para>
   Use the following command to create the PKCS12 bundle with the required friendly name:
  </para>
 <screen>&prompt.root;openssl pkcs12 -export -in <replaceable>SERVER.crt</replaceable> \
  -inkey <replaceable>SERVER.key</replaceable> -out <replaceable>SERVER.p12</replaceable> \
  -name Server-Cert</screen>
  <para>
   Replace <replaceable>SERVER.crt</replaceable> with the server certificate
   and <replaceable>SERVER.key</replaceable> with the private key to be bundled.
   With <option>-out</option>, specify the name of the <filename>*.p12</filename>
   file. Use <option>-name</option> to set the friendly name to use:
   <literal>Server-Cert</literal>.
  </para>
 </step>
 <step>
   <para>
     Before you can import the file into the NSS database, you need to
     obtain its password. To do this, use the following command:
   </para>
<screen>pk12util -i <replaceable>PATH_TO_SERVER.p12</replaceable> -d sql:PATH_TO_NSS_DB -n Server-cert -W <replaceable>SERVER.p12_PASSWORD</replaceable></screen>
   <para>
     You can then find the password in the
     <filename>pwdfile.txt</filename> file in the
     <replaceable>PATH_TO_NSS_DB</replaceable> directory.
   </para>
 </step>
 <step>
  <para>
   Now import the <replaceable>SERVER.p12</replaceable> file
   into your NSS database:
  </para>
  <screen>pk12util -i <replaceable>SERVER.p12</replaceable> -d <replaceable>PATH_TO_NSS_DB</replaceable></screen>
 </step>
 </procedure>
 </sect1>
