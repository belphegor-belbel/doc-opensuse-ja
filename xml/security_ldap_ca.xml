<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-security-ldap-server-ca">
 <title>Importing TLS server certificates and keys</title>
 <para>
  You can manage your CA certificates and keys for &ds389; with the following 
  command line tools: <command>certutil</command>, <command>openssl</command>, and <command>pk12util</command>.
 </para>
 <para>新しい &ds389a; インスタンスを作成すると、 <command>dscreate</command> は独自の証明機関を作成し、自己署名型のサーバ証明書を発行します。証明書のファイルは <filename>/etc/dirsrv/slapd-<replaceable>インスタンス名</replaceable>/</filename> 内に配置されます。それぞれ下記のようなファイルが存在します:</para>
  <para>
    For production environments, it is a best practice to use a third-party 
    certificate authority, such as Let's Encrypt, CAcert.org, SSL.com, or 
    whatever CA you choose. Request a server certificate, a client 
    certificate, and a root certificate.
  </para>
  <para>
   Meet the following requirements before executing the procedure below:
 </para>
 <itemizedlist>
  <listitem>
   <para>
    You have a server certificate and a private key to use for the TLS connection.
   </para>
  </listitem>
  <listitem>
   <para>
    You have set up an NSS (Network Security Services) database (for example,
    with the <command>certutil</command> command).
   </para>
  </listitem>
 </itemizedlist>

 <!--<para>
   NOTES
   ldapsearch -H ldap://ldapserver -D 'cn=Directory Manager' -W -Z -b 'cn=encryption,cn=config' -x
   /etc/openldap/ldap.conf
   TLS_REQCERT never
   ldapsearch -H ldap://ldapserver -D 'cn=Directory Manager' -W -Z -b 'cn=encryption,cn=config' -x
 </para>-->
 
 <procedure>
  <para>
  Before you can import an existing private key and certificate into the NSS
  database, you need to create a bundle of the private key and the server 
  certificate. This results in a <filename>*.p12</filename>
  file.
  </para>
  <important>
  <title><filename>*.p12</filename> file and friendly name</title>
  <para>
   When creating the PKCS12 bundle, you must encode <literal>Server-Cert</literal>
   as the friendly name in the <filename>*.p12</filename> file.
   Otherwise the TLS connection will fail, because the &ds389; searches for 
   this exact string.
  </para>
  <para>
    The friendly name cannot be changed after you
    import the <filename>*.p12</filename> file into the NSS
    database.
  </para>
 </important>
 <step>
  <para>
   Use the following command to create the PKCS12 bundle with the required friendly name:
  </para>
  <screen>&prompt.sudo;<command>openssl pkcs12 -export -in <replaceable>SERVER.crt</replaceable> -inkey <replaceable>SERVER.key</replaceable> -out <replaceable>SERVER.p12</replaceable> -name Server-Cert</command></screen>
  <para>
   Replace <replaceable>SERVER.crt</replaceable> with the server certificate
   and <replaceable>SERVER.key</replaceable> with the private key to be bundled.
   With the <option>-out</option>, specify the name of the <filename>*.p12</filename>
   file. Use <option>-name</option> to set the friendly name to use:
   <literal>Server-Cert</literal>.
  </para>
 </step>
 <step>
   <para>
     Before you can import the file into the NSS database, you need to
     obtain its password. To do this, use the following command:
   </para>
<screen>&prompt.sudo;<command>pk12util -i <replaceable>SERVER.p12</replaceable> -d sql:PATH_TO_NSS_DB -n Server-Cert -W <replaceable>SERVER.p12_PASSWORD</replaceable></command></screen>
   <para>
     You can then find the password in the
     <filename>pwdfile.txt</filename> file in the
     <replaceable>PATH_TO_NSS_DB</replaceable> directory.
   </para>
 </step>
 <step>
  <para>
   Now import the <replaceable>SERVER.p12</replaceable> file
   into your NSS database:
  </para>
  <screen>&prompt.sudo;<command>pk12util -i <replaceable>SERVER.p12</replaceable> -d <replaceable>PATH_TO_NSS_DB</replaceable></command></screen>
 </step>
 </procedure>
 </sect1>
