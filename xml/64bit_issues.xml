<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-64bit">
 <title>64 ビットシステム環境における 32 ビット／ 64 ビットアプリケーション</title>

 <info xmlns:d="http://docbook.org/ns/docbook">
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 <revhistory xml:id="rh-cha-64bit">
   <revision>
     <date>2024-05-13</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>
 <para>&productnamereg; は <phrase os="sles">いくつかの</phrase> 64 ビットプラットフォームで動作します。ですが、開発者側で全てのアプリケーションを 64 ビットプラットフォームに移植しているわけではありません。本章では、 64 ビットの &productname; プラットフォームで、どのようにして 32 ビットアプリケーションを動作させているのかについて、概要を説明しています。</para>
 <para>&productname; は <phrase os="sles">&ppc;, &zseries;, &amd64;/&intel64;</phrase><phrase os="sled;osuse">&amd64; や &intel64;</phrase> の各 64 ビットプラットフォームで動作しますが、この 64 ビット環境内で 32 ビットアプリケーションを標準で動作させることができます。 <phrase os="sles">&power; の場合は &ppc; 、 &amd64;/&intel64; の場合はx86 と呼ばれています。</phrase> このサポートにより、 64 ビット環境に移植されるのを待つまでもなく、既存の 32 ビットアプリケーションをそのまま使い続けることができるということです。 <phrase os="sles"> 現在の &power; システムでは、多くのアプリケーションが 32 ビットモードで動作していますが、 64 ビットアプリケーションにも対応しています。</phrase></para>


 <note>
  <title>32 ビットアプリケーションの構築に対するサポートについて</title>
  <para>&productname; では、 32 ビットアプリケーションのコンパイルには対応していません。 32 ビットアプリケーションの実行のみをサポートしています。</para>
 </note>


 <sect1 xml:id="sec-64bit-runt">
  <title>ランタイムのサポート</title>

  <important>
   <title>アプリケーションのバージョン間矛盾について</title>
   <para>あるアプリケーションに対して 32 ビット版と 64 ビット版の両方が存在する場合、両方のバージョンをインストールしてしまうと、問題が発生する場合があります。このような場合は、いずれかのバージョンをインストールしてお使いください。</para>
   <para>ただし、 PAM (プラグイン型の認証モジュール; Pluggable Authentication Modules) ついては例外です。認証処理時の PAM は、ユーザとアプリケーションとの間での仲介として動作します。 32 ビットアプリケーションを動作させる 64 ビットオペレーティングシステムの場合は、両方のバージョンの PAM モジュールをインストールする必要があります。</para>
  </important>

  <para>また、アプリケーションを正しく動作させるためには、様々なライブラリが必要となります。これらのライブラリの 32 ビット版と 64 ビット版は全く同じ名前になっていますので、名前以外の手段でこれらを互いに違うものとして扱わなければなりません。</para>

  <para>32 ビット版のアプリケーションの互換性を維持するために、 32 ビット版と 64 ビット版のライブラリは同じ場所に配置する必要があります。たとえば 32 ビット版の <filename>libc.so.6</filename> は、 32 ビットオペレーティングシステムでも 64 ビットオペレーティングシステムでも、 <filename>/lib/libc.so.6</filename> に配置します。</para>

  <para>一方の 64 ビット版のライブラリとオブジェクトは、 <filename>lib64</filename> 以下に配置されます。 32 ビット版で <filename>/lib</filename> や <filename>/usr/lib</filename> に配置していたオブジェクトファイルは、それぞれ <filename>/lib64</filename> と <filename>/usr/lib64</filename> に配置します。このような仕組みにより、 32 ビット版のライブラリは以前と同じ配置のまま、 64 ビット版のライブラリを同時に配置することができるようになっています。</para>

  <para>ただし、 32 ビット版の <filename>/lib</filename> ディレクトリには、ビットサイズに関係のないデータも含まれていますが、これらについては移動されておらず、従来通りデータが配置されています。これは LSB (Linux Standards Base) と FHS (Filesystem Hierarchy Standard) の仕様に準拠しているためです。</para>
 </sect1>
 <sect1 xml:id="sec-64bit-kernel">
  <title>カーネルの仕様</title>

  <para>&amd64;/&intel64; <phrase os="sles">や &power;, &zseries;</phrase> の 64 ビットカーネルでは、 64 ビットと 32 ビットの両方に対して ABI (アプリケーションバイナリインターフェイス) が提供されています。しかも、 32 ビット版の ABI については、 32 ビット版のカーネルと全く同じ仕様になっています。これにより、 32 ビットアプリケーションであっても、 32 ビットカーネルの場合と全く同じ方法で 64 ビットカーネルにアクセスできることになります。</para>

  <para>64 ビットカーネルでの 32 ビットシステムコールは、システムプログラムが使用する全ての API まではサポートしていません。これはプラットフォームに依存して決まります。このような理由から、 <command>lspci</command> のような少数のアプリケーションでは、同じビット数のライブラリを使用しなければなりません。 <phrase os="sles"> また、 &zseries;, では全ての 32 ビットカーネル ABI に対応しているというわけでもありません。</phrase></para>

  <para>なお、 64 ビット版のカーネルは 64 ビット版のカーネルモジュールだけを読み込むことができます。 32 ビット版のカーネルモジュールを読み込むことはできません。</para>

  <tip>
   <title>カーネルモジュールについて</title>
   <para>アプリケーションによってはカーネルモジュールを提供していて、それを読み込まなければ正しく動作しないものがあります。 64 ビットシステム環境で、このような 32 ビット版アプリケーションを動作させたい場合は、このアプリケーションの製造元に連絡をとって、 64 ビット版のカーネルモジュールを作成してもらい、 32 ビット版のアプリケーションで動作するよう依頼する必要があります。</para>
  </tip>
 </sect1>
</chapter>
