<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-ssh">
 <title>SSH: 機密を保持するネットワーク操作</title>
 <info>
  <abstract>
   <para>ネットワークによる接続が提供されている環境では、一方のホストから他方のホストにログインする必要が生じることがあります。ユーザが認証を目的としてユーザ名とパスワードを送信する際、それをそのままテキスト形式で送ってしまうと、それは容易に傍受することができてしまうため、そのアカウントになりすましてログインできるようになってしまいます。これにより、攻撃者がユーザの保持しているファイルを読み取ることができてしまうほか、管理者や <systemitem class="username">root</systemitem> のアカウントを奪取して不正なアカウントを作成することもできてしまいますし、他のコンピュータを攻撃する際の踏み台として使用することもできてしまいます。その昔は <command>telnet</command> , <command>rsh</command> , <command>rlogin</command> などのコマンドを利用して、ネットワーク上離れた場所との通信を確立していましたが、これらの方法はいずれも盗聴に対する保護が存在せず、暗号化などのセキュリティ機構も備わっていませんでした。それ以外にも、今もなお使用されている FTP などのプロトコルや、 <command>rcp</command> などのプログラムについても、暗号化が行なわれていませんでした。</para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>
 <para>SSH スイートは認証文字列 (通常はユーザ名とパスワード) だけでなく、コンピュータ間でやり取りされている全てのデータを暗号化することによって、必要な保護が得られるような仕組みを提供しています。 SSH でも第三者がデータの流れを傍受することはできてしまいますが、内容は暗号化されているため、暗号鍵を知らない限り元のデータを得ることができなくなっています。そのため、 SSH はインターネットなどの機密保護のないネットワークで、通信の機密を保持するために使用されます。なお、 &productname; での SSH 実装は、 OpenSSH という名称で提供されています。</para>
 <para>&productname; では、 <command>ssh</command> , <command>scp</command> , <command>sftp</command> の各コマンドを提供する OpenSSH パッケージが既定でインストールされます。また、既定の設定では、 &productname; システムへのリモートアクセスは OpenSSH を利用した場合にのみできるようになっていて、 <systemitem class="daemon">sshd</systemitem> を動作させ、ファイアウオールでアクセスを許可するように設定する必要があります。</para>
 <para>&productname; での SSH は、ハードウエアアクセラレーション機能が利用できる環境であれば、それを使用するように設定されています。その結果、 SSH を介した巨大なファイルの転送は、暗号化ハードウエア無しの場合に比べてかなり高速になるように作られています。また、追加の利点として、 CPU への負荷も少なくなるようになっています。</para>
 <sect1 xml:id="sec-ssh-programm">
  <title><command>ssh</command> &mdash;Secure SHell</title>

  <para><command>ssh</command> コマンドを使用することで、ネットワーク上離れたシステムにログインして対話的な作業を行なうことができます。たとえば &exampleuser; というユーザ名で <literal>&exampleserver;</literal> というホストにログインしたい場合は、下記のいずれかのコマンドを実行します:</para>

<screen>&prompt.user;ssh &exampleuser_plain;@&exampleserver;
&prompt.user;ssh -l &exampleuser_plain; &exampleserver;</screen>

  <para>両方のマシンでユーザ名が同じであれば、ユーザ名を指定する必要はありません。 <command>ssh &exampleserver;</command> のように入力して実行するだけで済みます。このコマンドを実行すると、パスワードの入力が求められますので、相手側のコンピュータでのパスワードを入力してください。認証が成功すると、相手側のコンピュータのコマンドラインを使用したり、 &yast; のテキストモードのような対話的なアプリケーションを使用したりすることができるようになります。</para>

  <para>これら加えて、 <command>ssh</command> では <command>ssh</command> <replaceable>ホスト</replaceable> <replaceable>コマンド</replaceable> のように入力して実行することで、対話操作を伴わないコマンドの実行にも対応しています。なお、 <replaceable>コマンド</replaceable> では適切に引用符を指定する必要があります。また、複数のコマンドはローカルのシェルと同じ方法で繋げることができます。</para>

<screen>&prompt.user;ssh root@&exampleserver; "dmesg -T | tail -n 25"
&prompt.user;ssh root@&exampleserver; "cat /etc/issue &amp;&amp; uptime"</screen>

  <sect2 xml:id="sec-ssh-programm-x">
   <title>ネットワーク上離れたホストでの X アプリケーションの起動</title>
   <para>SSH では、ネットワーク上離れた場所にある X アプリケーションも簡単に使用することができます。<command>ssh</command> コマンドに <option>-X</option> オプションを付けることで接続先の <envar>DISPLAY</envar> 変数が自動的に設定され、全ての X 出力が SSH の接続を介してローカルマシンに表示されるようになります。それと同時に接続先で起動された X アプリケーションは、不正に傍受されたりできないようになります。</para>
  </sect2>

  <sect2 xml:id="sec-ssh-programm-forwarding">
   <title>エージェント転送</title>
   <para><option>-A</option> オプションを追加することで、 ssh-agent 認証の仕組みが接続先のマシンで有効化されます。このオプションを使用することで、公開鍵を様々なホストに登録して適切な場所に保存しておくだけで、それらのホストにパスワード無しでログインできるようになります。詳しくは <xref linkend="sec-ssh-authentic-key-copy"/> をお読みください。</para>
   <para>この仕組みは既定の設定では無効化されていますが、 <filename>/etc/ssh/sshd_config</filename> というシステム全体の設定に <literal>AllowAgentForwarding yes</literal> を追加するだけで、いつでも恒久的に有効化することができます。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-ssh-copy">
  <title><command>scp</command> &mdash;機密を確保したファイルのコピー</title>

  <para><command>scp</command> は、指定したファイルをリモートのマシンとの間でコピーするプログラムです。 &wsI; 内でのユーザ名と &exampleserver; 内でのユーザ名が異なる場合は、 <option><replaceable>ユーザ名</replaceable>@<replaceable>ホスト名</replaceable></option> の形式で指定してください。また、ホームディレクトリ以外のディレクトリにファイルをコピーしたい場合は、 &exampleserver;: <replaceable>ディレクトリ</replaceable> の形式で指定してください。下記の例では、ローカルから接続先に、および接続先からローカルにそれぞれファイルをコピーしています。</para>

<screen>&prompt.user;scp ~/MyLetter.tex &exampleuser_plain;@&exampleserver;:/tmp <co xml:id="co-scp-local-remote"/>
&prompt.user;scp &exampleuser_plain;@&exampleserver;:/tmp/MyLetter.tex ~ <co xml:id="co-scp-remote-local"/></screen>
<calloutlist>
 <callout arearefs="co-scp-local-remote">
  <para>ローカルから接続先に</para>
</callout>
 <callout arearefs="co-scp-remote-local">
  <para>接続先からローカルに</para>
 </callout>
</calloutlist>
  <tip>
   <title><option>-l</option> オプションについて</title>
   <para><command>ssh</command> コマンドでは、 <option>-l</option> オプションを指定することで、接続先のコンピュータ内でのユーザを指定することができます (<option><replaceable>ユーザ名</replaceable>@<replaceable>ホスト名</replaceable></option> と同じ意味になります) 。 <command>scp</command> コマンドの場合、 <option>-l</option> は <command>scp</command> が消費する帯域を制限するためのオプションを意味しています。</para>
  </tip>

  <para>正しいパスワードの入力が行なわれると、 <command>scp</command> はデータ転送を開始します。進捗表示バーと、各ファイルの転送にかかる残り時間が表示されます。 <option>-q</option> オプションを指定すると、それらの出力を省略することができます。</para>

  <para><command>scp</command> はディレクトリ全体を再帰的にコピーする用途でも使用することができます:</para>

<screen>&prompt.user;scp -r src/ sun:backup/</screen>

  <para>上記のコマンドを実行すると、 <filename>src</filename> ディレクトリ内にある全てのファイルとサブディレクトリを、 &exampleserver; 内の <filename>~/backup</filename> ディレクトリにコピーします。サブディレクトリが存在していない場合は、それらは自動的に作成されます。</para>

  <para><option>-p</option> オプションは、 <command>scp</command> に対してファイルのタイムスタンプを変更しないようにするオプションです。 <option>-C</option> はデータ転送を圧縮するよう指示するオプションです。これにより転送の際のデータ量を減らすことができますが、送信側・受信側両方のホストでプロセッサにかかる負荷が上昇します。</para>
 </sect1>
 <sect1 xml:id="sec-ssh-sftp">
  <title><command>sftp</command> &mdash;機密を確保したファイルの転送</title>

  <sect2 xml:id="sec-ssh-sftp-using">
   <title><command>sftp</command> の使用</title>
  <para>複数のファイルをコピーしたい場合や、異なる場所からコピーを行ないたい場合は、 <command>scp</command> の代わりに <command>sftp</command> を利用したほうが便利になることがあります。このコマンドは、通常の FTP プロトコルと同様に、様々なコマンドを実行できるシェルを開くことができます。利用可能なコマンドの一覧を取得したい場合は、 sftp のプロンプトで <command>help</command> と入力してください。より詳しい詳細は、 <command>sftp</command> のマニュアルページに書かれています。</para>

<screen>&prompt.user;sftp &exampleserver;
Enter passphrase for key '/home/&exampleuser_plain;/.ssh/id_rsa':
Connected to &exampleserver;.
sftp&gt; help
Available commands:
bye                                Quit sftp
cd path                            Change remote directory to 'path'
[...]</screen>
  </sect2>
  <sect2 xml:id="sec-ssh-sftp-perms">
   <title>ファイルアップロードのパーミッション設定</title>
   <para>通常の FTP サーバと同様に、ユーザは SFTP を利用することで、ダウンロードだけでなくアップロードも行なうことができます。コマンドは通常の FTP サーバと同じで、 <command>put</command> コマンドを利用します。既定では、アップロードしたファイルのパーミッションは、ローカル側のパーミッションと同じに設定されます。ただし、自動的に設定されるパーミッションを変更したい場合は、下記のいずれかを実施してください:</para>
   <variablelist>
    <varlistentry>
     <term>umask の設定</term>
     <listitem>
      <para>umask はパーミッションに対するフィルタとして動作する仕組みで、元々のファイルとアップロード先のファイルとの間で、引き継いで欲しくないビットを 1 にします。なお、アクセス許可を追加することはできません。取り消すことのみ実現できます:</para>
      <table>
       <title/>
       <tgroup cols="3">
        <colspec colnum="1" colname="1" colwidth="33*"/>
        <colspec colnum="2" colname="2" colwidth="33*"/>
        <colspec colnum="3" colname="3" colwidth="33*"/>
        <thead>
         <row>
          <entry>
           <para>元々のパーミッション</para>
          </entry>
          <entry>
           <para>umask の値</para>
          </entry>
          <entry>
           <para>アップロードされたファイルのパーミッション</para>
          </entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry>
           <para>0666</para>
          </entry>
          <entry>
           <para>0002</para>
          </entry>
          <entry>
           <para>0664</para>
          </entry>
         </row>
         <row>
          <entry>
           <para>0600</para>
          </entry>
          <entry>
           <para>0002</para>
          </entry>
          <entry>
           <para>0600</para>
          </entry>
         </row>
         <row>
          <entry>
           <para>0775</para>
          </entry>
          <entry>
           <para>0025</para>
          </entry>
          <entry>
           <para>0750</para>
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
      <para>SFTP サーバ側で umask を適用するには、 <!-- NOTE: sshd_config (not sshd_configuration? --><filename>/etc/ssh/sshd_configuration</filename> ファイルを編集します。まずは <literal>Subsystem sftp</literal> で始まる行を探し、行の末尾に <option>-u</option> オプションを追加して、必要な値を指定してください。たとえば下記のようになります:</para>
<screen>Subsystem sftp /usr/lib/ssh/sftp-server -u 0002</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>明示的なパーミッションの指定</term>
     <listitem>
      <para>SFTP 経由でアップロードされた全てのファイルに対して、同じパーミッションを設定するように指定する方法です。 <option>-u</option> オプションと同様に、 <literal>600</literal> , <literal>644</literal> , <literal>755</literal> のような 3 桁のパーミッション値を指定してください。 <option>-m</option> と <option>-u</option> の両方が指定された場合、 <literal>-u</literal> は無視されます。</para>
      <para>SFTP サーバ側で明示的にパーミッションを指定するには、  <!-- NOTE: sshd_config (not sshd_configuration? --><filename>/etc/ssh/sshd_configuration</filename> ファイルを編集します。まずは <literal>Subsystem sftp</literal> で始まる行を探し、行の末尾に <option>-m</option> オプションを追加して、必要な値を指定してください。たとえば下記のようになります:</para>
<screen>Subsystem sftp /usr/lib/ssh/sftp-server -m 600</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-ssh-sshdserver">
  <title>SSH デーモン ( <systemitem class="daemon">sshd</systemitem> )</title>

  <para><command>ssh</command> や <command>scp</command> などのクライアント側プログラムを動作させるには、サーバ側で SSH デーモンを動作させておかなければなりません。 SSH デーモンは通常、裏で動く仕組みで、 <literal>TCP/IP ポート 22</literal> で接続を待ち受けています。デーモンは初回の起動時に 3 種類の鍵対を作成しますが、それぞれの鍵対には公開鍵と機密鍵が含まれています。そのため、この処理は公開鍵ベースの鍵の生成と呼ばれます。また、 SSH を介した通信の機密が保たれるようにするため、機密鍵を含むファイルへのアクセスは、システム管理者にのみ許可するように設定しなければなりません。ただし、ファイルへのアクセス権は自動的に設定されます。さらに、機密鍵はローカルの SSH デーモンのみが使用するものであり、それ以外のユーザに公開してはなりません。逆に公開鍵 (ファイル名の拡張子が <filename>.pub</filename> になっているもの) は、接続を行なうクライアントに送信されるものであり、全てのユーザから読み込むことができるようになっています。</para>

  <para>接続は SSH クライアント側から行ないます。その後、待ち受けている SSH デーモンと SSH クライアントとの間でプロトコルとソフトウエアバージョンを含む識別情報を交換し、誤ったポートからの接続が行なわれないようにします。 SSH デーモンの子プロセスが要求に応答する仕組みであるため、複数の SSH 接続を同時に受け付けることができるようになっています。</para>

  <para>SSH サーバと SSH クライアントとの間での通信において、 OpenSSH では SSH プロトコルのバージョン 1 とバージョン 2 の両方に対応しています。 SSH プロトコルではバージョン 2 が既定で使用されますが、 <option>-1</option> オプションを指定することで、バージョン 1 を強制的に使用することができます。</para>

  <para>SSH プロトコルのバージョン 1 を使用している場合、サーバ側ではホスト側の公開鍵と、 1 時間に 1 回再生成されるサーバ鍵を送信します。 SSH クライアント側では、任意に選択したセッション鍵を両方の鍵で暗号化して、 SSH サーバ側に送信します。 SSH クライアント側では、サーバに対して使用する暗号化方式を指定します。 SSH プロトコルのバージョン 2 では、サーバ鍵を必要としません。サーバとクライアントは、いずれも Diffie-Hellman の仕組みに従って鍵を交換します。</para>

  <para>セッション鍵を解読するには、ホスト鍵とサーバ鍵の両方の機密鍵必要となるほか、機密鍵は公開鍵からは生成できないものです。そのため、通信相手となっている SSH デーモンのみがセッション鍵を解読できることになります。このような接続当初の動作は、 SSH クライアント側で <option>-v</option> オプションを指定して冗長出力を行なうことで、より詳しく表示することができます。</para>


  <tip>
   <title>SSH デーモンのログファイルの表示について</title>
   <para><systemitem class="daemon">sshd</systemitem> が生成したログの出力を読みたい場合は、下記のコマンドを使用します:</para>
   <screen>&prompt.sudo;journalctl -u sshd</screen>
  </tip>


  <sect2>
   <title>SSH 鍵の管理</title>
  <para><filename>/etc/ssh/</filename> 内にある機密鍵と公開鍵の両方を、機密の保持される外部のデバイスにバックアップしておくことをお勧めします。バックアップを採取しておくことで、鍵が不正に書き換えられた際の検出ができるほか、新しくシステムをインストールし直すような場合にも対応することができます。</para>

  <tip>
   <title>既存の SSH ホスト鍵</title>
   <para>&productname; を既存の Linux インストールが存在する環境にインストールする場合、インストールルーチンは既存の SSH ホスト鍵を検索して、最も新しいアクセス日時のものを自動的に取り込むことができるようになっています。</para>
  </tip>

  <para>初めて特定のホストに接続すると、クライアントは公開鍵を <filename>~/.ssh/known_hosts</filename> 内に保存します。これにより、ネットワーク内で不正な鍵を使用させて、攻撃者に容易に機密メッセージを解読させてしまうような、中間者攻撃を防ぐことができます。このような攻撃が行なわれた場合、 <filename>~/.ssh/known_hosts</filename> 内に保存されているホスト鍵が変更されていることが検出されるか、もしくはサーバ側でメッセージが解読できないことで判明します。</para>

  <para>何らかの理由でホストの公開鍵が変わってしまった場合、クライアントはサーバへの接続前にその旨のメッセージを受け取ります。以前の鍵を削除したい場合は、 <command>ssh-keygen -r <replaceable>ホスト名</replaceable></command> を実行してください。</para>
  </sect2>
  <sect2 xml:id="sec-ssh-sshdserver-rotating">
   <title>ホスト鍵のローテーション</title>
   <para>OpenSSH バージョン 6.8 以降では、ホスト鍵の移行 (rotation) に対応するプロトコル拡張が提供されています。これは鍵を置き換える際に使用するためのもので、たとえば 1024 ビット RSA 鍵のような弱い鍵を使用していて、 2048 ビット DSA 鍵などのような強い鍵に置き換えるような場合に有用な仕組みです。クライアント側では、対応可能な <quote>最適の</quote> 鍵を使用するようになります。</para>
   <tip>
    <title>sshd の再起動について</title>
    <para>サーバ側で新しいホスト鍵をインストールした場合は、 sshd を再起動してください。</para>
   </tip>
   <para>このプロトコル拡張は、ユーザが <command>ssh</command> で接続を開始した際、クライアントに対してサーバ内にある新しいホスト鍵を通知することができる仕組みです。クライアント側のソフトウエアでは、その通知を受け取ると <filename>~/.ssh/known_hosts</filename> ファイルを更新し、ユーザに対して新しい鍵の問い合わせを行なったりすることなく、新しい鍵を信頼することができます。つまり、 <filename>known_hosts</filename> ファイルには、初回の接続時にユーザに問い合わせた鍵に加えて、接続先のホスト内にある全てのホスト鍵が含まれることになります。</para>
   <para>サーバの管理者側では、クライアント側の全員が新しい鍵を使用するようになったことを確認できれば、古いほうの鍵を削除することができます。このプロトコル拡張では、クライアント側で保存されている古い鍵を削除させることもできます。この鍵の削除処理は、 <command>ssh</command> セッション内で行なわれます。</para>
   <para>さらに詳しい情報を知りたい場合は、下記を参照してください:</para>
   <itemizedlist>
    <listitem>
     <para><link xlink:href="http://blog.djm.net.au/2015/02/key-rotation-in-openssh-68.html"/> (英語)</para>
    </listitem>
    <listitem>
     <para><link xlink:href="http://heise.de/-2540907"/> ( <quote xml:lang="ja">Endlich neue Schlüssel für SSH-Server</quote> (ドイツ語のみ))</para>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>

 <!-- ================================================================ -->

<sect1 xml:id="sec-ssh-authentic">
  <title>SSH 認証の仕組み</title>

  <para>最も簡単な構成では、ログイン時にユーザのパスワードを入力させて認証を行ないます。しかしながら、複数のコンピュータを利用しているような場合、いちいちパスワードを覚えておくのは非効率ですし、面倒です。また、これらのパスワードは管理上の理由などで変更を行なわなければならないこともあります。それだけでなく、 &rootuser; のアクセスを許可するような場合、管理者側では &rootuser; のパスワードを変更することなく、素早く個別の許可を取り消す措置を備えていなければならない場合もあります。</para>

  <para>このような要件に対応するため、接続先のパスワードを入力することなくログインできる仕組みが用意されています。ユーザ側で鍵対を生成して、この鍵対を認証の代用として使用する方法です。この鍵対には公開鍵 ( <filename>id_rsa.pub</filename> もしくは <filename>id_dsa.pub</filename> ) と機密鍵 ( <filename>id_rsa</filename> もしくは <filename>id_dsa</filename> ) が含まれています。</para>

  <para>接続先のユーザのパスワードを指定せずにログインできるようにするには、生成した公開鍵を、接続先のユーザのホームディレクトリ以下にある <filename>~/.ssh/authorized_keys</filename> というファイルに保存しておかなければなりません。このファイルに保存する際には、このユーザのパスワードを知っておかなければなりませんし、公開鍵を削除すればアクセスも拒否されるようになることから、アカウントに対する完全な制御を実現できることになります。</para>

  <para>生成した鍵対そのものに対する機密を保護するため、鍵対にはパスフレーズを設定しておいて、 <command>ssh</command> , <command>scp</command> , <command>sftp</command> のような各コマンドを使用する際に、パスフレーズを入力するように設定しておくことをお勧めします。通常のパスワード認証とは異なり、接続先のホストのユーザのパスワードとは連動していないものですので、自由に管理することができます。</para>

  <para>上述のとおり鍵対を利用した認証方法のほかに、 SSH ではホストベースの認証にも対応しています。ホストベースの認証では、信頼されているホスト内のユーザは、同じユーザに対して同機能が有効化されている接続先にログインすることができるようになります。 &productname; では鍵対ベースの認証を設定しますので、本マニュアルでは説明していません。</para>

  <note>
<!-- fix for bug #398647 -->
   <title>ホストベースの認証でのファイルパーミッションについて</title>
   <para>ホストベースの認証を使用している場合、 <filename>/usr/lib/ssh/ssh-keysign</filename> に対して setuid ビットを設定する必要があります。既定の &productname; ではそのような設定を行なっていませんので、必要であれば手作業で設定を行なってください。なお、 <filename>/etc/permissions.local</filename> ファイルで必要な設定を行なうことで、 <package>openssh</package> 自身に対する更新が提供された場合でも、パーミッションを設定し直す必要が無くなります。</para>
  </note>

  <sect2 xml:id="sec-ssh-authentic-gen-key">
   <title>SSH 鍵の生成</title>
   <procedure>
    <step>
     <para>既定のパラメータ (RSA, 2048 ビット) で鍵対を生成するには、 <command>ssh-keygen</command> と入力して実行します。</para>
    </step>
    <step>
     <para>生成された鍵対の保存先を尋ねられますので、 <keycap function="enter"/> を押して既定の保存先 ( <filename>~/.ssh/id_rsa</filename> ) に保存するか、もしくは独自の場所を指定して保存します。</para>
    </step>
    <step>
     <para>パスフレーズを 10 文字から 30 文字程度の範囲で指定します。パスワードと同じルールで設定することをお勧めします。また、パスフレーズの省略はお勧めできません。</para>
    </step>
   </procedure>
   <para>機密鍵については、自分自身以外には決してアクセスされることの無いよう、注意して保存を行なってください (パーミッションは <literal>0600</literal> に設定しておくべきです) 。また、機密鍵が他者に渡るようなことが決して起こらないようにもしてください。</para>
   <para>既存の鍵対に対するパスフレーズを変更するには、 <command>ssh-keygen -p</command> を実行します。</para>
  </sect2>

  <sect2 xml:id="sec-ssh-authentic-key-copy">
   <title>SSH 鍵のコピー</title>
   <para>SSH の公開鍵を接続先の <filename>~/.ssh/authorized_keys</filename> にコピーする際、 <command>ssh-copy-id</command> コマンドを使用することができます。生成した鍵を <filename>~/.ssh/id_rsa.pub</filename> 内に保存していれば、簡単にコピーを行なうことができます。 DSA 鍵を使用しているような場合や、異なるファイル名に保存している場合は、パスを指定して実行する必要があります:</para>
  <screen>&prompt.user;<prompt>~/.ssh/id_rsa.pub</prompt>
ssh-copy-id -i &exampleuser_plain;@&exampleserver;

&prompt.user;<prompt>~/.ssh/id_dsa.pub</prompt>
ssh-copy-id -i ~/.ssh/id_dsa.pub  &exampleuser_plain;@&exampleserver;

&prompt.user;<prompt>~notme/.ssh/id_rsa.pub</prompt>
ssh-copy-id -i ~notme/.ssh/id_rsa.pub  &exampleuser_plain;@&exampleserver;</screen>
   <para>鍵のコピーを行なうには、接続先のユーザのパスワードを入力する必要があります。また、鍵を削除したい場合は、 <filename>~/.ssh/authorized_keys</filename> ファイルを手作業で編集してください。</para>
  </sect2>

  <sect2 xml:id="sec-ssh-authentic-agent">
   <title><command>ssh-agent</command> の使用</title>
   <para>Secure SHell で何度も作業を行なうような場合、いちいちパスワードやパスフレーズを入力するのは面倒です。そのため、 SSH パッケージにはもう 1 つのツールである <command>ssh-agent</command> が提供されています。これは X セッションや端末セッションが有効である間、機密鍵を保持することができる仕組みです。その他のウインドウやプログラムは、 <command>ssh-agent</command> に対するクライアントとして起動します。 <command>ssh-agent</command> を起動することで様々な環境変数が設定され、 <command>ssh</command> , <command>scp</command> , <command>sftp</command> で自動ログインを行なうことができるよう、エージェントの場所を通知することができます。詳しい説明については、 <command>ssh-agent</command> のマニュアルページをお読みください。</para>
   <para><command>ssh-agent</command> を起動したあとは、 <command>ssh-add</command> コマンドで鍵を追加していきます。このとき、パスフレーズの入力を求められます。パスフレーズをいったん入力してしまえば、再度認証を行なうことなく Secure SHell のコマンドを使用することができるようになります。</para>
   <sect3 xml:id="sec-ssh-authentic-agent-x">
    <title>X セッション内での <command>ssh-agent</command> の使用</title>
    <para>&productname; では、 &gnome; ディスプレイマネージャ経由でログインすることで、自動的に <command>ssh-agent</command> が起動されます。あとは <command>ssh-add</command> コマンドを実行して、 X セッションの冒頭で鍵を追加していくことになりますが、この処理をログイン時に自動的に実施したい場合は、下記のようにして実行します:</para>
    <procedure>
     <step>
      <para>まずは目的のユーザでログインして、 <filename>~/.xinitrc</filename> ファイルが存在していないかどうかを確認します。</para>
     </step>
     <step>
      <para>存在していない場合は、 <filename>/etc/skel</filename> 内にある雛形を使用して設定するか、もしくはシンプルにコピーして使用します:</para>
<screen>if [ -f ~/.xinitrc.template ]; then mv ~/.xinitrc.template ~/.xinitrc; \
else cp /etc/skel/.xinitrc.template ~/.xinitrc; fi</screen>
     </step>
     <step>
      <para>雛形をコピーしたあとは、下記のような行を探してコメント文字 (#) を外します。 <filename>~/.xinitrc</filename> が既に存在しているような場合は、下記のような行を追加します (コメント文字 (#) は外して記入してください) 。</para>
<screen># if test -S "$SSH_AUTH_SOCK" -a -x "$SSH_ASKPASS"; then
#       ssh-add &lt; /dev/null
# fi</screen>
     </step>
     <step>
      <para>新しい X セッションを開始すると、 SSH 鍵に対するパスフレーズの入力を求められます。</para>
     </step>
    </procedure>
   </sect3>
   <sect3 xml:id="sec-ssh-authentic-agent-terminal">
    <title>端末セッション内での <command>ssh-agent</command> の使用</title>
    <para>端末セッションの場合は、 <command>ssh-agent</command> を手作業で起動して、後から <command>ssh-add</command> を実行する必要があります。 <command>ssh-agent</command> の起動方法には 2 種類のものがあります。 1 行目の例は既存のシェルから <command>ssh-agent</command> を起動して、その中で新しいシェルを起動する方法、 2 行目の例は既存のシェル内で <command>ssh-agent</command> を起動して、必要に応じて環境を書き換える方法です。</para>
<screen>&prompt.user;ssh-agent -s /bin/bash
eval $(ssh-agent)
    </screen>
    <para>エージェントを起動したら、 <command>ssh-add</command> を実行して鍵を追加していってください。</para>
   </sect3>
  </sect2>

<!-- fs 2012-10-02:

     Not sure what to do with this...

    <sect2 id="sec-ssh-authentic-host-based">
   <title>Host-based Authentication</title>
   <para></para>
  </sect2>
-->
 </sect1>
 <sect1 xml:id="sec-ssh-port-forwarding">
  <title>ポート転送</title>

  <para><command>ssh</command> は TCP/IP 接続を転送するような用途でも使用することができます。この機能は <literal>SSH トンネリング</literal> とも呼ばれ、暗号化された通信を介して TCP の接続を別のマシン内にある特定のポートに転送することができます。</para>

  <para>下記のコマンドを実行することで、 <!-- NOTE: wrong explanation? --> ローカルの TCP ポート 25 (SMTP) への接続を行なうと、 &wsI; への暗号化接続を介して &exampleserver; の TCP ポート 25 (SMTP) に接続するようになります。これは特に、 SMTP-AUTH や POP-before-SMTP のような機能を持たない SMTP サーバを使用するような場合に有用です。 <!-- NOTE: bind adress must be set to "0.0.0.0" in order to be connected from network, i.e. "-L 0.0.0.0:25:&exampleserver;:25" -->このようにポート転送を行なうことで、電子メールを <quote>自宅の</quote> メールサーバに配送するような構成を構築することができます。</para>

<screen>&prompt.root;ssh -L 25:&exampleserver;:25 &wsI;</screen>

  <para>上記と同様に、全ての POP3 接続 (ポート 110) を &exampleserver; に転送したい場合は、下記のように実行します:</para>

<screen>&prompt.root;ssh -L 110:&exampleserver;:110 &wsI;</screen>

  <para>いずれのコマンドも特権ポートを使用していることから、 &rootuser; で実行しなければなりません。いったんコマンドを実行すれば、一般ユーザからもそのポートを使用して電子メールを送受信できるようになります。この場合、電子メールソフトウエア側のサーバ設定は <literal>localhost</literal> を指定します。上記で説明したそれぞれのプログラムのオプションに関する説明は、 <filename>/usr/share/doc/packages/openssh</filename> 内にある OpenSSH のパッケージドキュメンテーション内にあります。</para>
 </sect1>

 <sect1 xml:id="sec-ssh-publickey">
  <title>インストール済みのシステムにおける公開鍵の追加と削除</title>
  <para>利用環境によっては、 SSH を利用してログインしたほうが便利であったり、 SSH 経由でのログインが必要となったりすることがあります。このような場合、 SSH 公開鍵認証を利用してログインする必要があることもあります。 SSH 鍵を追加もしくは削除するには、下記の手順で行ないます:</para>
  <procedure>
   <step>
    <para>&yast; を開きます。</para>
   </step>
   <step>
    <para><guimenu>セキュリティとユーザ</guimenu> 内にある <guimenu>ユーザとグループの管理</guimenu> を選択します。</para>
   </step>
   <step>
    <para>鍵を追加もしくは削除したいユーザを選んで、 <guimenu>編集</guimenu> を押します。</para>
   </step>
   <step>
    <para><guimenu>SSH 公開鍵</guimenu> タブに切り替えます。</para>
   </step>
   <step>
    <para>ここから公開鍵を追加もしくは削除することができます。 SSH 公開鍵を追加する場合は、 <filename class="extension">.pub</filename> というファイル名のファイルを追加することができます。</para>
   </step>
   <step>
    <para><guimenu>OK</guimenu> を押して閉じます。</para>
   </step>
  </procedure>

  <para>追加した公開鍵は、 <filename>~/.ssh/authorized_keys</filename> 内に保存されます。</para>
 </sect1>

 <sect1 xml:id="sec-security-ssh-moreinfo">
  <title>さらなる情報</title>

  <para/>

  <variablelist>
   <varlistentry>
    <term><link xlink:href="http://www.openssh.com"/></term>
    <listitem>
     <para>OpenSSH の Web ページ</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="http://en.wikibooks.org/wiki/OpenSSH"/></term>
    <listitem>
     <para>OpenSSH Wikibook (英語)</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>man sshd</command></term>
    <listitem>
     <para>OpenSSH デーモンのマニュアルページ</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>man ssh_config</command></term>
    <listitem>
     <para>OpenSSH のクライアント側設定ファイルのマニュアルページ</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>man scp</command></term>
    <term><command>man sftp</command></term>
    <term><command>man slogin</command></term>
    <term><command>man ssh</command></term>
    <term><command>man ssh-add</command></term>
    <term><command>man ssh-agent</command></term>
    <term><command>man ssh-copy-id</command></term>
    <term><command>man ssh-keyconvert</command></term>
    <term><command>man ssh-keygen</command></term>
    <term><command>man ssh-keyscan</command></term>
    <listitem>
     <para>ファイルコピー ( <command>scp</command> , <command>sftp</command> ) やログイン ( <command>slogin</command> , <command>ssh</command> ) 、鍵管理などのコマンドに対するマニュアルページ。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><filename>/usr/share/doc/packages/openssh/README.SUSE</filename></term>
    <term><filename>/usr/share/doc/packages/openssh/README.FIPS</filename></term>
    <listitem>
     <para>&suse; 固有のパッケージドキュメンテーション; FIPS モードなど、提供元からの既定値の変更点などを説明しています。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
