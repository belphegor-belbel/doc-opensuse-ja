<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="createprofile-scripts">
 <title>独自のユーザスクリプト</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>自動インストールの処理内にスクリプトを追加することで、必要に応じた独自のカスタマイズを実現することができるほか、インストール時のさまざまな段階で制御を行うことができるようになります。</para>

 <para os="sles;sled;osuse">自動インストールの処理内では、全部で 5 箇所のスクリプトの実行タイミングが提供されています。</para>

 <para os="slemicro">自動インストールの処理内では、全部で 3 箇所のスクリプトの実行タイミングが提供されています。</para>

 <para>全てのスクリプトは &lt;scripts&gt; セクション内に記述します。</para>

 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para><literal>pre-scripts</literal>: いずれかの作業が発生するよりも前の、最も早い段階 (事前スクリプト)</para>
  </listitem>
  <listitem>
   <para><literal>postpartitioning-scripts</literal>: パーティションの設定と <filename>/mnt</filename> へのマウントが完了しているが、 RPM のインストールを行うよりも前の段階 (パーティション設定後スクリプト)</para>
  </listitem>
  <listitem>
   <para><literal>chroot-scripts</literal>: パッケージのインストールが完了し、初回の起動が行われるよりも前の段階 (chroot 環境スクリプト)</para>
  </listitem>
  <listitem os="sles;sled;osuse">
   <para><literal>post-scripts</literal>: インストール済みのシステムの初回起動時で、サービスが全く動作していない状態 (事後スクリプト)</para>
  </listitem>
  <listitem os="sles;sled;osuse">
   <para><literal>init-scripts</literal>: インストール済みのシステムの初回起動時で、全てのサービスが起動し動作している状態 (準備スクリプト)</para>
  </listitem>
 </itemizedlist>

 <sect2 xml:id="pre-install-scripts">
  <title>事前スクリプト</title>
  <para>&yast; がシステムに対して何らかの変更を加えるよりも前の段階で動作します (ハードウエアの検出が完了しているものの、パーティション設定やパッケージのインストールよりも前の段階) 。</para>
  <para>事前スクリプトでは制御ファイルの修正を行い、 &ay; に対して修正後のものを読み込み直すように指示することができます。制御ファイルは <filename>/tmp/profile/autoinst.xml</filename> に配置されますので、修正後の版を <filename>/tmp/profile/modified.xml</filename> に配置してください。 &ay; では、事前スクリプトの動作完了後に修正後のファイルを読み込みなおします。</para>
  <para>事前スクリプトでは、ストレージデバイスの編集を行うこともできます。たとえば新しいパーティションの作成や、マルチパスのような特定技術の設定変更などがそれにあたります。 &ay; では、全ての事前スクリプトが実行された後に、必ず再度ストレージデバイスをチェックするようになっています。</para>
  <note>
   <title>確認表示付きの事前スクリプトについて</title>
   <para>事前スクリプトはインストールの冒頭で動作します。インストール時に確認を求めるように設定した場合 (<literal>profile/install/general/mode/confirm</literal>) でも、これらのスクリプトは確認画面を表示するよりも前の段階で動作してしまいます。</para>
  </note>
  <note>
   <title>事前スクリプトと zypper について</title>
   <para>事前スクリプトで <emphasis>zypper</emphasis> を実行したい場合は、動作中の &yast; プロセスと衝突しないようにするため、 <emphasis>ZYPP_LOCKFILE_ROOT="/var/run/autoyast"</emphasis> という環境変数を設定する必要があります。</para>
  </note>
  <para><literal>事前スクリプト</literal> の要素は下記のように配置しなければなりません:</para>
<screen>&lt;scripts&gt;
  &lt;pre-scripts config:type="list"&gt;
    &lt;script&gt;
      ...
    &lt;/script&gt;
  &lt;/pre-scripts&gt;
&lt;/scripts&gt;</screen>
 </sect2>

 <sect2 xml:id="postpartitioning-install-scripts">
  <title>パーティション設定後スクリプト</title>
  <para>&yast; がパーティションの設定を行い、 <filename>/etc/fstab</filename> 内に書き込みを行った後に動作するスクリプトです。 <filename>/mnt</filename> 内には何もないシステムがマウントされているタイミングになります。</para>
  <para><literal>パーティション設定後スクリプト</literal> の要素は下記のように配置しなければなりません:</para>
<screen>&lt;scripts&gt;
  &lt;postpartitioning-scripts config:type="list"&gt;
    &lt;script&gt;
      ...
    &lt;/script&gt;
  &lt;/postpartitioning-scripts&gt;
&lt;/scripts&gt;</screen>
 </sect2>

 <sect2 xml:id="chroot-scripts">
  <title>chroot 環境スクリプト</title>
  <para>chroot 環境スクリプトはインストールが完了したあと、マシンの再起動を行う前に動作します。 chroot スクリプトはインストーラがインストール済みのシステムに chroot し、ブートローダの設定を行う前に実行するか、もしくはインストール済みのシステムに chroot した後に動作させることができます (詳しくは <literal>chrooted</literal> パラメータをお読みください) 。</para>
  <para><literal>chroot 環境スクリプト</literal> の要素は下記のように配置しなければなりません:</para>
<screen>&lt;scripts&gt;
  &lt;chroot-scripts config:type="list"&gt;
    &lt;script&gt;
      ...
    &lt;/script&gt;
  &lt;/chroot-scripts&gt;
&lt;/scripts&gt;</screen>
 </sect2>

 <sect2 os="sles;sled;osuse" xml:id="post-install-scripts">
  <title>事後スクリプト</title>
  <para>これらのスクリプトは、 &ay; がシステムの設定を完了し、システムの初回起動が完了したあとに実行されます。</para>
  <para><literal>事後スクリプト</literal> の要素は下記のように配置しなければなりません:</para>
<screen>&lt;scripts&gt;
    &lt;post-scripts config:type="list"&gt;
      &lt;script&gt;
        ...
      &lt;/script&gt;
    &lt;/post-scripts&gt;
  &lt;/scripts&gt;</screen>
 </sect2>

 <sect2 os="sles;sled;osuse" xml:id="init-scripts">
  <title>準備スクリプト</title>
  <para>これらのスクリプトは &yast; の処理が完了し、ネットワークの準備が完了したあと、初回の起動処理内で実行されます。これらの最終スクリプトは <filename>/usr/lib/YaST2/bin/autoyast-initscripts.sh</filename> を利用して動作するものであり、一度のみ動作します。準備スクリプトは <emphasis>init-scripts</emphasis> タグで設定します。</para>
  <para><literal>準備スクリプト</literal> の要素は下記のように配置しなければなりません:</para>
<screen>&lt;scripts&gt;
    &lt;init-scripts config:type="list"&gt;
      &lt;script&gt;
        ...
      &lt;/script&gt;
    &lt;/init-scripts&gt;
&lt;/scripts&gt;</screen>
  <para>準備スクリプトは他の種類のスクリプトとは異なり、 &yast; 経由で実行されるものではなく、 &yast; の完了後に実行されます。このような仕組みであることから、この XML 表記は他とは異なる形になります。</para>
  <variablelist>
   <title>準備スクリプトの XML 表記</title>
   <varlistentry>
    <term><literal>location</literal></term>
    <listitem>
     <para>スクリプトの取得元の場所を指定します。場所にはプロファイルと同じプロトコル (http, ftp, nfs, など) を指定することができます。</para>
<screen>&lt;location&gt;http://10.10.0.1/myInitScript.sh&lt;/location&gt;</screen>
     <para>&lt;location&gt; もしくは &lt;source&gt; を定義しなければなりません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>source</literal></term>
    <listitem>
     <para>スクリプトそれ自身 (ソースコード) は CDATA タグ内にカプセル化して記述します。 XML プロファイル内にシェルスクリプト全体を配置したくない場合は、 location パラメータを指定してください。</para>
<screen>&lt;source&gt;
&lt;![CDATA[echo "Testing the init script" &gt;/tmp/init_out.txt]]&gt;&lt;/source&gt;</screen>
     <para>&lt;location&gt; もしくは &lt;source&gt; を定義しなければなりません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>filename</literal></term>
    <listitem>
     <para>スクリプトのファイル名を指定します。一時ディレクトリ <filename>/tmp</filename> 内にファイル名となります。</para>
<screen>&lt;filename&gt;mynitScript5.sh&lt;/filename&gt;</screen>
     <para>準備スクリプトが 1 つだけである場合は任意です。この場合は、既定の名前 ( <filename>init-scripts</filename> ) が使用されます。複数のスクリプトを使用している場合は、それぞれのスクリプトに対して重複しない名前を設定しなければなりません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>rerun</literal></term>
    <listitem>
     <para><literal>ayast_setup</literal> を使用して XML ファイルを複数回実行するように設定しても、通常はスクリプトが一度だけ実行されます。この既定の動作を変更したい場合は、この値を <literal>true</literal> に設定します。</para>
<screen>&lt;rerun config:type="boolean"&gt;true&lt;/rerun&gt;</screen>
     <para>任意指定です。既定値は <literal>false</literal> (スクリプトを一度だけ実行する) です。</para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>制御ファイルに対して手作業で追加を行っている場合は、スクリプトには <emphasis>CDATA</emphasis> 要素を設定して、制御ファイル内でファイルの文法とその他のタグが混ざらないようにしてください。</para>
 </sect2>

 <sect2 xml:id="scripts-syntax">
  <title>スクリプトの XML パラメータ</title>
  <para os="sles;sled;osuse">下記に示す XML 要素のほとんどは、ここまでに説明してきた全ての種類のスクリプトに対して設定することができます。ただし <emphasis>準備スクリプト</emphasis> については例外で、ここには一部の要素しか指定することができません。詳しくは <xref linkend="init-scripts"/> をお読みください。</para>
  <para os="slemicro">下記に示す XML 要素のほとんどは、ここまでに説明してきた全ての種類のスクリプトに対して設定することができます。</para>
  <important os="sles;sled;osuse">
   <title>廃止予定の要素</title>
   <para><literal>debug</literal> は廃止予定の要素であり、将来のリリースでは削除される予定です。新しく設定するには、 <literal>interpreter</literal> パラメータに、インタプリタごとの独自のデバッグパラメータを指定してください。たとえば &lt;interpreter&gt;shell&lt;/interpreter&gt; の代わりに &lt;interpreter&gt;/bin/sh -x&lt;/interpreter&gt; のように指定すると、 <literal>debug</literal> フラグを指定した場合と同じ結果が得られます。</para>
  </important>
  <variablelist>
   <title>スクリプトの XML パラメータ</title>
   <varlistentry>
    <term><literal>location</literal></term>
    <listitem>
     <para>スクリプトの取得元の場所を指定します。場所には制御ファイルと同じプロトコル (http, ftp, nfs, など) を指定することができます。それ以外にも、制御ファイルの存在するディレクトリからの相対パスを URL で指定することもできます (例: <literal>relurl://script.sh</literal>) 。</para>
<screen>&lt;location&gt;http://10.10.0.1/myPreScript.sh&lt;/location&gt;</screen>
     <para><literal>location</literal> もしくは <literal>source</literal> を定義しなければなりません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>source</literal></term>
    <listitem>
     <para>スクリプトそれ自身 (ソースコード) は CDATA タグ内にカプセル化して記述します。 XML プロファイル内にシェルスクリプト全体を配置したくない場合は、 location パラメータを指定してください。</para>
<screen>&lt;source&gt;
&lt;![CDATA[
echo "Testing the pre script" &gt; /tmp/pre-script_out.txt
]]&gt;
&lt;/source&gt;</screen>
     <para><literal>location</literal> もしくは <literal>source</literal> を定義しなければなりません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>interpreter</literal></term>
    <listitem>
     <para>スクリプトで使用するインタプリタを指定します。動作させる環境内で利用可能な任意のインタプリタを指定することができます。通常はフルパスでインタプリタを指定します (パラメータを付けることもできます) が、古い形式として "shell", "perl", "python" の各キーワードでインタプリタを指定することもできます (廃止予定の仕組みで、 <literal>debug</literal> フラグでサポートされるものです) 。</para>
<screen>&lt;interpreter&gt;/bin/bash -x&lt;/interpreter&gt;</screen>
     <para>任意指定です。既定値は <literal>shell</literal> です。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>file name</literal></term>
    <listitem>
     <para>スクリプトのファイル名を指定します。一時ディレクトリ <filename>/tmp</filename> 内でのファイル名となります。</para>
<screen>&lt;filename&gt;myPreScript5.sh&lt;/filename&gt;</screen>
     <para>任意指定です。既定値はスクリプトの種類ごとに異なります (この例の場合は pre-scripts になります) 。複数のスクリプトを使用している場合は、それぞれのスクリプトに対して重複しない名前を設定しなければなりません。また、 <literal>filename</literal> を指定しておらず、 <literal>location</literal> を指定している場合は、指定したロケーションパスのファイル名を使用します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>feedback</literal></term>
    <listitem>
     <para>このブール値を <literal>true</literal> に設定すると、スクリプトの出力メッセージとエラーメッセージ (STDOUT および STDERR) がポップアップとして表示されるようになります。ユーザ側では OK ボタンを押して確認する必要が発生します。</para>
<screen>&lt;feedback config:type="boolean"&gt;true&lt;/feedback&gt;</screen>
     <para>任意指定です。既定値は <literal>false</literal> です。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>feedback_type</literal></term>
    <listitem>
     <para><literal>message</literal> , <literal>warning</literal> , <literal>error</literal> のいずれかの値を指定します。これらのポップアップに対するタイムアウトは、 &lt;report&gt; セクションで設定します。</para>
<screen>&lt;feedback_type&gt;warning&lt;/feedback_type&gt;</screen>
     <para>任意指定です。何も指定しない場合、常に動作を一時停止してポップアップを表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>debug</literal></term>
    <listitem>
     <para>この値を <literal>true</literal> に設定すると、シェルスクリプト内の各行がログに記録されるようになります。 Perl スクリプトの場合は警告表示が有効化されます。これは廃止予定のパラメータで、他の言語の場合は <literal>interpreter</literal> パラメータにそれぞれのデバッグ用オプションを指定します (例: "&lt;interpreter&gt;ruby -w&lt;/interpreter&gt;") 。</para>
<screen>&lt;debug config:type="boolean"&gt;true&lt;/debug&gt;</screen>
     <para>任意指定です。既定値は <literal>true</literal> です。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>notification</literal></term>
    <listitem>
     <para>スクリプトを裏で実行している間、ここで設定したテキストをポップアップとして表示します。</para>
<screen>&lt;notification&gt;Please wait while script is running...&lt;/notification&gt;</screen>
     <para>任意指定です。指定しない場合、通知ポップアップを表示しません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>param-list</literal></term>
    <listitem>
     <para>スクリプトを呼び出す際のパラメータを指定します。 <literal>param</literal> の項目は必要に応じて複数個設定することができます。複数個を指定した場合、それらはスペースで区切られてスクリプトのコマンドラインを構成します。パラメータそれ自身にスペースを含めたい場合は、シェルの引用符を指定してください。</para>
<screen>&lt;param-list config:type="list"&gt;
  &lt;param&gt;par1&lt;/param&gt;
  &lt;param&gt;par2 par3&lt;/param&gt;
  &lt;param&gt;"par4.1 par4.2"&lt;/param&gt;
&lt;/param-list&gt;</screen>
     <para>任意指定です。設定しない場合、スクリプトに対してパラメータを渡しません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>rerun</literal></term>
    <listitem>
     <para>XML ファイル内に複数の <literal>ayast_setup</literal> を配置した場合であっても、スクリプトは通常、一度だけ実行します。この既定の動作を変更したい場合は、この値を <literal>true</literal> に設定してください。</para>
<screen>&lt;rerun config:type="boolean"&gt;true&lt;/rerun&gt;</screen>
     <para>任意指定です。既定値は <literal>false</literal> で、スクリプトを一度だけ実行します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>chrooted</literal></term>
    <listitem>
     <para>インストールの際、新しいシステムは <filename>/mnt</filename> 内にマウントされます。このパラメータを <literal>false</literal> に設定すると、 &ay; は <command>chroot</command> を行わず、このステージではブートローダをインストールしなくなります。このパラメータを <literal>true</literal> に設定すると、 &ay; は <command>chroot</command> を実行して <filename>/mnt</filename> 内に入り、ブートローダのインストールを行うようになります。つまり、新しくインストールしたシステムに対して何らかの変更を行いたい場合、 <filename>/mnt</filename> のプレフィクスを指定せずに実行することができるようになります。</para>
<screen>&lt;chrooted config:type="boolean"&gt;true&lt;/chrooted&gt;</screen>
     <para>任意指定です。既定値は <literal>false</literal> です。このオプションは chroot 環境スクリプトでのみ設定することができます。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 os="sles;sled;osuse" xml:id="script-examples">
  <title>スクリプト例</title>
  <example>
   <title>スクリプト設定</title>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE profile&gt;
&lt;profile xmlns="http://www.suse.com/1.0/yast2ns" xmlns:config="http://www.suse.com/1.0/configns"&gt;
&lt;scripts&gt;
  &lt;chroot-scripts config:type="list"&gt;
    &lt;script&gt;
      &lt;chrooted config:type="boolean"&gt;true&lt;/chrooted&gt;
      &lt;filename&gt;chroot-post.sh&lt;/filename&gt;
      &lt;interpreter&gt;shell&lt;/interpreter&gt;
      &lt;source&gt;&lt;![CDATA[
echo "Testing chroot (chrooted) scripts"
ls
]]&gt;
      &lt;/source&gt;
    &lt;/script&gt;
    &lt;script&gt;
      &lt;filename&gt;chroot-pre.sh&lt;/filename&gt;
        &lt;interpreter&gt;/bin/bash -x&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
echo "Testing chroot scripts"
df
cd /mnt
ls
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/chroot-scripts&gt;
    &lt;post-scripts config:type="list"&gt;
      &lt;script&gt;
        &lt;filename&gt;post.sh&lt;/filename&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
echo "Running Post-install script"
systemctl start portmap
mount -a 192.168.1.1:/local /mnt
cp /mnt/test.sh /tmp
umount /mnt
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
      &lt;script&gt;
        &lt;filename&gt;post.pl&lt;/filename&gt;
        &lt;interpreter&gt;perl&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
print "Running Post-install script";
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/post-scripts&gt;
    &lt;pre-scripts config:type="list"&gt;
      &lt;script&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;location&gt;http://192.168.1.1/profiles/scripts/prescripts.sh&lt;/location&gt;
      &lt;/script&gt;
      &lt;script&gt;
        &lt;filename&gt;pre.sh&lt;/filename&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;source&gt;&lt;![CDATA[
echo "Running pre-script"
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/pre-scripts&gt;
    &lt;postpartitioning-scripts config:type="list"&gt;
      &lt;script&gt;
        &lt;filename&gt;postpart.sh&lt;/filename&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;debug config:type="boolean"&gt;false&lt;/debug&gt;
        &lt;feedback config:type="boolean"&gt;true&lt;/feedback&gt;
        &lt;source&gt;&lt;![CDATA[
touch /mnt/testfile
echo Hi
]]&gt;
        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/postpartitioning-scripts&gt;
  &lt;/scripts&gt;
&lt;/profile&gt;</screen>
  </example>
  <para>インストール完了後は、スクリプトと出力されたログファイルが <filename>/var/adm/autoinstall</filename> 内に配置されます。スクリプトは <filename>scripts</filename> サブディレクトリ内、出力されたログは <filename>log</filename> サブディレクトリ内をそれぞれご覧ください。</para>
  <para>出力されたログにはスクリプトを実行した際に生成された内容が書かれます。標準出力と標準エラー出力の両方が記録されます。</para>
  <para>スクリプトが 0 以外の終了コードで終了した場合、ログ内には警告を示すメッセージが出力されます。これを出力したくない場合は、 <literal>feedback</literal> オプションを指定してください。</para>
 </sect2>
</sect1>
