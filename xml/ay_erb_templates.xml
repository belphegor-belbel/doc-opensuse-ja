<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="erb-templates">

 <title>ERB テンプレート</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>ERB テンプレートとは、プロファイル内に Ruby 言語のコードを埋め込むことのできる機能で、インストール時にプロファイルを修正する機能を提供します。この仕組みを利用することで、システムの状態を検知してプロファイル内の設定値を調整したり、セクションの追加や削除などを行ったりすることができます。</para>
 <para>ERB 機能を有効化するには、プロファイルのファイル名に <filename>.erb</filename> という拡張子を追加します (例: <filename>autoyast.xml.erb</filename>) 。このような仕組みが存在することから、ルールやクラスと ERB テンプレートを同時に使用することはできません。</para>
 <sect1 xml:id="erb">
  <title>ERB とは？</title>

  <para>ERB とは <emphasis>Embedded Ruby</emphasis> の略で、 Ruby プログラミング言語の力を借りて様々なコンテンツ生成を行うための仕組みです。 ERB を利用してプロファイル内に Ruby コードを含めることで、インストール先のシステムに依存した様々なプロファイル調整を行うことができるようになります。</para>

  <para>ERB を使用する場合、 Ruby 言語のコードは <literal>&lt;%</literal> 記号から <literal>%&gt;</literal> 記号までの間に記述します。また、コマンドの出力をそのままプロファイルに入れ込みたい場合は、イコール記号 ( <literal>=</literal> ) で設定します。</para>

  <example xml:id="simple-erb">
   <title>ERB を利用したファイルの取り込み</title>
<screen>&lt;bootloader&gt;
  &lt;% require "open-uri" %&gt;
  &lt;%= URI.open("http://192.168.1.1/profiles/bootloader-common.xml").read %&gt;
&lt;/bootloader&gt; &lt;!-- this line gets replaced with the content of bootloader-common.xml --&gt;
</screen>
  </example>

 <para>Ruby の仕組みを利用することで、任意のコマンドを実行することもできます。たとえばコマンドの出力結果を取得したい場合は、コマンドの前後をバッククオートで括ります。また、コマンドの実行が成功したかどうかを調べたい場合は、 <literal>system</literal> 関数を使用してください。</para>
  <example os="sles;osuse">
   <title>Ruby におけるコマンドの実行</title>
<screen>
&lt;% files = `ls` %&gt; &lt;!-- files にはコマンドの実行結果が入ります (例: "file1
file2
file3") --&gt;
&lt;% success = system("dmidecode | grep some-model") %&gt; &lt;!-- success には true もしくは false のいずれかが入ります --&gt;
</screen>
  </example>

  <para>このほか条件句やループなど、高度な Ruby 言語構造を含めることもできます。</para>
  <example os="sles;osuse">
   <title>Ruby 言語構造の使用</title>
<screen>
&lt;% ip_forward = File.read("/proc/sys/net/ipv4/ip_forward").strip %&gt;
&lt;% if ip_forward == "1" %&gt;
  &lt;!-- 何らかの処理 --&gt;
&lt;% end %&gt;

&lt;% files = `ls /tmp/config/*.xml` %&gt;
&lt;% files.split.each do |file| %&gt;
  &lt;%= file.read %&gt;
&lt;% end %&gt;
</screen>
   </example>

  <para>&ay; では <emphasis>ヘルパー関数</emphasis> と呼ばれる仕組みも提供しています。これは <literal>disks</literal> (ディスク) や <literal>network_cards</literal> (ネットワークカード) など、インストール先のシステムに関する様々な情報を取得することができる仕組みです。ヘルパーの一覧と値の意味について、詳しくは <xref linkend="erb-helpers"/> をお読みください。</para>
 </sect1>

 <sect1 xml:id="erb-helpers">
  <title>テンプレートヘルパー</title>

  <para>テンプレートヘルパーは Ruby メソッド集であり、プロファイル内で使用することで様々なインストール先システムの情報を収集することができます。</para>

  <sect2 xml:id="erb-boot-efi-helper">
   <title><literal>boot_efi?</literal></title>
   <para><literal>boot_efi?</literal> はブール値のヘルパーで、システムが EFI で起動されているかどうかを表します。下記の例では、現在の起動モードに合わせてブートローダを設定しています。</para>

  <example os="sles;osuse">
   <title>ブートローダの設定</title>
<screen>
&lt;% if env.boot_efi? %&gt;
  &lt;loader_type&gt;grub2-efi&lt;/loader_type&gt;
&lt;% else %&gt;
  &lt;loader_type&gt;grub2&lt;/loader_type&gt;
&lt;% end %&gt;
</screen>
   </example>
  </sect2>

  <sect2 xml:id="erb-disks-helper">
   <title><literal>disks</literal></title>
   <para><literal>disks</literal> ヘルパーは、検出されたディスクの一覧を返却するヘルパー関数です。一覧の各要素には、デバイス名やサイズなどの基本的な情報が含まれます。</para>
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para>キー</para>
       </entry>
       <entry>
        <para>型</para>
       </entry>
       <entry>
        <para>値</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para><literal>:device</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>デバイスのカーネル名 (例: <literal>sda</literal>)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:model</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>ディスクの型番</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:serial</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>シリアル番号</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:size</literal></para>
       </entry>
       <entry>
        <para>Integer</para>
       </entry>
       <entry>
        <para>ディスクサイズ (バイト単位)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:udev_names</literal></para>
       </entry>
       <entry>
        <para>Array&lt;String&gt;</para>
       </entry>
       <entry>
        <para>ディスクの udev 名の一覧 (プロファイル内でデバイスを指定する際、これらのいずれかを使用することができます)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:vendor</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>製造元の名前</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>下記のプロファイル例は、最も容量の大きいディスクに対してインストールを行う場合の例を示しています。検出されたディスクの一覧をサイズで並び替え、末尾のデバイスを選択します。あとは <literal>device</literal> 要素に対して <literal>:device</literal> キーで取得できた値を代入して使用します。</para>
   <example>
    <title>最も容量の大きいディスクの使用</title>
<screen>&lt;partitioning t="list"&gt;
  &lt;drive&gt;
    &lt;% disk = disks.sort_by { |d| d[:size] }.last %&gt; &lt;!-- find the largest disk --&gt;
    &lt;device&gt;&lt;%= disk[:device] %&gt;&lt;/device&gt; &lt;!-- print the disk device name --&gt;
    &lt;initialize t="boolean"&gt;true&lt;/initialize&gt;
    &lt;use&gt;all&lt;/use&gt;
  &lt;/drive&gt;
&lt;/partitioning&gt;
     </screen>
   </example>
  </sect2>

  <sect2 xml:id="erb-network-cards-helper">
   <title><literal>network_cards</literal></title>
   <para><literal>network_cards</literal> ヘルパーはネットワークカードの一覧を返す関数です。ここにはネットワークカードの名前のほか、状態に関する情報 (接続されているかどうかなど) も含まれています。</para>
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para>キー</para>
       </entry>
       <entry>
        <para>型</para>
       </entry>
       <entry>
        <para>値</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para><literal>:device</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>デバイス名 (例: <literal>eth0</literal> , <literal>enp3s0</literal> など)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:mac</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>MAC アドレス</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:active</literal></para>
       </entry>
       <entry>
        <para>Boolean</para>
       </entry>
       <entry>
        <para>デバイスが有効化されているかどうか</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:link</literal></para>
       </entry>
       <entry>
        <para>Boolean</para>
       </entry>
       <entry>
        <para>デバイスが接続されているかどうか</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:vendor</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>製造元の名前</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>下記の例では、ネットワークに接続されている最初のネットワークカードを検出し、そのネットワークカードで DHCP を使用するように設定します。</para>
   <example>
    <title>接続されているネットワークカードの設定</title>
<screen>&lt;interfaces t="list"&gt;
  &lt;% with_link = netword_cards.sort_by { |n| n[:name] }.find { |n| n[:link] } %&gt;
  &lt;% if with_link %&gt;
    &lt;interface&gt;
      &lt;device&gt;&lt;%= with_link[:device] %&gt;&lt;/device&gt;
      &lt;startmode&gt;auto&lt;/startmode&gt;
      &lt;bootproto&gt;dhcp&lt;/bootproto&gt;
      &lt;/interface&gt;
  &lt;% end &gt;
&lt;/interfaces&gt;
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="erb-os-release-helper">
   <title><literal>os_release</literal></title>
   <para><literal>os_release</literal> ヘルパーは、オペレーティングシステムに関する情報を返す関数です。これは <filename>/etc/os-release</filename> ファイルから情報を読み込みます。</para>
   <informaltable>
    <tgroup cols="3">
     <thead>
      <row>
       <entry>
        <para>キー</para>
       </entry>
       <entry>
        <para>型</para>
       </entry>
       <entry>
        <para>値</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para><literal>:id</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>ディストリビューション ID ( <phrase os="sles;osuse">例: <literal>sles</literal>, <literal>opensuse-tumbleweed</literal></phrase> <phrase os="slemicro"><literal>suse-microos</literal></phrase> )</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:name</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>ディストリビューション名 ( <phrase os="sles;osuse">例: <literal>SLES</literal> や <literal>openSUSE Tumbleweed</literal></phrase> <phrase os="slemicro"><literal>SLE Micro</literal></phrase> )</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><literal>:version</literal></para>
       </entry>
       <entry>
        <para>String</para>
       </entry>
       <entry>
        <para>ディストリビューションのバージョン ( <phrase os="sles;osuse">例: <literal>15.2</literal></phrase> <phrase os="slemicro"><literal>5.1</literal></phrase> )</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para os="sles;osuse">この情報を使用することで、インストールすべき製品を判断することができます。たとえば SLE と openSUSE で異なる設定を適用することができるようになります。</para>
   <example os="sles;osuse">
    <title>異なるディストリビューションに対して同じプロファイルを適用する設定</title>
<screen>&lt;products t="list"&gt;
  &lt;% if os_release[:id] == 'sle' %&gt;
  &lt;product&gt;SLES&lt;/product&gt;
  &lt;% else %&gt;
  &lt;product&gt;openSUSE&lt;/product&gt;
  &lt;% end %&gt;
&lt;/products&gt;</screen>
   </example>
  </sect2>

  <sect2 xml:id="erb-hardware-helper">
   <title><literal>hardware</literal></title>
   <para><literal>hardware</literal> ヘルパーは追加のハードウエア情報を提供する仕組みです。ここには <literal>hwinfo</literal> コマンドからの全ての情報が含まれていて、その他のヘルパーでは不十分な場合の緊急手段として使用することができます。たとえば下記の例では、 <literal>hardware</literal> ヘルパーを利用して USB デバイスのフィルタリングを行っています。 <literal>hardware</literal> ヘルパーで提供される情報についての詳細は、 <xref linkend="erb-running-helpers"/> をお読みください。</para>

  <example os="sles;osuse">
   <title>USB デバイスのフィルタ</title>
<screen>
&lt;% usb_disks = hardware["disk"].select { |d| d["driver"] != "usb-storage" } %&gt;
</screen>
   </example>
  </sect2>
 </sect1>

 <sect1 xml:id="erb-running-helpers">
  <title>ERB ヘルパーの実行</title>

  <para>&ay; の ERB ヘルパーを実行するにあたって Ruby コンソールを使用して結果を確認することができます。 ERB ヘルパーは <literal>Y2Autoinstallation::Y2ERB::TemplateEnvironment</literal> クラスのインスタンスを介してアクセスできます。下記のようにして root で Ruby インタプリタを起動して確認してください: <literal>irb -ryast -rautoinstall/y2erb</literal></para>

  <example os="sles;osuse">
   <title>ヘルパーの実行</title>
<screen>
irb &gt; env = Y2Autoinstallation::Y2ERB::TemplateEnvironment.new  # env 変数にはヘルパーのインスタンスが代入されます

irb &gt; env.disks
=&gt;
[{:vendor=&gt;"WDC", :device=&gt;"sda", ...},
 {:vendor=&gt;"TOSHIBA", :device=&gt;"sdb", ...},
...]

irb &gt; env.hardware.keys
=&gt;
["architecture",
 "bios",
 "bios_video",
 ...]

irb &gt; env.hardware["architecture"]
=&gt;
"x86_64"
</screen>
   </example>
 </sect1>

 <sect1 xml:id="erb-rendering-profile">
  <title>ERB プロファイルの生成</title>

  <para>&ay; のコマンドラインでは <literal>check-profile</literal> コマンドが提供されています。これは ERB ファイルからプロファイルを生成するための仕組みで、このコマンドは &ay; に対して ERB コードの処理と実行を依頼して、プロファイルの生成を行います。これを利用することで、期待通りにプロファイルが生成されるかどうかを確認することができます。サポートされている全てのオプションを表示するには、 <literal>autoyast check-profile --help</literal> のように入力して実行してください。たとえば下記の例では、 &ay; に対してプロファイルのダウンロードと解釈を依頼して、 ERB コードの実行と事前スクリプトの実行までを行っています。実行結果は <literal>result.xml</literal> ファイルに出力されます。</para>

  <example os="sles;osuse">
   <title>プロファイルの生成</title>
<screen>
 &prompt.sudo;yast2 autoyast check-profile filename=<replaceable>http://192.168.1.100</replaceable>/autoinst.erb output=result.xml run-scripts=true run-erb=true
</screen>
  </example>
  <warning>
   <title><literal>check-profile</literal> の許可について</title>
   <para>ほとんどの場合、 <literal>check-profile</literal> には root のアクセス権限が必要となります。そのため、インストール前スクリプトや ERB プロファイルを root で動作させることになることに注意してください。信頼できるプロファイルのみを指定してください。</para>
  </warning>
 </sect1>

 <sect1 xml:id="erb-debugging-erb">
  <title>ERB プロファイルのデバッグ</title>

  <para>ERB の処理や動作を 1 つずつ確認していきたい場合は、 &yast; の提供する <literal>byebug</literal> デバッガをお使いください。具体的には <literal>rubygem(byebug)</literal> パッケージをインストールしたあと、 <literal>Y2DEBUGGER</literal> 環境変数を 1 に設定します。</para>

  <example os="sles;osuse">
   <title>デバッグ環境の準備</title>
<screen>
&prompt.sudo;zypper --non-interactive in "rubygem(byebug)"
&prompt.sudo;Y2DEBUGGER=1 yast2 autoyast check-profile ...
</screen>
  </example>

  <para>ブレークポイントを追加したい場合は、その箇所に &lt;% byebug %&gt; を追加するだけです。 <literal>byebug</literal> に関する詳細は、 <link xlink:href="https://github.com/deivid-rodriguez/byebug"/> (英語) をお読みください。</para>

  <example os="sles;osuse">
   <title>ブレークポイントの追加</title>
<screen>
&lt;% byebug %&gt;
&lt;% if system("dmidecode | grep some-model") %&gt;
  &lt;!-- 何らかの処理 --&gt;
%&lt;% end %&gt;
</screen>
  </example>
 </sect1>

 <sect1 xml:id="erb-comparisson">
  <title>ERB とルール／クラス</title>

  <para>ERB とルール／クラスのどちらもプロファイルを動的に生成する仕組みですが、一般的には ERB のほうが読みやすく理解しやすい仕組みです。また、大きく異なる点として、ルールとクラスがプロファイルの合成に対応しているのに対して、 ERB は対応していないことがあげられます。プロファイルの合成に関する詳細は、 <xref linkend="rulesandclass"/> をお読みください。もう一方の ERB では、 Ruby という高度な言語の威力を存分に発揮することができます。たとえば下記の 2 つの例では、 <literal>/dev/sdb</literal> が存在した場合、 <literal>/home</literal> をそのデバイス内に作成するよう指示しています。</para>

  <example os="sles;osuse">
   <title>ルールとクラス</title>
<screen>
&lt;rule&gt;
  &lt;custom1&gt;
    &lt;script&gt;
if blkid | grep /dev/sdb &gt; /dev/null; then
echo -n "yes"
else
echo -n "no"
fi;
    &lt;/script&gt;
    &lt;match&gt;yes&lt;/match&gt;
    &lt;match_type&gt;exact&lt;/match_type&gt;
  &lt;/custom1&gt;
  &lt;result&gt;
    &lt;profile&gt;classes/sdb_home.xml&lt;/profile&gt;
    &lt;dont_merge config:type="list"&gt;
      &lt;element&gt;partition&lt;/element&gt;
    &lt;/dont_merge&gt;
  &lt;/result&gt;
&lt;/rule&gt;
</screen>
  </example>

  <example os="sles;osuse">
   <title>ERB</title>
<screen>
&lt;% home_in_sdb = disks.map { |d| d[:device] }.include?("sdb") %&gt;

&lt;partitioning config:type="list"&gt;
  &lt;drive&gt;
    ...
  &lt;/drive&gt;
  &lt;% if home_in_sdb %&gt;
  &lt;drive&gt;
    &lt;device&gt;/dev/sdb&lt;/device&gt;
    &lt;disklabel&gt;none&lt;/disklabel&gt;
    &lt;partitions t="list"&gt;
      &lt;partition&gt;
        &lt;format t="boolean"&gt;true&lt;/format&gt;
        &lt;filesystem t="symbol"&gt;xfs&lt;/filesystem&gt;
        &lt;mount&gt;/home&lt;/mount&gt;
      &lt;/partition&gt;
    &lt;/partitions&gt;
  &lt;/drive&gt;
  &lt;% end %&gt;
&lt;/partitioning&gt;
</screen>
  </example>
 </sect1>
</chapter>
