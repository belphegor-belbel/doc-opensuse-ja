<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-kexec">
 <title>&kexec; and &kdump;</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
  </dm:docmanager>
 </info>
 <para>&kexec; は現在動作中のカーネルから他のカーネルを高速に起動するための仕組みです。これにより、ハードウエアの初期化を行なわず、高速にシステムを再起動することができます。必要であれば、システムがクラッシュした際、もう 1 つのカーネルを起動することもできます。</para>
 <sect1 xml:id="cha-tuning-kexec-intro">
  <title>概要</title>

  <para>&kexec; を使用することで、ハードウエアによる再起動を行なうことなく、別のカーネルを起動することができるようになります。このツールは、下記のような用途で使用されます:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>高速な再起動</para>
    <para>システムを頻繁に再起動する必要があるような場合、 &kexec; は時間をかなり削減できるようになります。</para>
   </listitem>
   <listitem>
    <para>不正なファームウエアやハードウエアの回避</para>
    <para>コンピュータのハードウエアは複雑な構造であり、システムの起動時に深刻な問題が発生する場合があります。このような場合、すぐにハードウエアを交換できればよいのですが、そうは行かない場合があります。 &kexec; では、ハードウエアの初期化が完了した状態から、特定の制御環境下に移行することができます。これにより、システムの起動が失敗するようなリスクを抑えることができます。</para>
   </listitem>
   <listitem>
    <para>カーネルがクラッシュした際のダンプの保存</para>
    <para>&kexec; は物理メモリ内の情報を保持して動作します。そのため、 <emphasis>本番用</emphasis> のカーネルに何らかの障害が発生した場合、 <emphasis>情報採取用</emphasis> のカーネル (限られたメモリ範囲内だけで動作する追加のカーネル) を起動することで、障害情報を保存することができるようになります。保存されたイメージは、後から解析用に使用することができます。</para>
   </listitem>
   <listitem>
    <para>&grub; の設定を使用しない起動</para>
    <para>&kexec; 経由でカーネルを起動した場合、ブートローダの段階は省略されます。通常はブートローダの設定が誤っていると、起動の処理を行なうことができなくなりますが、 &kexec; を使用することで、ブートローダの設定に依存せずに起動することができるようになります。</para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="cha-tuning-kexec-pkgs">
  <title>必要なパッケージ</title>

  <para>&productnamereg; で &kexec; を使用すると、再起動を高速化したり潜在的なハードウエア問題を回避したりすることができます。 &kexec; を使用するには、 <systemitem>kexec-tools</systemitem> パッケージをインストールしてください。このパッケージには <command>kexec-bootloader</command> というスクリプトが含まれていますが、これはブートローダの設定からカーネルのコマンドラインオプションを読み出し、そのコマンドラインオプションを利用して新しいカーネルを起動することができます。</para>

<!-- On SLE 12 SP1, the -h option only outputs the options -h/help and
       -D/debug. That is not really useful. - sknorr, 2015-10-07 -->

<!--
  <para>
   To see a list of possible options, use:
  </para>
<screen>&prompt.user;<command>/usr/sbin/kexec-bootloader</command> -h</screen>
  -->

  <para>カーネルのクラッシュ時にデバッグ情報を取得する環境を設定したい場合は、 <systemitem>makedumpfile</systemitem> パッケージをインストールしておいてください。</para>

  <para>&productname; での &kdump; の使用方法は、 &yast; の &kdump; モジュールで設定することができます。 &yast; モジュールを使用する場合は、 <literal>yast2-kdump</literal> パッケージをインストールしておいてください。</para>
 </sect1>
 <sect1 xml:id="cha-tuning-kexec-internals">
  <title>&kexec; の内部構造</title>

  <para>&kexec; で最も重要なコンポーネントは <filename>/sbin/kexec</filename> です。 &kexec; でカーネルを読み込む際、 2 種類の方法で行なうことができます:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>通常の再起動と同様に、本番用のカーネルのアドレス領域にカーネルを読み込む方法:</para>
<screen>&prompt.root;<command>kexec</command> <option>-l</option> <replaceable>カーネルイメージ</replaceable></screen>
    <para>読み込んだあと、そのカーネルを実行するには、 <command>kexec</command> <option>-e</option> と入力して実行します。</para>
   </listitem>
   <listitem>
    <para>メモリ内の専用の領域にカーネルを読み込む方法:</para>
<screen>&prompt.root;<command>kexec</command> <option>-p</option> <replaceable>カーネルイメージ</replaceable></screen>
    <para>このカーネルは、システムがクラッシュした際に自動的に起動されます。</para>
   </listitem>
  </itemizedlist>

  <para>システムがクラッシュした際、本番用のカーネルのデータを保持したまま、もう 1 つのカーネルを起動したい場合は、システムメモリ内に専用の領域を用意する必要があります。その領域は常に空けておかなければならないものであることから、この専用領域には本番用のカーネルが読み込まれることはありません。この領域は情報採取用のカーネルが使用するもので、このような仕組みによって、本番用のカーネルのメモリページを保持させることができるようになっています。</para>

  <para>このような領域を予約するには、本番用のカーネルの起動コマンドライン内に、 <option>crashkernel</option> というオプションを追加します。 <option>crashkernel</option> で必要な値を判断するには、 <xref linkend="sec-tuning-kexec-crashkernel"/> に書かれた手順に従ってください。</para>

  <para>なお、上記のパラメータは情報採取用のカーネルのパラメータではありません。情報採取用のカーネルでは &kexec; を使用しません。</para>

  <para>情報採取用のカーネルは専用の領域に読み込まれ、カーネルがクラッシュするのを待ちます。いったんクラッシュが発生すると、 &kdump; は情報採取用のカーネルに制御を移します。これは、クラッシュした時点で、元のカーネルは信頼できる状態ではなくなるためです。これはつまり、 &kdump; 自身も失敗する可能性があることを示しています。</para>

  <para>情報採取用のカーネルを読み込むには、カーネルの起動パラメータを含める必要があります。通常は初期 RAM ファイルシステムを起動時に使用します。初期 RAM ファイルシステムを指定するには、 <option>--initrd</option> <literal>=</literal> <replaceable>ファイル名</replaceable> のようなオプションを指定します。なお、 <option>--append</option> <literal>=</literal> <replaceable>コマンドライン</replaceable> のように指定すると、起動するほうのカーネルのコマンドラインを設定することができます。</para>

  <para>本番用のカーネルで指定していたコマンドラインを起動するカーネル側に含めておく必要があります。このような場合は、 <option>--append</option> <literal>=</literal> <replaceable>"$(cat /proc/cmdline)"</replaceable> のように入力して実行することで、既存のコマンドラインをそのまま受け渡すことができます。また、オプションを追加したい場合は、 <option>--append</option> <literal>=</literal> <replaceable>"$(cat /proc/cmdline) オプション"</replaceable> のようにして追加のオプションを指定してもかまいません。</para>

  <para>読み込んでおいたカーネルはいつでも解放することができます。 <option>-l</option> オプションで読み込んでおいたカーネルを解放したい場合は、 <command>kexec</command> <option>-u</option> コマンドを実行してください。また、 <option>-p</option> オプションで読み込んでおいたカーネルの場合は、 <command>kexec</command> <option>-p</option> <option>-u</option> コマンドを実行してください。</para>
 </sect1>
 <sect1 xml:id="sec-tuning-kexec-crashkernel">
  <title><option>crashkernel</option> 割り当てサイズの計算</title>

  <para>&kexec; で情報採取用のカーネルを起動する <!-- "and to use &kdump; in any way" ? --> 場合、このカーネル用のメモリ領域を割り当てておく必要があります。割り当てるべきサイズはコンピュータのハードウエア設定によって異なりますので、あらかじめ指定しておく必要があります。</para>

  <para>割り当てるべきサイズは、お使いのコンピュータのハードウエアアーキテクチャによっても異なります。それぞれ下記の手順をお読みのうえ、必要なサイズを判断してください。</para>

  <procedure>
   <title>&x86-64; でのサイズの割り当て</title>
   <step>
    <para>コンピュータに対する基礎値を得るには、端末内で下記のコマンドを入力し実行します:</para>
<screen>&prompt.root;<command>kdumptool</command> calibrate
Total: 49074
Low: 72
High: 180
MinLow: 72
MaxLow: 3085
MinHigh: 0
MaxHigh: 45824 </screen>
    <para>それぞれの値はメガバイト単位です。</para>
   </step>
   <step>
    <para>上記の <literal>Low</literal> および <literal>High</literal> の値を記録しておきます。</para>
    <note>
     <title><literal>Low</literal> と <literal>High</literal> の値の意味について</title>
     <para>&x86-64; コンピュータの場合、 <literal>High</literal> は利用可能な全てのメモリを予約する意味になり、 <literal>Low</literal> は DMA32 ゾーン内のメモリ (つまり 4 GB 以下の領域) を予約する意味になります。 <remark> Petr Tesarik says in bsc#948565 that High means "all memory". This is not completely true in SLE 12 SP1 RC1, but fixed for SLE 12 SP1 RC2. - sknorr, 2015-10-05 </remark></para>
     <para><remark>The following is confusing, but probably true ( https://bugzilla.suse.com/show_bug.cgi?id=948565#c6 ). - sknorr, 2015-10-05 </remark> SIZE_LOW は 32 ビットのみに対応したデバイスで必要なメモリ量を表わします。カーネルは DMA32 のバウンスバッファに対して 64M を割り当てますが、お使いのサーバ内に 32 ビットのみに対応したデバイスが存在しない場合は、 <literal>SIZE_LOW</literal> の値は既定の 72M で問題なく動作するはずです。ただし、 NUMA マシンの場合は例外で、より多くの <literal>Low</literal> が必要となる場合があります。そのため、通常のカーネルの割り当てで <literal>Low</literal> メモリを使用しないようにするため、 &kdump; カーネルのパラメータに <literal>numa=off</literal> を設定してもかまいません。</para>
    </note>
   </step>
   <step>
    <para>上記の手順の <literal>High</literal> の値に、お使いのコンピュータに接続されている LUN カーネルパス (ストレージデバイスのパス数) を元にした値を足します。具体的には、メガバイト単位で下記のような計算を行ないます:</para>
<screen>SIZE_HIGH = <replaceable>推奨値</replaceable> + (<replaceable>LUN_数</replaceable> / 2)</screen>
    <para>上記の数式に当てはめるべき値は下記のとおりです:</para>
    <itemizedlist>
     <listitem>
      <formalpara>
       <title>SIZE_HIGH</title>
       <para><literal>High</literal> の計算結果です。</para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>RECOMMENDATION</title>
       <para><command>kdumptool calibrate</command> で表示された <literal>High</literal> の値です。</para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>LUNs</title>
       <para>お使いのコンピュータで作成する予定の LUN カーネルパス数の最大値を指定します。マルチパスデバイスについては無視されるため、数から除外してください。</para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>お使いのデバイスに対応するドライバが DMA32 ゾーン内に多数の予約領域を作成する場合は、 <literal>Low</literal> の値も調整する必要があります。しかしながら、この値は簡単に計算できるものではありません。正しい値を得るには、試行錯誤を繰り返す必要があります。</para>
    <para>まずは <literal>Low</literal> の値を <command>kdumptool calibrate</command> で出力された値から試してみてください。</para>
   </step>
   <step>
    <para>あとは値を正しい場所に設定します。</para>
    <variablelist>
     <varlistentry>
      <term>カーネルのコマンドラインを直接変更する場合:</term>
      <listitem>
       <para>お使いのブートローダの設定で、カーネルオプションに下記を追加してください:</para>
<screen>crashkernel=<replaceable>SIZE_HIGH</replaceable>,high crashkernel=<replaceable>SIZE_LOW</replaceable>,low</screen>
       <para><replaceable>SIZE_HIGH</replaceable> と <replaceable>SIZE_LOW</replaceable> の値は、それぞれ上記の手順で算出もしくは試行錯誤した結果を入力してください。また、末尾には <literal>M</literal> (メガバイトの意味です) を付与してください。</para>
       <para>たとえば下記のようになります:</para>
<screen>crashkernel=<replaceable>36M</replaceable>,high crashkernel=<replaceable>72M</replaceable>,low</screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>&yast; GUI を使用している場合:</term>
      <listitem>
       <para><guimenu>Kdump の低メモリ</guimenu> に <literal>Low</literal> の値を入力してください。</para>
       <para><guimenu>Kdump の高メモリ</guimenu> に <literal>High</literal> の値を入力してください。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>&yast; のコマンドラインインターフェイスを使用している場合:</term>
      <listitem>
       <para>下記のコマンドを入力して実行してください:</para>
<screen>&prompt.root;yast kdump startup enable alloc_mem=<replaceable>LOW</replaceable>,<replaceable>HIGH</replaceable></screen>
       <para>ここで、 <replaceable>LOW</replaceable> には <literal>Low</literal> の値を、 <replaceable>HIGH</replaceable> には <literal>High</literal> の値をそれぞれ入力してください。</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </step>
  </procedure>

  <procedure os="sles">
   <title>&power; および &zseries; での割り当てサイズ</title>
   <step>
    <para>コンピュータに対する基礎値を得るには、下記のコマンドを入力して実行します:</para>
<screen>&prompt.root;<command>kdumptool</command> calibrate</screen>
    <para>このコマンドを実行すると、いくつかの値が表示されます。それぞれはメガバイト単位です。</para>
   </step>
   <step>
    <para><literal>Low</literal> の値を記録しておきます。</para>
   </step>
   <step>
    <para>上記の手順の <literal>Low</literal> の値に、お使いのコンピュータに接続されている LUN カーネルパス (ストレージデバイスのパス数) を元にした値を足します。具体的には、メガバイト単位で下記のような計算を行ないます:</para>
<screen>SIZE_LOW = <replaceable>推奨値</replaceable> + (<replaceable>LUN_数</replaceable> / 2)</screen>
    <para>上記の数式に当てはめるべき値は下記のとおりです:</para>
    <itemizedlist>
     <listitem>
      <formalpara>
       <title>SIZE_LOW</title>
       <para><literal>Low</literal> の計算結果です。</para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>RECOMMENDATION</title>
       <para><command>kdumptool calibrate</command> で表示された <literal>Low</literal> の値です。</para>
      </formalpara>
     </listitem>
     <listitem>
      <formalpara>
       <title>LUNs</title>
       <para>お使いのコンピュータで作成する予定の LUN カーネルパス数の最大値を指定します。マルチパスデバイスについては無視されるため、数から除外してください。</para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>あとは値を正しい場所に設定します。</para>
    <variablelist>
     <varlistentry>
      <term>コマンドラインを使用している場合:</term>
      <listitem>
       <para>お使いのブートローダの設定で、カーネルオプションに下記を追加してください:</para>
<screen>crashkernel=<replaceable>SIZE_LOW</replaceable></screen>
       <para><replaceable>SIZE_LOW</replaceable> の値は、それぞれ上記の手順で算出した結果を入力してください。また、末尾には <literal>M</literal> (メガバイトの意味です) を付与してください。</para>
       <para>たとえば下記のようになります:</para>
<screen>crashkernel=<replaceable>108M</replaceable></screen>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>&yast; を使用している場合:</term>
      <listitem>
       <para><guimenu>Kdump メモリ</guimenu> の欄に <literal>Low</literal> の値を入力します。</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </step>
  </procedure>

  <tip>
   <title>&zseries; における未使用および無効化された CCW デバイスの除外について</title>
   <para>利用可能なデバイスの数にもよりますが、 <option>crashkernel</option> カーネルパラメータで指定したメモリ量が不足する場合があります。不足した場合は、メモリを増やす代わりに、カーネル側で見えるデバイスの量を制限することができます。これにより、 "crashkernel" の設定で必要なメモリ量を減らすことができます。</para>
   <orderedlist>
    <listitem>
     <para>デバイスを無視したい場合は、 <command>cio_ignore</command> ツールを利用することで、現時点で有効化されているデバイスや使用しているデバイスを除き、それ以外の全てのデバイスを無視する設定を生成することができます。</para>
<screen>&prompt.sudo;cio_ignore -u -k
cio_ignore=all,!da5d,!f500-f502</screen>
     <para><command>cio_ignore -u -k</command> と入力して実行すると、ブラックリスト設定が即時に有効化され、既存のブラックリストを置き換えるようになります。未使用のデバイスが消えることはなく、チャネルサブシステム内で変わらず現われるようになります。ただし、新しいチャネルデバイスを追加 (z/VM 下での CP ATTACH か、 LPAR での動的な I/O 設定変更) すると、それらはブラックリストとして扱われます。この動作をしないようにするには、まず既存の設定を <command>sudo cio_ignore -l</command> を実行して保存し、 <command>cio_ignore -u -k</command> コマンドの実行後にその状態に戻すようにしてください。それ以外の方法としては、生成された設定を通常のカーネルパラメータに追加する方法もあります。</para>
    </listitem>
    <listitem>
     <para>この方法の場合は、 <filename>/etc/sysconfig/kdump</filename> 内にある <envar>KDUMP_CMDLINE_APPEND</envar> の値の中に、 <option>cio_ignore</option> パラメータを追加してください。たとえば下記のようになります:</para>
<screen>KDUMP_COMMANDLINE_APPEND="cio_ignore=all,!da5d,!f500-f502"</screen>
    </listitem>
    <listitem>
     <para>設定を反映させるには、 <systemitem class="service">kdump</systemitem> を再起動します:</para>
<screen>systemctl restart kdump.service</screen>
    </listitem>
   </orderedlist>
  </tip>
 </sect1>
 <sect1 xml:id="cha-tuning-kexec-basic-usage">
  <title>基本的な &kexec; の使用方法</title>

  <para>&kexec; を使用するには、まず対応するサービスを有効化し、動作させる必要があります:</para>

  <itemizedlist>
   <listitem>
    <para>&kexec; のサービスをシステムの起動時に開始するようにするには、下記のように入力して実行します:</para>
<screen>&prompt.sudo;systemctl enable kexec-load.service</screen>
   </listitem>
   <listitem>
    <para>&kexec; サービスを開始するには、下記のように入力して実行します:</para>
<screen>&prompt.sudo;systemctl start kexec-load.service</screen>
   </listitem>
  </itemizedlist>

  <para>お使いの &kexec; 環境が正しく動作していることを確認するには、 &kexec; を利用して新しいカーネルを起動してください。ただし、お使いのシステム内には誰もログインしていない状態で、重要なサービスを動作させていない状態であることを確認しておいてください。あとは下記のコマンドを入力して実行します:</para>

<screen>systemctl kexec</screen>

  <para>これにより、あらかじめ読み込んでおいた新しいカーネルが古いカーネルを置き換えて、制御を行なうようになります。制御が始まると、通常の起動メッセージが表示されます。新しいカーネルが起動しても、ハードウエアやファームウエアのチェックは省略されます。このとき、何も警告メッセージが表示されないことを確認してください。</para>

  <tip>
   <title>reboot コマンドでの &kexec; の使用について</title>
   <para><command>reboot</command> コマンドで通常の再起動を行なわず、 &kexec; を使用するように設定したい場合は、下記のように入力して実行します:</para>
<screen>ln -s /usr/lib/systemd/system/kexec.target /etc/systemd/system/reboot.target</screen>
   <para>なお、 <filename>etc/systemd/system/reboot.target</filename> ファイルを削除することで、元の再起動に戻すことができます。</para>
  </tip>
 </sect1>
 <sect1 xml:id="cha-tuning-kexec-config">
  <title>日々の再起動に対する &kexec; の設定方法</title>

  <para>&kexec; は定期的な再起動処理でも使用することができます。たとえばハードウエア検出ルーチンに長い時間がかかるような環境であったり、起動時の信頼性があまり高くないシステムなどで有用です。</para>

  <para>ただし、 &kexec; でシステムを再起動する際は、ファームウエアやブートローダを使用しないことに注意してください。ブートローダ側で設定を変更していても、物理的な (&kexec; を使用しない) 再起動を行なうまで、それらは反映されません。</para>
 </sect1>
 <sect1 xml:id="cha-tuning-kdump-basic">
  <title>基本的な &kexec; の設定</title>

  <para>&kdump; を使用することで、カーネルのダンプ情報を保存することができます。これは、カーネルがクラッシュしてしまった場合、その時点のメモリ内容をファイルシステムに保存する機能です。この仕組みにより、カーネルがクラッシュした時点で何が起こっていたのかを調べることができるようになります。これを <quote>コアダンプ</quote> と呼びます。</para>

  <para>&kdump; は &kexec; と同じ仕組みで動作するものです (詳しくは <xref linkend="cha-tuning-kexec"/> をお読みください) 。この場合、本番用のカーネルがクラッシュした際に、情報採取用のカーネルを起動します。ただし、 &kexec; では本番用のカーネルをそのまま置き換えて動作するのに対して、 &kdump; ではクラッシュした本番用のカーネルのメモリを保持し続ける点が異なります。これにより、 &kdump; カーネルの環境内から、クラッシュしたカーネルのメモリ領域を保存できることになります。</para>

  <tip>
   <title>ネットワーク経由でのダンプについて</title>
   <para>ローカルストレージのサイズが少ないシステムでは、カーネルダンプをネットワーク経由で採取したいこともあります。 &kdump; では、 <systemitem>initrd</systemitem> を介してネットワークインターフェイスの設定を行ない、それを動作状態に移行させることができます。また、通常の LAN だけでなく VLAN にも対応しています。設定作業は &yast; を使用して行なうか、 <filename>/etc/sysconfig/kdump</filename> ファイル内にある <option>KDUMP_NETCONFIG</option> 変数を設定してください。</para>
  </tip>

  <important>
   <title>&kdump; でのターゲットファイルシステムは設定の時点でマウントしておかなければならない問題について</title>
   <para>&kdump; を設定する際、採取したダンプイメージの保存先の場所を指定することができます (既定値: <filename>/var/crash</filename>) 。この保存先は &kdump; の設定時点でマウントしておかなければなりません。設定時点でマウントを行なっていないと、設定が失敗します。</para>
  </important>

  <sect2 xml:id="cha-tuning-kdump-basic-manual">
   <title>手作業での &kdump; の設定</title>
   <para>&kdump; では設定を <filename>/etc/sysconfig/kdump</filename> ファイルから読み込みます。お使いのシステムで &kdump; を動作させるにあたって、事前の設定は特に必要ありません。 &kdump; を既定の設定値のままで動作させたい場合は、下記の手順を実施してください:</para>
   <procedure>
    <step>
     <para><xref linkend="sec-tuning-kexec-crashkernel"/> の手順に従って、 &kdump; で必要なメモリ量を決定します。決定後、 <option>crashkernel</option> のカーネルパラメータを設定します。</para>
    </step>
    <step>
     <para>コンピュータを再起動します。</para>
    </step>
    <step>
     <para>&kdump; サービスを有効化します:</para>
<screen>&prompt.root;<command>systemctl</command> enable kdump</screen>
     <para><!--taroth 2014-03-19: systemd - according to fcrozat, no more boot.* stuff: <command>chkconfig boot.kdump <option>on</option></command>--></para>
    </step>
    <step>
     <para>必要であれば <filename>/etc/sysconfig/kdump</filename> ファイルを編集します。それぞれのオプションの意味について、詳しくはファイル内のコメント (英語) をお読みください。</para>
    </step>
    <step>
     <para><command>sudo systemctl start kdump</command> を実行するか、システムを再起動して準備用のスクリプトを実行します。</para>
    </step>
   </procedure>
   <para>既定値で &kdump; の設定を行なったら、あとは期待通りに動作するかどうかを確認します。まずはお使いのシステム内に誰もログインしていないことと、システム内で重要なサービスを動作させていないことを確認して、下記の手順を実施します:</para>
   <procedure>
    <step>
     <para><command>systemctl isolate rescue.target</command> と入力して実行し、レスキューモードのターゲットに切り替えます。</para>
    </step>
    <step>
     <para>&kdump; サービスを再起動します:</para>
<screen>&prompt.root;<command>systemctl</command> start kdump</screen>
    </step>
    <step>
     <para>下記のコマンドを入力して実行し、ルートファイルシステム以外の全てのマウントを解除します:</para>
<screen>&prompt.root;<command>umount</command> -a</screen>
    </step>
    <step>
     <para>ルートファイルシステムを読み込み専用モードで再マウントします:</para>
<screen>&prompt.root;<command>mount</command> -o remount,ro /</screen>
    </step>
    <step>
     <para><literal>procfs</literal> インターフェイス内の Magic SysRq キー機能を利用して、 <quote>カーネルパニック</quote> を動作させます:</para>
<screen>&prompt.root;<command>echo</command> c &gt; /proc/sysrq-trigger</screen>
    </step>
   </procedure>
   <important>
    <title>カーネルダンプのサイズについて</title>
    <para><literal>KDUMP_KEEP_OLD_DUMPS</literal> オプションは、カーネルダンプの保存数 (既定値: 5) を指定するためのものです。圧縮を行なわない場合、ダンプのサイズは最大で物理メモリのサイズそのものになります。そのため、 <filename>/var</filename> のパーティションに対しては、十分な空き領域を用意しておいてください。</para>
   </important>
   <para>情報採取用のカーネルが起動して、クラッシュしたほうのカーネルのメモリ状態をファイルシステムに保存します。保存先は <literal>KDUMP_SAVEDIR</literal> オプションで設定します (既定値: <filename>/var/crash</filename>) 。 <literal>KDUMP_IMMEDIATE_REBOOT</literal> を <literal>yes</literal> に設定していると、本番用のカーネルを利用してシステムを自動的に再起動します。再起動が終わったらログインを行ない、 <filename>/var/crash</filename> 内にダンプファイルが作成されていることを確認してください。</para>
   <sect3 xml:id="sec-tuning-kdump-basic-manual-static-ip">
    <title>&kdump; に対する固定 IP の設定</title>
    <para>&kdump; でネットワークデバイスに対して固定 IP アドレスを設定する場合は、必要なネットワーク設定を <filename>/etc/sysconfig/kdump</filename> 内の <envar>KDUMP_COMMANDLINE_APPEND</envar> 変数に追加します。</para>
    <important>
     <title>&kdump; の設定ファイルの変更について</title>
     <para><filename>/etc/sysconfig/kdump</filename> ファイルを変更した場合は、その変更点を反映させるため、必ず <command>systemctl restart kdump.service</command> を実行する必要があります。実行しておかないと、次にシステムを再起動するまで、変更が反映されなくなってしまいます。</para>
    </important>
    <example>
     <title>&kdump;: 固定の IP アドレスを設定する場合の例</title>
     <para>下記のように設定しているものとします:</para>
     <itemizedlist>
      <listitem>
       <para>eth0 に対して <systemitem class="etheraddress">192.168.1.1/24</systemitem> という固定 IP アドレスを設定</para>
      </listitem>
      <listitem>
       <para>eth1 に対して <systemitem class="etheraddress">10.50.50.100/20</systemitem> という固定 IP アドレスを設定</para>
      </listitem>
      <listitem>
       <para><filename>/etc/sysconfig/kdump</filename> 内の &kdump; 設定は下記のようになっているものとします:</para>
<screen>KDUMP_CPUS=1
KDUMP_IMMEDIATE_REBOOT=yes
KDUMP_SAVEDIR=ftp://anonymous@10.50.50.140/crashdump/
KDUMP_KEEP_OLD_DUMPS=5
KDUMP_FREE_DISK_SIZE=64
KDUMP_VERBOSE=3
KDUMP_DUMPLEVEL=31
KDUMP_DUMPFORMAT=lzo
KDUMP_CONTINUE_ON_ERROR=yes
KDUMP_NETCONFIG=eth1:static
KDUMP_NET_TIMEOUT=30</screen>
      </listitem>
     </itemizedlist>
     <para>このような構成の場合、 &kdump; はダンプを FTP サーバに送信しようとする際、ネットワークに到達できないことになります。この問題を解決するには、 <filename>/etc/sysconfig/kdump</filename> 内の <envar>KDUMP_COMMANDLINE_APPEND</envar> にネットワーク設定を追加します。一般的な書式は下記のとおりです:</para>
<screen>KDUMP_COMMANDLINE_APPEND='ip=<replaceable>クライアントの_IP</replaceable>:<replaceable>サーバの_IP</replaceable>:<replaceable>ゲートウエイの_IP</replaceable>:<replaceable>ネットマスク</replaceable>:<replaceable>クライアントのホスト名</replaceable>:<replaceable>デバイス名</replaceable>:<replaceable>プロトコル</replaceable>'</screen>
     <para>上記の構成を当てはめると、下記のようになります:</para>
<screen>KDUMP_COMMANDLINE_APPEND='ip=10.50.50.100:10.50.50.140:10.60.48.1:255.255.240.0:dump-client:eth1:none'</screen>
    </example>
   </sect3>
  </sect2>

  <sect2 xml:id="cha-tuning-kdump-basic-yast">
   <title>&yast; での設定</title>
   <para>&yast; で &kdump; を設定するには、まず <systemitem>yast2-kdump</systemitem> パッケージをインストールする必要があります。インストール後は &rootuser; で &yastcc; 内の <guimenu>システム</guimenu> カテゴリにある <guimenu>カーネル Kdump</guimenu> を起動するか、もしくはコマンドラインで <command>yast2 kdump</command> と入力して実行します。</para>
   <figure xml:id="fig-tuning-kdump-basic-yast-kdump1">
    <title>&yast; &kdump; モジュール: 最初のページ</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="yast2_kdump_startup.png" width="60%" format="PNG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="yast2_kdump_startup.png" width="70%" format="PNG"/>
     </imageobject>
     <textobject><phrase>&yast; &kdump; モジュールのスクリーンショット</phrase></textobject>
    </mediaobject>
   </figure>
   <para>まずは <guimenu>起動</guimenu> ウインドウ内で <guimenu>Kdump の有効化</guimenu> を選択します。</para>
   <para>ウインドウを始めた開いたタイミングで、 <guimenu>&kdump; メモリ</guimenu> の値が自動的に設定されます。しかしながら、環境によっては自動生成の値では不十分な場合があります。正しい値を設定するには、 <xref linkend="sec-tuning-kexec-crashkernel"/> の手順に従って判断を行ない、値を入力してください。</para>
   <important>
    <title>ハードウエア変更後の <guimenu>&kdump; メモリ</guimenu> の再設定について</title>
    <para>コンピュータ内で &kdump; を設定し、後からメモリ量や利用可能なハードディスクを変更した場合、 &yast; では古い環境での値を表示し続けてしまいます。</para>
    <para>この問題を回避するには、 <xref linkend="sec-tuning-kexec-crashkernel"/> で書かれている手順に従って必要なメモリ量を判断して、 &yast; で設定をやり直してください。</para>
   </important>
   <para>左のペイン内で <guimenu>ダンプフィルタリング</guimenu> を選択して、ダンプ内に含めるべきページを選択します。カーネルの問題をデバッグするだけであれば、これらのページは必要ではありません:</para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>ゼロ充填のページ</para>
    </listitem>
    <listitem>
     <para>キャッシュページ</para>
    </listitem>
    <listitem>
     <para>ユーザデータページ</para>
    </listitem>
    <listitem>
     <para>フリーページ</para>
    </listitem>
   </itemizedlist>
   <para><guimenu>ダンプ先</guimenu> ウインドウでは、ダンプの保存先の種類を選択したあと、保存先の場所を指定します。 FTP や SSH などのネットワークプロトコルを指定した場合は、必要なアクセス情報についても指定する必要があります。</para>
   <tip>
    <title>他のアプリケーションとのダンプディレクトリの共有について</title>
    <para>&kdump; のダンプの保存先と他のアプリケーションのダンプ保存先を同じパスに設定することもできます。この場合、古いダンプファイルの削除処理では、他のアプリケーションのダンプが除外され、削除されなくなります。</para>
   </tip>
   <para>&kdump; に対して、そのイベントが発生した際に電子メールで通知を行ないたい場合は、 <guimenu>電子メール通知</guimenu> のウインドウ内で設定を行ないます。また、必要であれば <guimenu>熟練者向け設定</guimenu> で必要な設定を行ないます。設定が完了したら <guimenu>OK</guimenu> を押すことで、設定が完了します。</para>
  </sect2>

  <sect2 xml:id="cha-tuning-kdump-ssh">
   <title>SSH 経由での &kdump;</title>
   <para>ダンプファイルには不用意に開示してはならない様々な機密情報が含まれています。このような機密情報を含むデータを信頼できないネットワーク経由で送信できるようにするため、 &kdump; には、 SSH プロトコルを介してリモートのマシンにダンプファイルを送信できる機能が用意されています。</para>
   <procedure>
    <step>
     <para>送信先のホストの識別情報は、あらかじめ &kdump; 側で既知のものでなければなりません。これは、機密情報を含むデータを誤った (場合によっては悪意を持って偽装された) ホストに送信しないための仕組みです。 &kdump; が新しい <systemitem>initrd</systemitem> を生成する際、送信先のホストの識別情報を問い合わせるために <command>ssh-keygen -F <replaceable>宛先ホスト</replaceable></command> を実行しますが、それは <replaceable>宛先ホスト</replaceable> の公開鍵が既知である必要があるためです。公開鍵を既知のものにしておくための最も簡単な方法は、 &rootuser; で <replaceable>宛先ホスト</replaceable> に接続してみることです。</para>
    </step>
    <step>
     <para>また、 &kdump; は送信先のホストとの間で認証できなければなりません。現時点では公開鍵認証にのみ対応しています。既定では &kdump; は &rootuser; の機密鍵を使用して接続しようとしますが、通常は &kdump; 用に個別の鍵を用意しておくことが望ましい設定です。個別の鍵は <command>ssh-keygen</command> を利用して、下記のように実行することで作成することができます:</para>
     <substeps>
      <step>
<screen>&prompt.root;<command>ssh-keygen</command> -f <replaceable>~/.ssh/kdump_key</replaceable></screen>
      </step>
      <step>
       <para>なお、パスフレーズの入力を求められた際には、何も入力せずに <keycap function="enter"/> を押してください (これでパスフレーズを使用せずに鍵を作成する意味になります) 。</para>
      </step>
      <step>
       <para>あとは <filename>/etc/sysconfig/kdump</filename> ファイルを開いて、 <literal>KDUMP_SSH_IDENTITY</literal> の値を <replaceable>kdump_key</replaceable> に設定します。なお、 <filename>~/.ssh</filename> 以外のディレクトリに配置している場合は、フルパスで指定してください。</para>
      </step>
     </substeps>
    </step>
    <step>
     <para>次に、生成した &kdump; の SSH 鍵を送信先のホストに送信して認証できるようにします。</para>
<screen>&prompt.root;<command>ssh-copy-id</command> -i <replaceable>~/.ssh/kdump_key</replaceable> <replaceable>TARGET_HOST</replaceable></screen>
    </step>
    <step>
     <para><literal>KDUMP_SAVEDIR</literal> を設定します。これには 2 つの方法があります:</para>
     <variablelist>
      <varlistentry>
       <term>Secure File Transfer Protocol (sftp)</term>
       <listitem>
        <para>SFTP は SSH 経由でファイルを送信するための推奨される方法です。ただし、接続先のホストで sftp サブシステムが有効化されていなければなりません (<!-- NOTE: not "&slea" but "&productname" --> &productname; では既定で有効化されています) 。具体的には、下記のように指定します:</para>
<screen>KDUMP_SAVEDIR=sftp://<replaceable>宛先ホスト</replaceable><replaceable>/ダンプファイルの保存先パス</replaceable></screen>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>Secure Shell Protocol (ssh)</term>
       <listitem>
        <para>ディストリビューションによっては、接続先のホストで SSH 経由でコマンドを実行しなければならないものもあります。 &productname; では、この方法にも対応しています。この場合、接続先のホストでの &kdump; のユーザには、ログインシェルが設定されていなければならず、 <command>mkdir</command> , <command>dd</command> , <command>mv</command> の各コマンドを実行できなければなりません。具体的には下記のように指定します:</para>
<screen>KDUMP_SAVEDIR=ssh://<replaceable>宛先ホスト</replaceable><replaceable>ダンプファイルの保存先パス</replaceable></screen>
       </listitem>
      </varlistentry>
     </variablelist>
    </step>
    <step>
     <para>新しい設定を適用するには、 &kdump; のサービスを再起動してください。</para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="cha-tuning-kdump-analyze">
  <title>クラッシュダンプの解析</title>

  <para>ダンプファイルを保存することができたら、あとは解析するだけです。解析方法にはいくつかあります。</para>

  <para>ダンプを解析する際に使用する最も基本的なツールは GDB です。このツールは最新の環境でも使用することができますが、いくつかの欠点や制限が存在しています:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>GDB はカーネルのダンプを解析するための専用ツールではないこと。</para>
   </listitem>
   <listitem>
    <para>GDB では 32 ビットプラットフォームで ELF64 バイナリ形式に対応していないこと。</para>
   </listitem>
   <listitem>
    <para>GDB では ELF ダンプ以外の形式 (圧縮ダンプを含む) に対応していないこと。</para>
   </listitem>
  </itemizedlist>

  <para>上記のような理由から、 <command>crash</command> ユーティリティが作成されました。このユーティリティはクラッシュダンプを解析するだけでなく、動作中のシステムもデバッグすることができます。また、 Linux カーネルのデバッグ専用の機能が用意され、高度なデバッグを行ないたい場合に最適な仕組みです。</para>

  <para>Linux カーネルをデバッグするには、まずデバッグ情報パッケージをインストールしておく必要があります。お使いのシステムにインストールされているかどうかを確認するには、下記のコマンドを入力して実行します:</para>

<screen>&prompt.user;<command>zypper</command> se kernel | <command>grep</command> debug</screen>

  <important>
   <title>デバッグ情報パッケージのリポジトリについて</title>
   <para>&productname; &productnumber; のシステムでオンライン更新を受け取るように設定している場合、 <literal>*-Debuginfo-Updates</literal> という名前のオンラインリポジトリ内に <quote>debuginfo</quote> パッケージが存在しています。 &yast; を利用するなどしてリポジトリを有効化してください。</para>
  </important>

  <para>ダンプを生成したマシンと同じマシンで <command>crash</command> コマンドを実行し、採取したダンプを開きたい場合は、下記のようなコマンドを入力して実行します:</para>

<screen><command>crash</command> <replaceable>/boot/vmlinux-2.6.32.8-0.1-default.gz</replaceable> \
<replaceable>/var/crash/2010-04-23-11\:17/vmcore</replaceable></screen>

  <para>ここで、最初のパラメータはカーネルイメージのパスを表わしています。 2 つめのパラメータには、 &kdump; で採取したダンプファイルを指定します。既定では、 <filename>/var/crash</filename> ディレクトリ内に存在しています。</para>

  <tip>
   <title>カーネルクラッシュダンプからの基本情報の取得について</title>
   <para>&productname; には <command>kdumpid</command> と呼ばれるユーティリティ (同名のパッケージに含まれています) が存在し、これによって未知のカーネルダンプの情報を表示することができます。このユーティリティは、アーキテクチャやカーネルリリースなど、基本的な情報を抽出することができます。また、このユーティリティは lkcd, diskdump, &kdump;, ELF ダンプの各形式に対応しているほか、 <option>-v</option> オプションを付けて実行すると、マシンの種類やカーネルのバナー文字列、カーネルの設定フレーバーなども表示することができます。</para>
  </tip>

  <sect2 xml:id="cha-tuning-kdump-analyze-binformat">
   <title>カーネルのバイナリ形式</title>
   <para>Linux カーネルは Executable and Linkable Format (ELF) 形式で提供されます。このファイルは通常 <literal>vmlinux</literal> と呼ばれ、コンパイル処理時に直接生成されます。ただし、特に &x86-64; アーキテクチャで顕著ではありますが、全てのブートローダが ELF 形式に対応しているというわけではありません。 &productnamereg; で対応しているアーキテクチャごとに、下記のような仕組みになっています。</para>
   <sect3 xml:id="cha-tuning-kdump-analyze-binformat-x86">
    <title>&x86-64;</title>
    <para>&suse; が提供する &x86-64; 向けのカーネルパッケージには、 <filename>vmlinuz</filename> と <filename>vmlinux.gz</filename> という 2 つのファイルが含まれています。</para>
    <itemizedlist>
     <listitem>
      <formalpara>
       <title><filename>vmlinuz</filename></title>
       <para>ブートローダから直接実行するほうのファイルです。</para>
      </formalpara>
      <para>Linux カーネルは 2 種類のパーツから構成されています。 1 つはカーネルそれ自身 ( <literal>vmlinux</literal> ) 、もう 1 つはブートローダが実行するセットアップコードです。これら 2 つのパーツを 1 つにまとめて <filename>vmlinuz</filename> というファイルに仕立て上げています (末尾が <literal>x</literal> ではなく <literal>z</literal> であることに注意してください) 。</para>
      <para>カーネルのソースツリー内では、このファイルは <filename>bzImage</filename> と呼ぶこともあります。</para>
     </listitem>
     <listitem>
      <formalpara>
       <title><filename>vmlinux.gz</filename></title>
       <para>こちらは <command>crash</command> や GDB が使用するファイルで、圧縮された ELF イメージの形態になっています。 ELF イメージは &x86-64; のブートローダから使用されることがありませんので、圧縮されたファイルのみを提供しています。</para>
      </formalpara>
     </listitem>
    </itemizedlist>
   </sect3>
   <sect3 xml:id="cha-tuning-kdump-analyze-binformat-ppc">
    <title>&power;</title>
    <para>&power; 上で動作する <systemitem>yaboot</systemitem> ブートローダは ELF イメージの読み込みに対応していますが、圧縮されたファイルには対応していません。そのため、 &power; アーキテクチャ向けのカーネルパッケージには、 <filename>vmlinux</filename> という ELF 形式の Linux カーネルファイルが含まれています。 <command>crash</command> を動作させる前提で考えると、最も単純なアーキテクチャであると言えます。</para>
    <para>なお、他のマシンでダンプを解析する場合は、コンピュータのアーキテクチャとデバッグに必要なファイルの両方を確認しなければならないことに注意してください。</para>
    <para>他のコンピュータでダンプを解析する場合は、同じアーキテクチャの Linux マシンのみを使用することができます。アーキテクチャを確認したい場合は、 <command>uname</command> <option>-i</option> と入力して実行し、出力された内容を比較してください。</para>
    <para>このほか、他のコンピュータでダンプを解析しようとしている場合は、 <systemitem>kernel</systemitem> パッケージと <systemitem>kernel debug</systemitem> パッケージが提供するファイルが必要となります。</para>
    <procedure>
     <step>
      <para>まずはカーネルダンプと <filename>/boot</filename> にあるカーネルイメージ、そしてそれに対応し、 <filename>/usr/lib/debug/boot</filename> 内にあるデバッグ情報ファイルを、 1 つのディレクトリ内にコピーしてまとめます。</para>
     </step>
     <step>
      <para>また、 <filename>/lib/modules/$(uname -r)/kernel/</filename> にあるカーネルモジュールと <filename>/usr/lib/debug/lib/modules/$(uname -r)/kernel/</filename> にあるカーネルモジュール用のデバッグ情報ファイルを、 <filename>modules</filename> サブディレクトリ内にコピーします。</para>
     </step>
     <step>
      <para>ダンプファイルとカーネルイメージ、デバッグ情報ファイルを 1 つのディレクトリにまとめ、 <filename>modules</filename> サブディレクトリ以下にカーネルモジュールとデバッグ情報ファイルを配置したら、あとは <command>crash</command> ユーティリティを実行します:</para>
<screen>&prompt.user;<command>crash</command> <replaceable>VMLINUX-バージョン vmcore</replaceable></screen>
     </step>
    </procedure>
    <para>ダンプを解析しているコンピュータに関わらず、 crash ユーティリティは下記のような出力を生成するはずです:</para>
<screen>&prompt.user;<command>crash</command> <replaceable>/boot/vmlinux-5.3.18-8-default.gz</replaceable> \
<replaceable>/var/crash/2020-04-23-11\:17/vmcore</replaceable>
crash 7.2.1
Copyright (C) 2002-2017  Red Hat, Inc.
Copyright (C) 2004, 2005, 2006, 2010  IBM Corporation
Copyright (C) 1999-2006  Hewlett-Packard Co
Copyright (C) 2005, 2006, 2011, 2012  Fujitsu Limited
Copyright (C) 2006, 2007  VA Linux Systems Japan K.K.
Copyright (C) 2005, 2011  NEC Corporation
Copyright (C) 1999, 2002, 2007  Silicon Graphics, Inc.
Copyright (C) 1999, 2000, 2001, 2002  Mission Critical Linux, Inc.
This program is free software, covered by the GNU General Public License,
and you are welcome to change it and/or distribute copies of it under
certain conditions.  Enter "help copying" to see the conditions.
This program has absolutely no warranty.  Enter "help warranty" for details.

GNU gdb (GDB) 7.6
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &#60;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-unknown-linux-gnu".

      KERNEL: /boot/vmlinux-5.3.18-8-default.gz
   DEBUGINFO: /usr/lib/debug/boot/vmlinux-5.3.18-8-default.debug
    DUMPFILE: /var/crash/2020-04-23-11:17/vmcore
        CPUS: 2
        DATE: Thu Apr 23 13:17:01 2020
      UPTIME: 00:10:41
LOAD AVERAGE: 0.01, 0.09, 0.09
       TASKS: 42
    NODENAME: eros
     RELEASE: 5.3.18-8-default
     VERSION: #1 SMP 2020-03-31 14:50:44 +0200
     MACHINE: x86_64  (2999 Mhz)
      MEMORY: 16 GB
       PANIC: "SysRq : Trigger a crashdump"
         PID: 9446
     COMMAND: "bash"
        TASK: ffff88003a57c3c0  [THREAD_INFO: ffff880037168000]
         CPU: 1
       STATE: TASK_RUNNING (SYSRQ)
<prompt>crash&gt; </prompt></screen>
    <para>このコマンドは最初に、有益なデータを出力します。上記の例では、カーネルがクラッシュした時点で 42 個のタスクが動作していて、クラッシュの原因は PID 9446 のタスクから送信された SysRq トリガー、そしてそのプロセスは bash である (bash 内蔵コマンドである <command>echo</command> コマンドでクラッシュを発生させたため) ことを示しています。</para>
    <para><command>crash</command> ユーティリティは GDB を利用して動作する仕組みであるため、様々な追加コマンドも用意されています。たとえば <command>bt</command> コマンドを何もパラメータを指定せずに実行すると、クラッシュが発生した時点での、そのタスクのバックトレースを表示することができます:</para>
<screen>
<prompt>crash&gt; </prompt><command>bt</command>
PID: 9446   TASK: ffff88003a57c3c0  CPU: 1   COMMAND: "bash"
 #0 [ffff880037169db0] crash_kexec at ffffffff80268fd6
 #1 [ffff880037169e80] __handle_sysrq at ffffffff803d50ed
 #2 [ffff880037169ec0] write_sysrq_trigger at ffffffff802f6fc5
 #3 [ffff880037169ed0] proc_reg_write at ffffffff802f068b
 #4 [ffff880037169f10] vfs_write at ffffffff802b1aba
 #5 [ffff880037169f40] sys_write at ffffffff802b1c1f
 #6 [ffff880037169f80] system_call_fastpath at ffffffff8020bfbb
    RIP: 00007fa958991f60  RSP: 00007fff61330390  RFLAGS: 00010246
    RAX: 0000000000000001  RBX: ffffffff8020bfbb  RCX: 0000000000000001
    RDX: 0000000000000002  RSI: 00007fa959284000  RDI: 0000000000000001
    RBP: 0000000000000002   R8: 00007fa9592516f0   R9: 00007fa958c209c0
    R10: 00007fa958c209c0  R11: 0000000000000246  R12: 00007fa958c1f780
    R13: 00007fa959284000  R14: 0000000000000002  R15: 00000000595569d0
    ORIG_RAX: 0000000000000001  CS: 0033  SS: 002b
<prompt>crash&gt; </prompt>
</screen>
    <para>これで何が起こったのかを知ることができます。 bash シェルの内蔵コマンドである <command>echo</command> が、 <filename>/proc/sysrq-trigger</filename> に文字を送信したために、クラッシュが発生していることになります。その文字に対応するハンドラが検出されると、 <literal>crash_kexec()</literal> を実行しています。この関数は <literal>panic()</literal> と呼ばれ、ここで &kdump; がダンプを保存しています。</para>
    <para>GDB の基本的なコマンドと <command>bt</command> の拡張版に加えて、 crash ユーティリティには Linux カーネルの構造に関連したその他のコマンドも用意されています。これらのコマンドは Linux カーネルの内部データ構造を理解し、それを人間にとって読みやすい形式で表示します。たとえばクラッシュが発生した時点でのタスクの一覧は、 <command>ps</command> で表示することができます。また <command>sym</command> コマンドは、全てのカーネルシンボルの一覧とアドレスを表示したり、指定したシンボルに対して値を取得することもできます。さらに <command>files</command> コマンドでは、プロセスが開いている全てのファイルディスクリプタを表示することができます。 <command>kmem</command> では、カーネルのメモリ使用率に関する詳細を表示することができます。 <command>vm</command> では、個別のページマッピングのレベルに至るまで、プロセスの仮想メモリを調査することができます。分かりやすいコマンドの一覧は非常に多く用意されているほか、様々なオプションを受け付けるようになっています。</para>
    <para>上述のコマンドは、一般的な Linux コマンドである <command>ps</command> や <command>lsof</command> の機能に対応しているものです。なお、デバッガでイベントの正確な順序を確認したい場合は、 GDB の使用方法について知る必要があるほか、強固なデバッグスキルを必要とします。この種類の話題は本文書の範疇外にあたるものであるため、本書では説明していません。これに加えて、 Linux カーネルそのものの知識も必要となります。こちらについては、本文書の末尾にある参照情報をご確認ください。</para>
   </sect3>
  </sect2>
 </sect1>
 <sect1 xml:id="cha-tuning-kdump-advanced">
  <title>高度な &kdump; の設定</title>

  <para>&kdump; の設定は <filename>/etc/sysconfig/kdump</filename> 内に保存されています。設定は &yast; を利用しても行なうことができます。 &kdump; の設定オプションは、 &yastcc; 内の <menuchoice><guimenu>システム</guimenu> <guimenu>カーネル Kdump</guimenu></menuchoice> 内に存在しています。下記の &kdump; オプションが用意されています。</para>

  <para>カーネルダンプの保存先は、 <option>KDUMP_SAVEDIR</option> オプションで指定します。ただし、カーネルダンプのサイズは非常に大きくなることに注意してください。ディスクの空き容量から予想されるダンプファイルのサイズを引いた値が、 <option>KDUMP_FREE_DISK_SIZE</option> よりも少ない場合、 &kdump; はダンプの保存を行なわなくなります。また、 <option>KDUMP_SAVEDIR</option> では、 URL 形式にも対応しています。 URL 形式は <replaceable>プロトコル</replaceable>://<replaceable>仕様</replaceable> の形式で指定し、 <replaceable>プロトコル</replaceable> は <option>file</option> , <option>ftp</option> , <option>sftp</option> , <option>nfs</option> , <option>cifs</option> のいずれかを指定します。 <replaceable>仕様</replaceable> はそれぞれのプロトコルに従った値を指定します。たとえばカーネルダンプを FTP サーバ内に保存したい場合は、 <option>ftp://<replaceable>ユーザ名</replaceable>:<replaceable>パスワード</replaceable>@ftp.example.com:123/var/crash</option> のように指定します。</para>

  <para>カーネルダンプは一般に巨大なものであり、解析には必要のない多数のページをも含んでしまっています。 <option>KDUMP_DUMPLEVEL</option> オプションを指定することで、これらの不要なページを省略することができます。設定可能な値は 0 から 31 までで、 <replaceable>0</replaceable> を指定すると最も巨大なダンプファイルに、 <replaceable>31</replaceable> を指定すると最も小さなダンプファイルになります。設定可能な値について、詳しくは <command>kdump</command> のマニュアルページ ( <command>man 7 kdump</command> ) をお読みください。</para>

  <para>場合によっては、カーネルダンプのサイズを小さくしておいたほうが都合のよい場合があります。たとえばネットワーク経由でダンプを転送するような場合や、ダンプディレクトリのディスク領域を節約したい場合などがそれにあたります。この場合は、 <option>KDUMP_DUMPFORMAT</option> の値を <literal>compressed</literal> に設定してください。なお、 <command>crash</command> ユーティリティでは、圧縮されたダンプを動的に展開して使用することができます。</para>

  <important>
   <title>&kdump; の設定ファイルの変更について</title>
   <para><filename>/etc/sysconfig/kdump</filename> ファイルを変更した場合は、その変更点を反映させるため、必ず <command>systemctl restart kdump.service</command> を実行する必要があります。実行しておかないと、次にシステムを再起動するまで、変更が反映されなくなってしまいます。</para>
  </important>
 </sect1>
 <sect1 xml:id="cha-tuning-kdump-moreinfo">
  <title>さらなる情報</title>

  <para>&kexec; や &kdump; の使用方法については、 1 箇所にまとまった情報源が存在していないのが現状です。下記にさまざまな側面で使用できる情報源 (いずれも英語のみ) を示します:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>&kexec; ユーティリティの使用方法については、 <command>kexec</command> のマニュアルページ ( <command>man 8 kexec</command> ) をお読みください。</para>
   </listitem>
   <listitem os="sles">
    <para>IBM 社では、 &zseries; アーキテクチャにおけるダンプツールの使用方法について、広範囲なドキュメンテーションを用意しています。詳しくは <link xlink:href="http://www.ibm.com/developerworks/linux/linux390/development_documentation.html"/> をお読みください。</para>
   </listitem>
   <listitem>
    <para>&kexec; に関する一般的な情報については、 <link xlink:href="http://www.ibm.com/developerworks/linux/library/l-kexec.html"/> をお読みください。ただし、少し古い情報が書かれているようです。</para>
   </listitem>
   <listitem>
    <para>&productname; における &kdump; の詳細については、 <link xlink:href="http://ftp.suse.com/pub/people/tiwai/kdump-training/kdump-training.pdf"/> をお読みください。</para>
   </listitem>
   <listitem>
    <para>&kdump; の内部仕様に関する詳細については、 <link xlink:href="http://lse.sourceforge.net/kdump/documentation/ols2oo5-kdump-paper.pdf"/> をお読みください。</para>
   </listitem>
  </itemizedlist>

  <para><command>crash</command> ダンプ解析ユーティリティやデバッグツールについての詳細は、それぞれ下記 (いずれも英語) をお読みください:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>GDB の info ページ ( <command>info gdb</command> ) に加えて、印刷可能なガイド <link xlink:href="http://sourceware.org/gdb/documentation/"/> も提供されています。</para>
   </listitem>
<!--taroth 2020-06-30: seems this is no longer available, commenting-->
<!--<listitem>
    <para>
     A white paper with a comprehensive description of the crash utility
     usage can be found at
     <link xlink:href="http://people.redhat.com/anderson/crash_whitepaper/"/>.
    </para>
   </listitem>-->
   <listitem>
    <para>crash ユーティリティには幅広い分野に対応したオンラインヘルプが用意されています。 <command>help</command> <replaceable>コマンド</replaceable> のように入力すると、 <replaceable>コマンド</replaceable> に対するオンラインヘルプを表示することができます。</para>
   </listitem>
   <listitem>
    <para>Perl の知識をお持ちであれば、 Alicia を利用してより簡単にデバッグを行なうことができます。これは Perl ベースの crash ユーティリティ向けフロントエンドです。詳しくは <link xlink:href="http://alicia.sourceforge.net/"/> をお読みください。</para>
   </listitem>
   <listitem>
    <para>Python をご利用になりたい場合は、 Pykdump をインストールして使用することをお勧めします。このパッケージは Python スクリプト経由で GDB を制御することができるものです。 <link xlink:href="http://sf.net/projects/pykdump"/> からダウンロードすることができます。</para>
   </listitem>
   <listitem>
    <para>Linux カーネルの内部情報に関する幅広い情報については、 Daniel P. Bovet 氏および Marco Cesati 氏による <citetitle>Understanding the Linux Kernel</citetitle> (ISBN 978-0-596-00565-8) をお読みください。</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
