<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-firewall">
 <title>マスカレードとファイアウオール</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
	<dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
 <para>Linux マシンがネットワーク内に配置されていれば、カーネルの機能を利用してネットワークパケットの制御を行い、内部ネットワークと外部ネットワークを区別して扱ったり、パケットそのものを書き換えたりすることができます。 Linux では <systemitem>netfilter</systemitem> フレームワークが提供されていて、これによって様々なネットワークを個別に扱う効率的なファイアウオールを構築することができます。この <systemitem>netfilter</systemitem> フレームワークのフロントエンドが iptables で、ルールセットを定義するための汎用的なテーブル構造を作成することができます。これにより、ネットワークインターフェイスからの通過を許可するパケットを、正確に制御することができます。また、 &firewalld; やそのグラフィカルインターフェイスである <command>firewall-config</command> を利用することでも、パケットフィルタを構築することができます。</para>
 <para>&productname; <phrase os="sles;sled">15 GA</phrase> <phrase os="osuse">15.0</phrase> では新しいソフトウエアファイアウオールとして &firewalld; が提供されています。これは &susefirewall; を置き換えるべく提供されているもので、 &productname; <phrase os="sles;sled">15 GA</phrase> <phrase os="osuse">15.0</phrase> では従来通り &susefirewall; が提供されているものの、既定のインストール手順ではインストールが行われないようになっています。本章では &firewalld; の設定方法のほか、古いバージョンの &productname; リリースからアップグレードしたユーザ向けに、 &susefirewall; から &firewalld; への移行方法をも説明しています。</para>

 <sect1 xml:id="sec-security-firewall-iptables">
  <title>iptables によるパケットフィルタリング</title>

  <para>本章では、パケットフィルタリングに関してパケット寄りの詳細を説明しています。 <systemitem>netfilter</systemitem> と <systemitem>iptables</systemitem> のコンポーネントは、ネットワークパケットのフィルタリングや内容の変更、そしてネットワークアドレス変換 (NAT) に関する制御を行う仕組みです。フィルタリングの判断条件とそれに付属する制御内容はチェインという形で保持され、パケットが届くごとにそれぞれ 1 つずつ判断を行います。 <command>iptables</command> コマンドでは、これらのテーブルやルールの制御を行うことができます。</para>

  <para>Linux カーネルでは 3 種類のテーブルを管理しています。これらはそれぞれ別々のフィルタ機能に対応しています:</para>

  <variablelist>
   <varlistentry>
    <term>filter</term>
    <listitem>
     <para>このテーブルは、狭い意味での <emphasis>パケットフィルタリング</emphasis> を行うために提供されているテーブルで、様々なフィルタリングルールを設定して使用します。このテーブルでは、パケットの通過を許可する ( <literal>ACCEPT</literal> ) か拒否する ( <literal>DROP</literal> ) かを指定するなどして、ルールを構成します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>nat</term>
    <listitem>
     <para>このテーブルは、パケットの発信元と送信先のアドレスをそれぞれ変更するために使用するテーブルです。これらの機能を利用することで、プライベートネットワークをインターネットに接続する際に使用する、 <emphasis>マスカレード</emphasis> と呼ばれる処理を実現することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>mangle</term>
    <listitem>
     <para>このテーブルは、 IP ヘッダなどに含まれている様々な値 (Type Of Service など) を制御するために使用するテーブルです。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>これらのテーブルに対して、それぞれ下記に示すチェインが用意されています:</para>

  <variablelist>
   <varlistentry>
    <term>PREROUTING</term>
    <listitem>
     <para>このチェインは、届いた全てのパケットを処理するためのチェインです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>INPUT</term>
    <listitem>
     <para>このチェインは、このシステムが送信先となっている全てのパケットを処理するためのチェインです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>FORWARD</term>
    <listitem>
     <para>このチェインは、このシステムを通過していく全てのパケットを処理するためのチェインです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>OUTPUT</term>
    <listitem>
     <para>このチェインは、このシステムから発信される全てのパケットを処理するためのチェインです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>POSTROUTING</term>
    <listitem>
     <para>このチェインは、発信される全てのパケットを処理するためのチェインです。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para><xref linkend="fig-fire-table"/> の図には、 Linux システム内におけるパケットの流通経路を示しています。単純化する目的でチェインの中にテーブルを記述していますが、実際にはこれらのチェインはテーブル内に含まれる形になっています。</para>

  <para>最もわかりやすい例として、 <literal>eth0</literal> のインターフェイスに対して、このシステム宛のパケットが届いた場合を考えてみます。パケットは最初、 <literal>mangle</literal> テーブル内の <literal>PREROUTING</literal> チェインで処理され、その後 <literal>nat</literal> テーブル内の <literal>PREROUTING</literal> チェインで処理が行われます。その後、パケットの経路 (ルーティング) を判断する処理を行い、パケットの送信先が自分自身であるかどうかを判断します。今回は自分自身が宛先なので、 <literal>mangle</literal> および <literal>filter</literal> の <literal>INPUT</literal> チェインで処理されたあと、 <literal>filter</literal> テーブル内で許可される設定になっていれば、対応するプログラムに渡されることになります。</para>

  <figure xml:id="fig-fire-table">
   <title>iptables: パケットの流通経路</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata width="75%" fileref="fire_tables.svg"/>
    </imageobject>
    <imageobject role="html">
     <imagedata width="100%" fileref="fire_tables.png"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="sec-security-firewall-masq">
  <title>基本的なマスカレード処理</title>

  <para>マスカレードとは Linux 固有の NAT (Network Address Translation; ネットワークアドレス変換) の一形態で、小規模な LAN をインターネットに接続する際に使用するものです。 LAN 内のホストにはプライベート IP アドレスの範囲 (詳しくは <xref linkend="sec-network-addresses-route"/> をお読みください) 内にあるアドレスを割り当ててあり、インターネット側にはプロバイダなどから割り当てられたアドレスを使用している場合、インターネットに接続するには、 LAN 側の IP アドレスをインターネット側のアドレスに変換する作業が必要となります。通常、この処理は LAN とインターネットを結ぶルータが行うべき作業です。一般的な構成は非常にシンプルで、ルータには複数のネットワークインターフェイス (通常はネットワークカード) があり、それとは別にインターネットに接続しているインターフェイスが用意されています。 LAN 内のコンピュータは、このルータをデフォルトゲートウエイとして設定することで、外部 (つまりインターネット) の世界に出て行くことができるようになっています。</para>

  <important>
   <title>正しいネットマスクの設定について</title>
   <para>ネットワークを設定する際、ブロードキャストアドレスとネットマスクは、 LAN 内の全てのコンピュータで同じ値を設定する必要があります。設定の異なるコンピュータが存在すると、正しい経路を見つけられなくなってしまうことがあります。</para>
  </important>

  <para>上述のとおり、 LAN 内のコンピュータがインターネットアドレス宛にパケットを送信する場合、デフォルトゲートウエイとして設定したルータに対して通信が行われます。ただし、ルータとして動作するにはあらかじめパケットを転送できるように設定しなければなりません。セキュリティ上の理由から、既定のインストールでは転送機能は有効化されません。有効化を行うには、 <filename>/etc/sysctl.conf</filename> ファイル内に <literal>net.ipv4.ip_forward = 1</literal> という行を追加してください。 &yast; から設定を行いたい場合は、 <command>yast routing ip-forwarding on</command> と入力して実行してください。</para>

  <para>接続先の (インターネット側の) ホストからは、ルータまでは到達可能であるものの、本来のパケット送信元である内部ネットワーク内のコンピュータまでは到達できないようにしています。このような仕組みをマスカレード (仮装や変装などの意味) と言います。アドレス変換の仕組みにより、ルータは応答パケットに対する第一の送信先となります。ルータ側ではこのパケットがどれに紐付くものであるのかを探して、本来の (LAN 側の) 送信元に配送します。</para>

  <para>内部側のネットワークパケットの配送はマスカレード処理用のテーブルに従って行われるため、外側 (インターネット側) から内側 (LAN 側) に接続を開くことはできなくなっています。これは、外部から内部に接続しようとしても、テーブル内に対応する項目が存在しないためです。これに加えて、既に確立されている接続に対しては、テーブル内でその状態を管理するようにもなっています。これにより、他の接続で使用されてしまうようなことがないようになっています。</para>

  <para>このような構造になっていることから、 ICQ, cucme, IRC (DCC, CTCP), FTP (PORT モード) などのプロトコルを使用した場合、接続がうまくいかない場合があります。 Web ブラウザや標準的な FTP プログラムなど、多数のプログラムは PASV モードを使用しますので、フィルタリングやマスカレードという観点では問題が発生しにくくなっています。</para>
 </sect1>
 <sect1 xml:id="sec-security-firewall-fw">
  <title>基本的なファイアウオール処理</title>

  <para><emphasis>ファイアウオール</emphasis> とはおそらく、ネットワーク間を流れるデータを制御する仕組みとして最もよく使われている用語でしょう。厳密に言うと、本章で説明している内容は <emphasis>パケットフィルタ</emphasis> と呼ばれる仕組みです。パケットフィルタはプロトコルやポート、 IP アドレスなどの条件を元に、データの流れを管理するための仕組みです。この仕組みによって、ネットワークに対して届いて欲しくないパケットを防ぐことができます。たとえば Web サーバなど、一般的に広くアクセスを許すサービスを提供するような場合、明示的に対応するポートを開くように設定する必要があります。しかしながら、一般にパケットフィルタではパケットの内容までは判断できませんので、アドレス情報などが間違っていない限り、 Web サーバとの通信はできてしまいます。つまり、 Web サーバ内で動作する CGI プログラムを不正に操作するようなパケットが届いたとしても、パケットフィルタではそれを防ぐことができず、通過させてしまうことになります。</para>

  <para>より効率的で複雑な構成を取るとすれば、アプリケーションゲートウエイやプロキシなどとパケットフィルタを組み合わせて、多階層の防御を行う方法があります。この場合、パケットフィルタは許可していないポート宛の通信を拒否し、それを通過したパケットのみがアプリケーションゲートウエイやプロキシに渡されます。このゲートウエイやプロキシは、サーバとクライアントとの間の仲介役として動作し、アプリケーションが使用するプロトコルを直接解釈してやり取りを行います。このようなアプリケーションゲートウエイやプロキシとして代表的なものが Squid です。こちらは HTTP/FTP のプロキシサーバとして動作するもので、 HTTP ページや FTP ファイルへのアクセスは、プロキシキャッシュ内に記憶していればその内容をそのまま提供し、キャッシュ内に存在していなければ直接アクセスしてページを提供することができます。</para>

  <para>下記の章では、 &productname; に付属しているパケットフィルタ機能について説明しています。パケットフィルタやファイアウオールに関する詳細は、 <link xlink:href="http://www.tldp.org/HOWTO/Firewall-HOWTO.html">Firewall HOWTO</link> (英語) でも提供されています。</para>
 </sect1>
 <sect1 xml:id="sec-security-firewall-firewalld">
  <title>&firewalld;</title>
  <note>
   <title>&firewalld; による &susefirewall; の置き換えについて</title>
   <para>&productname; <phrase os="sles;sled">15 GA</phrase> <phrase os="osuse">15.0</phrase> 15 では &susefirewall; の置き換えとして &firewalld; が新しいソフトウエアウオールが提供されています。ただし、 &productname; <phrase os="sles;sled">15 GA</phrase> <phrase os="osuse">15.0</phrase> でも &susefirewall; は提供され続けており、メインリポジトリ内に存在しています。ただし、既定のインストール手順を実施してもインストールは行われず、新規のインストールでは &firewalld; が選択されるようになっています。 &productname; <phrase os="sles;sled">15 GA</phrase> <phrase os="osuse">15.0</phrase> 以前のバージョンからアップグレードしている場合は、 &susefirewall; が従来どおりインストールされたままの状態になりますので、手作業で &firewalld; に移行を行ってください (詳しくは <xref linkend="sec-security-firewall-upgrade"/> をお読みください) 。</para>
  </note>
  <para>&firewalld; はシステム内にある <command>iptables</command> のルールを管理し、 D-Bus インターフェイス経由で操作することのできるデーモンです。対応するコマンドラインユーティリティ <command>firewall-cmd</command> と、グラフィカルユーザインターフェイス <command>firewall-config</command> がそれぞれ用意されています。 &firewalld; は裏で動作する仕組みであることから、たとえば仮想マシンのネットワーク設定を行うなど、 iptables のルールに対してアプリケーション側から変更要求を送信することができるようになっています。</para>
  <para>&firewalld; ではセキュリティゾーンと呼ばれる仕組みを提供しています。既定の設定では、 <literal>internal</literal> (内部) や <literal>public</literal> (公共) などのゾーンが用意されています。それ以外のゾーンが必要な場合でも、管理者側で自由に設定することができます。各ゾーンにはそれぞれ対応する iptables のルールを設定することができます。また、ネットワークインターフェイスはいずれか 1 つのゾーンに属するように設定するほか、発信元のアドレスをベースにして接続ごとにゾーンを割り当てることもできます。</para>

  <para>それぞれのゾーンは信頼レベルを表していて、たとえば <literal>public</literal> はインターネットや無線ホットスポットに対して設定すべきゾーンで、最も信頼レベルの低いネットワークを表しています。逆に <literal>internal</literal> は、家庭内のネットワークや企業内のネットワークなど、最も信頼できるネットワークを表しています。このように信頼レベルを分けることで、接続されるネットワークごとに異なるルールを適用できるようにしています。</para>

  <para>&firewalld; の既定で設定されているゾーンとその意味について、詳しくは <link xlink:href="http://www.firewalld.org/documentation/zone/predefined-zones.html"/>  (英語) にあるマニュアルをお読みください。</para>

  <note>
    <title>ゾーンを割り当てない場合の動作について</title>
    <para>ネットワークインターフェイスに対する設定を行っていない場合、そのインターフェイスには何もゾーンが割り当てられません。この場合、 <command>firewall-cmd --get-default-zone</command> で表示される既定のゾーンが割り当てられます。既定のゾーンを何も設定していない場合、既定値は <literal>public</literal> (公共) になっています。</para>
  </note>

  <para>&firewalld; のパケットフィルタリングでは、接続の開始側については基本的に許可される設定になっています。接続の開始側とは、手元のコンピュータから相手のコンピュータに対して、接続を始める種類の接続を意味しています。逆に、接続を受け入れる側の場合は、ゾーンの設定で明示的に許可を指定しない限り、アクセスが拒否されるようになっています。そのため、何らかのサービスの接続を受け入れるインターフェイスに対しては、適切なゾーンを指定しておいて、ゾーン内で必要なサービスの許可を設定してください。</para>

  <para>&firewalld; では、もう 1 つ重要な考え方があります。それは <emphasis>一時的な</emphasis> 設定と <emphasis>恒久的な</emphasis> 設定です。一時的な設定とは現在動作中のルールそのものを表していて、恒久的な設定とは次回の &firewalld; の再起動で適用される、保存済みのルールを表しています。これにより、次に &firewalld; を再起動するまでの間、一時的に適用するルールを設定することができますので、実験的にルールを追加してみて、うまくいかなければ元に戻すと言ったことが容易に実現できるようになっています。なお、設定を変更する際には、どちらの設定を編集しているのかをよくお確かめください。こちらについての詳細は、 <xref linkend="sec-security-firewall-firewalld-configurations"/> で説明しています。</para>

  <para>&firewalld; をグラフィカルユーザインターフェイス <command>firewall-config</command> で操作したい場合は、 <link xlink:href="http://www.firewalld.org/documentation/utilities/firewall-config.html">ドキュメンテーション</link> をお読みになることをお勧めします。以下の章では、コマンドライン経由で利用する <command>firewall-cmd</command> で &firewalld; の制御を行っています。</para>

  <sect2 xml:id="sec-security-firewall-firewalld-nm" os="sles;sled">
   <title>&nm; によるファイアウオールの設定</title>
   <para>&nm; ではゾーンを選択することで、 &firewalld; の基本的な設定を行うことができます。</para>
   <para>有線もしくは無線接続を編集する際、設定ウインドウ内の <emphasis>Identity</emphasis> タブを選択し、 <literal>Firewall Zone</literal> のドロップダウンボックスから選択を行ってください。</para>
  </sect2>

  <sect2 xml:id="sec-security-firewall-firewalld-yast" os="sles;sled">
   <title>&yast; によるファイアウオールの設定</title>
   <para><command>yast firewall</command> では &firewalld; の基本的な設定を行うことができます。ゾーンやサービス、ポートを選択することができますが、独自の iptables ルールを作成することはできませんし、ゾーンの作成やサービスとポートの選択に関するカスタマイズには制限があります。</para>
   <note>
    <title>動作中の設定変更について</title>
    <para>&yast; は <filename>/etc/firewalld/firewalld.conf</filename> の設定に従って動作するようになっていますが、この中の <option>FlushAllOnReload</option> という設定は、既定値が <literal>no</literal> になっています。そのため、 &yast; は設定をすぐには反映させなくなっています。たとえば &yast; でインターフェイスのゾーンを変更したりした場合、設定を反映させるには firewalld の再起動が必要となります。</para>
    </note>
  </sect2>

  <sect2 xml:id="sec-security-firewall-firewalld-cmd">
   <title>コマンドラインからのファイアウオール設定</title>
   <sect3>
    <title>ファイアウオールの起動</title>

    <para>&firewalld; は既定でインストールされ、有効化されます。 &firewalld; は通常の &systemd; サービスとして設定されていますので、 <command>systemctl</command> や &ycc_runlevel; で設定することができます。</para>

    <important>
     <title>自動的なファイアウオール設定について</title>
     <para>インストールを行うと、 &yast; は &firewalld; を自動的に起動して、全てのインターフェイスを既定値の <literal>public</literal> ゾーンに割り当てます。何らかのサーバアプリケーションをインストールしていて、システム内で有効化している場合は、 &yast; 側で <guimenu>ファイアウオールでポートを開くインターフェイス</guimenu> でインターフェイスを選択するか、もしくは <guimenu>ファイアウオールでポートを開く</guimenu> を選択することで、自動的にファイアウオールの設定を行うことができます。また、サーバモジュールによっては、 <guimenu>ファイアウオールの詳細</guimenu> ボタンを押すことで、追加のサービスやポートを開くように設定することもできます。</para>
    </important>
   </sect3>

   <sect3 xml:id="sec-security-firewall-firewalld-configurations">
    <title>一時的な設定と恒久的な設定の違い</title>

    <para>既定では、 <command>firewall-cmd</command> は一時的な設定に対して作用し、恒久的な設定は変更しません。恒久的に設定を変更したい場合は、 <literal>--permanent</literal> オプションを追加してください。なお、 <literal>--permanent</literal> オプションを指定した場合、一時的な設定には反映されず、即時に反映されることもありません。現時点では両方に対して一回で設定する機能は用意されていませんが、一時的な設定を恒久的な設定にコピーすることは可能です。コピーを行うには、下記のように実行します:</para>

    <screen>&prompt.root;<command>firewall-cmd --runtime-to-permanent</command></screen>

    <para>上記を実行することで、現時点での一時的な設定を恒久的な設定として書き込むことができます。これにより、コマンドラインやその他のプログラムなどで一時的な設定に書き込んだ場合でも、それを恒久的に保存することができるようになります。ただし、より安全に作業を行いたい場合は、恒久的な設定に新しいルールを追加して、 &firewalld; を再起動することで有効化することもできます。</para>

    <note>
     <para>なお、既定のゾーンなど一部の設定は、一時的な設定と恒久的な設定で異なる管理を行っていません。これらの設定を変更した場合は、両方の設定に対して反映されます。</para>
    </note>

    <para>逆に、一時的に設定を変更していて、その変更を取り消したい場合は、下記のいずれかを実行してください。前者は &firewalld; のコマンドラインインターフェイスを介して、後者は &systemd; を介して実施しています:</para>

    <screen>&prompt.root;<command>firewall-cmd --reload</command></screen>

    <screen>&prompt.root;<command>systemctl reload firewalld</command></screen>

    <para>以下の章では、記述を簡略化する目的で、常に一時的な設定に対して作業を行っています。恒久的な設定に書き込みたい場合は、対応するオプションを付与して実行してください。</para>
   </sect3>

   <sect3>
    <title>インターフェイスのゾーンへの割り当て</title>

    <para>ゾーンが割り当てられている全てのネットワークインターフェイスを表示したい場合は、下記のように実行します:</para>
    <screen>&prompt.root;<command>firewall-cmd --zone=public --list-interfaces</command>
eth0</screen>

    <para>同様に、インターフェイス名を指定してゾーンを問い合わせることもできます:</para>

    <screen>&prompt.root;<command>firewall-cmd --get-zone-of-interface=eth0</command>
public</screen>

    <para>下記のコマンドラインは、インターフェイスをゾーンに割り当てるコマンドラインです。なお、 <literal>--add-interface</literal> は <literal>eth0</literal> がどのゾーンにも割り当てられていない場合にのみ、動作します。 <literal>--change-interface</literal> は、既にゾーンに割り当てられている場合でも、どのゾーンにも割り当てられていない場合でも、動作します。この場合、既にゾーンへの割り当てが存在していると、そのゾーンに対する割り当てを外す動作になります:</para>

    <screen>&prompt.root;<command>firewall-cmd --zone=internal --add-interface=eth0</command>
&prompt.root;<command>firewall-cmd --zone=internal --change-interface=eth0</command></screen>

    <para>なお、明示的に <literal>--zone</literal> オプションでゾーンを指定しない場合は、既定のゾーンが指定されたものとして扱われます。下記のコマンドは、それぞれ既定のゾーンが何であるのかを問い合わせ、既定のゾーンを特定のゾーンに設定するコマンドです:</para>

    <screen>&prompt.root;<command>firewall-cmd --get-default-zone</command>
dmz
&prompt.root;<command>firewall-cmd --set-default-zone=public</command></screen>

    <important>
     <para>特定のゾーンに割り当てられていないネットワークインターフェイスは、自動的に既定のゾーンに割り当てられているものとして扱われます。また、既定のゾーンの変更は即時に反映され、かつ恒久的にも保存されます。そのため、 <literal>internal</literal> などのセキュリティの低いゾーンを既定のゾーンに設定したりしてはなりません。これにより、お使いのコンピュータを不用意に危険にさらすことになってしまいます。たとえば USB イーサネットなどのホットプラグ型インターフェイスを接続した場合、既定のゾーンが <literal>internal</literal> ゾーンであるとすると、接続を開始した直後からネットワークの接続を信頼してしまうことになります。</para>

     <para>また、ゾーンのインターフェイス一覧には、明示的にゾーンが指定されているもの以外は表示されないことにも注意してください。現時点では、ゾーンの割り当てのないインターフェイスを表示するコマンドはありません。このような理由から、通常使用するネットワークインターフェイスについては、必ずゾーンを割り当てるようにしておいてください。</para>
    </important>
   </sect3>

   <sect3 xml:id="sec-security-firewall-firewalld-cmd-ports">
    <title>ネットワークサービスにアクセスできるようにする設定</title>

    <para>&firewalld; には <emphasis>サービス</emphasis> という考え方があります。サービスは 1 つ以上のポートやプロトコルの定義から構成されるもので、 Web やメールサーバのプロトコルなどのように、まとめて使用することになるポートやプロトコルを一括で指定できるように構成しているものです。下記のコマンドでは、サービス名を指定してその詳細情報を取得しています:</para>

    <screen>&prompt.root;<command>firewall-cmd --get-services</command>
[...] dhcp dhcpv6 dhcpv6-client dns docker-registry [...]
&prompt.root;<command>firewall-cmd --info-service dhcp</command>
dhcp
  ports: 67/udp
  protocols:
  source-ports:
  modules:
  destination:</screen>

    <para>これらのサービス定義は、ゾーン内で特定の機能をまとめて有効化したい場合に使用します。たとえば下記のようにコマンドを入力して実行すると、 <literal>internal</literal> ゾーンに対して HTTP (Web サーバ) のポートを開くことができます:</para>

    <screen>&prompt.root;<command>firewall-cmd --add-service=http --zone=internal</command></screen>

    <para>特定のゾーンに対してサービスの許可を取り消したい場合は、逆のサブコマンドである <literal>--remove-service</literal> を使用します。新しくサービスを定義したい場合は、 <literal>--new-service</literal> サブコマンドを使用します。詳しくは <link xlink:href="http://www.firewalld.org/documentation/howto/add-a-service.html"/> (英語) をお読みください。</para>

    <para>ポート番号を直接指定してポートを開きたい場合は、下記のように入力して実行します。下記の例では、 <literal>internal</literal> ゾーンに対して TCP ポート 8000 を開きます:</para>

    <screen>&prompt.root;<command>firewall-cmd --add-port=8000/tcp --zone=internal</command></screen>

    <para>ポートを閉じたい場合は、逆のサブコマンドである <literal>--remove-port</literal> をお使いください。</para>

    <tip>
     <title>一時的にサービスやポートを開く設定について</title>
     <para>&firewalld; には特定のサービスやポートを指定した時間内のみ開くことのできる、 <literal>--timeout</literal> というパラメータが用意されています。これは簡易的なテストに有用な仕組みで、サービスやポートを閉じ忘れることを防止することができます。たとえば <literal>internal</literal> ゾーンに対して 5 分間だけ <literal>imap</literal> サービスを許可したい場合は、下記のように実行します:</para>
     <screen>&prompt.root;<command>firewall-cmd --add-service=imap --zone=internal --timeout=5m</command></screen>
    </tip>

   </sect3>

   <sect3>
    <title>ロックダウンモード</title>

    <para>&firewalld; には、そのファイアウオールのルールが有効な間は変更を禁止することのできる、 <emphasis>ロックダウンモード</emphasis> が用意されています。アプリケーション側からは D-Bus インターフェイスを介して自動的にファイアウオールのルールを変更することができてしまうほか、 PolicyKit のルールに従って一般ユーザからも同じことを実施できてしまいますので、状況によっては変更の防止が有用となることがあります。詳しくは <link xlink:href="https://fedoraproject.org/wiki/Features/FirewalldLockdown"/> をお読みください。</para>

    <para>なお、ロックダウンモードは実際のセキュリティを提供するものではなく、不用意に設定を変更してしまったりする行為を防止するための仕組みです。 &firewalld; でのロックダウンモードは、不正アクセスからの防御にはなっていないことに注意してください。詳しくは <link xlink:href="http://seclists.org/oss-sec/2017/q3/139"/> (英語) をお読みください。</para>

   </sect3>

   <sect3>
    <title>独自の <command>iptables</command> ルールの追加</title>

    <para>&firewalld; はコンピュータ内の <systemitem>netfilter</systemitem> ルールに対して、排他的にアクセスすることによって成り立っています。そのため、 <command>iptables</command> のようなコマンドで、ファイアウオールのルールを直接書き換えたりすべきではありません。これにより、 &firewalld; の動作が不安定になってしまったり、セキュリティや機能性が損なわれてしまったりする危険性があります。</para>

    <para>&firewalld; ではカバーしていない独自のファイアウオールルールを追加する必要がある場合は、 2 種類ある方法のうちのいずれかを実施してください。 1 つは <command>iptables</command> で設定する内容をそのまま &firewalld; に投げる方法で、この場合は <literal>--direct</literal> オプションを指定します。このとき、 <command>iptables</command> を実行する際のテーブルやチェイン、優先度に関する指定を行う必要があります。下記の例では、 FORWARD チェインに対して独自の追跡 (tracking) ルールを追加しています:</para>

    <screen>&prompt.root;<command>firewall-cmd  --direct --add-rule ipv4 filter FORWARD 0 -i eth0 -o eth1 \
    -p tcp --dport 80 -m state --state NEW,RELATED,ESTABLISHED -j ACCEPT</command></screen>

    <para>それ以外にも、 &firewalld; では <emphasis>リッチルール</emphasis> と呼ばれる仕組みにも対応しています。この方法のほうが <command>iptables</command> のルールを簡単に指定することができます。詳しくは <link xlink:href="http://www.firewalld.org/documentation/man-pages/firewalld.richlanguage.html"/> (英語) をお読みください。下記の例では、特定の発信元アドレスからの IPv4 パケットを drop (処理せず落とす) する設定を行っています:</para>

    <screen>&prompt.root;<command>firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" \
    source address="192.168.2.4" drop'</command></screen>
   </sect3>

   <sect3>
    <title>ルーティング／フォワード／マスカレード</title>

    <para>&firewalld; は完全機能のルータとして動作するようには設計されていません。ですが、一般的な家庭用ルータ程度の設定であれば可能です。企業内の本番環境で使用されるようなルータの場合は、 &firewalld; を使用すべきではありません。ルータやファイアウオールとして専用に設計された機器をお使いください。下記の章では、 &firewalld; 内でルーティングを扱うにあたっての、いくつかの情報源を示しています:</para>

    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para>IP プロトコルの経路制御を有効化するのに必要な情報は、 <xref linkend="sec-security-firewall-masq"/> に概要があります。</para>
     </listitem>
     <listitem>
      <para><literal>internal</literal> ゾーンに対して IPv4 マスカレードを有効化するには、下記のコマンドを実行します。</para>
      <screen>&prompt.root;<command>firewall-cmd --zone=internal --add-masquerade</command></screen>
     </listitem>
     <listitem>
      <para>&firewalld; ではポート転送の設定も行うことができます。たとえば下記のコマンドを実行すると、ポート 80 宛に届いた通信を他のホストに転送することができます:</para>
      <screen><?dbfo keep-together="always"?>&prompt.root;<command>firewall-cmd --zone=public \
    --add-forward-port=port=80:proto=tcp:toport=80:toaddr=192.168.1.10</command></screen>
     </listitem>
    </itemizedlist>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-security-firewall-firewalld-rpcports">
   <title>動的にポートを割り当てるタイプのサービスへのアクセス</title>

   <para>ネットワークサービスによっては、特定のポート番号で待ち受けていないものがあります。この場合、 <literal>portmapper</literal> や <literal>rpcbind</literal> のプロトコルをベースにして動作しています (以降は <literal>rpcbind</literal> と表現します) 。これらのサービスが開始されると、ローカル側のポートをランダムに選択したあと、 <literal>rpcbind</literal> と通信を行って、このポートを既知のものとして使用するようにします。 <literal>rpcbind</literal> それ自身は特定の (既知の) ポート上で動作します。ネットワーク上離れたシステムからは、 <literal>rpcbind</literal> に対して問い合わせを行い、どのポートで動作しているのかを確認します。現在、この仕組みはそれほど多くのプログラムで使用していないものですが、 Network Information Services (NIS; <command>ypserv</command> および <command>ypbind</command> ) と Network File System (NFS) バージョン 3 で使用されています。</para>

   <note>
    <title>NFSv4 について</title>
    <para>新しい NFSv4 では、 TCP ポート 2049 という既知のポート単独で動作するようになっています。プロトコルバージョン 4.0 では、カーネルのパラメータ <literal>fs.nfs.nfs_callback_tcpport</literal> で固定のポートを指定する必要があります (詳しくは <xref linkend="ex-security-firewall-nfscallback"/> をお読みください) 。プロトコルバージョン 4.1 以降であれば、この設定も不要となっています。</para>
   </note>

   <para><literal>rpcbind</literal> プロトコルを使用する仕組みでは、動的にポートが設定されるため、ファイアウオール経由でサービスにアクセスできるようにすることが難しくなっています。 &firewalld; では、それ単体でこれらのサービスに対応することができません。手作業で作業を行う場合は、 <xref linkend="sec-security-firewall-firewalld-rpcports-static"/> をお読みください。それ以外にも、 &productname; にはヘルパースクリプトが用意されています。詳しくは <xref linkend="sec-security-firewall-firewalld-rpcports-helper"/> をお読みください。</para>

   <sect3 xml:id="sec-security-firewall-firewalld-rpcports-static">
    <title>ポートを固定するための設定</title>
    <para>問題を解決するための方法のうちの 1 つとして、各ネットワークサービスの使用するポートを固定する方法があります。これを設定することで、 &firewalld; でポートを開くように設定することができるようになり、全てが問題なく動作するようになります。ポート番号の指定は自由に決めることができますが、他のサービスで使用されてしまうことを防ぐため、既知の (いわゆる well-known な) ポート範囲以外から設定しておくことをお勧めします。 NIS や NFSv3 のサービスに対する設定項目の一覧については、 <xref linkend="tab-security-firewall-sysconfigports"/> をお読みください。ただし、 NIS や NFS の設定によっては、これら全てのポートを設定する必要がない場合もあります。</para>

    <table xml:id="tab-security-firewall-sysconfigports">
     <title>ポートを固定させるための主な sysconfig 変数</title>
     <tgroup cols="3">
      <colspec colnum="1" colname="1" colwidth="3*"/>
      <colspec colnum="2" colname="2" colwidth="2*"/>
      <colspec colnum="3" colname="3" colwidth="2*"/>
      <thead>
       <row>
        <entry>
         <para>ファイルパス</para>
        </entry>
        <entry>
         <para>変数名</para>
        </entry>
        <entry>
         <para>値の例</para>
        </entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry morerows="4"><filename> /etc/sysconfig/nfs </filename></entry>
        <entry>MOUNTD_PORT</entry>
        <entry>21001</entry>
       </row>
       <row>
        <entry>STATD_PORT</entry>
        <entry>21002</entry>
       </row>
       <row>
        <entry>LOCKD_TCPPORT</entry>
        <entry>21003</entry>
       </row>
       <row>
        <entry>LOCKD_UDPPORT</entry>
        <entry>21003</entry>
       </row>
       <row>
        <entry>RQUOTAD_PORT</entry>
        <entry>21004</entry>
       </row>
       <row>
        <entry><filename> /etc/sysconfig/ypbind </filename></entry>
        <entry>YPBIND_OPTIONS</entry>
        <entry>-p 24500</entry>
       </row>
       <row>
        <entry morerows="2"><filename> /etc/sysconfig/ypserv </filename></entry>
        <entry>YPXFRD_ARGS</entry>
        <entry>-p 24501</entry>
       </row>
       <row>
        <entry>YPSERV_ARGS</entry>
        <entry>-p 24502</entry>
       </row>
       <row>
        <entry>YPPASSWDD_ARGS</entry>
        <entry>--port 24503</entry>
       </row>
      </tbody>
     </tgroup>
    </table>

    <para>設定を反映させるには、対応するサービスをそれぞれ再起動する必要があります。なお、 <command>rpcinfo -p</command> と入力して実行することで、割り当てられた rpcbind のポートを表示することもできます。正しく設定がされていれば、ここに固定のポートが表示されるはずです。</para>

    <para>ユーザスペース内で動作しているネットワーク向けのポート設定とは別に、 Linux カーネルが NFS に対して直接使用するポートも存在しています。これらのポートのうちの 1 つは <literal>nfs_callback_tcpport</literal> と呼ばれます。このポートは、バージョン 4.1 以前の NFS プロトコルでのみ必要となります。ここで使用するポートは、 sysctl の <literal>fs.nfs.nfs_callback_tcpport</literal> で設定することができます。この sysctl ノードは、 NFS マウントが有効な場合にのみ動的に現れます。そのため、この設定はカーネルモジュールのパラメータとして設定しておくことが最適です。これは <xref linkend="ex-security-firewall-nfscallback"/> で示している設定で実現することができます。</para>

    <example xml:id="ex-security-firewall-nfscallback">
     <title><filename>/etc/modprobe.d/60-nfs.conf</filename> 内での <literal>nfs</literal> カーネルモジュールに対するコールバックポートの設定</title>
<screen>options nfs callback_tcpport=21005
</screen>
    </example>

    <para>この設定を反映させるのに最も簡単な方法は、マシンの再起動です。マシンを再起動しないで適用するには、 NFS 関連のサービスを全て停止させて <literal>nfs</literal> カーネルモジュールを読み込みなおす必要があります。なお、現時点での NFS コールバックポートを確認したい場合は、 <command>cat /sys/module/nfs/parameters/callback_tcpport</command> と入力して実行してください。</para>

    <para>このようにして RPC 関連のポートを固定化したら、あとは新しい &firewalld; サービス定義を作成して、使用するようにすると便利です。このサービス定義は関連する全てのポートを含むもので、これによって一括でポートを許可するように設定することができます。 <xref linkend="ex-security-firewall-newrpcservice"/> には、新しくサービスを定義して、それらの固定ポートをサービス内に設定し、使用するまでの手順を示しています。</para>

    <example xml:id="ex-security-firewall-newrpcservice">
     <title>NFS 向けの新しい &firewalld; RPC サービスの設定コマンド</title>
<screen>&prompt.root;<command>firewall-cmd --permanent --new-service=nfs-rpc</command>
&prompt.root;<command>firewall-cmd --permanent --service=nfs-rpc --set-description="NFS related, statically configured RPC ports"</command>
# TCP/UDP ポートを順序通りにサービスに追加する
&prompt.root;<command>for port in 21001 21002 21003 21004; do
    firewall-cmd --permanent --service=nfs-rpc --add-port ${port}/udp --add-port ${port}/tcp
done</command>
# コールバックポートは TCP のみ
&prompt.root;<command>firewall-cmd --permanent --service=nfs-rpc --add-port 21005/tcp</command>

# 新しく定義したサービスの詳細表示
&prompt.root;<command>firewall-cmd --info-service=nfs-rpc --permanent -v</command>
nfs-rpc
  summary:
  description: NFS and related, statically configured RPC ports
  ports: 4711/tcp 21001/udp 21001/tcp 21002/udp 21002/tcp 21003/udp 21003/tcp 21004/udp 21004/tcp
  protocols:
  source-ports:
  modules:
  destination:

# firewalld を再読み込みさせて、新しいサービス定義を利用できるようにする
&prompt.root;<command>firewall-cmd --reload</command>

# 新しいサービス定義を internal ゾーンに追加する
&prompt.root;<command>firewall-cmd --add-service=nfs-rpc --zone=internal</command>
</screen>
    </example>
   </sect3>

   <sect3 xml:id="sec-security-firewall-firewalld-rpcports-helper">
    <title>固定のポートを設定するための <package>firewall-rpcbind-helper</package> の使用</title>
    <para>上記の章で示した固定のポートを設定するための手順は、 &suse; が提供する <command>firewall-rpc-helper.py</command> というツールを使用することで、より簡単に行うことができます。このツールは、 <command>zypper in firewalld-rpcbind-helper</command> でインストールすることができます。</para>
    <para>このツールは、上記の章で実施したサービス設定を対話に設定するツールです。このほか、現時点でのポートの割り当てを表示することができるほか、スクリプト内で使用することもできるようになっています。詳しくは <command>firewall-rpc-helper.py --help</command> を実行して出力された内容をお読みください。</para>
   </sect3>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-security-firewall-upgrade">
  <title>&susefirewall; からの移行</title>
  <note>
   <title>&ay; での &firewalld; 設定の作成について</title>
   <para>&ay; で &firewalld; の設定を作成する方法について、詳しくは &ayguide; 内の <citetitle>ファイアウオール設定</citetitle> の章をお読みください。</para>
  </note>
  <remark>
   FIXME: Very unsure if the following upgrade scenario has _any_ bearing on
   Leap 15.2 anymore, since we don't even support upgrades from anything before
   Leap 15.1. Not sure whether to just profile away the entire section.
   - sknorr, 2020-07-02
  </remark>
  <para><phrase os="sles;sled">&productname; 12 の任意のサービスパック</phrase> <phrase os="osuse">&productname; 15.0 以前の任意のバージョン</phrase> から&productname; &productnumber; にアップグレードした場合は、 &susefirewall; はそのまま保持され、動作し続けるようになっています。 &susefirewall; から &firewalld; への自動的な移行の仕組みは提供されていないことから、移行作業は手作業で実施する必要があります。ただし、 &firewalld; には <command>susefirewall2-to-firewalld</command> と呼ばれる移行支援ツールが用意されていますので、こちらをお使いいただくことができます。ですが、このツールはご利用いただいている &susefirewall; の設定の複雑さによって、全く問題なく移行できる場合から、全く支援にならない場合までさまざまな結果になります。通常は部分的に移行が行われ、残りは手作業で &firewalld; の設定を調整して対応する必要が発生します。</para>
  <para>このツールが生成した設定は、 &susefirewall; と同じような動作になるようになります。そのような背景から、 &firewalld; の機能を完全に発揮するには、既存の設定の移行ではなく全く新しく設定を作成し直すことをお考えください。また、 <command>susefirewall2-to-firewalld</command> に何もオプションを付けずに実行した場合は、恒久的な変更は行われなくなっていますが、ネットワーク上離れた場所から管理を行っているような場合は、移行によって締め出されてしまうこともあります。</para>
  <para><command>susefirewall2-to-firewalld</command> をインストールして実行するには、下記の手順を実施します:</para>
<screen>&prompt.root;zypper in susefirewall2-to-firewalld
&prompt.root;susefirewall2-to-firewalld
INFO: Reading the /etc/sysconfig/SuSEfirewall2 file
INFO: Ensuring all firewall services are in a well-known state.
INFO: This will start/stop/restart firewall services and it's likely
INFO: to cause network disruption.
INFO: If you do not wish for this to happen, please stop the script now!
5...4...3...2...1...Lets do it!
INFO: Stopping firewalld
INFO: Restarting SuSEfirewall2_init
INFO: Restarting SuSEfirewall2
INFO: DIRECT: Adding direct rule="ipv4 -t filter -A INPUT -p udp -m udp --dport 5353 -m pkttype
  --pkt-type multicast -j ACCEPT"
[...]
INFO: Enabling direct rule=ipv6 -t filter -A INPUT -p udp -m udp --dport 546 -j ACCEPT
INFO: Enabling direct rule=ipv6 -t filter -A INPUT -p udp -m udp --dport 5353 -m pkttype
  --pkt-type multicast -j ACCEPT
INFO: Enable logging for denied packets
INFO: ##########################################################
INFO:
INFO: The dry-run has been completed. Please check the above output to ensure
INFO: that everything looks good.
INFO:
INFO: ###########################################################
INFO: Stopping firewalld
INFO: Restarting SuSEfirewall2_init
INFO: Restarting SuSEfirewall2
</screen>
  <para>このスクリプトを実行するとさまざまな出力が生成されますが、これをファイルに保存しておくことで、後からゆっくり読むことができるようになります:</para>
<screen>&prompt.root;susefirewall2-to-firewalld | tee newfirewallrules.txt</screen>
  <para>このスクリプトには、下記のオプションが用意されています:</para>
  <variablelist>
   <varlistentry>
    <term><command>-c</command></term>
    <listitem>
     <para>変更点を恒久的に保存します。提示された設定で問題が無い場合にのみ、このオプションを指定してください。また、既存の &firewalld; の設定は <emphasis>リセットされます</emphasis> ので、必ずバックアップを採取しておいてください！</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>-d</command></term>
    <listitem>
     <para>動作に関する詳細な情報を出力します。このスクリプトのバグを報告したい場合などに有用ですが、機密情報が含まれることもあります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>-h</command></term>
    <listitem>
     <para>このメッセージを表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>-q</command></term>
    <listitem>
     <para>出力を抑制します。エラーメッセージも表示されなくなります！</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>-v</command></term>
     <listitem>
      <para>冗長モードを指定します。警告メッセージやその他の情報に関するメッセージが出力されるようになります。</para>
     </listitem>
   </varlistentry>
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-security-firewall-info">
  <title>さらなる情報</title>
  <para>&firewalld; パッケージに対する最新の情報と、その他のドキュメンテーションについては、 <filename>/usr/share/doc/packages/firewalld</filename> 内で提供されています。 netfilter および iptables プロジェクトの Web ページは <link xlink:href="http://www.netfilter.org"/> にあります。こちらには、多数の言語に対応した iptables 関連の文書が多数用意されています。</para>
 </sect1>
</chapter>
