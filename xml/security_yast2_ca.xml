<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<!--
  toms 2011-10-10: TODO for next release
  According to mc:
  [Proposal]
 * allow to change alternative name in CA proposal (
   default for CA Name is "YaST_Default_CA", for Common Name is
   "YaST Default CA (auckland)" )
 * create country selection combobox editable to allow choose of
   countries not listed

 Test it in a running system with:
 $> yast2 test_proposal service

 2013-02-21: No changes for SP3 according to mc
-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-yast-ca">
 <title><!-- NOTE: YaST CA module is not available after Leap 15.0 -->X.509 証明書の管理</title>
 <info>
      <abstract>
        <para>認証方式の多くは、暗号化をベースにした仕組みを採用しています。デジタル証明書は、認証にあたって暗号鍵から所有者を確認する重要な役割を果たしています。これらの証明書は通信用途のほか、企業内の ID カードでも使用されています。証明書の生成とその管理は一般に、商用サービスとして公式機関が提供するものですが、必要であればそれらの作業を自分自身で行なうことができます。たとえば企業内では、社外に機密情報を公開しないようにする目的で、自前で証明書を発行したりすることがあります。</para>
        <para>&yast; では X.509 証明書の基本的な管理機能に対応する、 2 種類のモジュールを提供しています。本章では、デジタル証明書の基本的な内容の説明と、 &yast; を利用して証明書の作成や管理を行なう方法について説明しています。</para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>

 <sect1 xml:id="sec-security-yast-ca-intro">
  <title>デジタル証明書の仕組み</title>

  <para>デジタル証明書は暗号処理で使用するもので、データを暗号化することによって、第三者による不正アクセスを防止する仕組みです。元のデータは <emphasis>鍵</emphasis> と呼ばれるもう 1 つのデータによって暗号化されます。鍵を利用してデータに対して数学的な処理を行ない、元のデータがわからないようにデータを置き換えます。このような暗号化では一般に、非対称型の暗号化 (<emphasis>公開鍵方式</emphasis>) を使用しますが、この場合は下記の 2 種類の鍵が使用されます:</para>

  <variablelist>
   <varlistentry>
    <term>機密鍵</term>
    <listitem>
     <para>機密鍵は鍵の所有者のみが持っていなければならないものです。何らかの事故で機密鍵が暴露されてしまうと、その鍵はもはや安全であるとは呼べず、その価値を失います。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>公開鍵</term>
    <listitem>
     <para>公開鍵は公開すべき鍵で、暗号化に際して最初に相手に渡すべき鍵でもあります。</para>
    </listitem>
   </varlistentry>
  </variablelist>

<!-- Unsure if that is actually true...
  <para>
   Both keys can be used for encryption and decryption. Depending on the
   application, one of the keys is used for encryption and the other for
   decryption. It should be noted that the <quote>direction</quote> of the
   conversion (in other words <emphasis role="bold">en</emphasis>cryption or
   <emphasis role="bold">de</emphasis>cryption) is only defined by the
   corresponding <quote>counter-operation</quote>. It is quite possible to
   <emphasis role="bold">de</emphasis>crypt an original data record with one of
   the keys, even though the record has not been previously <emphasis
    role="bold">en</emphasis>crypted. The result is an unreadable data record
   which can be made readable again by <emphasis
    role="bold">en</emphasis>crypting it.
 </para>
-->

  <sect2 xml:id="sec-security-yast-ca-intro-keyauth">
   <title>鍵の正当性</title>
   <para>公開鍵による暗号化は幅広く使用されていて、数多くの公開鍵が存在しています。ただし、この仕組みをうまく運用するには、一方のユーザから他方のユーザの公開鍵を確かめる方法が必要となります。このような公開鍵の確認は、それ自身が公開鍵を持つ、信頼できる組織によって行なわれます。これを <quote>証明書</quote> といい、この中には鍵の所有者の名前のほか、対応する公開鍵と発行機関による署名が付属しています。</para>
   <para>公開鍵の証明書を発行し、署名する信頼できる機関は通常、証明書インフラストラクチャの一部として機能します。この機関は証明書の公開や取り消し、更新などの証明書関連の作業に対して責任を負います。このような仕組みを <emphasis>公開鍵インフラストラクチャ</emphasis> や <emphasis>PKI</emphasis> と呼びます。 PKI としてよく知られている仕組みは <emphasis>OpenPGP</emphasis> 標準で、こちらは中央の機関を用意することなく、証明書を公開できる仕組みになっています。</para>
   <para><emphasis>X.509 公開鍵インフラストラクチャ</emphasis> (PKIX) は <emphasis>IETF</emphasis> (Internet Engineering Task Force) が定義した代替モデルで、今やほとんど全てで幅広く使用されているモデルとして採用されています。このモデルでは、認証機能はツリー構造をもつ <emphasis>証明機関</emphasis> (CA) が担うものとされます。このツリー構造の根にあたるのがルート証明機関で、全ての副証明機関に対する証明書を発行します。最も枝に近い証明機関がユーザに対する証明書を発行します。これにより、ユーザの証明書はルート証明機関から間接的に証明できることになります。</para>
   <para>このような PKI の仕組みは、証明機関の証明書に依存しています。証明書の発行に際するルールを明確にする目的で、 PKI のオペレータは <emphasis>Certification Practice Statement</emphasis> (CPS) を公開し、具体的な証明書発行手順を公開しています。これにより、 PKI は信頼に足る証明書だけを発行できるようにしています。</para>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-intro-x509">
   <title>X.509 証明書</title>
   <para>X.509 証明書は、いくつかの固定の項目と拡張からなるデータ構造です。固定の項目には、主に鍵の所有者の名前や公開鍵、発行者である証明機関に関する情報 (名前と署名) が含まれています。セキュリティ上の理由から、証明書には有効期間が設定されますので、そのための日時情報も含まれています。証明機関は、その期間内に限って有効性を保証します。 CPS では通常、 有効期間が切れる前に新しい証明書を作成し、配布することを PKI (発行者である証明機関) に求めています。</para>
   <para>拡張には任意の追加情報が含まれています。アプリケーション側では、 <emphasis>critical</emphasis> (重要) であると書かれている項目のみを評価できるようにする必要があります。アプリケーションが critical と書かれた項目を解釈できない場合、証明書を拒否しなければなりません。拡張によっては、署名や暗号化など、特定のアプリケーションのみで意味を持つものもあります。</para>
   <para><xref linkend="tab-yast-ca-intro-x509" xrefstyle="select:label nopage"/> には、 X.509 証明書バージョン 3 の基本項目を示しています。</para>
   <table xml:id="tab-yast-ca-intro-x509">
    <title>X.509v3 証明書</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>項目</para>
       </entry>
       <entry>
        <para>内容</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>バージョン</para>
       </entry>
       <entry>
        <para>証明書のバージョン (例: v3)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>シリアル番号</para>
       </entry>
       <entry>
        <para>ユニークな証明書の ID (整数)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>署名</para>
       </entry>
       <entry>
        <para>証明書に署名する際に使用したアルゴリズムの ID</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>発行者</para>
       </entry>
       <entry>
        <para>発行者 (証明機関) のユニーク名 (DN)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>有効期間</para>
       </entry>
       <entry>
        <para>有効な期間</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>サブジェクト</para>
       </entry>
       <entry>
        <para>所有者のユニーク名 (DN)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>サブジェクトの公開鍵情報</para>
       </entry>
       <entry>
        <para>所有者の公開鍵とアルゴリズムの ID</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>発行者ユニーク ID</para>
       </entry>
       <entry>
        <para>発行者 (証明機関) のユニーク ID (任意)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>サブジェクトユニーク ID</para>
       </entry>
       <entry>
        <para>所有者のユニーク ID (任意)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>拡張</para>
       </entry>
       <entry>
        <para><quote>KeyUsage</quote> (鍵の用途) や <quote>BasicConstraints</quote> (基本制約) などの任意の追加情報</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-intro-crl">
   <title>X.509 証明書の取り消し</title>
   <para>証明書に書かれた有効期間が過ぎるよりも前に、何らかの理由で証明書が信頼できないものになった場合、その証明書は即時に使用を停止しなければなりません。このような状況になる理由としては、たとえば機密鍵が漏洩してしまったりした場合などがあります。証明書の使用停止は、ユーザの証明書よりも証明機関そのものの機密鍵が漏洩してしまったりした場合に、特に重要となります。証明機関の機密鍵が漏洩してしまった場合、そこで発行されたユーザの証明書や証明機関の証明書は、全て使用を停止しなければなりません。証明書の使用を停止した場合、 PKI (証明書を発行した証明機関) はその情報を <emphasis>証明書失効リスト</emphasis> (CRL) を介して公開しなければなりません。</para>
   <para>このリストは証明機関が提供するもので、公開の CRL 配布ポイント (CDP) で定期的に更新されます。 CDP は証明書内の拡張項目として提供することができますので、これによって誰もが証明書が取り消されていないかどうかを確認できることになります。この方式に対応するプロトコルの 1 つとして、 <emphasis>Online Certificate Status Protocol</emphasis> (OCSP) と呼ばれるものがあります。 CRL 自身の正当性は、発行元の証明機関からの署名によって付与されます。 <xref linkend="tab-yast-ca-intro-crl" xrefstyle="select:label nopage"/> には、 X.509 CRL の基本的な構成を示しています。</para>
   <table xml:id="tab-yast-ca-intro-crl">
    <title>X.509 証明書失効リスト (Certificate Revocation List; CRL)</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>項目</para>
       </entry>
       <entry>
        <para>内容</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>バージョン</para>
       </entry>
       <entry>
        <para>CRL のバージョン (例: v2)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>署名</para>
       </entry>
       <entry>
        <para>CRL に署名する際に使用したアルゴリズムの ID</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>発行者</para>
       </entry>
       <entry>
        <para>CRL 発行者 (通常は証明書の発行元の証明機関) のユニーク名 (DN)</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>更新日時</para>
       </entry>
       <entry>
        <para>この CRL の公開日時</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>次回更新日時</para>
       </entry>
       <entry>
        <para>次回の CRL 更新日時</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>失効済み証明書リスト</para>
       </entry>
       <entry>
        <para>各項目には証明書のシリアル番号と失効日時、そして任意指定の拡張 (CRL 項目拡張) が含まれます</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>拡張</para>
       </entry>
       <entry>
        <para>任意指定の CRL 拡張</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-intro-repository">
   <title>証明書と CRL のリポジトリ</title>
   <para>証明機関が発行する証明書や CRL は、 <emphasis>リポジトリ</emphasis> と呼ばれる場所で公開され、一般的にアクセスできなければなりません。署名の仕組みにより証明書や CRL が偽造される心配は解決されていることから、リポジトリ自身へのアクセスは特別な暗号化方式を必要としません。その代わり、できる限りシンプルかつ高速に応答する必要があります。このような要件があることから、証明書は LDAP や HTTP サーバで提供されることがあります。 LDAP に関する詳細は <xref linkend="cha-security-ldap"/> を、 HTTP サーバに関する詳細は <xref os="sles;osuse" linkend="cha-apache2"/> をそれぞれお読みください。</para>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-intro-ldap">
   <title>プロプライエタリ PKI</title>
   <para>&yast; には X.509 証明書に対する基本的な管理機能を含むモジュールが含まれています。このモジュールでは、証明機関や副証明機関の作成のほか、証明機関からの証明書の発行も含まれています。実際の PKI では、証明書や CRL を作成したり配布したりする作業以外にも、様々なことを行なっています。たとえば PKI の運用には、熟慮された管理インフラストラクチャが必要となり、これによって証明書や CRL の継続的な更新を行なうことができるようになっています。このインフラストラクチャは商用の PKI 製品で提供されているもので、部分的にのみ自動化することができます。 &yast; では証明機関や証明書の作成や配布を行なう機能が提供されていますが、それ以外のインフラストラクチャについては現在提供しておりません。小規模な PKI を構築する際には &yast; をお使いいただけますが、 <quote>公的な</quote> 証明機関や商用の証明機関を作成したい場合は、商用製品をお使いください。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-security-yast-ca-module">
  <title>証明機関を管理するための &yast; モジュール</title>

  <para>&yast; には基本的な証明機関管理に関わる 2 種類のモジュールが提供されています。ここでは、これらのモジュールが提供する主な管理作業について説明しています。</para>

  <sect2 xml:id="sec-security-yast-ca-module-rootca">
   <title>ルート証明機関の作成</title>
   <para><phrase os="sles">既定のインストールでは、 &productname; には YaST_Default_CA という名称のルート証明機関が含まれています。このモジュールを使用することで、追加のルート証明機関を作成することができます。 </phrase> PKI を構築する際の最初に行なう作業は、ルート証明機関の作成です。下記のようにして行ないます:</para>
   <procedure>
    <step>
     <para>&yast; を起動して <menuchoice><guimenu>セキュリティとユーザ</guimenu><guimenu>証明機関の管理</guimenu></menuchoice> を選択します。</para>
    </step>
    <step>
     <para><guimenu>ルート証明機関の作成</guimenu> を押します。</para>
    </step>
    <step>
     <para>最初のダイアログ (<xref linkend="fig-yast-ca-ca_basic" xrefstyle="select:label nopage"/>) では、証明機関に対する基本的なデータを入力します。テキストボックスにはそれぞれ下記のような意味があります:</para>
     <figure xml:id="fig-yast-ca-ca-basic">
      <title>&yast; 証明機関モジュール&mdash;証明機関に対する基本データ</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_basic.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_basic.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
     <variablelist>
      <varlistentry>
       <term>"\n  <guimenu>証明機関名</guimenu>\n"</term>
       <listitem>
        <para>証明機関に対する技術名称を入力します。この名前を元にディレクトリ名などが設定されます。そのため、ヘルプ内に示されている文字だけを使用することができます。技術名は、モジュール起動時の概要内にも表示されます。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>"\n  <guimenu>共通名</guimenu>\n"</term>
       <listitem>
        <para>証明機関に対して設定する名前を入力します。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>"\n  <guimenu>電子メールアドレス</guimenu>\n"</term>
       <listitem>
        <para>証明書のユーザから参照することのできる電子メールアドレス (複数可) を指定します。これは特に、問い合わせの際に使用されます。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>"\n  <guimenu>国</guimenu>\n"</term>
       <listitem>
        <para>その証明機関を運用している国を選択します。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><guimenu>組織</guimenu> , <guimenu>部署</guimenu> , <guimenu>市区町村</guimenu> , <guimenu>都道府県</guimenu></term>
       <listitem>
        <para>任意指定の値です。</para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para><guimenu>次へ</guimenu> を押して進みます。</para>
    </step>
    <step>
     <para>2 番目のダイアログでは、まずパスワードを入力します。このパスワードは、証明機関から証明書を発行する際に必ず入力を求められるものです。それ以外のテキストボックスには、下記のような意味があります:</para>
     <variablelist>
      <varlistentry>
       <term>"\n  <guimenu>鍵長</guimenu>\n"</term>
       <listitem>
        <para><guimenu>鍵長</guimenu> には多くの環境で一般的な既定値が設定されているため、アプリケーション側でその鍵長に対応していないような場合を除いて、一般的に変更すべきではありません。また、大きい値ほどパスワードの機密を強く守ることができます。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>"\n  <guimenu>有効期間 (日)</guimenu>\n"</term>
       <listitem>
        <para><guimenu>有効期間</guimenu> の既定値は 3650 日(おおよそ 10 年) になっています。このような長い期間を設定することにより、面倒な管理労力をできる限り減らすことができるようになります。</para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para><guimenu>詳細オプション</guimenu> を押すと、 X.509 の証明書に設定する様々な属性を指定することができます ( <xref linkend="fig-yast-ca-extensions"/> ) 。これらの値にはそれぞれ合理的な既定値が設定されているため、どうしても必要な場合にのみ設定してください。設定が終わったら <guimenu>次へ</guimenu> を押します。</para>
    </step>
    <step>
     <para>概要が表示されます。 &yast; では、確認用に設定を表示します。証明機関を作成するには、 <guimenu>作成</guimenu> を押します。これでルート証明機関が作成され、概要に表示されるようになります。</para>
    </step>
   </procedure>
   <tip>
    <para>一般的には、ルート証明機関から直接ユーザの証明書を発行するのは適切ではありません。少なくとも 1 段階以上の副証明機関を作成して、その副証明機関からユーザの証明書を発行してください。これにより、ルート証明機関を分離しておくことができますので、たとえば独立したマシン内などのような場所に保管ができるようになります。マシンを独立させることで、ルート証明機関への攻撃も困難にすることができます。</para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-changepw">
   <title>パスワードの変更</title>
<!-- Documenting FATE #300161 -->
   <para>証明機関に対するパスワードを変更したい場合は、下記のようにして行ないます:</para>
   <procedure>
    <step>
     <para>&yast; を起動して証明機関モジュールを起動します。</para>
    </step>
    <step>
     <para>対応する証明機関を選択して、 <guimenu>証明機関に入る</guimenu> を押します。</para>
    </step>
    <step>
     <para>証明機関に対して初めて入る場合は、パスワードを入力します。パスワードを入力すると、 &yast; は証明機関の鍵に関する情報を <guimenu>説明</guimenu> タブ内に表示します (<xref linkend="fig-yast-ca-usage" xrefstyle="select:label nopage"/> をご覧ください) 。</para>
    </step>
    <step>
     <para><guimenu>詳細設定</guimenu> を押して、 <guimenu>証明機関のパスワードの変更</guimenu> を選びます。</para>
    </step>
    <step>
     <para>既存のパスワードと新しく設定するパスワードをそれぞれ入力します。</para>
    </step>
    <step>
     <para>完了するには <guimenu>OK</guimenu> を押します。</para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-subca">
   <title>副証明機関の作成および取り消し</title>
   <para>副証明機関は、ルート証明機関と同じ方法で作成することができます。</para>
   <note>
    <para>副証明機関に設定する有効期間は、 <quote>親の</quote> 証明機関の有効期間内でなければなりません。また、副証明機関は <quote>親の</quote> 証明機関よりも後に作成されるものであることから、既定値をそのまま使用してしまうとエラーになります。そのため、有効期間の設定は親の証明機関にあわせて設定してください。</para>
   </note>
   <para>下記のようにして行ないます:</para>
   <procedure>
    <step>
     <para>&yast; を起動して証明機関モジュールを起動します。</para>
    </step>
    <step>
     <para>対応する証明機関を選択して、 <guimenu>証明機関に入る</guimenu> を押します。</para>
    </step>
    <step>
     <para>証明機関に対して初めて入る場合は、パスワードを入力します。パスワードを入力すると、 &yast; は証明機関の鍵に関する情報が <guimenu>説明</guimenu> タブ内に表示されます (<xref linkend="fig-yast-ca-usage" xrefstyle="select:label nopage"/> をご覧ください) 。</para>
     <figure xml:id="fig-yast-ca-usage">
      <title>&yast; 証明機関モジュール&mdash;証明機関の使用</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_usage.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_usage.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para><guimenu>詳細設定</guimenu> を押して、 <guimenu>下位証明機関の作成</guimenu> を選びます。</para>
    </step>
    <step>
     <para>あとは <xref linkend="sec-security-yast_ca-module-rootca"/> に示されている手順のとおりに作業を行ないます。</para>
<!-- FATE #2612 -->
     <para>お使いの全ての証明機関に対して、同じパスワードを設定することもできます。副証明機関に対して、証明機関と同じパスワードを設定したい場合は、 <guimenu>証明機関のパスワードを証明書のパスワードとして使用する</guimenu> を選択してください。これにより、証明機関のパスワード入力の手間を省くことができます。</para>
     <note>
      <title>有効期間の設定について</title>
      <para>ここで設定する有効期間は、ルート証明機関の有効期間よりも短くしなければなりません。</para>
     </note>
    </step>
    <step>
     <para><guimenu>証明書</guimenu> タブを選択します。機密が漏洩してしまって危険な副証明機関や、誤って作成した副証明機関がある場合は、ここから <guimenu>取り消し</guimenu> を押すことで証明書を取り消すことができます。ただし、証明書の取り消しだけではなく、そこから作成した CRL を公開することで、証明書の無効化が実現できることに注意してください。 CRL の作成に関する詳細は、 <xref linkend="sec-security-yast_ca-module-crl"/> をお読みください。</para>
    </step>
    <step>
     <para>完了するには <guimenu>OK</guimenu> を押して閉じます。</para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-clientserver">
   <title>ユーザ証明書の作成と取り消し</title>
   <para>クライアントやサーバに対する証明書の作成は、 <xref linkend="sec-security-yast_ca-module-rootca"/> で示している証明機関の作成に非常に似ていて、考え方についても同様です。証明機関と異なるのは、たとえば電子メールの署名に使用する証明書であれば、電子メールを扱うソフトウエアから正しい値を取れるよう、送信者の電子メールアドレス (機密鍵の所有者) が証明書の中に含まれていなければならない、くらいの違いです。</para>
   <para>暗号化に使用する証明書の場合、受信者の電子メールアドレス (公開鍵の所有者) が証明書の中に含まれていなければなりません。サーバやクライアントの証明書の場合は、そのホスト名が証明書内の <guimenu>共通名</guimenu> 項目に含まれていなければなりません。なお、既定の証明書の有効期間は 365 日です。</para>
   <para>クライアントやサーバに対する証明書を作成するには、下記の手順を実施します:</para>
   <procedure>
    <step>
     <para>&yast; を起動して証明機関モジュールを起動します。</para>
    </step>
    <step>
     <para>対応する証明機関を選択して、 <guimenu>証明機関に入る</guimenu> を押します。</para>
    </step>
    <step>
     <para>証明機関に対して初めて入る場合は、パスワードを入力します。パスワードを入力すると、 &yast; は証明機関の鍵に関する情報が <guimenu>説明</guimenu> タブ内に表示されます。</para>
    </step>
    <step>
     <para><guimenu>証明書</guimenu> を選択します (<xref linkend="fig-yast-ca-cert" xrefstyle="select:label nopage"/> をご覧ください) 。</para>
     <figure xml:id="fig-yast-ca-cert">
      <title>証明機関の証明書</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_cert.png" width="70%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_cert.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>サーバ証明書を作成するには、 <menuchoice> <guimenu>追加</guimenu> <guimenu>サーバ証明書の追加</guimenu> </menuchoice> を押します。</para>
    </step>
    <step>
     <para>クライアント証明書を作成するには、 <menuchoice> <guimenu>追加</guimenu> <guimenu>クライアント証明書の追加</guimenu> </menuchoice> を押します。このとき、電子メールアドレスを忘れずに入力するようにしてください。</para>
    </step>
    <step>
     <para>完了するには <guimenu>OK</guimenu> を押します。</para>
    </step>
   </procedure>
   <para>機密鍵が漏洩したり、誤って作成してしまったりした証明書を取り消すには、下記の手順を実施します:</para>
   <procedure>
    <step>
     <para>&yast; を起動して証明機関モジュールを起動します。</para>
    </step>
    <step>
     <para>対応する証明機関を選択して、 <guimenu>証明機関に入る</guimenu> を押します。</para>
    </step>
    <step>
     <para>証明機関に対して初めて入る場合は、パスワードを入力します。パスワードを入力すると、 &yast; は証明機関の鍵に関する情報が <guimenu>説明</guimenu> タブ内に表示されます。</para>
    </step>
    <step>
     <para><guimenu>証明書</guimenu> を選択します (<xref linkend="sec-security-yast_ca-module-subca"/> をご覧ください) 。</para>
    </step>
    <step>
     <para>取り消したい証明書を選んで、 <guimenu>取り消し</guimenu> を押します。</para>
    </step>
    <step>
     <para>証明書を取り消す (失効する) 理由を選択します。</para>
    </step>
    <step>
     <para>完了するには <guimenu>OK</guimenu> を押して閉じます。</para>
    </step>
   </procedure>
   <note>
    <para>ただし、証明書の取り消しだけではなく、そこから作成した CRL を公開することで、ようやく証明書の無効化が実現できることに注意してください。 CRL の作成に関する詳細は <xref linkend="sec-security-yast_ca-module-crl"/> で説明しています。取り消された証明書は、 CRL の公開後に <guimenu>削除</guimenu> を押すことで、完全に削除することができます。</para>
   </note>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-defaults">
   <title>既定値の変更</title>
   <para>ここまでの章では、副証明機関やクライアント、サーバに対する証明書の作成方法について説明してきました。 X.509 証明書の拡張内では、特殊な設定が使用されますが、これらの設定にはそれぞれの用途に応じた既定値が設定されています。通常はこれらの設定を変更する必要はありませんが、特別な要件でそれらを変更する必要がある場合があります。本章では、これらの既定値を変更する方法について説明しています。</para>
   <procedure>
    <step>
     <para>&yast; を起動して証明機関モジュールを起動します。</para>
    </step>
    <step>
     <para>まずは <xref linkend="sec-security-yast_ca-module-subca"/> の手順に従って、対応する証明機関に入ります。</para>
    </step>
    <step>
     <para><menuchoice> <guimenu>詳細設定</guimenu> <guimenu>既定値の編集</guimenu></menuchoice> を押します。</para>
    </step>
    <step>
     <para>変更したい証明書の種類を選択して、 <guimenu>次へ</guimenu> を押します。</para>
    </step>
    <step>
     <para><xref linkend="fig-yast-ca-extensions"/> に示されているとおり、既定値を変更するためのダイアログが表示されます。</para>
     <figure xml:id="fig-yast-ca-extensions">
      <title>&yast; 証明機関モジュール&mdash;詳細設定</title>
      <mediaobject>
       <imageobject role="fo">
        <imagedata fileref="yast2_ca_extensions.png" width="75%" format="PNG"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="yast2_ca_extensions.png" width="75%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </figure>
    </step>
    <step>
     <para>左側で項目を選んで右側に値を入力します。必要に応じて <guimenu>critical</guimenu> のチェックボックスを変更してもかまいません。</para>
    </step>
    <step>
     <para><guimenu>次へ</guimenu> を押すと、短い概要が表示されます。</para>
    </step>
    <step>
     <para>あとは <guimenu>保存</guimenu> を押すと、変更を保存することができます。</para>
    </step>
   </procedure>
   <note>
    <para>既定値の変更は、その変更以降に作成したものに対してのみ適用されます。既に作成済みの証明機関や証明書については、変更されません。</para>
   </note>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-crl">
   <title>証明書取り消しリスト (Certificate Revocation Lists; CRL) の作成</title>
   <para>証明書に書かれた有効期間が過ぎるよりも前に、何らかの理由で証明書が信頼できないものになった場合、その証明書は即時に使用を停止しなければなりません。証明書の使用停止については <xref linkend="sec-security-yast_ca-module-subca"/> (副証明機関用) と <xref linkend="sec-security-yast_ca-module-clientserver"/> (ユーザ証明書用) で説明していますが、これらを行なった後は、その取り消し情報をもとにして、 CRL を作成して公開しなければなりません。</para>
   <para>システムでは各証明機関に対して 1 つの CRL のみを管理します。この CRL を作成もしくは更新したい場合は、下記のようにして行ないます:</para>
   <procedure>
    <step>
     <para>&yast; を起動して証明機関モジュールを起動します。</para>
    </step>
    <step>
     <para>まずは <xref linkend="sec-security-yast_ca-module-subca"/> の手順に従って、対応する証明機関に入ります。</para>
    </step>
    <step>
     <para><guimenu>CRL</guimenu> を選択します。この証明機関が直近に発行した CRL に関する情報が表示されます。</para>
    </step>
    <step>
     <para>副証明機関やクライアント／サーバに対する証明書を、その有効期間が切れる前に取り消したあと、 <guimenu>CRL の生成</guimenu> を押します。</para>
    </step>
    <step>
     <para>新しく作成する CRL の有効期間 (既定値: 30 日) を指定します。</para>
    </step>
    <step>
     <para><guimenu>OK</guimenu> を押すと CRL を作成して表示することができます。あとは作成した CRL を公開します。</para>
    </step>
   </procedure>
   <note>
    <para>CRL を解釈するアプリケーション側では、 CRL にアクセスできない場合や、 CRL の有効期間が切れてしまっているような場合、証明書の受付を拒否することになります。 PKI 提供者の観点では、その時点での CRL の有効期間が満了する前に新しい CRL を作成して公開することが義務となっています。残念ながら、 &yast; ではそのような処理を自動化する仕組みまでは用意していません。</para>
   </note>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-exportldap">
   <title>証明機関のオブジェクトに対する LDAP へのエクスポート</title>
   <para>LDAP エクスポート (公開) を実施するには、 &yast; の LDAP クライアントモジュールを利用して設定を行なうことができます。この場合、この設定内容を元にエクスポート処理を行なうことができます。設定していない場合は、全ての LDAP データを手作業で指定しなければならなくなります。また、パスワードについてはいずれの場合であっても入力しなければなりません (詳しくは <xref linkend="tab-yast-ca-ldap-password"/> をご覧ください) 。</para>
   <table xml:id="tab-yast-ca-ldap-password">
    <title>LDAP エクスポート時のパスワード</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>パスワード</para>
       </entry>
       <entry>
        <para>意味</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para>LDAP パスワード</para>
       </entry>
       <entry>
        <para>LDAP ツリー内に項目を作成する際に使用するユーザのパスワードです。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>証明書のパスワード</para>
       </entry>
       <entry>
        <para>証明書を公開するために使用する証明書のパスワードです。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para>新しい証明書のパスワード</para>
       </entry>
       <entry>
        <para>LDAP エクスポートでは、 PKCS12 形式を使用します。この形式の場合、証明書を保存するにあたって新しいパスワードを設定しなければならなくなっています。</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>証明書、証明機関、証明書失効リスト (CRL) をそれぞれ LDAP にエクスポートすることができます。</para>
   <variablelist>
    <varlistentry>
     <term>証明機関の LDAP へのエクスポート</term>
     <listitem>
      <para>証明機関をエクスポートするには、まず <xref linkend="sec-security-yast_ca-module-subca"/> の手順に従って証明機関に入ります。あとは表示されたダイアログ内で <menuchoice> <guimenu>詳細設定</guimenu><guimenu>LDAP にエクスポート</guimenu></menuchoice> を選択して、 LDAP データを入力するダイアログを表示させます。既に &yast; LDAP クライアントで設定済みの場合は、ほとんどの項目に自動的に入力されているはずです。それ以外の場合は、それぞれの項目を手作業で入力してください。証明機関の項目は、 LDAP ツリー内の専用のツリーとして作成され、 <quote>caCertificate</quote> という属性が設定されます。</para>
<!---
      <para>
       An alternative method for sub-CAs is to export from the
       <quote>parent</quote> CA. To do this, enter the CA containing the sub-CA
       you want to export and select <guimenu>Certificates</guimenu>. Then
       select the required sub-CA from the certificate list in the upper part
       of the dialog and select
       <menuchoice><guimenu>Export</guimenu><guimenu>Export To
         LDAP</guimenu></menuchoice>. The LDAP data is entered here in the same
       way as in the first case. This is a useful method if several CAs are to
       be exported in sequence.
     </para>
      -->
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>証明書の LDAP へのエクスポート</term>
     <listitem>
      <para>証明書を含む証明機関に入って、 <guimenu>証明書</guimenu> を選択します。あとはエクスポートしたい証明書を選んで、 <menuchoice> <guimenu>詳細設定</guimenu><guimenu>LDAP にエクスポート</guimenu></menuchoice> を選択します。 LDAP に関するデータは、証明機関の場合と同じです。証明書は LDAP ツリー内の対応するユーザ内に書き込まれ、それぞれ <quote>userCertificate</quote> (PEM 形式) および <quote>userPKCS12</quote> (PKCS12 形式) の属性に保存されます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>証明書失効リスト (CRL) の LDAP へのエクスポート</term>
     <listitem>
      <para>証明書を含む証明機関に入って、 <guimenu>CRL</guimenu> を選択します。必要であれば新しい CRL を作成して、 <guimenu>エクスポート</guimenu> を押します。表示されたダイアログでは、エクスポートに関するパラメータ設定を行ないます。この証明機関に対する CRL を一度だけエクスポートするか、一定時間おきに公開するかを選択することができます。あとは <guimenu>LDAP にエクスポート</guimenu> を選択して、 LDAP の情報を入力してください。定期的に公開する場合は、 <guimenu>再発行を繰り返してエクスポート</guimenu> のラジオボタンを選択して、更新間隔を指定してください。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-exportfile">
   <title>証明機関のオブジェクトに対するファイルへのエクスポート</title>
   <para>証明機関の管理用にコンピュータ内にリポジトリを設定してある場合は、このオプションを使用することで、証明機関のオブジェクトを指定の場所に保存することができます。エクスポートでは PEM, DER, PKCS12 など、さまざまな出力形式に対応しています。 PEM 形式の場合、鍵を含めて証明書をエクスポートするかどうかや、鍵を暗号化するかどうかを選択することもできます。 PKCS12 の場合は、関連する証明機関の証明書を含めるかどうかを選択することができます。</para>
   <para>証明書や証明機関のファイルへのエクスポートは、 <xref linkend="sec-security-yast_ca-module-exportldap"/> で説明している LDAP へのエクスポートとほぼ同じです。ただし、 <guimenu>LDAP にエクスポート</guimenu> ではなく <guimenu>ファイルにエクスポート</guimenu> を選択する点が異なります。あとは出力形式とパスワード、出力先のファイルパスを指定するダイアログが表示されますので、必要な項目を入力して <guimenu>OK</guimenu> を押してください。</para>
   <para>CRL の場合は、 <guimenu>エクスポート</guimenu> を押して <guimenu>ファイルにエクスポート</guimenu> を選択し、出力形式 (PEM もしくは DER) を選んで出力先のファイルパスを入力します。最後に <guimenu>OK</guimenu> を押すと、指定した場所に出力が行なわれます。</para>
   <tip>
    <para>出力先には、ファイルシステム内の任意の場所を選択することができます。必要であれば、たとえば証明書のオブジェクトを USB メモリなどに保存することもできます。このような可搬メディアの場合は、 <filename>/media</filename> ディレクトリ内からアクセスすることができます。</para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-security-yast-ca-module-import">
   <title>共通サーバ証明書のインポート</title>
   <para>証明書の管理用として構成したコンピュータで、 &yast; を利用してサーバの証明書を可搬メディアにエクスポートしたあとは、そのメディアをサーバ側に接続して <emphasis>共通サーバ証明書</emphasis> として証明書をインポート (取り込む) することができます。この作業はインストール時でもインストール後でも &yast; で実施することができます。</para>
   <note>
    <para>なお、証明書を正しく取り込むには、 PKCS12 形式のいずれかを使用する必要があります。</para>
   </note>
   <para>一般的なサーバ証明書は <command>/etc/ssl/servercerts</command> 内に保存され、証明機関の仕組みに対応した任意のサービスから使用することができます。この証明書の有効期間が切れた場合は、同じ手順で簡単に置き換えることができます。なお、証明書の置き換えを行なった後は、対応するサービスを再起動するとよいでしょう。</para>
   <tip>
    <para>下記の手順で <guimenu>インポート</guimenu> を押すと、ファイルシステム内からファイルを選択してインポートすることになります。この仕組みでは、 USB メモリなどの可搬デバイスも使用することができます。</para>
   </tip>
   <para>共通サーバ証明書をインポートするには、下記の手順で行ないます:</para>
   <procedure>
    <step>
     <para>&yast; を起動して <guimenu>セキュリティとユーザ</guimenu> 内にある <guimenu>汎用サーバ証明書</guimenu> を選択します。</para>
    </step>
    <step>
     <para>&yast; が起動すると、現時点での証明書に関する情報が表示されます。</para>
    </step>
    <step>
     <para><guimenu>インポート</guimenu> を押して、証明書のファイルを選択します。</para>
    </step>
    <step>
     <para>パスワードを入力して <guimenu>次へ</guimenu> を押します。すると証明書が取り込まれ、新しい証明書の概要が表示されるようになります。</para>
    </step>
    <step>
     <para>あとは <guimenu>完了</guimenu> を押して &yast; を閉じてください。</para>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
