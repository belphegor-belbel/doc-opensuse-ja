<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-xen-config">
 <title>仮想化: オプション設定</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>本章では高度な管理作業のほか、最先端の仮想化ソリューションを実装したいユーザ向けの設定オプションについて説明しています。ただし、本章で説明しているオプションや作業はいずれも善意で提供されているものであり、 Novell 社のサポート範囲内であることを示すものではありません。</para>
 <sect1 xml:id="sec-xen-config-vcd">
  <title>仮想 CD リーダ</title>

  <para>仮想 CD リーダは、仮想マシンの作成時に追加することができるほか、既存の仮想マシンに対しても追加を行なうことができます。また、仮想 CD リーダは物理 CD/DVD をベースにして動作させることができるほか、 ISO イメージをベースにすることもできます。なお、仮想 CD リーダは、準仮想化の場合と完全仮想化の場合で異なる動作になります。</para>

  <sect2 xml:id="sec-xen-config-vcd-para">
   <title>準仮想化マシン内での仮想 CD リーダ</title>
   <para>準仮想化型の仮想マシンでは、仮想 CD リーダと仮想ディスクを足して最大で 100 個までの設定を行なうことができます。準仮想化マシンでは、仮想 CD リーダは読み込み専用の仮想ディスクとして CD を表示します。仮想 CD リーダは、 CD のデータ書き込み用に使用することはできません。</para>
   <para>準仮想化型のマシンで CD へのアクセスが終わったら、仮想マシンから仮想 CD リーダを削除しておくことをお勧めします。</para>
   <para>準仮想化ゲストでは、 <literal>devtype=cdrom</literal> というデバイス種類の設定を行なうことができます。この設定を行なうことで実際の CD リーダの動作を擬似するほか、メディアの交換にも対応するようになります。また、 CD リーダのトレイを開くためのイジェクトコマンドも使用できるようになります。</para>
  </sect2>

  <sect2 xml:id="sec-xen-config-vcd-full">
   <title>完全仮想化マシン内での仮想 CD リーダ</title>
   <para>完全仮想化マシンの場合、仮想 CD リーダと仮想ディスクを足して最大で 4 個までの設定を行なうことができます。完全仮想化マシンの仮想 CD リーダは、通常の (物理的な) CD リーダと全く同じ扱いをすることができます。</para>
   <para>ホストコンピュータ側の物理 CD リーダ (例: <filename>/dev/cdrom</filename>) にメディアを挿入すると、物理 CD リーダをベースにした仮想 CD リーダが設定されている全ての仮想マシンから、挿入したメディアを読み込むことができるようになります。なお、オペレーティングシステム側に自動マウントの機能があれば、 CD は自動的にファイルシステム内に現われるようになります。仮想 CD リーダは CD のデータ書き込み用に使用することはできません。読み込み専用デバイスとして設定されます。</para>
  </sect2>

  <sect2 xml:id="sec-xen-config-vcd-add">
   <title>仮想 CD リーダの追加</title>
   <para>仮想 CD リーダは、ホストコンピュータに接続された CD リーダをベースにすることができるほか、 ISO イメージファイルをベースにすることもできます。</para>
   <procedure>
    <step>
     <para>仮想マシンが動作中であり、オペレーティングシステムの起動が完了していることを確認します。</para>
    </step>
    <step>
     <para>まずは物理 CD リーダにメディアを挿入するか、もしくは必要な ISO イメージを &dom0; 内に準備します。</para>
    </step>
    <step>
     <para>&vmguest; で新しく未使用のブロックデバイスを選択します。たとえば <filename>/dev/xvdb</filename> などになります。</para>
    </step>
    <step>
     <para>ゲストに割り当てるものが物理 CD リーダなのか ISO イメージなのかを選択します。</para>
    </step>
    <step>
     <para>物理 CD リーダを使用する場合は、下記のコマンドを &vmguest; に対して実行し、 CD リーダの割り当てを行ないます。下記の例は、ゲストの名前が &xenguest; である場合の例となります:</para>
<screen>&prompt.sudo;xl block-attach &xenguest; target=/dev/sr0,vdev=xvdb,access=ro</screen>
    </step>
    <step>
     <para>イメージファイルを割り当てる場合は、下記のコマンドを実行します:</para>
<screen>&prompt.sudo;xl block-attach &xenguest; target=/path/to/file.iso,vdev=xvdb,access=ro</screen>
    </step>
    <step>
     <para>これで <filename>/dev/xvdb</filename> などのブロックデバイスを仮想マシンに追加することができました。</para>
    </step>
    <step>
     <para>仮想マシンが Linux である場合は、下記のように実行します:</para>
     <substeps performance="required">
      <step>
       <para>仮想マシン内で端末を開いて <command>fdisk -l</command> を実行し、デバイスが正しく割り当てられていることを確認します。 <command>ls /sys/block</command> を実行することでも、仮想マシンに存在するすべきのディスクを表示することができます。</para>
       <para>CD は仮想マシン側で仮想ディスクとして認識されます。そのため、下記のようなデバイス名になります:</para>
<screen>/dev/xvdb</screen>
      </step>
      <step>
       <para>下記のようなコマンドを入力して実行することで、物理メディアもしくは ISO イメージを読み込むことができます。</para>
<screen>&prompt.sudo;mount -o ro /dev/xvdb /mnt</screen>
       <para>上記を実行すると、 <command>/mnt</command> というマウントポイントにマウントされます。</para>
       <para>すると、指定したマウントポイントにアクセスすることで、 CD もしくは ISO イメージの内容にアクセスすることができるようになります。</para>
      </step>
     </substeps>
    </step>
    <step>
     <para>仮想マシンが Windows である場合は、仮想マシンを再起動します。</para>
     <para><literal>マイコンピュータ</literal> 内に仮想 CD リーダが現われていることを確認します。</para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="sec-xen-config-vcd-remove">
   <title>仮想 CD リーダの削除</title>
   <procedure>
    <step>
     <para>仮想マシンが動作中であり、オペレーティングシステムの起動が完了していることを確認します。</para>
    </step>
    <step>
     <para>仮想 CD リーダがマウントされている場合は、まずは仮想マシン内でマウントを解除します。</para>
    </step>
    <step>
     <para>ホスト側で <command>xl block-list alice</command> のように入力して実行することで、ゲスト側のブロックデバイスの一覧を表示することができます。</para>
    </step>
    <step>
     <para>ゲストから仮想デバイスを削除するには、 <command>xl block-detach alice</command> <replaceable>ブロックデバイス_ID</replaceable> のように入力して実行します。これがうまくいかない場合は、 <option>-f</option> オプションを指定して強制的な取り外しをお試しください。</para>
    </step>
    <step>
     <para>メディアを取り出すには、物理的な取り出しボタンを押してください。</para>
    </step>
   </procedure>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-xen-config-remote-access">
  <title>リモートアクセス方式</title>

  <para>ラックマウント型のサーバなど、ビデオモニタやキーボード、マウスが接続されていないコンピュータは、しばしば <literal>ヘッドレス</literal> 環境と呼ばれ、これらを &vmhost; とする場合は、リモート管理技術を設定しておく必要があります。</para>

  <para>一般的なシステム設定としては、下記のようなものがあります:</para>

  <variablelist>
   <varlistentry>
    <term>X Window Server によるグラフィカルデスクトップ</term>
    <listitem>
     <para>&gnome; などのグラフィカルデスクトップを仮想マシンホストにインストールしている場合、 VNC ビューアなどのリモートビューアを使用してログインすることができるほか、 <command>tigervnc</command> や <command>virt-viewer</command> などを使用することで、リモートのゲスト環境にログインすることもできます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>テキストのみ</term>
    <listitem>
     <para><command>ssh</command> コマンドをリモートのコンピュータで実行することで、仮想マシンホストのシェルにログインして、テキストベースのコンソールを使用することができます。あとは <command>xl</command> コマンドで仮想マシンの管理を行なうことができるほか、 <command>virt-install</command> コマンドで新しい仮想マシンを作成することもできます。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-xen-config-vnc">
  <title>VNC ビューア</title>

  <para>VNC ビューアを使用することで、動作中のゲストに対してグラフィカルな方法でアクセスすることができます。 &dom0; からアクセスする際に使用する (ローカルアクセスやオンボックスアクセスと呼びます) ことができるほか、リモートのコンピュータからアクセスする際にも使用することができます。</para>

  <para>&vmguest; のディスプレイを表示したい場合は、接続先は &vmhost; の IP アドレスになります。仮想マシンが動作中の場合、ホスト側の VNC サーバがポート番号を割り当てて、 VNC ビューアからのアクセスを待ち受けます。割り当てられるポート番号は、仮想マシンの起動時における最小のポート番号になります。なお、ポート番号は仮想マシンの動作中にのみ有効であり、シャットダウンを行なってしまうと、ポート番号は他の仮想マシンに割り当てることができるよう、解放されます。</para>

  <para>たとえば 1, 2, 4, 5 の各ポートが仮想マシン向けに割り当てられている場合、新しく起動する仮想マシンに対しては、 VNC サーバが 3 を割り当てることになります。同じ仮想マシンであっても、次回の起動時に 3 が使用中であった場合は、また別のポート番号を割り当てることになります。</para>

  <para>リモートのコンピュータから VNC サーバに接続できるようにするには、ファイアウオール側で &vmguest; の使用するポートをできる限り多く空けておく必要があります。 VNC では 5900 番以降を使用する仕組みであることから、たとえば 10 台の &vmguest; を動作させるような場合、 TCP ポートの 5900 から 5910 までを空けておいてください。</para>

  <para>&vmhost; 内のローカルで仮想マシンの VNC ディスプレイにアクセスするには、下記のいずれかのコマンドを実行します:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para><command>vncviewer ::590#</command></para>
   </listitem>
   <listitem>
    <para><command>vncviewer :#</command></para>
   </listitem>
  </itemizedlist>

  <para>ここで、 <replaceable>#</replaceable> には仮想マシンに割り当てられた VNC ポート番号を指定します。</para>

  <para>&vmhost; 以外のマシンから &vmguest; にアクセスする場合は、下記の書式でコマンドを作成して実行します:</para>

<screen>
&prompt.user;vncviewer &xenhostip;::590#
</screen>

  <para>上記は、 &vmhost; のアドレスが &xenhostip; である場合の例となります。</para>

  <sect2 xml:id="sec-xen-config-vnc-portnumbers">
   <title>仮想マシンに対する VNC ビューアのポート番号設定</title>
   <para>VNC サーバの既定では、利用可能な最小のポート番号を自動的に割り当てる動作を行ないますが、仮想マシンに対して固定の VNC ポート番号を割り当てることもできます。</para>
   <para>特定の &vmguest; が使用するポートを固定したい場合は、仮想マシンの xl 設定ファイルを編集して、下記のような箇所にある <literal>vnclisten</literal> の値を必要に応じて変更してください。下記の例では 2 を指定していますが、これは 5900 のベース値が自動的に足されて、 5902 として扱われます:</para>
<screen>vfb = [ 'vnc=1,vnclisten="localhost:2"' ]</screen>
   <para>ゲストドメインの xl 設定の編集に関する詳細は、 <xref linkend="sec-xen-manage-xl"/> をお読みください。</para>
   <tip>
    <para>動的に最も小さい VNC ポート番号を割り当てる仮想マシンが存在する場合は、それらとの重複を避けるため、大きめの値を設定しておいてください。</para>
   </tip>
  </sect2>

  <sect2 xml:id="sec-xen-config-vnc-sdl">
   <title>VNC ビューアの代替としての SDL の使用</title>
   <para>仮想マシンのディスプレイを仮想マシンホストのコンソール自身から行なう場合 (ローカルアクセスやオンボックスアクセスと呼ばれます) 、 VNC ではなく SDL を使用することもできます。 VNC はネットワーク経由でデスクトップを表示するには高速なプロトコルですが、同じコンピュータ内でデスクトップにアクセスするだけであれば、 SDL のほうがより高速に処理することができます。</para>
   <para>VNC ではなく SDL を既定値として使用する場合は、仮想マシンの xl 設定を下記のように変更してください。変更方法に関する詳細は <xref linkend="sec-xen-manage-xl"/> をお読みください。</para>
<screen>vfb = [ 'sdl=1' ]</screen>
   <para>なお、 VNC ビューアからのアクセスとは異なり、 SDL のウインドウを閉じてしまうと、仮想マシンそのものも終了してしまうことに注意してください。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-xen-config-keyboard">
  <title>仮想キーボード</title>

  <para>仮想マシンが起動すると、ホスト側では仮想マシンの設定内にある <command>keymap</command> の内容に従って、仮想キーボードを作成します。 <command>keymap</command> の設定が存在しない場合、仮想マシンは既定値である英語 (US) キーボードを作成します。</para>

  <para>仮想マシンの現在のキーボード設定を確認するには、下記のコマンドを &dom0; で実行します:</para>

<screen>&prompt.user;xl list -l <replaceable>VM_名</replaceable> | grep keymap</screen>

  <para>ゲストの仮想キーボードを設定するには、下記のような内容を設定します:</para>

<screen>vfb = [ 'keymap="ja"' ]</screen>

  <para>対応するキーボードレイアウトの一覧を表示したい場合は、 <command>man 5 xl.cfg</command> で表示されるマニュアルページ内にある、 <literal>Keymaps</literal> セクションをご覧ください。</para>
 </sect1>
<!-- 2014-08-01 tbazant: no xl usb-* available yet
 <sect1 id="sec-xen-config-pvusb">
  <title>&usbback;</title>

  <para>
   USB (Universal Serial Bus) is a common method to extend the capabilities
   of a workstation. It is possible to attach an arbitrary number of devices
   to the machine, providing for example extended storage, additional
   keyboard or mouse, Webcams and other devices.
  </para>

  <para>
   &xen; allows to dedicate USB devices that are attached to the physical
   machine to a &vmguest;. Note, that USB devices will not survive live
   migrations and it is recommended to remove any USB device before using
   the migration feature of &xen;. &xen; supports pass-through of USB
   devices from &vmhost; to &vmguest;s using two different methods:
  </para>

  <variablelist>
   <varlistentry>
    <term>qemu-dm USB pass-through using USB 1.1 emulation</term>
    <listitem>
     <para>
      This method only supports fully virtualized guests, but is available
      since &xen; 3.x. It is a low-performance method which does not require
      any special drivers neither in &dom0; or &vmguest;.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>PVUSB support</term>
    <listitem>
     <para>
      This method supports
      paravirtualized guests, but is available in &xen; 4.0 and newer only.
      It requires special paravirtual kernel drivers both in &dom0; or
      &vmguest;.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <sect2 id="usbback-qemudm">
   <title>Guest qemu-dm USB 1.1 emulation</title>
   <para>
    Qemu-dm used for &xen; fully virtualized guests supports pass-through of
    USB devices from &dom0; to the guest. Qemu-dm emulates USB 1.1 UHCI
    2-port controller, which is slow and limited in features and device
    support. The main advantage is that the emulation pass-through is
    supported in all &xen; 3.x and newer versions and does not require any
    additional back-end drivers in &dom0; or any additional front-end
    drivers in &vmguest;.
   </para>
   <para>
    There are several ways to assign a USB device to a &vmguest;. For all of
    them, you need to run <command>lsusb</command> on the host and read the
    device ID number. For example, if <command>lsusb</command> contains the
    following line
   </para>
<screen>Bus 001 Device 003: ID 054c:04be Any Corp.</screen>
   <para>
    then the device ID number is <literal>054c:04be</literal>. This ID will
    be the user in the following examples.
   </para>
   <sect3 id="usbback-qemudm-console">
    <title>Assigning USB Device with &qemu; Console</title>
    <para>
     This method lets you quickly assign host USB devices to a &vmguest;. No
     restart of &vmguest; is needed to access the connected USB device. This
     device assignment is temporary and will be forgotten after you shut the
     &vmguest; down.
    </para>
    <procedure>
     <step>
      <para>
       Insert the relevant USB device in the USB port of the host machine
       and identify its ID number with <command>lsusb</command>..
      </para>
     </step>
     <step>
      <para>
       Press
       <keycombo><keycap>Ctrl</keycap><keycap>Alt</keycap><keycap>2</keycap></keycombo>
       to open &qemu; console and enter
       <command>usb_add&nbsp;host:054c:04be</command>.
      </para>
     </step>
     <step>
      <para>
       Verify if the assignment has been successful by checking the output
       of <command>lsusb</command> on the &vmguest;. The relevant line
       should contain the same device ID as the host.
      </para>
     </step>
    </procedure>
    <para>
     Note that <command>usb_del&nbsp;host:054c:04be</command> will
     disconnect the USB device from the &vmguest;.
    </para>
   </sect3>
   <sect3 id="usbback-qemudm-xm">
    <title>Assigning USB Devices with <command>xm</command> commands</title>
    <para>
     Another way to quickly assign (or disconnect) USB device to a &vmguest;
     is to use <command>xm usb-add</command> and <command>xm
     usb-del</command> commands:
    </para>
    <procedure>
     <step>
      <para>
       List all assignable USB devices in &dom0; with <command>xm
       usb-list-assignable-devices</command>. Note the device ID
       <literal>xxxx:yyyy</literal> for the device you want to connect to
       the &vmguest;.
      </para>
     </step>
     <step>
      <para>
       Check existing &vmguest;s (<command>xm list</command>) and pick the
       one you want to assign the USB device to.
      </para>
     </step>
     <step>
      <para>
       Connect the USB device to the selected &vmguest; with
      </para>
<screen>xm usb-add alice host:054c:04be</screen>
      <para>
       where <literal>alice</literal> is the &vmguest; name and
       <literal>054c:04be</literal> the ID of the USB device.
      </para>
     </step>
    </procedure>
   </sect3>
   <sect3 id="usbback-qemudm-cfg">
    <title>Assigning USB Devices in &vmguest; Configuration</title>
    <para>
     To permanently assign a USB device to a specified &vmguest;, you need
     to modify its configuration file in the
     <filename>/etc/xen/vm</filename> directory. Just add the following
     lines
    </para>
<screen>usb = 1
usbdevice = "host:xxxx:yyyy"</screen>
    <para>
     and restart the relevant &vmguest;. Please note that
     <literal>xxxx:yyyy</literal> stands for the USB device ID to assign.
    </para>
   </sect3>
  </sect2>

  <sect2 id="sec-xen-vhost-usbback-pv">
   <title>Assigning USB Devices with PVUSB</title>
   <para>
    PVUSB is a new high performance method of doing USB pass-through from
    &dom0; to &vmguest;s. It supports both USB 2.0 and USB 1.1 devices and
    can be used with
    paravirtualized guests. It requires special pvusb drivers in &dom0;'s
    kernel (<literal>xen-usbback</literal>) and the front-end driver
    (<literal>xen-usbfront</literal>) in the &vmguest;.
   </para>
   <para>
    To assign a USB device with paravirtualized drivers, you first need to
    create a new virtual host controller (if there not already exists one)
    on the &vmguest;, and then attach the physical USB device to it. To
    assign a USB device as, for example, a USB keyboard device to a
    &vmguest;, proceed as follows:
   </para>
   <procedure>
    <title>Adding a USB Keyboard to a &vmguest;</title>
    <step>
     <para>
      Plug the USB keyboard device into the &vmhost;.
     </para>
    </step>
    <step>
     <para>
      Make sure that the kernel module <literal>usbbk</literal> is loaded by
      the system with the command:
     </para>
<screen>lsmod | grep usbbk</screen>
     <para>
      If the module is not loaded, load the module with the command:
     </para>
<screen>modprobe usbbk</screen>
    </step>
    <step>
     <para>
      Create a virtual host controller for the &vmguest; with the command:
     </para>
<screen>xm usb-hc-create &xenguest; 2 8</screen>
     <para>
      This creates a virtual USB 2.0 host controller on the guest that has 8
      ports.
     </para>
    </step>
    <step>
     <para>
      On the &vmguest; system, load the front-end kernel module of PVUSB
      with the command:
     </para>
<screen>modprobe xen-hcd</screen>
    </step>
    <step>
     <para>
      If the package <systemitem>usb-utils</systemitem> has been installed,
      you can now see the host controller in the USB device list with the
      command <command>lsusb</command>.
     </para>
    </step>
    <step>
     <para>
      Check if you can list the virtual host controller from the &vmhost;
      with the command <command>xm usb-list &xenguest;</command>
     </para>
    </step>
    <step>
     <para>
      On the &vmhost; system check which devices may be assigned to a guest
      with the command:
     </para>
<screen>xm usb-list-assignable-devices</screen>
     <para>
      The result should look similar to the following:
     </para>
<screen>4-2          : ID 047b:0002 SILITEK USB Keyboard and Mouse</screen>
    </step>
    <step>
     <para>
      The device that should be assigned to &xenguest; has the number
      <literal>4-2</literal>. To assign this device to the first virtual
      host controller with number 0 on its port 1, run the command:
     </para>
<screen>xm usb-attach &xenguest; 0 1 4-2</screen>
    </step>
   </procedure>
   <para>
    After completing this procedure, you may use the keyboard, for example,
    to type inside a VNC window.
   </para>
   <para>
    To detach the USB device, you need to know the number of the virtual
    host controller and the port number of the assigned device inside the
    &vmguest;. The port numbers of the host controllers start with the
    <literal>0</literal>, and the port numbers with <literal>1</literal>.
    List currently assigned devices with the command <command>xm usb-list
    &xenguest;</command>. The result should look similar to the following:
   </para>
<screen># xm usb-list &xenguest;
Idx BE  state usb-ver  BE-path
0   0   4     USB2.0  /local/domain/0/backend/vusb/2/0
port 1: 4-2 [ID 047b:0002 SILITEK USB Keyboard and Mouse]
port 2:
port 3:
port 4:
port 5:
port 6:
port 7:
port 8:</screen>
   <para>
    Remove this device with the command:
   </para>
<screen>xm usb-detach &xenguest; 0 1</screen>
   <tip>
    <title>Assigning the Whole Controller</title>
    <para>
     You can also use PCI pass-through to pass through the whole USB
     controller PCI device, with all USB devices connected to it. For more
     information see <xref linkend="sec-xen-vhost-pciback"/>.
    </para>
   </tip>
   <sect3 id="sec-xen-vhost-usbback-pv-vusb">
    <title>PVUSB Options in &vmguest;'s Configuration File</title>
    <para>
     While <command>xm usb-attach</command> is a <quote>hot-plugging</quote>
     way of connecting a USB device to a &vmguest; and the related device
     assignment will be forgotten after the guest system is switched off,
     you can add corresponding configuration options to the &vmguest;'s
     configuration file make the assignment permanent.
    </para>
    <para>
     The same effect that can be reached with
    </para>
<screen>xm usb-hc-create alice 2 4 &amp;&amp; xm usb-attach alice 0 1 1-8</screen>
    <para>
     can be accomplished by adding the following line
    </para>
<screen>vusb=['usbver=2, numports=4, port_1=1-8']</screen>
    <para>
     to the &vmguest;'s configuration file in the
     <filename>/etc/xen/vm</filename> directory and restarting it.
     <literal>usbver=</literal> specifies the USB version,
     <literal>numports=</literal> specifies the number of ports of the
     virtual controller, and <literal>port_1=</literal> specifies which
     physical USB device will be assigned to port 1 of the controller (can
     be up to <literal>port_16=</literal>).
    </para>
   </sect3>
  </sect2>
 </sect1>
 -->
 <sect1 xml:id="xen-config-cpupinning">
  <title>CPU リソースの占有</title>

  <para>&xen; 内では、 &dom0; や &vmguest; が性能を確保する目的で、使用する CPU コア数やコア番号を指定することができます。 &dom0; の性能は、ディスクやネットワークのドライバがここで動作することから、システム全体に対して重要な設定となります。 I/O に負荷が集中するゲストの場合、 &dom0; の CPU サイクルを多く消費することになります。その一方、 &vmguest; 側の性能についても、必要な処理を完了するためのリソースとなりますので、こちらも重要となります。</para>

  <sect2 xml:id="config-cpupinning-dom0">
   <title>&dom0; 側の設定</title>
   <para>&dom0; に対して CPU リソースを占有できるようにすることで、 &vmguest; 側から届く I/O 要求を &dom0; 内で容易に処理できるようになることから、性能を向上させる結果になります。逆に &dom0; が CPU リソースを占有できないと、性能が落ちてしまうだけでなく、 &vmguest; が正しく動作しない場合もあります。</para>
   <para>CPU リソースの占有を設定するには、 3 つの手順が必要となります。まずは &xen; の起動時のコマンドライン設定、次に &dom0; の VCPU 設定、そして最後に &vmguest; に対する CPU 関連の設定になります。</para>
   <procedure>
    <step>
     <para>まずは &xen; の起動時のコマンドラインに対して、 <literal>dom0_max_vcpus=X</literal> を追加します。具体的には、 <filename>/etc/default/grub</filename> に下記の行を追加します:</para>
<screen>GRUB_CMDLINE_XEN="dom0_max_vcpus=X"</screen>
     <para><filename>/etc/default/grub</filename> 内に既に <envar>GRUB_CMDLINE_XEN</envar> がある場合は、その行に <literal>dom0_max_vcpus=X</literal> を追加してください。</para>
     <para>なお、 <literal>X</literal> には &dom0; が占有する VCPU 数を指定します。</para>
    </step>
    <step>
     <para>あとは下記のコマンドを実行して、 &grub; の設定ファイルを更新します:</para>
<screen>&prompt.sudo;grub2-mkconfig -o /boot/grub2/grub.cfg</screen>
    </step>
    <step>
     <para>コンピュータを再起動して、設定を反映させます。</para>
    </step>
    <step>
     <para>次に &dom0; の VCPU のそれぞれに対して、物理プロセッサへのバインド (<quote>ピン</quote> とも呼びます) を設定します。</para>
<screen>&prompt.sudo;xl vcpu-pin Domain-0 0 0
xl vcpu-pin Domain-0 1 1</screen>
     <para>最初の行は、 &dom0; の VCPU 番号 0 を物理プロセッサ番号 0 に割り当てる設定、次の行は　&dom0; の VCPU 番号 1 を物理プロセッサ番号 1 に割り当てる設定です。</para>
    </step>
    <step>
     <para>最後に、全ての &vmguest; の設定を変更して、 &dom0; が使用する物理プロセッサを使用しないようにします。たとえば 8-CPU のシステムであれば、下記のような内容を全ての &vmguest; の設定ファイル内に追加します:</para>
<screen>cpus="2-8"</screen>
     <para>"\n  <!-- NOTE: nothing needed for translation -->\n"</para>
    </step>
   </procedure>
  </sect2>

  <sect2 xml:id="config-cpupinning-domU">
   <title>&vmguest; 側の設定</title>
   <para>仮想マシン側に対しても、特定の CPU リソースを占有するように設定する必要がある場合があります。既定では、仮想マシンは利用可能な CPU コアを全て使用します。なお、十分な数の物理プロセッサを占有させ、他の &vmguest; に対して使用させないようにすることで、性能を改善することができます。たとえば 8 CPU コアのマシンに対して、仮想マシンがそのうちの 2 個を占有するような場合、下記のような設定になります:</para>
<screen>vcpus=2
cpus="2,3"</screen>
   <para>上記の例では <literal>2</literal> 個のプロセッサを &vmguest; に専用に割り当てています。使用するコアは 3 番目と 4 番目 (設定ファイル上では 0 から数えるため、 <literal>2</literal> と <literal>3</literal> になっています) です。さらに多くの物理プロセッサを割り当てる必要がある場合は、 <literal>cpus="2-8"</literal> のような書式で指定してください。</para>
   <para><quote>alice</quote> という名前のゲストに対して、 CPU の割り当てをホットプラグ形式で変更したい場合は、対応する &dom0; で下記のコマンドを実行してください:</para>
<screen>&prompt.sudo;xl vcpu-set alice 2
&prompt.sudo;xl vcpu-pin alice 0 2
&prompt.sudo;xl vcpu-pin alice 1 3</screen>
   <para>上記の例では、ゲストに対して 2 個の物理プロセッサを占有するよう設定しています。それぞれ VCPU 0 が物理プロセッサ 2 を、 VCPU 1 が物理プロセッサ 3 を使用します。あとは下記のようにすることで、割り当てを確認することができます:</para>
<screen>&prompt.sudo;xl vcpu-list alice
Name                              ID VCPUs   CPU State   Time(s) CPU Affinity
alice                             4     0     2   -b-       1.9 2-3
alice                             4     1     3   -b-       2.8 2-3</screen>
  </sect2>
 </sect1>
<!-- 2014-08-04 tbazant: no xl equivalent
 <sect1 id="sec-xen-config-lock">

  <title>Using Lock Files</title>


  <para>
   When working with several &vmhost; systems that may run a pool of guests,
   a common task is to ensure that the guest systems are not started twice.
   Depending on the used block and network devices, this could lead to
   network problems and corrupted block devices.
  </para>

  <para>
   &xen; provides a mechanism that checks a lock file before a guest is
   started. To use this mechanism, a distributed file system like
   NFS or a cluster file system is needed. For example, a distributed file
   system mounted to <filename>/srv/xen</filename> may be used.
  </para>

  <para>
   The &xen; domain lock functionality is configured in the Xend
   configuration file <filename>/etc/xen/xend-config.sxp</filename>. At the
   end of this file, the two parameters
   <systemitem>xend-domain-lock</systemitem> and
   <systemitem>xend-domain-lock-path</systemitem> control the behavior. To
   use the directory <filename>/srv/xen</filename> as a locking directory,
   modify the settings as follows:
  </para>

<screen>(xend-domain-lock yes)
(xend-domain-lock-path /xen/lock)
  </screen>

  <para>
   Activate the new settings either by rebooting the &vmhost; system, or by
   restarting <systemitem>xend</systemitem> with the command <command>sudo
   systemctl restart xend</command>.
  </para>

  <para>
   When all &vmhost; systems use this locking directory, &xen; will refuse
   to start a &vmguest; twice.
  </para>
 </sect1>
 -->
<!-- 2014-08-04 tbazant: no xl equivalent
 <sect1 id="sec-xen-config-xenpaging">

  <title>Xenpaging</title>

  <para>
   &xen; 4.1 introduced <emphasis>xenpaging</emphasis>&mdash;an advanced way
   of &vmguest;s' memory management. Xenpaging allows memory over-commit
   where the total memory used by all running guests exceeds the amount of
   memory available on the host. It writes memory pages of a given guest to
   a file and moves the pages back to the pool of available memory. When the
   guest wants to access the paged-out memory, the page is read from the
   disk and placed into the guest's memory. This allows the sum of all
   running guests to use more memory than physically available on the host.
  </para>

  <para>
   To enable xenpaging for an already running &vmguest;, find the guest's ID
   with <command>xm list</command>. Change to a directory where you want to
   create the pagefile (<filename>/var/lib/xen/xenpaging/</filename>) and
   run the following command on &dom0;
  </para>

<screen>xenpaging 1 32768</screen>

  <para>
   where <literal>1</literal> is the ID of the guest you want to enable
   xenpaging for, and <literal>32768</literal> is the number of memory pages
   you want to save (32768 corresponds to 128&nbsp;MB pagefile).
  </para>

  <para>
   After rebooting the guest, its ID changes dynamically, and the current
   xenpaging binary has no target anymore. To automate restarting of
   xenpaging after a guest reboot, specify the number of pages in the guest
   configuration file in the <filename>/etc/xen/vm/</filename> directory:
  </para>

<screen>xenpaging=32768</screen>

  <para>
   Then redo the guest with <command>xm create
   /etc/xen/vm/&lt;vm_guest_name&gt;</command> to activate the changes.
  </para>
 </sect1>
 -->
 <sect1 xml:id="sec-xen-config-hvm">
  <title>HVM 機能</title>

  <para>&xen; 環境では、完全仮想化環境のドメインにのみ提供される機能が存在しています。これらは頻繁に使用するものではありませんが、環境によっては設定する必要があるかもしれません。</para>

  <sect2 xml:id="sec-xen-config-bootdevice">
   <title>起動時のブートローダ指定</title>
   <para>物理ハードウエアと同様に、 &vmguest; を通常使用するものとは異なる起動デバイスを使用する必要が生じることがあります。完全仮想化型のマシンであれば、ドメインの xl 設定ファイル内に <literal>boot</literal> パラメータを指定することで、起動に使用するデバイスを設定することができます:</para>
<screen>boot = <replaceable>起動デバイス</replaceable></screen>
   <para>ここで、 <replaceable>起動デバイス</replaceable> には、 <literal>c</literal> であればハードディスクを、 <literal>d</literal> であれば CD-ROM を、 <literal>n</literal> であればネットワーク (PXE) 起動を指定することになります。複数を指定した場合は、並んだ順に起動を試す動作になります。たとえば下記のようになります:</para>
<screen>boot = dc</screen>
   <para>上記の例は、 CD-ROM からの起動を試し、それがうまくいかない場合はハードディスクから起動しようとする設定になります。</para>
  </sect2>

  <sect2 xml:id="sec-xen-config-cpuid">
   <title>ゲスト向けの CPUID 変更</title>
   <para>一方の &vmhost; から他方の &vmhost; に &vmguest; を移行できるようにするには、両方の &vmhost; システムのいずれでも使用できる CPU 機能のみを提供するように設定する必要があります。つまり、両方の &vmhost; で実際に搭載されている CPU が異なる場合、 &vmguest; の起動時に、共通しない機能を隠蔽しておく必要があることになります。これにより、ホストを跨いで &vmguest; を移行できることになります。完全仮想化環境の場合、これは <literal>cpuid</literal> を設定することで実現することができます。</para>
   <para>現在搭載されている CPU の情報を取得するには、 <filename>/proc/cpuinfo</filename> ファイルをご覧ください。ここには現在の CPU に関する重要な情報が全て記載されています。</para>
   <para>CPU の再定義を行なうには、まず CPU の製造元が提供する CPUID の定義を参照しておく必要があります。これらはそれぞれ下記の箇所で公開されています (いずれも英語です):</para>
   <variablelist>
<!--taroth 2014-08-29:  daps linkcheck reported following link(s) as broken-->
<!--<varlistentry>
     <term>AMD</term>
     <listitem>
      <para>
       <ulink url="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25481.pdf"/>
      </para>
     </listitem>
    </varlistentry>-->
    <varlistentry>
     <term>Intel</term>
     <listitem>
      <para><link xlink:href="http://www.intel.com/Assets/PDF/appnote/241618.pdf"/></para>
     </listitem>
    </varlistentry>
   </variablelist>
<screen>cpuid = "host,tm=0,sse3=0"</screen>
   <para>書式はカンマ区切りで <replaceable>キー</replaceable>=<replaceable>値</replaceable> の形式で指定します。また、最初は必ず "host" と記述します。いくつかのキーには数値を指定しますが、残りのほとんどのキーには、機能ビットを操作するための 1 文字を記述します。 CPUID のキーについて、詳しくは <command>man 5 xl.cfg</command> をお読みください。また、下記の値を指定することで、対応するビットの指定を変えることができます:</para>
   <variablelist>
    <varlistentry>
     <term>1</term>
     <listitem>
      <para>対応するビットを <literal>1</literal> に強制します</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>0</term>
     <listitem>
      <para>対応するビットを <literal>0</literal> に強制します</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>x</term>
     <listitem>
      <para>既定のポリシーの値を使用します</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>k</term>
     <listitem>
      <para>ホスト側の値をそのまま使用します</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>s</term>
     <listitem>
      <para><literal>k</literal> と同様ですが、移行後も値を保持するようにします</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>なお、ビットは右から左に表記し、かつ <literal>0</literal> から始めます。</para>
  </sect2>

  <sect2 xml:id="sec-xen-config-pirqs">
   <title>PCI-IRQ 数の拡張</title>
   <para>&dom0; や &vmguest; に提供する PCI-IRQ の数を増やす必要がある場合、 &xen; カーネルのコマンドラインでそれを行なうことができます。 <command>extra_guest_irqs=</command> <replaceable>DOMU_IRGS,DOM0_IRGS</replaceable> の形式で指定してください。最初の値である <replaceable>DOMU_IRGS</replaceable> は、全ての &vmguest; に対する値を、 2 つめの値である <replaceable>DOM0_IRGS</replaceable> (カンマ区切り) は、 &dom0; に対する値とになります。なお、 &vmguest; の設定を変更しても、 &dom0; には何も影響しませんし、逆もまた然りです。たとえば &dom0; 側のみを変更したい場合は下記のように指定します:</para>
<screen>extra_guest_irqs=,512</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-xen-config-scheduling">
  <title>仮想 CD リーダ</title>
  <para>
   The &xen; hypervisor schedules virtual CPUs individually across physical
   CPUs.  With modern CPUs supporting multiple threads on each core, virtual
   CPUs can run on the same core in different threads and thus influence each
   other.  The performance of a virtual CPU running in one thread can be
   noticeably affected by what other virtual CPUs in other threads are doing.
   When these virtual CPUs belong to different guest systems, these guests can
   influence each other. The effect can vary, from variations in the guest CPU
   time accounting to worse scenarios such as <emphasis>side channel
    attack</emphasis>.
  </para>
  <para>
   <emphasis>Scheduling granularity</emphasis> addresses this problem. You can
   specify it at boot time by using a &xen; boot parameter:
  </para>
  <screen>boot = <replaceable>起動デバイス</replaceable></screen>
  <para>
   Replace <replaceable>GRANULARITY</replaceable> with one of:
  </para>
  <variablelist>
   <varlistentry>
    <term>cpu</term>
    <listitem>
     <para>
      The regular scheduling of the &xen; hypervisor. Virtual CPUs of different
      guests can share one physical CPU core. This is the default.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>core</term>
    <listitem>
     <para>
      Virtual CPUs of a virtual core are always scheduled together on one
      physical core. Two or more virtual CPUs from different virtual cores will
      never be scheduled on the same physical core.  Therefore, some physical
      cores may have some of their CPUs left idle, even if there are virtual
      CPUs wanting to run. The impact on performance will depend on the actual
      workload being run inside of the guest systems. In most of the analyzed
      cases, the observed performance degradation, especially if under
      considerable load, was smaller than disabling HyperThreading which leaves
      all the cores with just one thread (see the <option>smt</option> boot
      option at <link xlink:href="https://xenbits.xen.org/docs/unstable/misc/xen-command-line.html#smt-x86"/>).
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>socket</term>
    <listitem>
     <para>
      The granularity goes even higher to a CPU socket level.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
