<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-network-openvswitch">
 <title>&ovs; を利用したソフトウエア定義型ネットワーク</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>ソフトウエア定義型ネットワーク (Software-Defined Networking; SDN) とは、トラフィックの送受信を制御するシステム (<emphasis>制御プレーン</emphasis>) と、実際にトラフィックを配送するシステム (<emphasis>データプレーン</emphasis> もしくは <emphasis>転送プレーン</emphasis>) を分離する仕組みです。これにより、従来は単一で柔軟性に欠けるスイッチを、スイッチ (データプレーン) とコントローラ (制御プレーン) に分割できることになります。また、このモデルを使用すると、コントローラ側ではプログラム的な処理ができるようになりますので、非常に柔軟で構成変更にも素早く対応できる仕組みにすることができます。</para>

 <para>&ovs; は <!-- phrase to disable hyphenation: --> <phrase role="productname">OpenFlow</phrase> プロトコルとの互換性がある、分散型仮想マルチレイヤスイッチを実装するソフトウエアです。 <phrase role="productname">OpenFlow</phrase> では、コントローラアプリケーションに対してスイッチの設定変更を受け付けることができます。また <phrase role="productname">OpenFlow</phrase> は TCP プロトコル上で動作する仕組みで、様々なハードウエアやソフトウエア内にも実装されています。そのため、単一のコントローラから複数の様々なスイッチを扱うことができるようになります。</para>

 <sect2 xml:id="sec-network-openvswitch-advantage">
  <title>&ovs; の利点</title>
  <para>&ovs; でソフトウエア定義型ネットワークを利用すると、特に仮想マシンと併用する場合に様々な利点をもたらします:</para>
  <remark>
   Tried to create short version of this:
   https://github.com/openvswitch/ovs/blob/master/WHY-OVS.md
   - sknorr, 2015-09-30
  </remark>
  <itemizedlist>
   <listitem>
    <para>ネットワークの状態を簡単に識別できるようになります。</para>
   </listitem>
   <listitem>
    <para>ネットワークと現在の状態を、一方のホストから他方のホストに移動できるようになります。</para>
   </listitem>
   <listitem>
    <para>ネットワーク上での動作は追跡可能であり、外部のソフトウエアから応答することができます。</para>
   </listitem>
   <listitem>
    <para>ネットワークパケット内のタグを適用したり制御したりすることができますので、どのマシンが通信を行なっているのかを判別できるほか、他のネットワークとの関係を管理することもできます。タグ付けのルールは設定および移行することができます。</para>
    <remark>
     Feedback from Éric Bischoff: "[...] isn't that _how OVS works_, rather
     than _what OVS can do_?"
     =&gt; Added second sentence. It does ultimately seem like a feature to me,
       though. Leaving it in for the moment.
     - sknorr, 2015-10-15
    </remark>
   </listitem>
   <listitem>
    <para>&ovs; は GRE (<emphasis>汎用ルーティングカプセル化 (Generic Routing Encapsulation) </emphasis>  プロトコルに対応しています。そのため、たとえばプライベートな VM 同士を接続したりすることができるようになります。</para>
   </listitem>
   <listitem>
    <para>&ovs; は単独でも利用することができますが、ネットワークハードウエアと併用するように設計されていて、ハードウエアスイッチを制御することもできるようになっています。</para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="sec-network-openvswitch-install">
  <title>&ovs; のインストール</title>
  <procedure>
   <step>
    <para>&ovs; と各種補助パッケージをインストールします:</para>
<screen>&prompt.root;<command>zypper</command> install openvswitch openvswitch-switch</screen>
    <para>&ovs; と &kvm; ハイパーバイザを併用する場合は、 <package>tunctl</package> もインストールしてください。また、 &ovs; と &xen; ハイパーバイザを併用する場合は、 <package>openvswitch-kmp-xen</package> もインストールしてください。</para>
   </step>
   <step>
    <para>&ovs; サービスを有効化します:</para>
<screen>&prompt.root;<command>systemctl</command> enable openvswitch</screen>
<!-- Remark Marius Tomaschewski: Unfortunately, there is also a
     script link called "rcopenvswitch-switch" which you should never use, as
     it conflicts with "openvswitch.service" and breaks everything. See
     bsc#935912. -->
   </step>
   <step>
    <para>コンピュータを再起動するか、もしくは <command>systemctl</command> コマンドで &ovs; サービスを即時に起動します:</para>
<screen>&prompt.root;<command>systemctl</command> start openvswitch</screen>
   </step>
   <step>
    <para>&ovs; が正しく有効化されているかどうかを確認するには、下記のコマンドを実行します:</para>
<screen>&prompt.root;<command>systemctl</command> status openvswitch</screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-network-openvswitch-userspace">
  <title>&ovs; デーモンとユーティリティの概要</title>
  <para>&ovs; は複数のコンポーネントから構成されています。カーネルモジュールのほか、様々なユーザスペースコンポーネントが用意されています。カーネルモジュールはデータパスの高速化のために用意されているものですが、最小限の &ovs; インストールでは必ずしも必要なものではありません。</para>
  <sect3 xml:id="sec-network-openvswitch-daemon">
   <title>デーモン</title>
   <para>&ovs; の中枢は 2 つのデーモンから構成されています。 <systemitem>openvswitch</systemitem> サービスを起動すると、それら 2 つを間接的に起動することになります。</para>
   <para>メインの &ovs; デーモン ( <command>ovs-vswitchd</command> ) は、スイッチの実装を提供するデーモンです。もう 1 つの &ovs; データベースデーモン ( <command>ovsdb-server</command> ) は、 &ovs; の設定と状態を保存するデータベース機能を提供します。</para>
  </sect3>
  <sect3 xml:id="sec-network-openvswitch-utility">
   <title>ユーティリティ</title>
   <para>&ovs; には様々な作業を支援するための各種ユーティリティが用意されています。下記のユーティリティ一覧が全てではありませんが、主要なコマンドのみについて説明を記しています。</para>
<!-- Some entries are commented out. These (very subjectively) seemed to be
   less important. - sknorr, 2015-10-12 -->
   <variablelist xml:id="vl-ovs-utility">
    <varlistentry>
     <term><command>ovsdb-tool</command></term>
     <listitem>
      <para>&ovs; のデータベースを作成／アップグレード／整理／問い合わせすることができるユーティリティです。 &ovs; データベースでトランザクション処理を行ないます。</para>
     </listitem>
    </varlistentry>
<!-- <varlistentry>
     <term><command>ovsdb-client</command></term>
     <listitem>
      <para>
       Retrieve lists of databases itself and their tables, rows, and columns.
       Monitor the contents of a database.
       Do a transaction on a database.
      </para>
     </listitem>
    </varlistentry> -->
    <varlistentry>
     <term><command>ovs-appctl</command></term>
     <listitem>
      <para><command>ovs-vswitchd</command> や <command>ovsdb-server</command> デーモンの設定を行ないます。</para>
     </listitem>
    </varlistentry>
<!-- <varlistentry>
     <term><command>ovs-benchmark</command></term>
     <listitem>
      <para>
       Test latency and throughput of a flow setup.
       <remark>
        Flow setup is what exactly? This comes from the man page. - sknorr,
        2015-09-30
       </remark>
      </para>
     </listitem>
    </varlistentry> -->
<!-- <varlistentry>
     <term><command>ovs-bugtool</command></term>
     <listitem>
      <para>
       Report a bug in &ovs;.
      </para>
     </listitem>
    </varlistentry> -->
    <varlistentry>
     <term><command>ovs-dpctl</command> , <command>ovs-dpctl-top</command></term>
     <listitem>
      <para>データパスの作成や修正、可視化や削除などを行ないます。このツールを使用することで、 <command>ovs-vswitchd</command> の設定を行なうことができるほか、データパスの管理も行なうことができます。そのため、通常は分析目的でのみ使用します。</para>
      <para><command>ovs-dpctl-top</command> は <command>top</command> コマンドのような出力をするユーティリティで、データパスの可視化を行なうことができます。 <remark>Is visualize/ation the right word? - sknorr, 2015-09-30</remark></para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>ovs-ofctl</command></term>
     <listitem>
      <para><phrase role="productname">OpenFlow</phrase> プロトコルに準拠する任意のスイッチを管理します。 <command>ovs-ofctl</command> は &ovs; を取り扱うだけではありません。</para>
     </listitem>
    </varlistentry>
<!-- <varlistentry>
     <term><command>ovs-pcap</command></term>
     <listitem>
      <para>
       Create a hexadecimal representation of a captured network package
       in the PCAP format.
       This can then be used to trace how a particular package would travel.
      </para>
     </listitem>
    </varlistentry> -->
<!--<varlistentry>
     <term><command>ovs-parse-backtrace</command></term>
     <listitem>
      <para>
       Create a more readable version of backtraces from
       <command>ovs-appctl backtrace</command>.
      </para>
     </listitem>
    </varlistentry> -->
<!-- <varlistentry>
     <term><command>ovs-tcpundump</command></term>
     <listitem>
      <para>
       Create a hexadecimal representation of the output of
       <command>tcpdump</command>.
       This can then be used to trace how a stream of packages would travel.
      </para>
     </listitem>
    </varlistentry> -->
<!-- <varlistentry>
     <term><command>ovs-vlan-bug-workaround</command></term>
     <listitem>
      <para>
       Some device drivers have a buggy implementation of VLAN acceleration.
       Use this utility to work around such bugs.
      </para>
     </listitem>
    </varlistentry> -->
    <varlistentry>
     <term><command>ovs-vsctl</command></term>
     <listitem>
      <para>設定データベースに対する高レベルなインターフェイスを提供するユーティリティです。データベースへの問い合わせや、データベースの修正を行なうことができます。実際には <command>ovs-vswitchd</command> の状態の表示や設定などを行なうことになります。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
 </sect2>

 <sect2 xml:id="sec-network-openvswitch-bridge">
  <title>&ovs; を利用したブリッジの作成</title>
  <para>下記の設定例では、 &productname; の既定のネットワークサービスである Wicked を使用しています。 Wicked についての詳細は、 <xref linkend="sec-network-manconf"/> をお読みください。</para>
  <para>&ovs; をインストールして起動してある状態から、下記のようにして行ないます:</para>
  <procedure>
   <step>
    <para>お使いの仮想マシンで使用するブリッジを作成するには、まず下記のような内容で設定ファイルを作成します:</para>
<screen>STARTMODE='auto'<co xml:id="ovs-ifcfg-mode"/>
BOOTPROTO='dhcp'<co xml:id="ovs-ifcfg-protocol"/>
OVS_BRIDGE='yes'<co xml:id="ovs-ifcfg-bridge"/>
OVS_BRIDGE_PORT_DEVICE_1='<replaceable>eth0</replaceable>'<co xml:id="ovs-ifcfg-port"/></screen>
    <calloutlist>
     <callout arearefs="ovs-ifcfg-mode">
      <para>ネットワークサービスの起動時にブリッジを自動作成します。</para>
     </callout>
     <callout arearefs="ovs-ifcfg-protocol">
      <para>IP アドレスを設定するためのプロトコルの指定です。</para>
     </callout>
     <callout arearefs="ovs-ifcfg-bridge">
      <para>&ovs; のブリッジとして使用する設定です。</para>
     </callout>
     <callout arearefs="ovs-ifcfg-port">
      <para>ブリッジに追加すべきデバイスです。複数のデバイスを追加する場合は、下記の書式で行を追加していってください:</para>
<screen>OVS_BRIDGE_PORT_DEVICE_<replaceable>サフィックス</replaceable>='<replaceable>デバイス</replaceable>'</screen>
      <para><replaceable>サフィックス</replaceable> には任意の英数字が入ります。ただし、 <replaceable>サフィックス</replaceable> の値は重複させないでください。</para>
     </callout>
    </calloutlist>
    <para><filename>/etc/sysconfig/network</filename> 内に、 <filename>ifcfg-br0</filename> というファイル名で保存します。 <replaceable>br0</replaceable> の箇所には、任意の名前を指定してかまいません。ただし、 <literal>ifcfg-</literal> の部分は変えないでください。</para>
    <para>オプション類について、詳しくは <literal>ifcfg</literal> のマニュアルページ ( <command>man 5 ifcfg</command> ) および <literal>ifcfg-ovs-bridge</literal> のマニュアルページ ( <command>man 5 ifcfg-ovs-bridge</command> ) をお読みください。</para>
   </step>
   <step>
    <para>あとはブリッジを起動します: <remark>"Start" is weird - sknorr, 2015-10-26</remark></para>
<screen>&prompt.root;<command>wicked</command> ifup <replaceable>br0</replaceable></screen>
    <para>Wicked の処理が完了するとブリッジの名前が表示され、 <literal>up</literal> という動作中を示すメッセージが表示されます。</para>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-network-openvswitch-kvm">
  <title>&kvm; による &ovs; の直接使用</title>
  <para><xref linkend="sec-network-openvswitch-bridge"/> に示す手順でブリッジを作成したら、あとは &ovs; を使用して &kvm; や &qemu; の仮想マシンのネットワークアクセスを管理します。</para>
  <procedure>
   <step>
    <para>Wicked の機能を最大限に生かすため、作成したブリッジの設定を一部変更します。作成した <filename>/etc/sysconfig/network/ifcfg-br0</filename> ファイルを開いて、下記のような行を追加します:</para>
<screen>OVS_BRIDGE_PORT_DEVICE_2='<replaceable>tap0</replaceable>'</screen>
    <para>また、 <literal>BOOTPROTO</literal> を <literal>none</literal> に設定します。たとえば下記のようになります:</para>
<screen>STARTMODE='auto'
BOOTPROTO='none'
OVS_BRIDGE='yes'
OVS_BRIDGE_PORT_DEVICE_1='<replaceable>eth0</replaceable>'
OVS_BRIDGE_PORT_DEVICE_2='<replaceable>tap0</replaceable>'</screen>
    <para>新しいインターフェイス <replaceable>tap0</replaceable> は、次の手順で設定を行ないます。</para>
   </step>
   <step>
    <para><replaceable>tap0</replaceable> デバイスに対する設定ファイルを追加します:</para>
<screen>STARTMODE='auto'
BOOTPROTO='none'
TUNNEL='tap'</screen>
    <para>上記の内容を記述したファイルを、 <filename>/etc/sysconfig/network</filename> ディレクトリ内の <filename>ifcfg-tap0</filename> というファイル名に保存します。</para>
    <tip>
     <title>他のユーザからの TAP デバイスへのアクセス許可</title>
     <para>&rootuser; 以外のユーザで起動した仮想マシンから、 TAP デバイスを使用できるようにするには、下記のような行を追加します:</para>
<screen>TUNNEL_SET_OWNER=<replaceable>ユーザ名</replaceable></screen>
     <para>グループ全体に対してアクセスを許可するには、下記のような行を追加します:</para>
<screen>TUNNEL_SET_GROUP=<replaceable>グループ名</replaceable></screen>
    </tip>
   </step>
   <step>
    <para>最後に、 <literal>OVS_BRIDGE_PORT_DEVICE</literal> の最初の行に設定したデバイスに対する設定を開きます。今回の例では <literal>eth0</literal> になります。 <filename>/etc/sysconfig/network/ifcfg-eth0</filename> ファイルを開いて、下記のオプションを設定します:</para>
<screen>STARTMODE='auto'
BOOTPROTO='none'</screen>
    <para>ファイルが存在していない場合は、新しく作成してください。</para>
   </step>
   <step>
    <para>あとは Wicked を利用してブリッジインターフェイスを再起動します:</para>
<screen>&prompt.root;<command>wicked</command> ifreload <replaceable>br0</replaceable></screen>
    <para>これにより、新しく設定したブリッジポートデバイスについても、再読み込みが行なわれます。</para>
   </step>
   <step>
    <para>仮想マシンを起動するには、たとえば下記のように実行します:</para>
<screen>&prompt.root;<command>qemu-kvm</command> \
-drive file=<replaceable>ディスクイメージのパス</replaceable><co xml:id="co-ovs-pathimage"/> \
-m 512 -net nic,vlan=0,macaddr=00:11:22:EE:EE:EE \
-net tap,ifname=<replaceable>tap0</replaceable>,script=no,downscript=no<co xml:id="co-ovs-tapdevice"/></screen>
    <calloutlist>
     <callout arearefs="co-ovs-pathimage">
      <para>起動したい &qemu; ディスクイメージのパスを指定します。</para>
     </callout>
     <callout arearefs="co-ovs-tapdevice">
      <para>上記で作成した TAP デバイス ( <literal>tap0</literal> ) を指定します。</para>
     </callout>
    </calloutlist>
    <para>&kvm;/&qemu; での使用方法について、詳しくは <xref linkend="part-virt-qemu"/> をお読みください。</para>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-network-openvswitch-libvirt">
  <title>&libvirt; での &ovs; の使用</title>
  <para><xref linkend="sec-network-openvswitch-bridge"/> に示す手順でブリッジを作成したら、 &libvirt; で管理されている既存の仮想マシンをブリッジに追加することができるようになります。 &libvirt; には &ovs; ブリッジのサポートが既に含まれているため、 <xref linkend="sec-network-openvswitch-bridge"/> でブリッジを作成すれば、あとは特殊な変更を行なうことなくブリッジを使用できるようになります。</para>
  <procedure>
   <step>
    <para>設定を行ないたい仮想マシンのドメイン XML ファイルを開きます:</para>
<screen>&prompt.root;<command>virsh</command> edit <replaceable>VM_名</replaceable></screen>
    <para><replaceable>VM_名</replaceable> の欄には、仮想マシンの名前を指定します。これにより、既定のテキストエディタが開きます。</para>
   </step>
   <step>
    <para><literal>&lt;interface type="..."&gt;</literal> で始まり、 <literal>&lt;/interface&gt;</literal> で終わるネットワークセクションを探します。</para>
    <para>ネットワークセクション内の下記の箇所を、下記のように変更します:</para>
<screen>&lt;interface type='bridge'&gt;
  &lt;source bridge='br0'/&gt;
  &lt;virtualport type='openvswitch'/&gt;
&lt;/interface&gt;</screen>
    <important>
     <title><command>virsh iface-*</command> と &ovs; の &vmm; との互換性について</title>
     <para>現時点では、 &libvirt; での &ovs; の互換性は <command>virsh iface-*</command> ツールや &vmm; を介しては開示されていません。これらのツールを使用してしまうと、設定が壊れてしまうことがあります。</para>
    </important>
   </step>
   <step>
    <para>後は通常通り仮想マシンを起動もしくは再起動します。</para>
   </step>
  </procedure>
  <para>&libvirt; の使用方法についての詳細は、 <xref linkend="part-virt-libvirt"/> をお読みください。</para>
 </sect2>

 <sect2 xml:id="sec-network-openvswitch-more">
  <title>さらなる情報</title>
  <variablelist>
   <varlistentry>
    <term><link xlink:href="https://openvswitch.org/support/"/></term>
    <listitem>
     <para>&ovs; プロジェクトの Web サイトのドキュメンテーションセクション</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><link xlink:href="https://www.opennetworking.org/images/stories/downloads/sdn-resources/white-papers/wp-sdn-newnorm.pdf"/></term>
    <listitem>
     <para>ソフトウエア定義型ネットワークと <phrase role="productname">OpenFlow</phrase> プロトコルに関する Open Networking Foundation によるホワイトペーパー</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>
