<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-audit-setup">
 <title>Linux 監査フレームワークの設定</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>本章では、シンプルな監査環境を構築するまでの説明を行っています。各手順には設定や監査の有効化に関する詳細な説明が含まれています。下記の内容を学習したあとは、 <xref linkend="cha-audit-scenarios"/> に示されている実際の例に読み進めてください。</para>
 <para>&productname; で監査を設定するには、下記の手順を踏む必要があります:</para>
 <procedure>
  <title>Linux 監査フレームワークの設定</title>
  <step>
   <para>まずは必要なパッケージが全てインストールされていることを確認します。必要なパッケージは <systemitem class="resource">audit</systemitem> , <systemitem class="resource">audit-libs</systemitem> の各パッケージで、必要であれば <systemitem class="resource">audit-libs-python</systemitem> もインストールします。また、 <xref linkend="sec-audit-viz"/> で説明しているログの可視化機能が必要である場合は、 <systemitem class="resource">gnuplot</systemitem> と <systemitem class="resource">graphviz</systemitem> の各パッケージもインストールしてください。いずれも &productname; のメディア内に同梱されています。</para>
  </step>
  <step>
   <para>監査対象のコンポーネントを決定します。詳しくは <xref linkend="sec-audit-choose"/> をお読みください。</para>
  </step>
  <step>
   <para>基本的な監査デーモンの設定を確認し、必要であれば修正します。詳しくは <xref linkend="sec-audit-config"/> をお読みください。</para>
  </step>
  <step>
   <para>システムコールに対する監査を有効化します。詳しくは <xref linkend="sec-audit-syscall"/> をお読みください。</para>
  </step>
  <step>
   <para>お使いの目的にあわせて監査ルールを構築します。詳しくは <xref linkend="sec-audit-aurules"/> をお読みください。</para>
  </step>
  <step>
   <para>ログを生成し、目的にあったレポートを設定します。詳しくは <xref linkend="sec-audit-aurepo"/> をお読みください。</para>
  </step>
  <step>
   <para>必要であれば、ログの可視化を行います。詳しくは <xref linkend="sec-audit-viz"/> をお読みください。</para>
  </step>
 </procedure>
 <important>
  <title>監査デーモンの制御について</title>
  <para>監査システムのコンポーネントの設定を行う場合は、あらかじめ &rootuser; で <command>systemctl status auditd</command> を実行し、監査デーモンが動作していないことを確認してください。既定の &productname; では監査システムがシステムの起動時に動作するように設定されてしまっていますので、 <command>systemctl stop auditd</command> を実行して停止させる必要があります。設定が完了したら、 <command>systemctl start auditd</command> を実行して監査デーモンを開始してください。</para>
 </important>
 <sect1 xml:id="sec-audit-choose">
  <title>監査対象のコンポーネントの決定</title>

  <para>独自の監査設定を作成する前に、まずはどの程度監査するのかを決定する必要があります。下記の一般的な判断基準を利用して、用途や環境に合わせたコンポーネントを選択してください:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>CAPP/EAL 認証を取るために完全なセキュリティ監査を行う必要がある場合は、システムコールに対して完全な監査を行い、様々なファイルやディレクトリに対して監視を設定してください。ルールセットは <xref linkend="cha-audit-scenarios"/> に示されているものをベースにすることができます。</para>
   </listitem>
   <listitem>
    <para>監査ルールをベースにしたプロセス追跡を行う必要がある場合は、 <command>autrace</command> を使用します。</para>
   </listitem>
   <listitem>
    <para>重要なデータや機密データを含むファイルやディレクトリに対するアクセスを追跡し、監視したい場合は、これらの要件に沿ったルールセットを作成する必要があります。 <xref linkend="sec-audit-syscall"/> に示されている手順で監査を有効化し、その後 <xref linkend="sec-audit-aurules"/> に進んでください。</para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-audit-config">
  <title>監査デーモンの設定</title>

  <para>監査デーモンの基本的な設定は、 <filename>/etc/audit/auditd.conf</filename> ファイルの編集で行うことができます。 <menuchoice> <guimenu>&yast;</guimenu> <guimenu>セキュリティとユーザ</guimenu> <guimenu>Linux 監査フレームワーク (LAF)</guimenu> </menuchoice> を選択することで、 &yast; から基本設定を行うこともできます。 &yast; から設定を行う場合は、 <guimenu>ログファイル</guimenu> と <guimenu>ディスク容量</guimenu> の各タブを使用してください。</para>

<screen>log_file = /var/log/audit/audit.log
log_format = RAW
log_group = root
priority_boost = 4
flush = INCREMENTAL
freq = 20
num_logs = 5
disp_qos = lossy
dispatcher = /sbin/audispd
name_format = NONE
##name = mydomain
max_log_file = 6
max_log_file_action = ROTATE
space_left = 75
space_left_action = SYSLOG
action_mail_acct = root
admin_space_left = 50
admin_space_left_action = SUSPEND
disk_full_action = SUSPEND
disk_error_action = SUSPEND
##tcp_listen_port =
tcp_listen_queue = 5
tcp_max_per_addr = 1
##tcp_client_ports = 1024-65535
tcp_client_max_idle = 0
cp_client_max_idle = 0</screen>

  <para>多くの環境では既定の設定で問題なく動作します。ただし、 <literal>num_logs</literal> , <literal>max_log_file</literal> , <literal>space_left</literal> , <literal>admin_space_left</literal> などの各値については、お使いの環境のサイズに合わせて調整してください。ディスク領域が少ない場合は、ローテーション時に保持しておく古いログファイルの数を減らしたり、ディスク領域が残り少なくなった場合により早く警告を得られるよう設定を行ってください。 CAPP 準拠の設定を行う場合は、 <xref linkend="sec-audit-auditd"/> で説明しているとおりに <literal>log_file</literal> , <literal>flush</literal> , <literal>max_log_file</literal> , <literal>max_log_file_action</literal> , <literal>space_left</literal> , <literal>space_left_action</literal> , <literal>admin_space_left</literal> , <literal>admin_space_left_action</literal> , <literal>disk_full_action</literal> , <literal>disk_error_action</literal> の設定を変更してください。 CAPP 準拠の設定は、たとえば下記のようになります:</para>

<screen>log_file = <replaceable>監査ログ記録専用のパーティションのパス</replaceable>/audit.log
log_format = RAW
priority_boost = 4
flush = SYNC                       ### DATA でもかまいません
freq = 20
num_logs = 4
dispatcher = /sbin/audispd
disp_qos = lossy
max_log_file = 5
max_log_file_action = KEEP_LOGS
space_left = 75
space_left_action = EMAIL
action_mail_acct = root
admin_space_left = 50
admin_space_left_action = SINGLE   ### HALT でもかまいません
disk_full_action = SUSPEND         ### HALT でもかまいません
disk_error_action = SUSPEND        ### HALT でもかまいません</screen>

  <para><literal>###</literal> 以降はコメントで、その他の選択肢を説明しているものです。実際の設定ファイル内には、このようなコメントは追加しないでください。</para>

  <tip>
   <title>さらなる情報</title>
   <para><filename>auditd.conf</filename> の設定パラメータについて、背景となる詳細情報を読みたい場合は、 <xref linkend="sec-audit-auditd"/> を参照してください。</para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-audit-syscall">
  <title>システムコールに対する監査の有効化</title>

  <para>監査フレームワークがインストールされていない場合は、まず <systemitem>audit</systemitem> をインストールしてください。標準的な &productname; システムでは、 auditd が既定で <!-- NOTE: is "not have auditd running by default" true? it seems to be running in Leap 15.0... --> 動作しています。システムの起動時に開始するよう設定されていない場合は、下記のようにして有効化してください:</para>

<screen>&prompt.sudo;systemctl enable auditd</screen>

  <para>利用可能な監査機能には、下記のものがあります:</para>

  <variablelist>
   <varlistentry>
    <term>基本的なログ機能</term>
    <listitem>
     <para>&productname; の標準状態 (特に何も設定を行っていない状態) では、 auditd は <filename>/var/log/audit/audit.log</filename> に対する設定変更のイベントのみを記録します。また、カーネルの監査コンポーネントは、 <command>auditctl</command> で制御を行わない限り、ファイルアクセスやシステムコールなどのイベントも生成しません。しかしながら、その他のカーネルコンポーネントやモジュールが、 <command>auditctl</command> の制御範囲外で監査イベントを生成し、監査ログ内に現れることがあります。既定では、 &aa; モジュールのみが監査イベントを生成します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>システムコールを監査する高度なログ機能</term>
    <listitem>
     <para>システムコールを監視し、意味のあるファイル監視を実施したい場合は、システムコールに対する監査コンテキストを有効化する必要があります。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>通常のファイルやディレクトリを監視するよう設定している場合で、システムコールの監査機能も必要とする場合は、システムコールに対する監査コンテキストを有効化する必要があります。システムを再起動するまでの間にのみ監査コンテキストを有効化したい場合は、 &rootuser; で <command>auditctl -e 1</command> と入力して実行します。また、この機能を無効化したい場合は、同様に &rootuser; で <command>auditctl -e 0</command> と入力して実行します。</para>

  <para>監査コンテキストは既定で有効化されています。この機能を一時的に無効化したい場合は、 <command>auditctl -e 0</command> と入力して実行してください。</para>
 </sect1>
 <sect1 xml:id="sec-audit-aurules">
  <title>監査ルールの設定</title>

  <para>監査ルールを使用することで、監査システムがシステムのどの部分を分析するのかを決定することになります。通常は重要なデータベースやセキュリティに関連する設定ファイルを監視の対象とします。お使いのシステムに幅広い分析が必要である場合は、様々なシステムコールを分析することもあります。 CAPP 準拠の環境下で必要となるほとんどのルールを網羅する、詳細な設定例は <xref linkend="cha-audit-scenarios"/> に示されています。</para>

  <para>監査ルールはコマンドラインツールである <command>auditctl</command> を利用することで、監査デーモンに渡すことができるほか、 <filename>/etc/audit/audit.rules</filename> 内にルールセットを記述することでも構成することができます (この場合、監査デーモンの起動時に読み込まれます) 。 <filename>/etc/audit/audit.rules</filename> ファイルはエディタで編集することができるほか、 &yast; でカスタマイズすることもできます。 &yast; でカスタマイズする場合は、 <menuchoice> <guimenu>セキュリティとユーザ</guimenu> <guimenu>Linux 監査フレームワーク (LAF)</guimenu> <guimenu>「auditctl」 のルール</guimenu> </menuchoice> から行ってください。なお、コマンドラインで渡されたルールはファイルに保存されたりすることがありませんので、監査デーモンを再起動するたびに再入力を行う必要があります。</para>

  <para>いくつかの主要なファイルとディレクトリに対して、非常に基本的に設定のみを行ったシンプルなルールセットは下記のとおりです:</para>

<screen># 基本的な監査システムのパラメータ
-D
-b 8192
-f 1
-e 1

# ファイルやディレクトリの監視 (キー機能付き)
-w /var/log/audit/ -k LOG_audit
-w /etc/audit/auditd.conf -k CFG_audit_conf -p rxwa
-w /etc/audit/audit.rules -k CFG_audit_rules -p rxwa

-w /etc/passwd -k CFG_passwd -p rwxa
-w /etc/sysconfig/ -k CFG_sysconfig

# システムコールルールの例
-a entry,always -S umask

### 以下に独自のルールを追加してください</screen>

  <para>基本的な監査システムのパラメータ (たとえば <literal>-b</literal> で指定することのできるバックログパラメータなど) を変更する場合は、あらかじめ実際の監査ルールセットで問題がないかどうかをテストしておいてください。たとえば <literal>-b</literal> であれば、現在の監査ルールセットで生成されるログの量に対して、バックログの値が適切なレベルかどうかを確認する必要があります。選択したバックログの値が小さすぎる場合は、お使いのシステムが監査の負荷に耐えられないことがありますので、バックログ制限を超過することで失敗フラグ ( <literal>-f</literal> ) が設定されてしまうことがあります。</para>

  <important>
   <title>失敗フラグの選択について</title>
   <para>失敗フラグを設定する場合、 <option>-f 2</option> はお使いの監査システムに対する制限を超過した場合、システムを即時にシャットダウンさせる設定であり、ディスクに未書き込みのデータが存在していても、それを書き込まずにシャットダウンさせてしまうことに注意してください。この方式によるシャットダウンは正常終了ではありませんので、セキュリティを最重視するシステムにのみ使用するものとし、通常は <option>-f 1</option> を設定して、警告を発して監査システムを停止させるだけの処理に留めてください。これにより、データの損失や破壊などを防ぐことができます。</para>
  </important>

  <para>ディレクトリに対する監視は、そのディレクトリ内にあるファイルに対する監視に比べると、冗長性に欠ける出力になります。たとえば <filename>/etc/sysconfig</filename> ディレクトリ内にあるシステム設定ファイルに対して、詳細なログを採取したい場合は、各ファイルに対して監視を設定してください。ただし、監査ルールではグロブ (ワイルドカード) を使用することができないことに注意してください。たとえば <filename>/etc</filename> ディレクトリ内のファイルやディレクトリを監視する目的で、 <literal>-w /etc/*</literal> のようなルールを作成しても、正しく動作しません。</para>

  <para>ログファイル内での識別を行う目的で、ファイルやディレクトリに対する監視にキーを設定することができます。キーを使用することで、特定のルールに関連するイベントを容易に取り出すことができるようになります。また、キーを設定する場合は、単なるログファイルの監視と設定ファイルの監視を区別して設定することをお勧めします。この場合、 <literal>LOG</literal> で始まるキーをログファイル監視用に、 <literal>CFG</literal> で始まるキーを設定ファイル監視用に使用しています。それ以外にも、キーの一部をファイル名と同じに設定しておくと、ログファイル内で必要な項目を簡単に見つけられるようになります。</para>

  <remark>jsegitz 2014-07-23: this isn't a good suggestion IMHO since it can
be queried with -w anyway</remark>

  <para>また、ファイルやディレクトリの作成に対する監視に対してもう 1 つ注意しておくべき点として、ルールの作成時に存在していないファイルに対しては、監視を設定することができないという点です。監査システムが動作している間にシステムに追加されたファイルは、そのファイルに対して後からルールセットに追加しない限り、監視することができません。</para>

  <para>なお、独自のルールの作成方法について、詳しくは <xref linkend="sec-audit-rules"/> をお読みください。</para>

  <important>
   <title>監査ルールの変更について</title>
   <para>監査ルールを変更した後は、変更点を読み込ませるため、 <command>systemctl restart auditd</command> と入力して実行し、監査デーモンを再起動してください。</para>
<!-- 2011-08-25 toba: Stave Grubb has it that there is no need to stop the
       daemon before making changes to the rules.
   <para>
    Never change audit rules in a running audit system. Always stop the
    audit daemon with <command>systemctl stop auditd</command> before touching the
    audit configuration and reread the audit configuration by restarting the
    daemon with <command>systemctl start auditd</command>.
   </para>
   -->
  </important>
 </sect1>
 <sect1 xml:id="sec-audit-aurepo">
  <title>監査レポートの設定</title>

  <para>未加工の監査ログを読んでお使いのシステムの動作を確認するような面倒な事態を避けるため、時間範囲を指定して独自の監査レポートを作成し、手間を省くことをお勧めします。独自の監査レポートを読むことで、注目したい範囲を絞り込むことができるほか、お使いのシステムの特徴を統計から取得し、更に細かいイベント監視の基礎資料とすることができるようになります。さらに細かく個別のイベントの詳細を追跡したい場合は、 ausearch ツールをお使いください。</para>

  <para>監査レポート機能を設定する前に、まずは下記を考慮しておくことをお勧めします:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>どのような種類のイベントに対して定期的なレポートを生成し、監視を行うのか？... <xref linkend="sec-audit-aureport-gen"/> で説明している aureport の使用方法を参照して、適切なコマンドラインを作成してください。</para>
   </listitem>
   <listitem>
    <para>監査レポートで何をするのか？ ... 蓄積されたデータからグラフを作成するのか、それとも表計算やデータベースシステムなどに取り込んで利用するのか、などです。レポートを可視化したい場合は、 <xref linkend="sec-audit-viz"/> での例などを参考にして、 aureport のコマンドラインを設定し、処理を進めてください。</para>
   </listitem>
   <listitem>
    <para>レポートの作成間隔とタイミングをどうするのか？ ... cron 等を利用して適切な自動化を構成してください。</para>
   </listitem>
  </itemizedlist>

  <para>この例では、監査システムや PAM 、システムの設定へのアクセス試行に対して監査を行う想定でレポートを作成しています。お使いのシステム内のファイルイベントに関するレポートを作成するには、下記の手順で行います:</para>

  <procedure>
   <step>
    <para>全てのイベントに対して完全な概要レポートを生成していて、何らかの異常が存在していないかどうかを調べたい場合は、 <quote>failed syscalls</quote> の箇所をご確認ください。この失敗は、許可のないファイルに対するアクセスのほか、存在していないファイルに対するアクセスなどが含まれるためです:</para>
  <screen>&prompt.sudo;<command>aureport</command>

Summary Report
======================
Range of time in logs: 2009年02月03日 14:13:38.225 - 2009年02月17日 16:30:10.352
Selected time for report: 2009年02月03日 14:13:38 - 2009年02月17日 16:30:10.352
Number of changes in configuration: 24
Number of changes to accounts, groups, or roles: 0
Number of logins: 9
Number of failed logins: 15
Number of authentications: 19
Number of failed authentications: 578
Number of users: 3
Number of terminals: 15
Number of host names: 4
Number of executables: 20
Number of files: 279
Number of AVC's: 0
Number of MAC events: 0
Number of failed syscalls: 994
Number of anomaly events: 0
Number of responses to anomaly events: 0
Number of crypto events: 0
Number of keys: 2
Number of process IDs: 1238
Number of events: 5435</screen>
   </step>
   <step>
    <para>さらに失敗イベントに対する概要レポートを作成する (<option>--failed</option>) と、 <quote>files</quote> 内にファイルアクセスの失敗数が表示されるようになります:</para>
<screen>&prompt.sudo;<command>aureport</command> <option>--failed</option>

Failed Summary Report
======================
Range of time in logs: 2009年02月03日 14:13:38.225 - 2009年02月17日 16:30:10.352
Selected time for report: 2009年02月03日 14:13:38 - 2009年02月17日 16:30:10.352
Number of changes in configuration: 0
Number of changes to accounts, groups, or roles: 0
Number of logins: 0
Number of failed logins: 15
Number of authentications: 0
Number of failed authentications: 578
Number of users: 1
Number of terminals: 7
Number of host names: 4
Number of executables: 12
Number of files: 77
Number of AVC's: 0
Number of MAC events: 0
Number of failed syscalls: 994
Number of anomaly events: 0
Number of responses to anomaly events: 0
Number of crypto events: 0
Number of keys: 2
Number of process IDs: 713
Number of events: 1589</screen>
   </step>
   <step>
    <para>アクセスのできなかったファイルを一覧表示したい場合は、さらにファイルイベントに限定してレポートを作成します:</para>
<screen>&prompt.sudo;<command>aureport</command> <option>-f -i --failed --summary</option>

Failed File Summary Report
===========================
total  file
===========================
80  /var
80  spool
80  cron
80  lastrun
46  /usr/lib/locale/en_GB.UTF-8/LC_CTYPE
45  /usr/lib/locale/locale-archive
38  /usr/lib/locale/en_GB.UTF-8/LC_IDENTIFICATION
38  /usr/lib/locale/en_GB.UTF-8/LC_MEASUREMENT
38  /usr/lib/locale/en_GB.UTF-8/LC_TELEPHONE
38  /usr/lib/locale/en_GB.UTF-8/LC_ADDRESS
38  /usr/lib/locale/en_GB.UTF-8/LC_NAME
38  /usr/lib/locale/en_GB.UTF-8/LC_PAPER
38  /usr/lib/locale/en_GB.UTF-8/LC_MESSAGES
38  /usr/lib/locale/en_GB.UTF-8/LC_MONETARY
38  /usr/lib/locale/en_GB.UTF-8/LC_COLLATE
38  /usr/lib/locale/en_GB.UTF-8/LC_TIME
38  /usr/lib/locale/en_GB.UTF-8/LC_NUMERIC
8  /etc/magic.mgc
...</screen>
    <para><filename>/etc/audit/auditd.conf</filename> , <filename>/etc/pam.d</filename> , <filename>/etc/sysconfig</filename> など、特定のファイルやディレクトリに対してレポートを作成したい場合は、下記のようなコマンドを実行します:</para>
<screen>&prompt.sudo;<command>aureport -f -i --failed --summary |grep -e "/etc/audit/auditd.conf" -e "/etc/pam.d/" -e "/etc/sysconfig"</command>

1  /etc/sysconfig/displaymanager</screen>
   </step>
   <step>
    <para>上記の概要レポートを読むことで、ようやくログファイルの中から調査対象を絞り込むことができました。あとはさらに詳しく調べるため、イベント ID を取得します:</para>
<screen>&prompt.sudo;<command>aureport -f -i --failed |grep -e "/etc/audit/auditd.conf" -e "/etc/pam.d/" -e "/etc/sysconfig"</command>

993. 2009年02月17日 16:47:34 /etc/sysconfig/displaymanager readlink no /bin/vim-normal root 7887
994. 2009年02月17日 16:48:23 /etc/sysconfig/displaymanager getxattr no /bin/vim-normal root 7889</screen>
   </step>
   <step>
    <para>あとはイベント ID を指定して詳細情報を取得します:</para>
<screen>&prompt.sudo;<command>ausearch -a</command> <replaceable>7887</replaceable> -i
----
time-&gt;Tue Feb 17 16:48:23 2009
type=PATH msg=audit(1234885703.090:7889): item=0 name="/etc/sysconfig/displaymanager" inode=369282 dev=08:06 mode=0100644 ouid=0 ogid=0 rdev=00:00
type=CWD msg=audit(1234885703.090:7889):  cwd="/root"
type=SYSCALL msg=audit(1234885703.090:7889): arch=c000003e syscall=191 success=no exit=-61 a0=7e1e20 a1=7f90e4cf9187 a2=7fffed5b57d0 a3=84 items=1 ppid=25548 pid=23045 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts2 ses=1166 comm="vim" exe="/bin/vim-normal" key=(null)</screen>
   </step>
  </procedure>

  <tip>
   <title>特定の時間帯のみに着目したい場合について</title>
   <para>特定の日時に発生したイベントに着目したい場合は、 <command>aureport</command> コマンドに開始と終了の日時を指定 ( <option>-ts</option> および <option>-te</option> ) して、範囲を狭めることができます。詳しくは <xref linkend="sec-audit-aureport-gen"/> をお読みください。</para>
  </tip>

  <para>最後のものを除いて、全ての手順はスクリプトから自動実行することができますので、 cron などのジョブとして実行することができます。たとえば <literal>--failed --summary</literal> オプションを指定したものについては、ファイルとアクセス失敗数を元にグラフ化することも簡単にできます。監査レポートデータの可視化について、詳しくは <xref linkend="sec-audit-viz"/> をお読みください。</para>
 </sect1>
 <sect1 xml:id="sec-audit-viz">
  <title>ログの可視化の設定</title>

  <para><command>mkbar</command> や <command>mkgraph</command> のスクリプトを使用することで、グラフの形で監査の統計情報を可視化することができます。 <command>aureport</command> コマンドと同様に、グラフ化のコマンドもスクリプトとして実行することができますので、グラフ化までの部分を簡単に cron ジョブにすることができます。</para>

  <para><command>mkbar</command> や <command>mkgraph</command> のスクリプトは、 Red Hat 社の Steve Grubb 氏が作成したものです。スクリプト本体は <link xlink:href="http://people.redhat.com/sgrubb/audit/visualize/"/> からダウンロードすることができます。なお、 &productname; の現在の監査システムには、これらのスクリプトが含まれていませんので、下記の手順に従って作業を行ってください:</para>

  <warning>
   <title>ダウンロードコンテンツの危険性について</title>
   <para><command>mkbar</command> や <command>mkgraph</command> はインターネット上に公開されているソフトウエアであり、 &productname; の管理外にあるものです。使用にあたっては、ご自身の責任の下でお願いいたします。インターネットからのソフトウエアのダウンロードは、特にそれを &rootuser; 権限で動作させるような場合は、基本的に危険を伴うものであることに留意してください。</para>
  </warning>

  <procedure>
   <step>
    <para>スクリプトを &rootuser; のホームディレクトリ以下の <filename>~/bin</filename> にダウンロードします:</para>
<screen>&prompt.sudo;wget http://people.redhat.com/sgrubb/audit/visualize/mkbar -O ~/bin/mkbar
&prompt.sudo;wget http://people.redhat.com/sgrubb/audit/visualize/mkgraph -O ~/bin/mkgraph</screen>
   </step>
   <step>
    <para>&rootuser; に対して、読み込みと書き込み、実行のファイルパーミッションを設定します:</para>
<screen>&prompt.sudo;chmod 744 ~/bin/mk{bar,graph}</screen>
   </step>
  </procedure>

  <para><xref linkend="sec-audit-aurepo"/> などで作成した概要レポートのグラフを作成するには、 <command>mkbar</command> スクリプトを使用します。たとえば下記のように実行します:</para>

  <variablelist>
   <varlistentry>
    <term>イベントの概要グラフの作成</term>
    <listitem><screen>&prompt.sudo;aureport -e -i --summary | mkbar events</screen></listitem>
   </varlistentry>
   <varlistentry>
    <term>ファイルイベントの概要グラフの作成</term>
    <listitem><screen>&prompt.sudo;aureport -f -i --summary | mkbar files</screen></listitem>
   </varlistentry>
   <varlistentry>
    <term>ログインイベントの概要グラフの作成</term>
    <listitem><screen>&prompt.sudo;aureport -l -i --summary | mkbar login</screen></listitem>
   </varlistentry>
   <varlistentry>
    <term>ユーザイベントの概要グラフの作成</term>
    <listitem><screen>&prompt.sudo;aureport -u -i --summary | mkbar users</screen></listitem>
   </varlistentry>
   <varlistentry>
    <term>システムコールイベントの概要グラフの作成</term>
    <listitem><screen>&prompt.sudo;aureport -s -i --summary | mkbar syscalls</screen></listitem>
   </varlistentry>
  </variablelist>

  <para>上述のイベントタイプに対する失敗イベントのみの概要グラフを作成したい場合は、それぞれの <command>aureport</command> コマンド内に <option>--failed</option> オプションを追加してください。また、特定の時間帯のみに絞りたい場合は、それぞれの <command>aureport</command> コマンド内に <option>-ts</option> および <option>-te</option> オプションを追加してください。また、これらのコマンドラインに <command>grep</command> や <command>egrep</command> を追加して、正規表現で出力をフィルタすることで、さらに細かく調整を行うことができます。詳しくは <command>mkbar</command> スクリプト内のコメントなどをお読みください。また、上記のコマンドラインはいずれも、 PNG ファイルの書かれた棒グラフを生成します。</para>

  <para>ユーザとシステムコールなど、様々な監査オブジェクト同士の関係性を可視化したい場合は、 <command>mkgraph</command> などのスクリプトをお使いください。たとえば下記のように実行します:</para>

  <variablelist>
   <varlistentry>
    <term>ユーザと実行ファイルの関係性グラフ</term>
    <listitem><screen>&prompt.sudo;LC_ALL=C aureport -u -i | awk '/^[0-9]/ { print $4" "$7 }' | sort | uniq | mkgraph users_vs_exec</screen></listitem>
   </varlistentry>
   <varlistentry>
    <term>ユーザとファイルの関係性グラフ</term>
    <listitem><screen>&prompt.sudo;LC_ALL=C aureport -f -i | awk '/^[0-9]/ { print $8" "$4 }' | sort | uniq | mkgraph users_vs_files</screen></listitem>
   </varlistentry>
   <varlistentry>
    <term>システムコールとコマンドの関係性グラフ</term>
    <listitem><screen>&prompt.sudo;LC_ALL=C aureport -s -i | awk '/^[0-9]/ { print $4" "$6 }' | sort | uniq | mkgraph syscall_vs_com</screen></listitem>
   </varlistentry>
   <varlistentry>
    <term>システムコールとファイルの関係性グラフ</term>
    <listitem><screen>&prompt.sudo;LC_ALL=C aureport -s -i | awk '/^[0-9]/ { print $5" "$4 }' | sort | uniq | mkgraph | syscall_vs_file</screen></listitem>
   </varlistentry>
  </variablelist>

  <para>グラフを組み合わせることで、複雑な関係性を示すこともできます。詳しい情報と使用例については、 <command>mkgraph</command> スクリプト内のコメントをお読みください。また、このスクリプトで生成されるグラフは既定では PostScript 形式ですが、スクリプト内の <envar>EXT</envar> 変数の内容を <literal>ps</literal> から <literal>png</literal> や <literal>jpg</literal> に変更することで、形式を変更することもできます。</para>
 </sect1>
</chapter>
