<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-containers-basics">
 <title>Linux Containers の紹介</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
  </dm:docmanager>
 </info>
 <para>Linux コンテナは軽量型の仮想化方式で、複数の仮想環境 (コンテナ) を単一のホスト内で同時に動作させることができるものです。構造としては <xref linkend="gloss-vt-lxc-chroot"/> に似た仕組みですが、コンテナの場合はコンテナ同士をカーネルのコントロールグループ ( <xref linkend="gloss-vt-lxc-cgroups"/> ) とカーネルのネームスペースで独立させて動作させます。</para>
 <para>コンテナはオペレーティングシステムレベルでの仮想化を提供するもので、 カーネルがそれぞれのコンテナ間の独立性を管理する仕組みです。 &xen; や &kvm; のような完全仮想ソリューションとは異なり、プロセッサ自身がハードウエア環境を擬似することがありませんし、仮想マシンを制御することもありません。</para>
<!--<sect1 xml:id="sec-containers-intro">
  <title>Overview</title>-->
 <para>仕組みという点では、コンテナは <xref linkend="gloss-vt-lxc-chroot"/> 技術の改善版として捉えることができます。 chroot 技術がファイルシステムのみを分離するのに対して、コンテナはファイルシステム以外をも分離し、 <xref linkend="gloss-vt-lxc-cgroups"/> を介してリソースの管理と制御を行なう点が異なります。</para>
 <itemizedlist mark="bullet" spacing="normal">
  <title>コンテナを使用する場合の利点</title>
  <listitem>
   <para>コンテナを介してアプリケーションやオペレーティングシステムを独立させることができます。</para>
  </listitem>
  <listitem>
   <para>コンテナがリアルタイムでリソースの割り当てを行なうことができることから、ほぼネイティブと同様の性能を提供することができます。</para>
  </listitem>
  <listitem>
   <para>コンテナ内部のネットワークインターフェイスの制御やリソースの適用は、 <xref linkend="gloss-vt-lxc-cgroups"/> を介して行なわれます。</para>
  </listitem>
 </itemizedlist>
 <itemizedlist mark="bullet" spacing="normal">
  <title>コンテナの制限</title>
  <listitem>
   <para>コンテナはホストシステムのカーネル内で動作するものであるため、異なる種類のカーネルや異なるバージョンのカーネルを使用することはできません。</para>
  </listitem>
  <listitem>
   <para>Linux ベースのアプリケーションのみをコンテナ化することができます。</para>
  </listitem>
  <listitem>
   <para>コンテナ自身にはセキュリティを担保するための仕組みがありません。そのためセキュリティはホスト側のシステムに依存することになります。具体的には、 &aa; や &selnx; を利用してセキュリティを確保する必要があります。</para>
  </listitem>
 </itemizedlist>
</chapter>
