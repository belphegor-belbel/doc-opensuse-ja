<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-containers-intro">
 <info>
  <title>Introduction</title>
 </info>
 <sect1 xml:id="id-terminology">
  <title>Terminology</title>

  <variablelist>
   <varlistentry>
    <term>Container</term>
    <listitem>
     <para>
      A container is a standard unit of software that packages up code and all
      its dependencies. This allows the container and its application to run
      quickly and reliably in various computing environments. Containers can
      include all the components required for an application to run.
      Multiple containers can run on a single host operating system instance,
      but each container is isolated from other containers. From the
      perspective of a program in a container, it is the only thing running
      on the host OS. Unlike a virtual machine, a container does not have its
      own kernel. All containers on an OS instance share the kernel of the
      host OS.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container Image</term>
    <listitem>
     <para>
      A container image is an unchangeable, static file that includes
      executable code so it can run an isolated process on IT infrastructure.
      The image is comprised of system libraries, system tools, and other
      platform settings a program needs to run on a containerization
      platform. A container image is compiled from file system layers built
      on top of a parent or base image.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Base Image</term>
    <listitem>
     <para>
      A base image is an minimal initial image. In a Dockerfile, a base image
      is identified by the <literal>FROM
      scratch</literal> directive.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Parent Image</term>
    <listitem>
     <para>
      The image that served the basis for another container
      image. In other words, if an image is not a base image, it is derived
      from a parent image. In a Dockerfile, the <literal>FROM</literal>
      directive is pointing to the parent image.
      Most Docker containers are created using parent images.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container Orchestration</term>
    <listitem>
     <para>
      Orchestration is the automatic process of deploying, managing, scaling
      and scheduling the work of individual containers within multiple
      clusters. Orchestration is done using a dedicated tool like
      <link xlink:href="https://kubernetes.io/">Kubernetes</link>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Container Platform</term>
    <listitem>
     <para>
      &caasp; is a container platform.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
