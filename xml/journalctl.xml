<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.journalctl">
 <title><command>journalctl</command> : &systemd; ジャーナルへの問い合わせコマンド</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para><phrase os="sles;sled">&sle; 12</phrase> <phrase os="osuse">&opensuse; Leap</phrase> で従来の init スクリプトが &systemd; に置き換わりました (詳しくは <xref linkend="cha.systemd"/> をお読みください) が、これによって <emphasis>ジャーナル</emphasis> と呼ばれる新しいログシステムが提供されるようになりました。これにより、 <systemitem>syslog</systemitem> ベースのサービスを動作させる必要はなくなり、全てのイベントがジャーナルに書き込まれるようになっています。</para>
 <para>ジャーナルそれ自身は &systemd; が管理するシステムサービスで、正確には <literal>systemd-journald.service</literal> という名称です。カーネルやユーザスペース、標準入力やシステムサービスのエラーなどから、様々なログ記録情報を収集し、構造化され順序番号の付いたジャーナルを管理して、データを記録し保存することができます。 <literal>systemd-journald</literal> サービスは既定で有効化されています:</para>
<screen>&prompt.sudo;systemctl status systemd-journald
systemd-journald.service - Journal Service
   Loaded: loaded (/usr/lib/systemd/system/systemd-journald.service; static)
   Active: active (running) since Mon 2014-05-26 08:36:59 EDT; 3 days ago
     Docs: man:systemd-journald.service(8)
           man:journald.conf(5)
 Main PID: 413 (systemd-journal)
   Status: "Processing requests..."
   CGroup: /system.slice/systemd-journald.service
           └─413 /usr/lib/systemd/systemd-journald
[...]</screen>
 <sect1 xml:id="sec.journalctl.persistent">
  <title>ジャーナルの恒久化</title>

  <para>ジャーナルは既定では <filename>/run/log/journal/</filename> 内にデータを保存します。ただし、 <filename>/run/</filename> ディレクトリはメモリ内にのみ保持されるディレクトリであるため、システムを再起動するとログデータが失われてしまいます。ログデータを恒久的に保存するには、 <filename>/var/log/journal/</filename> を作成して適切な所有権とアクセス許可を設定し、 systemd-journald に対してデータを保存するように設定する必要があります。ただし &systemd; では、ログを恒久的に保存するように設定するだけで、自動的にこのディレクトリを作成して設定することができます。具体的には下記の手順を実施します:</para>

  <procedure>
   <step>
    <para>&rootuser; で vi エディタを利用して、 <filename>/etc/systemd/journald.conf</filename> を開きます:</para>
<screen>&prompt.root;vi /etc/systemd/journald.conf</screen>
   </step>
   <step>
    <para><literal>Storage=</literal> を含む行のコメントを外して、下記のようにします:</para>
<screen>[...]
[Journal]
Storage=persistent
#Compress=yes
[...]</screen>
   </step>
   <step>
    <para>ファイルを保存して終了し、 systemd-journald を再起動します:</para>
<screen>&prompt.root;systemctl restart systemd-journald</screen>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.journalctl.switches">
  <title><command>journalctl</command> での便利なスイッチ</title>

  <para>本章では、既定の <command>journalctl</command> の動作を拡張するにあたって、便利なオプション類をいくつか紹介しています。全てのスイッチについての説明をご希望の場合は、 <command>journalctl</command> のマニュアルページ (<command>man 1 journalctl</command>) をご覧ください。</para>

  <tip>
   <title>特定の実行ファイルに関連するメッセージ</title>
   <para>特定の実行ファイルに関連する全てのジャーナルメッセージを表示するには、実行ファイルのフルパスを指定します:</para>
<screen>&prompt.sudo;journalctl /usr/lib/systemd/systemd</screen>
  </tip>

  <variablelist>
   <varlistentry>
    <term>-f</term>
    <listitem>
     <para>直近のジャーナルメッセージのみを表示し、以後ジャーナルに更新があるたびに項目を随時表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-e</term>
    <listitem>
     <para>ジャーナルメッセージを表示して末尾に移動します。ページャを介して最新の項目から閲覧できるようになります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-r</term>
    <listitem>
     <para>ジャーナルのメッセージを逆順で表示します。最新の項目が最初に表示されるようになります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-k</term>
    <listitem>
     <para>カーネルメッセージのみを表示します。これは項目ベースのフィルタで、 <literal>_TRANSPORT=kernel</literal> と同じ意味になります (詳しくは <xref linkend="sec.journalctl.filter.fields"/> をお読みください) 。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>-u</term>
    <listitem>
     <para>指定した &systemd; ユニットに対するメッセージのみを表示します。これは項目ベースのフィルタで、 <literal>_SYSTEMD_UNIT=<replaceable>ユニット名</replaceable></literal> と同じ意味になります (詳しくは <xref linkend="sec.journalctl.filter.fields"/> をお読みください) 。</para>
<screen>&prompt.sudo;journalctl -u apache2
[...]
Jun 03 10:07:11 pinkiepie systemd[1]: Starting The Apache Webserver...
Jun 03 10:07:12 pinkiepie systemd[1]: Started The Apache Webserver.</screen>
    </listitem>
   </varlistentry>
  </variablelist>

  <para/>
 </sect1>
 <sect1 xml:id="sec.journalctl.filter">
  <title>ジャーナル出力のフィルタリング</title>

  <para>何もスイッチを指定しないで <command>journalctl</command> を実行すると、ジャーナル内にある全ての情報を古いものから順に表示します。出力はスイッチと項目を指定することでフィルタすることができます。</para>

  <sect2 xml:id="sec.journalctl.filter.boot">
   <title>起動番号をベースにしたフィルタ</title>
   <para><command>journalctl</command> では、特定のシステム起動時に限ってメッセージを表示することができます。全てのシステム起動を表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl --list-boots
-1 097ed2cd99124a2391d2cffab1b566f0 Mon 2014-05-26 08:36:56 EDT—Fri 2014-05-30 05:33:44 EDT
 0 156019a44a774a0bb0148a92df4af81b Fri 2014-05-30 05:34:09 EDT—Fri 2014-05-30 06:15:01 EDT</screen>
   <para>一番左の列は起動オフセットと呼ばれる値で、 <literal>0</literal> が現在の起動時、 <literal>-1</literal> が前回、 <literal>-2</literal> が前々回のようになっています。 2 つ目の列には起動 ID が書かれていて、その後ろにはそれぞれのタイムスタンプが書かれています。</para>
   <para>現在の起動に限定して全てのメッセージを表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl -b</screen>
   <para>以前の起動時のジャーナルメッセージを表示したい場合は、オフセット値を指定します。たとえば前回の起動時のメッセージを表示したい場合は、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl -b -1</screen>
   <para>起動時を指定するもう 1 つの方法としては、起動 ID を指定する方法があります。この場合は _BOOT_ID フィールドでフィルタを設定します:</para>
<screen>&prompt.sudo;journalctl _BOOT_ID=156019a44a774a0bb0148a92df4af81b</screen>
  </sect2>

  <sect2 xml:id="sec.journalctl.filter.time">
   <title>時間範囲をベースにしたフィルタ</title>
   <para><command>journalctl</command> の出力は、開始と終了の日時を指定してフィルタすることもできます。日付を指定する場合は、 "2014-06-30 9:17:16" のように指定します。また、時刻を省略した場合は "00:00:00" であるものと解釈され、時刻の秒を省略した場合は ":00" であるものと解釈されます。日付部分を省略した場合は、今日の日付であるものとして解釈されます。また、日付での表記の代替として、 "yesterday" (昨日), "today" (今日), "tomorrow" (明日) のような表現を使用することもできます。これらを指定した場合、時刻は "00:00:00" と解釈されます。さらに、 "now" と指定すると、現在の日時であるものとして解釈されます。このほか、 <literal>-</literal> や <literal>+</literal> を頭に付けて相対日時を指定することもできます。</para>
   <para>現在以降の新しいメッセージを表示し、以後更新があるたびに随時表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl --since "now" -f</screen>
   <para>今日になってから午前 3:20 までの全てのメッセージを表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl --since "today" --until "3:20"</screen>
  </sect2>

  <sect2 xml:id="sec.journalctl.filter.fields">
   <title>項目をベースにしたフィルタ</title>
   <para>ジャーナルのメッセージは、特定の項目でフィルタして出力することができます。項目を指定する場合は、 <literal><replaceable>フィールド名</replaceable>=<replaceable>値</replaceable></literal> の形式 (例: <literal>_SYSTEMD_UNIT=httpd.service</literal>) で指定します。また、 1 回の問い合わせで複数のフィルタを指定することもできます。既定で利用できる項目の一覧について、詳しくは <command>man 7 systemd.journal-fields</command> をお読みください。</para>
   <para>特定のプロセス ID が生成したメッセージのみを表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl _PID=1039</screen>
   <para>特定のユーザ ID に属するメッセージのみを表示するには、下記のように実行します:</para>
<screen># journalctl _UID=1000</screen>
   <para>カーネルのリングバッファからのメッセージのみを表示するには、下記のように実行します (<command>dmesg</command> コマンドが生成するものと同じ内容になります):</para>
<screen>&prompt.sudo;journalctl _TRANSPORT=kernel</screen>
   <para>サービスの標準出力や標準エラー出力のメッセージのみを表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl _TRANSPORT=stdout</screen>
   <para>指定したサービスが生成したメッセージのみを表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;journalctl _SYSTEMD_UNIT=avahi-daemon.service</screen>
   <para>別々の項目に対して複数の条件を指定した場合は、同時に両方の条件に合致したメッセージのみを表示します:</para>
<screen>&prompt.sudo;journalctl _SYSTEMD_UNIT=avahi-daemon.service _PID=1488</screen>
   <para>同じ項目に対して複数の条件を指定した場合は、いずれかの条件に合致したメッセージを表示します:</para>
<screen>&prompt.sudo;journalctl _SYSTEMD_UNIT=avahi-daemon.service _SYSTEMD_UNIT=dbus.service</screen>
   <para>なお、 '+' のセパレータを指定することで、論理 'OR' を実現することができます。下記の例では、 Avahi サービスプロセスのプロセス ID 1480 のメッセージと、 D-Bus サービスのメッセージをあわせて表示します:</para>
<screen>&prompt.sudo;journalctl _SYSTEMD_UNIT=avahi-daemon.service _PID=1480 + _SYSTEMD_UNIT=dbus.service</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.journalctl.investigate">
  <title>&systemd; のエラー調査</title>

  <para>本章では、 &systemd; が <command>apache2</command> を起動する際に発生した問題を、調べて修正するまでの流れを説明しています。</para>

  <procedure>
   <step>
    <para>apache2 を開始してみます:</para>
<screen># systemctl start apache2
Job for apache2.service failed. See 'systemctl status apache2' and 'journalctl -xn' for details.</screen>
   </step>
   <step>
    <para>サービスの状態はどのようになっているのかを調べてみます:</para>
<screen>&prompt.sudo;systemctl status apache2
apache2.service - The Apache Webserver
   Loaded: loaded (/usr/lib/systemd/system/apache2.service; disabled)
   Active: failed (Result: exit-code) since Tue 2014-06-03 11:08:13 CEST; 7min ago
  Process: 11026 ExecStop=/usr/sbin/start_apache2 -D SYSTEMD -DFOREGROUND \
           -k graceful-stop (code=exited, status=1/FAILURE)</screen>
    <para>エラーを発生させているのはプロセス ID 11026 であることがわかります。</para>
   </step>
   <step>
    <para>プロセス ID 11026 に関連するメッセージを詳細に表示してみます:</para>
<screen>&prompt.sudo;journalctl -o verbose _PID=11026
[...]
MESSAGE=AH00526: Syntax error on line 6 of /etc/apache2/default-server.conf:
[...]
MESSAGE=Invalid command 'DocumenttRoot', perhaps misspelled or defined by a module
[...]</screen>
   </step>
   <step>
    <para><filename>/etc/apache2/default-server.conf</filename> ファイル内にスペルミスがあることがわかります。これを修正して apache2 サービスを開始しなおし、再度状態を確認してみます:</para>
<screen>&prompt.sudo;systemctl start apache2 &amp;&amp; systemctl status apache2
apache2.service - The Apache Webserver
   Loaded: loaded (/usr/lib/systemd/system/apache2.service; disabled)
   Active: active (running) since Tue 2014-06-03 11:26:24 CEST; 4ms ago
  Process: 11026 ExecStop=/usr/sbin/start_apache2 -D SYSTEMD -DFOREGROUND
           -k graceful-stop (code=exited, status=1/FAILURE)
 Main PID: 11263 (httpd2-prefork)
   Status: "Processing requests..."
   CGroup: /system.slice/apache2.service
           ├─11263 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11280 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11281 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11282 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           ├─11283 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
           └─11285 /usr/sbin/httpd2-prefork -f /etc/apache2/httpd.conf -D [...]
</screen>
   </step>
  </procedure>
 </sect1>
 <sect1 xml:id="sec.journalctl.config">
  <title>journald の設定</title>

  <para>systemd-journald サービスの動作は、 <filename>/etc/systemd/journald.conf</filename> を編集することで調整することができます。本章では基本的な設定のみを紹介しています。より詳しい設定ファイルの説明については、 <command>man 5 journald.conf</command> をお読みください。また、設定ファイルを変更したあとは、下記のコマンドで systemd-journald を再起動する必要があります:</para>

<screen>&prompt.sudo;systemctl restart systemd-journald</screen>

  <sect2 xml:id="sec.journalctl.config.systemmaxuse">
   <title>ジャーナルのサイズ制限の変更</title>
   <para>ジャーナルのログデータを恒久的な場所 (詳しくは <xref linkend="sec.journalctl.persistent"/> をお読みください) に保存する場合、 <filename>/var/log/journal</filename> が配置されているファイルシステムに対して、最大 10% までの領域を使用します。たとえば <filename>/var/log/journal</filename> が 30 GB の <filename>/var</filename> パーティション内に存在する場合、ジャーナルは最大で 3 GB までのディスク領域を使用します。この制限を変更したい場合は、 <option>SystemMaxUse</option> オプションを変更し (およびコメントを外し) てください:</para>
<screen>SystemMaxUse=50M</screen>
  </sect2>

  <sect2 xml:id="sec.journalctl.config.ttypath">
   <title>ジャーナルから <filename>/dev/ttyX</filename> への転送</title>
   <para>ジャーナルは、 <literal>/dev/tty12</literal> などの特定の端末デバイスに転送することもできます。下記の journald オプションを変更してください:</para>
<screen>ForwardToConsole=yes
TTYPath=/dev/tty12</screen>
  </sect2>

  <sect2 xml:id="sec.journalctl.config.forwardtosyslog">
   <title>ジャーナルから syslog への転送</title>
   <para>journald には、 <systemitem>rsyslog</systemitem> をはじめとした従来の syslog 実装との後方互換性が用意されています。この機能を利用するにあたっては、あらかじめ下記をご確認ください:</para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>rsyslog がインストールされていること。</para>
<screen>&prompt.sudo;rpm -q rsyslog
rsyslog-7.4.8-2.16.x86_64</screen>
    </listitem>
    <listitem>
     <para>rsyslog サービスが有効化されていること。</para>
<screen>&prompt.sudo;systemctl is-enabled rsyslog
enabled</screen>
    </listitem>
    <listitem>
     <para>syslog への転送は <filename>/etc/systemd/journald.conf</filename> で設定します。</para>
<screen>ForwardToSyslog=yes</screen>
    </listitem>
   </itemizedlist>
  </sect2>
 </sect1>
 <sect1 xml:id="sec.journalctl.yast">
  <title>&yast; を利用した &systemd; ジャーナルのフィルタリング</title>

  <para>systemd ジャーナルを journalctl の文法を使用せずに簡単にフィルタリングするには、 &yast; の journal モジュールを使用するとよいでしょう。 <command>sudo zypper in yast2-journal</command> でインストールを行なったあと、 &yast; を起動して <menuchoice> <guimenu>その他</guimenu> <guimenu>systemd ジャーナル</guimenu> </menuchoice> を選択します。それ以外にも、コマンドラインから <command>sudo yast2 journal</command> と入力して実行してもかまいません。</para>

  <figure xml:id="fig.journalctl.yast">
   <title>&yast; systemd ジャーナル</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="yast2_journal.png" width="80%" format="PNG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="yast2_journal.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>このモジュールは、ログ項目を表形式で表示します。上部にある検索ボックスを使用すると、 <command>grep</command> を使用したときのように、指定した文字列を含む項目のみを表示することができます。また、日時やユニット、ファイルや重大度でフィルタを行ないたい場合は、 <guimenu>フィルタの変更</guimenu> を押して必要な設定を行なってください。</para>
 </sect1>
 <sect1 xml:id="sec.journalctl.gnome-logs">
  <title>&gnome; でのログ表示</title>
  <para>また、ジャーナルは <emphasis>&gnome; Logs</emphasis> でも読むことができます。アプリケーションメニューから起動してお使いください。システムログメッセージを読むには root 権限が必要となりますので、 <command>xdg-su gnome-logs</command> などのようにして起動してください。このコマンドは、 <keycombo> <keycap function="alt"/> <keycap>F2</keycap></keycombo> を押して起動することもできます。</para>
 </sect1>
</chapter>
