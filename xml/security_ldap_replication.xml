<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-security-ldap-replication">
 <title>レプリケーションの設定</title>

 <para>&ds389; では複数のサーバ間でデータベースをレプリケーション (複製) することができます。レプリケーションの構成にもよりますが、下記のような利点を提供することになります:</para>

 <itemizedlist>
  <listitem>
   <para>性能と応答時間の高速化</para>
  </listitem>
  <listitem>
   <para>耐障害性と冗長性の確保</para>
  </listitem>
  <listitem>
   <para>負荷分散</para>
  </listitem>
  <listitem>
   <para>高可用性</para>
  </listitem>
 </itemizedlist>

 <para>データベースは複製可能なディレクトリの最小単位でもあります。データベース全体を複製することはできますが、データベース内のサブツリーのみを複製することはできません。また、 1 つのデータベースは必ず 1 つのサフィックスに結びつけられるものであり、 2 つまたはそれ以上のデータベースにまたがったサフィックスを複製することはできません。</para>
 <para>また、複製すべきデータを他に送信するサーバをサプライヤ (supplier) と呼びます。逆に、サプライヤからのデータを受け取るサーバをコンシューマ (consumer) と呼びます。レプリケーションは常にサプライヤ側から行われ、 1 つのサプライヤからは複数のコンシューマに送信することができます。また一般に、マルチサプライヤ (multi-supplier) レプリケーションの場合を除いて、サプライヤは読み書き可能なレプリカとして、コンシューマは読み込み専用のサーバとして提供されます。マルチサプライヤレプリケーションの場合、サプライヤとコンシューマを兼ねるサーバとなります。</para>

 <sect2 xml:id="sec-security-ldap-replication-async">
  <title>非同期書き込み</title>
  <para>&ds389a; は他のデータベースとは異なるレプリケーション管理を行います。レプリケーションは非同期でありながらも、結果整合性を持つ仕組みになっています。つまり、下記のような動作になります:</para>
  <itemizedlist>
   <listitem>
    <para>サーバへの書き込みや変更は、即時に受け入れられます。</para>
   </listitem>
   <listitem>
    <para>特定のサーバ内に書き込まれたあと、他のサーバにレプリケーションされて見えるようになるまでの間に、時間的な遅れが発生します。</para>
   </listitem>
   <listitem>
    <para>いずれかのサーバ内での書き込みに矛盾が発生した場合、特定のポイントまでロールバック (巻き戻される) 可能性があります。</para>
   </listitem>
   <listitem>
    <para>レプリケーションの遅延により、特定の時点で各サーバ内に存在するデータが異なる可能性があります。</para>
   </listitem>
  </itemizedlist>
  <para>一般的に LDAP は、 "書き込みの少ない" データベースであるため、これらの特徴を考慮しても、サーバが一貫性のない状態にはならず、常に既知の安定状態に居続けることができます。また、この安定状態からの変更は少しずつしか行われないため、日々の運用ではこのような欠点に気付くようなことはありません。</para>
 </sect2>

 <sect2 xml:id="sec-security-ldap-replication-topology">
  <title>構成設計</title>
  <para>レプリケーションの構成 (トポロジ) を設計するにあたっては、下記のような要素を決めておく必要があります。</para>
  <itemizedlist>
   <listitem>
    <para>レプリケーションに対する要件: 高可用性、物理的な配置場所、読み込み性能やそれらの組み合わせなど。</para>
   </listitem>
   <listitem>
    <para>構成内に配置するレプリカ (ノード、サーバ) 数。</para>
   </listitem>
   <listitem>
    <para>データの流れとその方向。構成内に流入するデータと流出するデータ。</para>
   </listitem>
   <listitem>
    <para>クライアント側からリクエストを送信する際の、ノード選択方式 (クライアント側で LDAP URI を複数個指定して分散させるか、 SRV レコードで分散させるか、ロードバランサを用いるか等) 。</para>
   </listitem>
  </itemizedlist>
  <para>これらの要素はいずれも構成そのものに影響します (詳しい構成例については <xref linkend="sec-security-ldap-replication-topologies"/> をお読みください) 。</para>
 </sect2>

 <sect2 xml:id="sec-security-ldap-replication-topologies">
  <title>レプリケーションの設計例</title>
  <para>下記の章では、 2 ノードから 6 ノードまでの &ds389; ノードを使用する、いくつかのレプリケーション構成例を示しています。なお、レプリケーションを構成する際の最大サプライヤ数は 20 ノードまでです。実際の運用経験からすると、レプリケーション効率を高めるための最適なノード数は最大でも 8 ノードまでと考えられています。</para>

  <sect3 xml:id="sec-security-ldap-replication-two-replicas">
   <title>2 つのレプリカ</title>
   <example xml:id="ex-ldap-replication-two-replicas">
    <title>2 つのサプライヤレプリカ</title>
<screen>
┌────┐       ┌────┐
│ S1 │◀─────▶│ S2 │
└────┘       └────┘
</screen>
   </example>
   <para><xref linkend="ex-ldap-replication-two-replicas"/> には S1 と S2 という 2 つのレプリカが示されています。これらは双方向レプリケーションとして構成する場合の例で、これらのノードはいずれもサプライヤとコンシューマの両方を兼ね備えた存在となります。 S1 と S2 は別々のデータセンター内であっても、同じデータセンター内であってもかまいません。 LDAP URI や負荷分散装置、 DNS SRV レコードのいずれかでクライアント側からのアクセスを分散させることができます。また、これは高可用性を提供する際の最もシンプルな構成でもあります。ただし、一方のサーバで障害が発生してオフラインになった場合、他方のサーバでは全てのクライアントからの処理を受け付ける必要があることに注意してください。また、 2 ノードのレプリケーションでは一方のノードがオフラインになった場合、残った 1 つのノードのみで全ての処理を行わなければならないことから、水平分散としては不適切です。</para>
   <note>
     <title>既定の構成</title>
     <para>2 ノードの構成は最も簡単に管理できることから、既定の構成と考えられます。この構成を初期構成として、必要に応じて構成を広げていってもかまいません。</para>
   </note>
  </sect3>

  <sect3 xml:id="sec-security-ldap-replication-four-replicas">
   <title>4 つのサプライヤレプリカ</title>
   <example xml:id="ex-ldap-replication-four-replicas">
    <title>4 つのサプライヤレプリカ</title>
<screen>
┌────┐       ┌────┐
│ S1 │◀─────▶│ S2 │
└────┘       └────┘
   ▲            ▲  
   │            │  
   ▼            ▼  
┌────┐       ┌────┐
│ S3 │◀─────▶│ S4 │
└────┘       └────┘
</screen>
   </example>
   <para><xref linkend="ex-ldap-replication-four-replicas"/> は 4 つのサプライヤレプリカを構成する場合の例です。これらは相互にデータを同期する構成で、 4 つのデータセンターに分散させても、 1 つのデータセンターごとに 2 つのサーバを配置してもかまいません。 4 つのデータセンターに分散させた場合、各ノードは 100% のクライアント負荷を受け付ける処理能力が必要となります。 2 つのデータセンターに 2 つのサーバを配置した場合は、各ノードは 50% のクライアント負荷を受け付ければ十分になります。</para>
  </sect3>

  <sect3 xml:id="sec-security-ldap-replication-six-replicas">
   <title>6 つのレプリカ</title>
   <example xml:id="ex-ldap-replication-six-replicas">
    <title>6 つのレプリカ</title>
<screen>
                  ┌────┐       ┌────┐                   
                  │ S1 │◀─────▶│ S2 │                   
                  └────┘       └────┘                   
                     ▲            ▲                     
                     │            │                     
   ┌────────────┬────┴────────────┴─────┬────────────┐  
   │            │                       │            │  
   ▼            ▼                       ▼            ▼  
┌────┐       ┌────┐                  ┌────┐       ┌────┐
│ S3 │◀─────▶│ S4 │                  │ S5 │◀─────▶│ S6 │
└────┘       └────┘                  └────┘       └────┘  
</screen>
   </example>
   <para><xref linkend="ex-ldap-replication-six-replicas"/> は各サーバ対を別々の場所に配置した場合の構成例です。 S1 と S2 はサプライヤ、 S3, S4, S5, S6 は S1 と S2 のコンシューマとして構成します。また、各サーバ対はお互いにレプリケーションしているものとし、 S3, S4, S5, S6 でも書き込み要求は受け付けるものとしますが、ほとんどのレプリケーションは S1, S2 で行われます、このような構成は、高可用性と分散処理の両方を、地理的な離れた場所から提供する際の例となります。</para>
  </sect3>

  <sect3 xml:id="sec-security-ldap-replication-six-replicas-read-only">
   <title>読み込み専用コンシューマのある 6 つのレプリカ</title>
   <example xml:id="ex-ldap-replication-six-replicas-read-only">
    <title>読み込み専用コンシューマのある 6 つのレプリカ</title>
<screen>
             ┌────┐       ┌────┐             
             │ S1 │◀─────▶│ S2 │             
             └────┘       └────┘             
                │            │               
                │            │               
   ┌────────────┼────────────┼────────────┐  
   │            │            │            │  
   ▼            ▼            ▼            ▼  
┌────┐       ┌────┐       ┌────┐       ┌────┐
│ S3 │       │ S4 │       │ S5 │       │ S6 │
└────┘       └────┘       └────┘       └────┘
</screen>
   </example>
   <para><xref linkend="ex-ldap-replication-six-replicas-read-only"/> では、 S1 と S2 の両方がサプライヤとなり、残りの 4 つのサーバは読み込み専用のコンシューマとして構成する場合の例となります。全ての書き込み要求は S1, S2 でのみ行われ、残りの 4 つのサーバに複製していく構成です。読み込み専用のコンシューマには、データ開示を最小限に留めるため、データベースの一部や項目の一部のみを保存させるようにすることもできます。このように部分的な複製のみを持つ構成は DMZ のようなネットワークを持つ場合に最適で、この場合は DMZ 内に配置したコンシューマへの書き込みはできなくなります。</para>
  </sect3>
 </sect2>

 <sect2 xml:id="sec-security-ldap-replication-terminology">
  <title>用語</title>
  <para>ここまでに説明してきた &ds389a; の構成例やこの後の説明では、様々な用語を使用しています。下記ではそれら用語に対する説明を示しています。</para>
  <variablelist>
   <varlistentry>
    <term>レプリカ</term>
    <listitem>
     <para>データベースを持つ &ds389a; のインスタンスを意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>読み書き可能なレプリカ</term>
    <listitem>
     <para>読み込みと書き込みの両方の要求を受け付けることができる、データベースの完全コピーを持つレプリカを意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>読み込み専用レプリカ</term>
    <listitem>
     <para>読み込み要求のみを受け付けることができる、データベースの完全コピーを持つレプリカを意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>部分的な複製のみを持つレプリカ</term>
    <listitem>
     <para>データベースのうちの一部のみを複製し、読み込み要求のみを受け付けることができるレプリカを意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>サプライヤ</term>
    <listitem>
     <para>他のレプリカにデータベースの内容を提供することができるレプリカを意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>コンシューマ</term>
    <listitem>
     <para>他のレプリカからデータを受け取って、自身のデータベースに書き込むレプリカを意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>レプリケーション同意</term>
    <listitem>
     <para>他のレプリカとの関係性 (サプライヤ／コンシューマ) に対するサーバ設定を意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>構成</term>
    <listitem>
     <para>レプリケーション同意を介したレプリカ同士の接続構成を意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>レプリカ ID</term>
    <listitem>
     <para>レプリケーション構成内で重複しない &ds389; のインスタンス識別子を意味しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>レプリケーションマネージャ</term>
    <listitem>
     <para>ディレクトリ内でレプリケーション権限を持つアカウントを意味しています。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="sec-security-ldap-replication-configuration">
  <title>レプリケーションの設定</title>
  <para>最小構成例として、まずは 2 ノードの双方向レプリケーションと 1 ノードの読み込み専用サーバを構成してみます。下記の例では、読み書き可能なレプリカのサーバ名は RW1, RW2 とし、読み込み専用のレプリカのサーバ名は RO1 とします (もちろん必要に応じて自由な名前を設定してかまいません) 。</para>
  <para>この構成内にあるサーバには、全て同じサフィックスを設定する必要があります。また、初期状態では RW1 にのみデータが存在するものとします。</para>

 <sect3 xml:id="sec-security-ldap-replication-two-nodes">
   <title>2 ノードレプリケーションの設定</title>
  <para>下記のコマンドは 2 ノード構成 ( <xref linkend="ex-ldap-replication-two-replicas"/> ) の場合のコマンド例で、ホスト名を RW1, RW2 にしています (実際には独自の名前でかまいません) 。</para>

  <warning>
  <title>強力なレプリケーションマネージャパスワードの作成について</title>
  <para>レプリケーションマネージャのアカウントはディレクトリマネージャのアカウントと同等の権限を持つことから、セキュリティを確保するために強力なパスワードを設定しておくことを強くお勧めします。</para>
  <para>各サーバで異なるレプリケーションマネージャのパスワードを設定する場合は、それぞれのサーバが使用するアカウントをよく覚えておいてください。たとえば RW1 側のレプリケーション同意を設定する場合、パスワードとして設定すべきなのは RW2 側のレプリケーションマネージャのパスワードとなります。</para>
</warning>

<para>まずは RW1 側を設定します:</para>

<screen>&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> replication create-manager</command>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> replication enable</command> \ 
<command>--suffix <replaceable>dc=example,dc=com</replaceable></command> \
<command>--role supplier --replica-id <replaceable>1</replaceable> --bind-dn "cn=replication manager,cn=config"</command>
</screen>
  <para>RW2 側の設定は下記のようになります:</para>
<screen>&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> replication create-manager</command>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> replication enable</command> \
<command>--suffix <replaceable>dc=example,dc=com</replaceable></command> \ 
<command>--role supplier --replica-id <replaceable>2</replaceable> --bind-dn "cn=replication manager,cn=config"</command>
</screen>
  <para>上記のコマンドを実行することで、 RW1, RW2 の両方にレプリケーション用のデータを設定することができます。なお、 RW1 と RW2 では <option>replica-id</option> の値が異なっていることに注意してください。また、このコマンドを実行すると、レプリケーションマネージャのアカウントを作成することになります。このアカウントは、 2 つのノードが互いに認証する際に使用するアカウントとなります。</para>
  <para>これで RW1 と RW2 の間でレプリケーションを行う準備ができました。あとは RW1 から RW2 に対して、データを発信するための最初の合意を作成します。</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt create</command> \
<command>--suffix <replaceable>dc=example,dc=com</replaceable></command> \
<command>--host=<replaceable>RW2</replaceable> --port=636 --conn-protocol LDAPS --bind-dn "cn=replication manager,cn=config"</command> \
<command>--bind-passwd <replaceable>パスワード</replaceable> --bind-method SIMPLE <replaceable>RW1_to_RW2</replaceable></command>
</screen>
  <para>上記のコマンドだけではデータベースの同期が始まりません。同期を始めるには、初期化または再初期化と呼ばれる完全同期が必要となります。初期化または再初期化を行うと、 RW2 側の全てのデータがリセットされ、 RW1 と全く同じデータになります。これを行うには、下記のように入力して実行します:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt init</command> \
<command>--suffix <replaceable>dc=example,dc=com</replaceable> <replaceable>RW1_to_RW2</replaceable></command>
</screen>
  <para>あとは RW1 側で下記のようなコマンドを入力して実行し、状況を確認します:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt init-status</command> \
<command>--suffix <replaceable>dc=example,dc=com</replaceable> <replaceable>RW1_to_RW2</replaceable></command>
</screen>
  <para>同期が完了すると、 "Agreement successfully initialized" というメッセージが表示されるはずです。それ以外のエラーメッセージが表示された場合は、エラーログを調べてみてください。エラーが表示されなければ、 RW1 と RW2 は全く同じデータになっているはずです。</para>
  <para>あとはデータを双方向に複製するため、 RW2 から RW1 に対するレプリケーション合意も設定します:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt create</command> \
<command>--suffix <replaceable>dc=example,dc=com</replaceable></command> \
<command>--host=<replaceable>RW1</replaceable> --port=636 --conn-protocol LDAPS</command> \
<command>--bind-dn "cn=replication manager,cn=config" --bind-passwd <replaceable>パスワード</replaceable></command> \
<command>--bind-method SIMPLE <replaceable>RW2_to_RW1</replaceable></command>
</screen>
  <para>これで RW1 と RW2 の双方向レプリケーションが完成し、一方での変更が他方にも反映されるようになっています。いずれかのサーバで下記のようなコマンドを入力して実行し、状態を確認してください:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt status</command> \
<command>--suffix <replaceable>dc=example,dc=com</replaceable></command> \
<command>--bind-dn "cn=replication manager,cn=config"</command> \
<command>--bind-passwd <replaceable>パスワード</replaceable> <replaceable>RW2_to_RW1</replaceable></command> 
</screen>
</sect3>

 <sect3 xml:id="sec-security-ldap-replication-four-nodes">
 <title>読み込み専用ノードの設定</title>
 <para>読み込み専用ノードを作成するには、まずレプリケーションマネージャのアカウントとメタデータを作成するところから始めます。ここでのサーバ名は RO3 とします:</para>

  <warning>
  <title>強力なレプリケーションマネージャパスワードの作成について</title>
  <para>レプリケーションマネージャのアカウントはディレクトリマネージャのアカウントと同等の権限を持つことから、セキュリティを確保するために強力なパスワードを設定しておくことを強くお勧めします。</para>
  <para>各サーバで異なるレプリケーションマネージャのパスワードを設定する場合は、それぞれのサーバが使用するアカウントをよく覚えておいてください。たとえば RW1 側のレプリケーション同意を設定する場合、パスワードとして設定すべきなのは RW2 側のレプリケーションマネージャのパスワードとなります。</para>
</warning>

 <screen>&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> replication create-manager</command>
&prompt.sudo;<command> dsconf <replaceable>インスタンス名</replaceable></command> \
<command>replication enable --suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable></command> \
<command>--role consumer --bind-dn "cn=replication manager,cn=config"</command></screen>

<para>なお、読み込み専用のレプリカに対しては、レプリカ ID の指定は不要であるほか、役割の指定を <literal>consumer</literal> にします。これにより、特殊な読み込み専用のレプリカ ID が割り当てられます。読み込み専用のレプリカを作成したら、あとは RW1, RW2 のそれぞれに対してレプリケーション同意を追加します。下記は RW1 側での実行例です:</para>
 <screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable></command> \
<command>repl-agmt create --suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable></command> \
<command>--host=<replaceable>RO3</replaceable> --port=636 --conn-protocol LDAPS</command> \ 
<command>--bind-dn "cn=replication manager,cn=config" --bind-passwd <replaceable>パスワード</replaceable></command> 
<command>--bind-method SIMPLE <replaceable>RW1_to_RO3</replaceable></command></screen>
<para>下記の例は、 RW2 と RO3 との間でのレプリケーション同意を RW2 側で設定する場合の例です:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt create</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable></command> \
<command>--host=<replaceable>RO3</replaceable> --port=636 --conn-protocol LDAPS</command> \
<command>--bind-dn "cn=replication manager,cn=config" --bind-passwd <replaceable>パスワード</replaceable></command> \
<command>--bind-method SIMPLE <replaceable>RW2_to_RO3</replaceable></command>
</screen>
<para>これらの作業が完了したら、あとは RW1, RW2 から RO3 へデータベースの初期化を行います。下記の例では、 RW2 から RO3 に初期化を行っています:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt init</command>
<command>--suffix dc=<replaceable>EXAMPLE,dc=COM</replaceable> <replaceable>RW2_to_RO3</replaceable></command>
</screen>
</sect3>
</sect2>

<sect2 xml:id="sec-security-ldap-replication-monitoring-healthcheck">
  <title>監視とヘルスチェック</title>
<para><command>dsconf</command> コマンドには監視オプションが用意されています。このコマンドを実行することで、レプリカ内で直接状態を確認することができるほか、他のホストからでも実行することができます。下記の例は RW1 内での実行例で、 2 つのレプリカに対する状態の確認と、自分自身の確認をそれぞれ行っています:</para>
<screen>
&prompt.sudo;<command>dsconf -D "cn=Directory Manager" ldap://<replaceable>RW2</replaceable> replication monitor</command>
&prompt.sudo;<command>dsconf -D "cn=Directory Manager" ldap://<replaceable>RO3</replaceable> replication monitor</command>
&prompt.sudo;<command>dsconf -D "cn=Directory Manager" ldap://<replaceable>RW1</replaceable> replication monitor</command> 
</screen>

<para>また、 <command>dsctl</command> コマンドには <option>healthcheck</option> というオプションもあります。下記ではローカルの &ds389a; インスタンスに対して、レプリケーションの状態確認を行っています:</para>
<screen>
&prompt.sudo;<command>dsctl <replaceable>インスタンス名</replaceable> healthcheck --check replication</command>
</screen>
<para><option>-v</option> オプションを追加すると、 healthcheck で行っていることの詳細を表示することができます:</para>
<screen>
&prompt.sudo;<command>dsctl -v <replaceable>インスタンス名</replaceable> healthcheck --check replication</command>
</screen>

<para>オプション無しで <command>dsctl <replaceable>インスタンス名</replaceable> healthcheck</command> を実行すると、一般的な状態確認のみを行います。</para>
<para>下記のようなコマンドを実行することで、 healthcheck を実行した際に行われる処理の内容を調べることもできます:</para>
<screen>
&prompt.sudo;<command>dsctl <replaceable>インスタンス名</replaceable> healthcheck --list-checks</command>
config:hr_timestamp
config:passwordscheme
backends:userroot:cl_trimming
backends:userroot:mappingtree
backends:userroot:search
backends:userroot:virt_attrs
encryption:check_tls_version
fschecks:file_perms
[...]
</screen>
<para>個別のチェックのみを実行したい場合は、下記のように入力して実行します:</para>
<screen>
&prompt.sudo;<command>dsctl <replaceable>インスタンス名</replaceable> healthcheck</command> \
<command>--check monitor-disk-space:disk_space tls:certificate_expiration</command>
</screen>
</sect2>

  <sect2 xml:id="sec-security-ldap-replication-backups">
    <title>バックアップの作成</title>
  <para>レプリケーションを有効化した場合は、 &ds389; のバックアップについてもいくつかの調整を行う必要があります (一般的なバックアップ方法については <xref linkend="sec-security-ldap-backup"/> をお読みください) 。具体的には、バックアップ時に <command>db2ldif</command> コマンドを実行している場合、 <option>--replication</option> フラグを指定して、レプリケーションのメタデータを最初にバックアップするようにしてください。また、バックアップは構成内の全てのサーバに対して行うものとし、バックアップからの復元に際しては、構成内の 1 ノードでのみ実施して、残りのノードは再初期化を行ってデータを複製してください。</para>
</sect2>

<sect2 xml:id="sec-security-ldap-replication-pause-resume">
  <title>レプリケーションの一時停止と再開</title>
  <para>メンテナンスやその他の運用上の理由で、レプリケーションを一時的に停止することができます。なお、一時停止は変更履歴の保持日数で示された期間 (詳しくは <xref linkend="sec-security-ldap-replication-changelog"/> をお読みください) まで続けることができます。</para>
  <para>レプリケーションを一時停止するには、 <command>repl-agmt</command> コマンドを使用します。 RW2 で一時停止する場合は、下記のように入力して実行します:</para>
  <screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt disable</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable> <replaceable>RW2_to_RW1</replaceable></command>
</screen>
<para>再開する場合は、下記のように入力して実行します:</para>
  <screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt enable</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable> <replaceable>RW2_to_RW1</replaceable></command>
</screen>
</sect2>

<sect2 xml:id="sec-security-ldap-replication-changelog">
  <title>Changelog max-age</title>
  <para>レプリカを何らかの理由でしばらくオフラインにする場合には、最大で changelog <option>max-age</option> で指定した時間までが許容されます。 <option>max-age</option> オプションは過去の変更履歴を持つ長さを時間で指定するための値で、ここで指定したよりも過去の履歴は自動的に削除されます。</para>
 <para>しばらくオフラインになっていたレプリカが復帰すると、通常のレプリケーションと同様に、他のレプリカとの間で同期が行われます。 <option>max-age</option> で指定したよりも長い時間オフラインであった場合は、一貫性を失うことから、他のノードからの変更を拒否したり、他のノードへの変更の送信を拒否したりするようになります。下記の例では、 <option>max-age</option> を 7 日間に設定しています:</para>
 <screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable></command> \
<command>replication set-changelog --max-age 7d</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable></command>
</screen>
</sect2>

<sect2 xml:id="sec-security-ldap-replication-remove-replica">
  <title>レプリカの削除</title>
  <para>レプリカを削除するには、まず他のノードに対して変更点の送信を停止する必要があります。あとは削除するノードで受け付けていたレプリケーション合意を削除します。下記の例では、 RW2 を削除する場合の例を示しています。まずは RW1 での発信側レプリケーション合意を削除します:</para>
 <screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt delete</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable> <replaceable>RW1_to_RW2</replaceable></command>
</screen>
<para>あとは削除対象のレプリカ (この例では RW2) で、全ての送信側レプリケーション合意を削除します:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt delete</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable> <replaceable>RW2_to_RW1</replaceable></command>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-agmt delete</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable> <replaceable>RW2_to_RO3</replaceable></command>
</screen>
<para>あとは RW2 インスタンスを停止します:</para>
<screen>
&prompt.sudo;<command>systemctl stop dirsrv@<replaceable>INSTANCE_NAME</replaceable>.service</command>
</screen>
<para>最後に構成内に書かれているレプリカ ID を削除するため、 <command>cleanallruv</command> コマンドを実行します。下記は RW1 で実行した場合の例です:</para>
<screen>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-tasks cleanallruv</command> \
<command>--suffix <replaceable>dc=EXAMPLE,dc=COM</replaceable> --replica-id <replaceable>2</replaceable></command>
&prompt.sudo;<command>dsconf <replaceable>インスタンス名</replaceable> repl-tasks list-cleanruv-tasks</command>
</screen>
 </sect2>
</sect1>
