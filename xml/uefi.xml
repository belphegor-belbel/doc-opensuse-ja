<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha.uefi">
<!--
* Fates
** #313527: [META] [UEFI] Secure Boot for UEFI 2.3.1
   Contains links to all other UEFI features

** #314578: [DOCU] Document current limitations in a UEFI Secure Boot
   Context
   Release Notes
** #314528: [DOCU] update documentation for Secure Boot


osc -A https://api.suse.de sr -m"Update text and image files" home:keichwa:branches:Devel:WebYaST:1.3 webyast-user_en Devel:WebYaST:1.3
-->
 <title>UEFI (Unified Extensible Firmware Interface)</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>UEFI (Unified Extensible Firmware Interface) はシステムに付属するファームウエアと、システム内の全てのハードウエアコンポーネント、そしてオペレーティングシステムとの間に存在するインターフェイスを意味する用語です。</para>
 <para>UEFI は現在の PC システムに順次取り入れられている仕組みで、従来の PC-BIOS を置き換える目的で作られています。たとえば UEFI では 64 ビットシステムを正しくサポートしているほか、最も重要な点として、 <quote>Secure Boot</quote> (ファームウエアバージョン 2.3.1c もしくはそれ以降が必要) と呼ばれる仕組みにも対応しています。最終的には、全ての x86 プラットフォームで利用できるようになるはずのものです。</para>
 <para>UEFI には、これらに加えて下記の利点が用意されています:</para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>GUID Partition Table (GPT) を利用した、巨大なディスク (2 TiB 以上) からの起動に対応しています。</para>
  </listitem>
  <listitem>
   <para>CPU に依存しないアーキテクチャとドライバに対応しています。</para>
  </listitem>
  <listitem>
   <para>ネットワーク機能にも対応した柔軟な OS 起動前環境 (pre-OS) に対応しています。</para>
  </listitem>
  <listitem>
   <para>CSM (互換性サポートモジュール; Compatibility Support Module) により、 PC-BIOS を疑似できるようになっています。これにより、古いオペレーティングシステムにも対応できます。</para>
  </listitem>
 </itemizedlist>
 <para>さらに詳しい情報については、 <link xlink:href="https://ja.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface"/> をお読みください。下記の章では、 UEFI に関する一般的な説明ではなく、 &productname; ではこれらがどのように実装されているかを説明しています。</para>
 <sect1 xml:id="sec.uefi.secboot">
  <title>Secure Boot</title>

<!-- # http://www.suse.com/blogs/uefi-secure-boot-overview/ -->

  <para>UEFI の世界では、起動処理時に不正なコードが紛れ込むことのないよう、信頼の鎖 (くさり) を構成して解決しています。このとき、 &productname; の用語で <quote>プラットフォーム</quote> は信頼の鎖の基礎となる存在ですが、これは一般にメインボードとそこに搭載されたファームウエアを意味します。これはハードウエアの製造元と言い換えることもできますので、ハードウエイの製造元からコンポーネントの製造元、そして OS の製造元へと信頼の鎖が繋がることになります。</para>

  <para>信頼そのものは公開鍵認証の仕組みを利用しています。ハードウエアの製造元は、プラットフォーム鍵 (PK; Platform Key) をファームウエア内に配置し、これを信頼の鎖の基礎とします。オペレーティングシステムなどの製造元との信頼関係は、それらの鍵をプラットフォーム鍵で署名することによって成立させます。</para>

  <para>最後にファームウエアは、それらの <quote>信頼済み</quote> 鍵のいずれかで署名されたコードだけを実行することによって、セキュリティを成立させます。このコードにはブートローダのほか、 PCI Express カードやディスク内に配置されたいくつかのドライバ、そしてファームウエア更新そのものも含まれます。</para>

  <para>Secure Boot を使用するには、まずファームウエアが信頼する鍵で OS ローダに署名し、 OS ローダが読み込むカーネルを信頼する必要があります。</para>

  <para><!-- WP, re-phrased --> 鍵交換鍵 (KEK; Key Exchange Key) を UEFI の鍵データベースに追加することができます。この方法により、 PK で署名されている他の証明書を使用することができるようになります。 <!-- but they must stillhave a connection to the private portion of the Platform key.--></para>

  <sect2 xml:id="sec.uefi.secboot.sle">
   <title>&productname; での実装</title>
   <para>Microsoft 社の鍵交換鍵 (KEK) が既定でインストールされています。</para>
   <note>
    <title>GUID Partitioning Table (GPT) が必要となる件について</title>
    <para>Secure Boot の機能は UEFI/x86_64 環境にインストールする場合は、既定で有効化されます。具体的には、 <guimenu>ブートローダの設定</guimenu> ダイアログ内の <guimenu>ブートコードのオプション</guimenu> タブにある <guimenu>Secure Boot サポートを有効にする</guimenu> に既定でチェックが入っています。ファームウエア側で Secure Boot を有効にしていれば起動を行なうことができますし、無効化しても起動することができます。</para>
    <figure>
     <title>Secure Boot サポート</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata fileref="yast2_bootloader_boot_code_efi.png" width="70%" format="PNG"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="yast2_bootloader_boot_code_efi.png" width="70%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </figure>
    <para>Secure Boot の機能を利用するには、パーティション方式を古いマスターブートレコード (MBR; Master Boot Record) 形式から、GUID パーティションテーブル (GPT; GUID Partition Table) に置き換える必要があります。 &yast; がインストール時に EFI モードを検出すると、 GPT でパーティションを作成しようとします。また、 UEFI では、 FAT 形式でフォーマットされた EFI システムパーティション (ESP; EFI System Partition) 内に EFI プログラムを配置する必要があります。</para>
   </note>
<!-- http://www.suse.com/blogs/uefi-secure-boot-plan/ -->
   <para>さらに、 UEFI の Secure Boot を利用するには、ファームウエア側で信頼されている鍵で署名されたブートローダを使用する必要があります。また、この鍵はあらかじめ信頼されていなければなりません。</para>
   <para>この信頼を得るには、 2 種類の方法があります。 1 つ目の方法は、ハードウエアの製造元に依頼して、 SUSE の鍵を信頼してもらう方法です。 SUSE ではブートローダに対して署名を付与しています。もう 1 つの方法は、 Microsoft 社の Windows ロゴ認証プログラムに申し込んでブートローダの証明を得て、 Microsoft 社から SUSE の署名鍵を認証してもらう (つまり、 KEK で署名してもらう) 方法です。現在は SUSE 社が UEFI 署名サービス (この場合は Microsoft 社) を介して、署名を付与してもらっています。</para>
<!-- We are currently evaluating both approaches, and may eventually
even pursue both in parallel. -->
   <figure xml:id="fig.uefi.secure.boot.mok2">
    <title>UEFI: Secure Boot の処理</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata fileref="uefi-secure-boot-mok2.png" width="50%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="uefi-secure-boot-mok2.png" width="80%"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>実装レイヤでは SUSE は、既定でインストールされる <systemitem>shim</systemitem> ローダを使用しています。これは法的な問題を回避できる賢いソリューションであるだけでなく、証明書と署名の手順を非常に簡単にすることができます。 <systemitem>shim</systemitem> ローダが行なう処理は、 &grub; のようなブートローダを読み込んで、それを検証するだけです。このブートローダは、 SUSE の鍵で署名されたカーネルのみを読み込むようになっています。 <phrase os="sles;sled">SUSE では、この機能を SLE11 SP3 の新規インストールで提供していて、 UEFI Secure Boot が有効化された環境であれば使用できるようになっています。</phrase></para>
   <para>信頼済みのユーザという観点では、下記の 2 種類のユーザが存在します:</para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>1 つ目は鍵の所有者です。プラットフォーム鍵 (PK) はほぼ全てのことが許可されます。鍵交換鍵 (KEK) は PK の変更を除き、 PK と同じ内容が許可されます。</para>
    </listitem>
    <listitem>
     <para>2 つ目はマシンに対して物理的なアクセスのできるユーザです。このユーザはマシンを再起動することができるほか、 UEFI の設定を行なうことができます。</para>
    </listitem>
   </itemizedlist>
   <para>UEFI では、これらのユーザの要件を満たすため、 2 種類の変数を提供しています:</para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>1 つ目は <quote>認証済み変数</quote> と呼ばれるもので、起動処理 (起動サービス環境 (Boot Services Environment)) 内でも起動済みの OS 内でも、変更できる変数です。ただし、変数の値は古い値と同じ鍵で署名されている場合にのみ変更することができます。また、より高いシリアル番号の値を追記するか、もしくはより高いシリアル番号の値にのみ置き換えることができます。</para>
    </listitem>
    <listitem>
     <para>2 つ目は <quote>起動サービスのみの変数</quote> と呼ばれるもので、起動処理中に実行される任意のコードからのみアクセスすることができます。起動処理が終わると、 OS の起動前にブートローダ側で <literal>ExitBootServices</literal> を呼び出さなければなりません。その後、これらの変数にはアクセスできなくなりますので、 OS 側からもアクセスができなくなります。</para>
    </listitem>
   </itemizedlist>
   <para>様々な UEFI 鍵リストは最初の種類のものであり、これによってオンラインでの更新や追加、鍵やドライバ／ファームウエアのフィンガープリントのブラックリストなどを行なうことができます。また、 2 番目の <quote>起動サービスのみの変数</quote> では、 Secure Boot を安全かつオープンソースのやり方で実装し、それによって GPLv3 との互換性も確保することができています。</para>
   <para>SUSE では <systemitem>shim</systemitem> と呼ばれる、 SUSE と Microsoft が署名している小さくてシンプルな EFI ブートローダを使用しています。</para>
   <para>これにより、 <systemitem>shim</systemitem> が読み込みと実行ができるようになっています。</para>
   <para><systemitem>shim</systemitem> を読み込んで実行すると、読み込むべきブートローダが信頼のできるものかどうかを確認しようとします。 <!-- ??? It will not use the SUSE KEK nor theMicrosoft certificate for this. --> 既定の動作では、 <systemitem>shim</systemitem> は独立した SUSE の内蔵署名を使用します。これに加えて <systemitem>shim</systemitem> は、既定の SUSE 鍵を上書きする追加の鍵を <quote>登録</quote> します。下記では、この鍵を略して <quote>マシン所有者鍵</quote> (MOK) と呼んでいます。</para>
   <para>あとはブートローダがカーネルを検証して起動し、カーネルが同様にモジュールを検証して読み込みます。</para>
  </sect2>

  <sect2 xml:id="sec.uefi.secboot.mok">
   <title>MOK (マシン所有者鍵; Machine Owner Key)</title>
<!-- <para>
Enroll key from the OS (with a password for MOK list), using mokutils tool.
Rebooted is required, where <systemitem>shim</systemitem> will check password: ensure physical user is present.
This key is added to MOK list, saved into in an UEFI Boot Service Only Variable and will be used for future boots to ensure key is not modified.
MOK list can only be modified in Secure Boot phase (before kernel is started).
Enroll can also be done at boot time if key is available on EFI System
Partition.
</para>
-->
   <para>ユーザ ( <quote>マシン所有者</quote> ) が起動処理のコンポーネントを入れ替えたい場合は、マシン所有者鍵 (MOKs) を使用します。これを行なうには、 <systemitem>mokutils</systemitem> と呼ばれるツールを利用して、コンポーネントへの署名と MOK の管理を行ないます。</para>
   <para>登録の処理はマシンの再起動から始まります。 <systemitem>shim</systemitem> の読み込みの際、起動処理内での割り込み (たとえばキーの押下) を行なって、登録モードに移行します。これにより、起動パーティション内のファイルを通して、既定の SUSE の鍵を置き換えることができるようになります。ユーザ側で処理を行なうと、 <systemitem>shim</systemitem> はファイルのハッシュ値を計算し、結果を <quote>起動サービスのみの変数</quote> に書き込みます。これにより <systemitem>shim</systemitem> は、信頼の鎖に入っていないファイルの変更を検知できるようになりますので、ユーザが指定した MOK が正しいことを確認できる仕組みになっています。</para>
   <para>これら全ての処理は起動時に行なわれ、検証済みのコードのみが実行されることになります。また、コンソールにアクセスできるユーザだけが、マシン所有者の鍵セットを利用できることにもなります。マルウェアなどの不正なコードや、リモートからの攻撃者は、たとえリモートから OS にアクセスできてしまったとしても、 OSのファイルを変更することができても <quote>起動サービスのみの変数</quote> を変更することができませんので、不正なコードを実行させることができなくなる、というわけです。</para>
   <para>一方、 <systemitem>shim</systemitem> から読み込まれて検証されたブートローダは、カーネルを検証する目的で <systemitem>shim</systemitem> を呼び返します。これは、検証を行なうコードの重複を防ぐための仕組みです。 <systemitem>shim</systemitem> は MOK の同じリストを使用してカーネルを検証し、ブートローダがカーネルを読み込んでよいものかどうかを応答します。</para>
   <para>この仕組みによって、独自のカーネルやブートローダをインストールできることになります。これを行なうには、新しい鍵セットをインストールして、初回の再起動でコンソール経由で認可を与えるだけです。 MOK は一覧であり、 1 つの鍵だけを示すものではありませんので、複数の製造元からの <systemitem>shim</systemitem> 信頼鍵を利用することができますから、ブートローダで任意のカーネルを起動できることになります。</para>
  </sect2>

  <sect2 xml:id="sec.uefi.secboot.custom">
   <title>独自のカーネルの起動</title>
   <para>下記の説明は、 <link xlink:href="https://ja.opensuse.org/openSUSE:UEFI#.E7.8B.AC.E8.87.AA.E3.81.AE.E3.82.AB.E3.83.BC.E3.83.8D.E3.83.AB.E3.81.AE.E8.B5.B7.E5.8B.95"/> をベースにしています。</para>
   <para>Secure Boot は、独自にコンパイルしたカーネルを起動できないようにする仕組みではありません。自分の証明書で署名したあと、その証明書の発行者をファームウエアか MOK にインストールすることで、解決することができます。</para>
   <procedure>
    <step>
     <para>まずは署名に使用する独自の X.509 鍵と証明書を作成します:</para>
<screen>openssl req -new -x509 -newkey rsa:2048 -keyout key.asc \
  -out cert.pem -nodes -days 666 -subj "/CN=$USER/"</screen>
     <para><!-- bnc#811869 --> 証明書の作成方法について、詳しくは <link xlink:href="https://ja.opensuse.org/openSUSE:UEFI_%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E7%BD%B2%E5%90%8D%E3%83%84%E3%83%BC%E3%83%AB"/> をお読みください。</para>
    </step>
    <step>
     <para>鍵と証明書を PKCS#12 形式にパッケージ化します:</para>
<screen>&prompt.user;openssl pkcs12 -export -inkey key.asc -in cert.pem \
  -name kernel_cert -out cert.p12</screen>
    </step>
    <step>
     <para>pesign で使用する NSS データベースを生成します:</para>
<screen>&prompt.user;certutil -d . -N</screen>
    </step>
    <step>
     <para>NSS データベース内に PKCS#12 に含まれる鍵と証明書を取り込みます:</para>
<screen>&prompt.user;pk12util -d . -i cert.p12</screen>
    </step>
    <step>
     <para><command>pesign</command> を利用して、新しい署名をカーネルを追加します:</para>
<screen>&prompt.user;pesign -n . -c kernel_cert -i arch/x86/boot/bzImage \
  -o vmlinuz.signed -s</screen>
    </step>
    <step>
     <para>カーネルイメージに含まれる署名を一覧表示します:</para>
<screen>&prompt.user;pesign -n . -S -i vmlinuz.signed</screen>
     <para>あとは通常通り、 /boot ディレクトリ内にカーネルをインストールすることができます。ただし、カーネルには独自の証明書による署名が設定されているため、これをファームウエアか MOK に取り込む必要があります。</para>
    </step>
    <step>
     <para>UEFI ファームウエアまたは MOK に取り込むため、証明書を DER 形式に変換します:</para>
<screen>&prompt.user;openssl x509 -in cert.pem -outform der -out cert.der</screen>
    </step>
    <step>
     <para>簡単にアクセスできるよう、 ESP に証明書をコピーします:</para>
<screen>&prompt.sudo;cp cert.der /boot/efi/</screen>
    </step>
    <step>
     <para>MOK を自動的に取り扱うには、 <command>mokutil</command> を使用します。</para>
     <stepalternatives>
      <step>
       <substeps>
        <step>
         <para>証明書を MOK に取り込みます:</para>
<screen>&prompt.user;mokutil --root-pw --import cert.der</screen>
         <para><option>--root-pw</option> オプションを指定することで、 &rootuser; ユーザ経由でアクセスすることができます。</para>
        </step>
        <step>
         <para>登録の準備ができた証明書の一覧を確認します:</para>
<screen>&prompt.user;mokutil --list-new</screen>
        </step>
        <step>
         <para>システムを再起動します。 <systemitem>shim</systemitem> から MokManager が起動できるはずです。 &rootuser; のパスワードを入力して、 MOK の一覧内への証明書の取り込みを確認します。</para>
        </step>
        <step>
         <para>新しく取り込んだ鍵が登録されていることを確認します:</para>
<screen>&prompt.user;mokutil --list-enrolled</screen>
        </step>
       </substeps>
      </step>
      <step>
       <substeps>
        <step>
         <para>上記以外にも、 MOK を手作業で処理することもできます:</para>
         <para>まずは再起動します。</para>
        </step>
        <step>
         <para>&grub; のメニューが表示されたら、 ' <literal>c</literal> ' キーを押します。</para>
        </step>
        <step>
         <para>下記のように入力します:</para>
<screen>chainloader $efibootdir/MokManager.efi
boot</screen>
        </step>
        <step>
         <para><guimenu>Enroll key from disk</guimenu> を選択します。</para>
        </step>
        <step>
         <para><filename>cert.der</filename> ファイルを指定して <keycap function="enter"/> を押します。</para>
        </step>
        <step>
         <para>後は表示された手順に従います。通常は ' <literal>0</literal> ' を押してから ' <literal>y</literal> ' を押すと、確認を完了することができます。</para>
         <para>それ以外にも、ファームウエア側のメニューで、署名データベース内に新しい鍵を追加することができるものもあります。</para>
        </step>
       </substeps>
      </step>
     </stepalternatives>
    </step>
   </procedure>
<!--
Booting the Machine without vendor provided Keys

If the firmware menu offers options to reset the keys used for secure boot you may install new PK, KEK and db without Microsoft keys. Import /usr/lib64/efi/shim-opensuse.der into db to make openSUSE kernels boot in that case. The default shim is signed by both Microsoft and openSUSE. Some firmware versions don't support double signing though. In that case install /usr/lib64/efi/shim-opensuse.efi which only has the openSUSE signature as as /boot/efi/EFI/opensuse/shim.efi
-->
<!--
Glossary

PK
    The "Platform Key" typically refers to a certificate installed by the hardware vendor on the machine. To be able to modify the KEK a valid signature of the PK is required.

KEK
    A valid signature of the "Key Exchange Key" is required to update the signature database.

db
    The Signature Database contains well known certificates, signatures or hashes of binaries. Only binaries that can be verified using that database are executed by the firmware. A valid signature of the KEK is required to update the Signature Database.

dbx
    The Forbidden Signatures Database is the opposite of 'db', a blacklist of certificates, signatures and hashes. If a binary matches any of the entries there it cannot be executed. A valid signature of the KEK is required to update the Forbidden Signature Database.

MOK
    Machine Owner Keys. An extra database of certificates or hashes used by MokManager. MokManager can be used interactively by the user during boot to update MOKs.
-->
  </sect2>

  <sect2 xml:id="sec.uefi.secboot.non-inbox">
   <title>非同梱ドライバの使用について</title>
   <para>Secure Boot が有効化されている場合、インストール時に非同梱ドライバ (&productname; には含まれていないドライバ) の追加を行なうことはできません。 SolidDriver/PLDP 向けの署名鍵は、既定では信頼されていません。</para>
   <para>Secure Boot が有効化されている場合、インストール時にサードパーティ製のドライバをインストールする方法が 2 種類用意されています。いずれも下記に注意してください:</para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>インストールを行なう前に、ファームウエアやシステム管理ツールを介して、ファームウエアデータベース内に必要な鍵を取り込んでおいてください。この設定は、使用しているハードウエアによって異なります。詳しくはハードウエアの製造元にお問い合わせください。</para>
    </listitem>
    <listitem>
     <para><link xlink:href="https://drivers.suse.com/"/> もしくはハードウエアの製造元が提供する起動可能な ISO を利用して、初回の起動時に必要な鍵を登録します。</para>
    </listitem>
   </itemizedlist>
   <para>起動可能な ISO を利用して MOK リスト内にドライバの鍵を登録するには、下記の手順を実施します:</para>
   <procedure>
    <step>
     <para>空きの CD/DVD メディアに ISO イメージを書き込みます。</para>
    </step>
    <step>
     <para>標準のインストールメディアを利用するか、もしくはネットワークのインストールサーバを利用してインストールを開始します。</para>
     <para>ネットワーク経由でインストールする場合は、起動パラメータに <option>install=</option> オプションで URL を指定します。</para>
     <para>光学メディアからインストールを行なう場合、インストールプログラムは最初にドライバキットから起動し、その後製品のインストールディスクを挿入してください。</para>
    </step>
    <step>
     <para>initrd には更新済みのドライバが含まれていますので、それを利用してインストールすることができます。</para>
    </step>
   </procedure>
   <para>詳しくは <link xlink:href="https://drivers.suse.com/doc/Usage/Secure_Boot_Certificate.html"/> をお読みください。</para>
  </sect2>

  <sect2 xml:id="sec.uefi.secboot.feats">
<!-- 2014-06-03, ke: according to fate#317500 -->
   <title>機能と制限</title>
   <para>Secure Boot モードで起動する場合、下記の機能が提供されます:</para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>UEFI の既定の場所に対するブートローダのインストール、および EFI の起動項目に対する維持や復元の仕組み</para>
    </listitem>
    <listitem>
     <para>UEFI 経由での再起動</para>
    </listitem>
    <listitem>
     <para>従来の BIOS にフォールバックすることのない、 UEFI での Xen ハイパーバイザの起動</para>
    </listitem>
    <listitem>
     <para>UEFI の IPv6 PXE 起動への対応</para>
    </listitem>
    <listitem>
     <para>UEFI ビデオモードサポート (UEFI 経由でカーネルがビデオモードを取得し、同じパラメータで KMS モードを設定する機能)</para>
    </listitem>
    <listitem>
     <para>USB デバイス経由の UEFI 起動</para>
    </listitem>
   </itemizedlist>
   <para>Secure Boot モードでの起動時には、下記の制限事項が適用されます:</para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>Secure Boot が容易に突破されないようにするため、 Secure Boot の動作中はいくつかのカーネル機能が無効化されます。</para>
    </listitem>
<!-- the rest is taken from fate#317500 -->
    <listitem>
     <para>ブートローダ、カーネル、カーネルモジュールは、いずれも署名されていなければなりません。</para>
    </listitem>
    <listitem>
     <para>Kexec と Kdump の機能が無効化されます。</para>
    </listitem>
    <listitem>
     <para>ハイバネーション (suspend to disk) が無効化されます。</para>
    </listitem>
    <listitem>
     <para>root ユーザであっても <filename>/dev/kmem</filename> および <filename>/dev/mem</filename> にアクセスできなくなります。</para>
    </listitem>
    <listitem>
     <para>root ユーザであっても I/O ポートへのアクセスができなくなります。また、 X11 のグラフィカルドライバはカーネルドライバを使用しなければなりません。</para>
    </listitem>
    <listitem>
     <para>sysfs を介した PCI BAR アクセスができなくなります。</para>
    </listitem>
    <listitem>
     <para>ACPI の <literal>custom_method</literal> が利用できなくなります。</para>
    </listitem>
    <listitem>
     <para>asus-wmi モジュール向けの debugfs が利用できなくなります。</para>
    </listitem>
    <listitem>
     <para><literal>acpi_rsdp</literal> がカーネルに対して何も影響を及ぼさなくなります。</para>
    </listitem>
   </itemizedlist>
<!--
*** statements
making it harder for attackers to hide a rootkit in the boot chain.


UEFI Specification:

UEFI supports booting from media that contain an UEFI OS loader or an
UEFI-defined System Partition. An UEFI-defined System Partition is
required by UEFI to boot from a block device. UEFI does not require any
change to the first sector of a partition, so it is possible to build
media that will boot on both legacy architectures and UEFI platforms.
-->
  </sect2>
 </sect1>
 <sect1 xml:id="sec.uefi.moreinfo">
  <title>さらなる情報</title>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para><link xlink:href="http://www.uefi.org"/>: UEFI の Web ページです。ここには最新の UEFI 仕様に関する情報が記載されています。</para>
   </listitem>
   <listitem>
    <para>Olaf Kirch 氏および Vojtěch Pavlík 氏によるブログ投稿 (本章の内容は、この投稿をベースにしています):</para>
    <itemizedlist mark="bullet" spacing="normal">
     <listitem>
      <para><link xlink:href="http://www.suse.com/blogs/uefi-secure-boot-plan/"/></para>
     </listitem>
     <listitem>
      <para><link xlink:href="http://www.suse.com/blogs/uefi-secure-boot-overview/"/></para>
     </listitem>
     <listitem>
      <para><link xlink:href="http://www.suse.com/blogs/uefi-secure-boot-details/"/></para>
     </listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para><link xlink:href="http://ja.opensuse.org/openSUSE:UEFI"/> openSUSE での UEFI</para>
   </listitem>
  </itemizedlist>
 </sect1>
<!--
* Fates
** #313527: [META] [UEFI] Secure Boot for UEFI 2.3.1
   Enthält Verweise auf alle anderen UEFI Features

** #314578: [DOCU] Document current limitations in a UEFI Secure Boot
   Context
   Release Notes
** #314528: [DOCU] update documentation for Secure Boot


osc -A https://api.suse.de sr -m"Update text and image files" home:keichwa:branches:Devel:WebYaST:1.3 webyast-user_en Devel:WebYaST:1.3
-->
</chapter>
