<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-security-ldap-migrate">
  
  <title>Migrating to &ds389; from OpenLDAP</title>
   <para>OpenLDAP is deprecated and no longer supported as of &sle;&nbsp;
     15.3, replaced by &ds389;. &suse; provides the 
     <command>openldap_to_ds</command> utility to assist migration, included 
     in the <package>&ds389;</package> package.
   </para>
   <para>
     The <command>openldap_to_ds</command> utility is designed to automate as 
     much of the migration as possible. However, every LDAP deployment is 
     different, and it is not possible to write a tool that satisfies all 
     situations. It is likely there will be some manual steps to perform, and
     you should test your migration procedure thoroughly before attempting a 
     production migration.
   </para>
   
  <sect2 xml:id="sec-security-ldap-migrate-test">
  <title>Testing Migration from OpenLDAP</title>
   <para>
     There are enough differences between OpenLDAP and &ds389; that 
     migration will probably involve repeated testing and adjustments.
     It can be helpful to do a quick migration test to get an idea of what 
     steps will be necessary for a successful migration.     
   </para>
   <para>
     Prerequisites:
   </para>
   <itemizedlist>
    <listitem>
      <para>
        A running &ds389; instance.
     </para>
    </listitem>
    <listitem>
     <para>
       An OpenLDAP <filename>slapd</filename> configuration file or directory 
       in dynamic ldif format.
     </para>
    </listitem>
    <listitem>
     <para>
        An ldif file backup of your OpenLDAP database.
     </para>
    </listitem>
   </itemizedlist>
   <para>
     If your slapd configuration is not in dynamic ldif format, create a 
     dynamic copy with <command>slaptest</command>. Create the 
     <filename>slapd.d</filename> directory, then run the following command:
   </para>
   <screen>&prompt.sudo;slaptest -f /etc/openldap/slapd.conf -F /root/slapd.d
     </screen>
     <para>
       This results in something similar to the following example:
     </para>
     <screen>&prompt.sudo;ls  slapd.d/*
slapd.d/cn=config.ldif

slapd.d/cn=config:
cn=module{0}.ldif  cn=schema.ldif                 olcDatabase={0}config.ldif
cn=schema          olcDatabase={-1}frontend.ldif  olcDatabase={1}mdb.ldif
</screen>
   <para>
     Create one ldif file per suffix. In the following examples the suffix
     is <replaceable>dc=ldap1,dc=com</replaceable>. If you are using the 
     <filename>/etc/openldap/slapd.conf</filename>
     format, use the following command to create the ldif backup file:
   </para>
   <screen>&prompt.sudo;slapcat -f /etc/openldap/slapd.conf -b <replaceable>dc=ldap1,dc=com</replaceable> -l /root/<replaceable>ldap1-com</replaceable>.ldif
   </screen>
   <para>
     For the <filename>/etc/openldap/slapd.d</filename> format use the following command:
   </para>
   <screen>&prompt.sudo;slapcat -f /etc/openldap/slapd.conf -b <replaceable>dc=ldap1,dc=com</replaceable> -l /root/<replaceable>ldap1-com</replaceable>.ldif</screen>   
   <para>
     Use <command>openldap_to_ds</command> to analyse the configuration and 
     files, and show a migration plan without changing anything:
   </para>
   <screen>&prompt.sudo;openldap_to_ds <replaceable>ldap1</replaceable> /root/slapd.d <replaceable>ldap1-com</replaceable>.ldif</screen>
   <para>
     This performs a dry-run and does not change anything. The output looks
     like this:
   </para>
   <screen>Examining OpenLDAP Configuration ...
Completed OpenLDAP Configuration Parsing.
Examining Ldifs ...
Completed Ldif Metadata Parsing.
The following migration steps will be performed:
 * Schema Skip Unsupported Attribute -&gt; otherMailbox (0.9.2342.19200300.100.1.22)
 * Schema Skip Unsupported Attribute -&gt; dSAQuality (0.9.2342.19200300.100.1.49)
 * Schema Skip Unsupported Attribute -&gt; singleLevelQuality (0.9.2342.19200300.100.1.50)
 * Schema Skip Unsupported Attribute -&gt; subtreeMinimumQuality (0.9.2342.19200300.100.1.51)
 * Schema Skip Unsupported Attribute -&gt; subtreeMaximumQuality (0.9.2342.19200300.100.1.52)
 * Schema Create Attribute -&gt; suseDefaultBase (SUSE.YaST.ModuleConfig.Attr:2)
 * Schema Create Attribute -&gt; suseNextUniqueId (SUSE.YaST.ModuleConfig.Attr:3)
[...]
 * Schema Create ObjectClass -&gt; suseDhcpConfiguration (SUSE.YaST.ModuleConfig.OC:10)
 * Schema Create ObjectClass -&gt; suseMailConfiguration (SUSE.YaST.ModuleConfig.OC:11)
 * Database Reindex -&gt; dc=example,dc=com
 * Database Import Ldif -&gt; dc=example,dc=com from example.ldif - excluding entry attributes = [{'structuralobjectclass', 'entrycsn'}]
No actions taken. To apply migration plan, use '--confirm'
</screen>
   <para>
     The following example performs the migration, and the output looks 
     different from the dry-run:
   </para>
   <screen>&prompt.sudo;openldap_to_ds <replaceable>ldap1</replaceable> /root/slapd.d <replaceable>ldap1-com</replaceable>.ldif --confirm
Starting Migration ... This may take some time ...
migration: 1 / 40 complete ...
migration: 2 / 40 complete ...
migration: 3 / 40 complete ...
[...]
Index task index_all_05252021_120216 completed successfully
post: 39 / 40 complete ...
post: 40 / 40 complete ...
ðŸŽ‰ Migration complete!
----------------------
You should now review your instance configuration and data:
 * [ ] - Create/Migrate Database Access Controls (ACI)
 * [ ] - Enable and Verify TLS (LDAPS) Operation
 * [ ] - Schedule Automatic Backups
 * [ ] - Verify Accounts Can Bind Correctly
 * [ ] - Review Schema Inconistent ObjectClass -&gt; pilotOrganization (0.9.2342.19200300.100.4.20)
 * [ ] - Review Database Imported Content is Correct -&gt; dc=ldap1,dc=com
</screen>
  
   <para>
     When the migration is complete, <command>openldap_to_ds</command>
     creates a checklists of post-migration tasks that must be completed.
     It is a best practice to to document all of your post-migration steps,
     so that you can reproduce them in your post-production procedures.
     Then test clients and application integrations to the migrated &ds389;
     instance.
   </para>
   <important>
     <title>Develop a Rollback Plan</title>
     <para>
       It is essential to develop a rollback plan in case of any failures. 
       This plan should define a successful migration, the tests to determine 
       what worked and what needs to be fixed, which steps are critical, what 
       can be deferred until later, how to decide when to undo any changes, 
       how to undo them with minimal disruption, what other teams need to be involved.
     </para>
   </important>
   <para>
     Due to the variability of deployments, it is difficult to provide
     a recipe for a successful production migration. Once you have
     thoroughly tested the migration process and verified that you will
     get good results, there are some general steps that will help.
   </para>
   <itemizedlist>
    <listitem>
      <para>
        Lower all hostname/DNS TTLs to 5 minutes 48 hours before the change, to allow a fast rollback to your existing OpenLDAP deployment.
      </para>
    </listitem>
    <listitem>
      <para>
        Pause all data synchronization and incoming data processes, so that data in the OpenLDAP environment is not changing during the migration process.
      </para>
    </listitem>
    <listitem>
      <para>
        Have all &ds389; hosts ready for deployment before the migration.
      </para>
    </listitem>
    <listitem>
      <para>
        Have your test migration documentation readily available.
      </para>
    </listitem> 
   </itemizedlist>    
  </sect2>     
</sect1>
