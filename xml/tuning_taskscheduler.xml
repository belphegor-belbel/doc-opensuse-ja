<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-taskscheduler">
 <title>タスクスケジューラのチューニング</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
        </dm:bugtracker>
	<dm:translation>yes</dm:translation>
      </dm:docmanager>
    </info>
    <para>&productnamereg; のような現代型のオペレーティングシステムでは、通常の状態でも複数の処理を同時に動作させることができます。たとえばテキストファイル内を検索しながら、同時に電子メールを受信し、さらに外付けのハードディスクから巨大なファイルをコピーしたりすることができます。また、これらのようなシンプルな処理であっても、システム内では様々な追加のプロセスが動作します。それぞれの処理に対して必要なリソースを提供するため、 Linux カーネルではツールを利用して、個別の処理にリソースを配分することができます。これが <emphasis>タスクスケジューラ</emphasis> の仕組みです。</para>
 <para>下記の章では、プロセスのスケジューリングに関する最も重要な用語について説明しているほか、 &productname; で使用されているタスクスケジューラのポリシーやスケジューリングのアルゴリズム、タスクスケジューラに関する説明なども提供しています。また、関連する情報源へのリンクも用意されています。</para>
 <sect1 xml:id="sec-tuning-taskscheduler-intro">
  <title>概要</title>

  <para>Linux カーネルは、システム内で管理されているタスク (もしくはプロセス) の管理方法を制御します。タスクスケジューラは <emphasis>プロセススケジューラ</emphasis> と呼ばれることもありますが、これは次に動作させるタスクを決定するカーネル内の構成部品を指します。複数のタスクが同時に実行できることを保証するため、システムのリソースを最大限に使用する責任を負っています。このような構造により、タスクスケジューラはマルチタスク型のオペレーティングシステムの中枢を成しています。</para>

  <sect2 xml:id="sec-tuning-taskscheduler-intro-preemption">
   <title>プリエンプション</title>
   <para>タスクスケジューリングでの考え方は非常にシンプルです。システム内に動作可能なプロセスが存在すれば、それらのうちの少なくとも 1 つを動作させます。また、システム内にプロセッサの数よりも多くの動作可能なプロセスが存在した場合、同時にそれら全てを動作させることはできません。</para>
   <para>そのため、プロセスによっては一時的に停止させる (<emphasis>サスペンドさせる</emphasis>) 必要があることになり、後で実行させる必要があることになります。タスクスケジューラは、キュー内にあるどのプロセスを次に実行させるのかを決定します。</para>
   <para>上述のとおり、他の Unix 系オペレーティングシステムと同様に、 Linux は <emphasis>マルチタスク型の</emphasis> (複数のタスクを同時に動作させることのできる) オペレーティングシステムです。 Linux は <emphasis>プリエンプティブ</emphasis> マルチタスクと呼ばれる構造で、スケジューラ側でプロセスの一時停止を決定します。このような強制的な一時停止を <emphasis>プリエンプション</emphasis> (横取り等の意味) と呼びます。全ての Unix 系オペレーティングシステムは、その登場当初からプリエンプティブマルチタスクを提供しています。</para>
  </sect2>

  <sect2 xml:id="sec-tuning-taskscheduler-intro-timeslice">
   <title>タイムスライス</title>
   <para>それぞれのプロセスに対して与えられる時間枠で、その時間が経過するまではタスクスケジューラ側から一時停止を指示されない、最小単位の時間を指します。タイムスライスとは、各プロセスに対して提供されるプロセッサ時間の量を表す値でもあります。タイムスライスを割り当てておくことで、タスクスケジューラは動作中のシステムに対してグローバルな決定を下すことができるほか、プロセスがプロセッサを占有しないようにするための仕組みです。 <remark>sknorr, 2014-08-22: "dominate over" sounds weird, not sure if just "dominate" would be better, though.</remark></para>
  </sect2>

  <sect2 xml:id="sec-tuning-taskscheduler-intro-priority">
   <title>プロセスの優先順位</title>
   <para>スケジューラは各プロセスに割り当てられた優先順位を元にして判断を行います。プロセスの現在の優先順位を計算するにあたって、タスクスケジューラは複雑なアルゴリズムを使用します。その結果、各プロセスにはプロセッサの能力に応じた値が設定されます。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-tuning-taskscheduler-policy-class">
  <title>プロセスの分類</title>

  <para>プロセスは通常、目的や振る舞いに応じた分類付けが行われます。明確な区切りがあるとは限りませんが、一般的には 2 種類の分類が行われます。これらの基準はそれぞれ個別に判断されるべきもので、お互いに排他関係にあるわけではありません。</para>

  <para>1 つの考え方として、 <emphasis>I/O バウンド</emphasis> と <emphasis>プロセッサバウンド</emphasis> に分類するやり方があります。</para>

  <variablelist>
   <varlistentry>
    <term>I/O バウンド</term>
    <listitem>
     <para>I/O とは入出力の意味で、キーボードやマウス、光学ドライブやハードディスクなどを意味します。 <emphasis>I/O バウンドプロセス</emphasis> とは、リクエストの送信や応答の待機に多くの時間を費やすプロセスの意味で、非常に頻繁に動作するものの、同様に I/O リクエストを待機している他のプロセスの動作を妨害することがないよう、その動作は短くなります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>プロセッサバウンド</term>
    <listitem>
     <para>その一方、 <emphasis>プロセッサバウンド</emphasis> のタスクでは、コードの実行に多くの時間を費やし、スケジューラによって一時停止させられるまで動き続けるようなものを指します。 I/O 要求を待機しているようなプロセスの動作を妨害することはありませんが、より長い時間にわたって動作し続ける特徴があります。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>もう 1 つの考え方として、プロセスを <emphasis>対話型</emphasis>, <emphasis>バッチ</emphasis>, <emphasis>リアルタイム</emphasis> の 3 種類に分類するやり方もあります。</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para><emphasis>対話型</emphasis> のプロセスでは、キーボードやマウス操作など、 I/O のリクエスト待機に多くの時間を費やします。スケジューラはユーザ側からの要求が届き次第、すぐにこれらのプロセスを起床させなければなりません。そうでないと、ユーザ側にはプログラムの応答が無くなったかのように見えてしまうからです。一般的には 100 [ミリ秒] 程度の許容遅延が設定されます。対話型プロセスには、たとえばオフィスアプリケーションやテキストエディタ、イメージ操作プログラムなどが該当します。</para>
   </listitem>
   <listitem>
    <para><emphasis>バッチ</emphasis> のプロセスは裏で動作するものであり、応答性については特に求められません。通常はスケジューラ側で低い優先順位が設定されます。バッチプロセスには、マルチメディアデータの変換処理やデータベースの検索エンジン、ログファイルの検索機能などが該当します。</para>
   </listitem>
   <listitem>
    <para><emphasis>リアルタイム</emphasis> のプロセスは、低い優先順位のプロセスによって動作を妨害されてはならないプロセスで、スケジューラ側では短い応答時間となるように設定されます。リアルタイムプロセスには、マルチメディアコンテンツの編集アプリケーションなどが該当します。</para>
   </listitem>
  </itemizedlist>
 </sect1>
<!-- 2014-07-22 tbazant: removing, O1 not used anymore
 <sect1 id="sec-tuning-taskscheduler-o1">
  <title>O(1) scheduler</title>

  <para>
   The Linux kernel version 2.6 introduced a new task scheduler, called O(1)
   scheduler (see
   <ulink
    url="https://en.wikipedia.org/wiki/Big_O_notation">Big O
   notation</ulink>), It was used as the default scheduler up to Linux kernel
   version 2.6.22. Its main task is to schedule tasks within a fixed amount
   of time, no matter how many runnable processes there are in the system.
  </para>

  <para>
   The scheduler calculates the timeslices dynamically. However, to
   determine the appropriate timeslice is a complex task: Too long
   timeslices cause the system to be less interactive and responsive, while
   too short ones make the processor waste a lot of time on the overhead of
   switching the processes too frequently. The default timeslice is usually
   rather low, for example 20ms. The scheduler determines the timeslice
   based on priority of a process, which allows the processes with higher
   priority to run more often and for a longer time.
  </para>

  <para>
   A process does not have to use all its timeslice at once. For instance, a
   process with a timeslice of 150ms does not have to be running for 150ms
   in one go. It can be running in five different schedule slots for 30ms
   instead. Interactive tasks typically benefit from this approach because
   they do not need such a large timeslice at once while they need to be
   responsive as long as possible.
  </para>

  <para>
   The scheduler also assigns process priorities dynamically. It monitors
   the processes' behavior and, if needed, adjusts its priority. For
   example, a process which is being suspended for a long time is brought up
   by increasing its priority.
  </para>
 </sect1>
 -->
 <sect1 xml:id="sec-tuning-taskscheduler-cfs">
  <title>完全公平型スケジューラ (Completely Fair Scheduler)</title>

  <para>Linux カーネルバージョン 2.6.23 およびそれ以降では、プロセスの実行を制御するスケジューリングに対して新しいアプローチが追加され、完全公平型スケジューラ (Completely Fair Scheduler (CFS)) が既定の Linux カーネルのスケジューラとして設定されるようになりました。それ以降重要な変更や改善が行われていますが、本章での説明は &productname; のカーネルバージョン 2.6.32 およびそれ以降 (バージョン 3.x を含む) に対応しています。スケジューラ環境は複数のパーツから構成されていますが、主として 3 種類の機能が追加されています:</para>

  <variablelist>
   <varlistentry>
    <term>モジュール型のスケジューラコア</term>
    <listitem>
     <para>スケジューラの中枢部分は <emphasis>スケジューリングクラス</emphasis> で拡張されています。これらのクラスはモジュール型で、それぞれがスケジューリングポリシーを表しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>完全公平型スケジューラ (Completely Fair Scheduler)</term>
    <listitem>
     <para>カーネルバージョン 2.6.23 で追加され、 2.6.24 で拡張された CFS は、プロセッサ時間をプロセッサに対して <quote>公平に</quote> 分け与える機能をもたらすものです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>グループスケジューリング</term>
    <listitem>
     <para>たとえばプロセスをユーザごとに分けてグループ化することで、 CFS はユーザ単位で公平なプロセッサ時間を提供するように設定することができます。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>これらのことから、 CFS はサーバ環境でもデスクトップ環境でも最適なスケジューリングを提供できるようになっています。</para>

  <sect2 xml:id="sec-tuning-taskscheduler-cfs-howitworks">
   <title>CFS の仕組み</title>
   <para>CFS は実行可能なそれぞれのタスクに対して、公平な割り振りを行おうとします。タスクスケジューリングで最も公平なやり方として、 CFS は <emphasis>赤黒木</emphasis> の考え方を採用しています。赤黒木は平衡二分探索木の一種で、項目の挿入や削除を合理的な方法で提供し、平衡性を保ったままにすることができるものです。</para>
   <para>CFS がタスクをスケジュールする際、 <quote>仮想ランタイム</quote> もしくは <quote>vruntime</quote> と呼ばれる値を足していきます。実行する次のタスクを選択する際には、それまでに足された最小の vruntime のタスクを使用します。タスクが <emphasis>実行キュー</emphasis> (次に実行すべきプロセスの予定時刻表) 内に挿入された場合、赤黒木は平衡を保つように動作するため、最小の vruntime 値を持つタスクが赤黒木内では最初の項目となるように動きます。</para>
   <para>タスクに対して足される vruntime の量は、その優先順位に対応して決められます。高い優先順位のタスクは、低い優先順位のタスクよりも遅い頻度で vruntime が足される仕組みであるため、より高い優先順位のタスクほど、より頻繁に処理が行われることになります。</para>
  </sect2>

  <sect2 xml:id="sec-tuning-taskscheduler-cfs-grouping">
   <title>プロセスのグループ化</title>
   <para>Linux カーネルバージョン 2.6.24 では、 CFS が個別のタスクよりもグループに対して公平となるよう調整されました。実行可能なタスクはエンティティ (タスクの集合) としてグループ化され、 CFS では個別のタスクではなく、エンティティに対して公平になるように動作するようになっています。なおスケジューラ側では、エンティティ内の個別タスクに対しても、公平になるように処理を行います。</para>
   <para>カーネルスケジューラは、コントロールグループを利用して実行可能なタスクをグループ化しています。詳しくは <xref linkend="cha-tuning-cgroups"/> をお読みください。</para>
  </sect2>

  <sect2 xml:id="sec-tuning-taskscheduler-cfs-kernelconfig">
   <title>カーネルの設定オプション</title>
   <para>タスクスケジューラの基本的な動作に関わる要素は、カーネルの設定オプションを介して設定することができます。これらのオプションの設定は、カーネルのコンパイル時のオプションとして用意されています。カーネルのコンパイル作業は複雑な作業となるため、ここでは説明していません。詳しくは別途の資料をお探しください。</para>
   <warning>
    <title>カーネルのコンパイルについて</title>
    <para>&productname; に同梱されていないカーネル (たとえばご自身でコンパイルしたカーネル) をお使いの場合、サポートを全く受けられなくなることにご注意ください。</para>
   </warning>
  </sect2>

  <sect2 xml:id="sec-tuning-taskscheduler-cfs-terms">
   <title>用語</title>
   <para>タスクスケジューリングポリシーに関する文書では、いくつかの技術用語を用いる箇所があります。これらの用語の意味を知っておくことで、正しく文書を読み取ることができるようになります。下記にそれらのうちのいくつかを示します:</para>
   <variablelist>
    <varlistentry>
     <term>遅延 (レイテンシ)</term>
     <listitem>
      <para>プロセスに対して実行するようにスケジュールされてから、実際にその実行が行われるまでの遅延時間を意味します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>粒度</term>
     <listitem>
      <para>粒度と遅延の関係は、下記の数式で表すことができます:</para>
<screen>gran = ( lat / rtasks ) - ( lat / rtasks / rtasks )</screen>
      <para><emphasis>gran</emphasis> は粒度を、 <emphasis>lat</emphasis> は遅延を、 <emphasis>rtasks</emphasis> は実行中のタスク数をそれぞれ表しています。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <sect3 xml:id="kernel-tasksched-policies">
    <title>スケジューリングポリシー</title>
    <para>Linux カーネルは下記のスケジューリングポリシーに対応しています:</para>
    <variablelist>
     <varlistentry>
      <term>SCHED_FIFO</term>
      <listitem>
       <para>特別なタイムクリティカルな (時間的に制約の厳しい) アプリケーション向けのスケジューリングポリシーです。先入れ先出し (First In-First Out; FIFO) のスケジューリングアルゴリズムを使用します。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SCHED_BATCH</term>
      <listitem>
       <para>CPU に負荷が集中するタスク向けに設計されたスケジューリングポリシーです。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SCHED_IDLE</term>
      <listitem>
       <para><emphasis>非常に</emphasis> 優先順位の低いタスク向けのスケジューリングポリシーです。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SCHED_OTHER</term>
      <listitem>
       <para>ほとんどのプロセスに対して適用される、既定の Linux 時間共有スケジューリングポリシーです。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>SCHED_RR</term>
      <listitem>
       <para><systemitem>SCHED_FIFO</systemitem> に似ていますが、ラウンドロビン型のスケジューリングアルゴリズムを使用するポリシーです。</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-tuning-taskscheduler-cfs-chrt">
   <title><command>chrt</command> によるプロセスのリアルタイム属性の変更</title>
   <para><command>chrt</command> コマンドは、実行中のプロセスに対するリアルタイムスケジューリング属性を設定したり取得したりすることができるほか、指定した属性で指定したコマンドを実行することもできます。プロセスのスケジューリングポリシーのほか、優先順位の取得や設定も行うことができます。</para>
   <para>下記の例では、 PID が 16244 のプロセスを対象にしています。</para>
   <para>既存のタスクからリアルタイム属性を <emphasis>取得</emphasis> するには、下記のように入力して実行します:</para>
<screen>&prompt.root;chrt -p 16244
pid 16244's current scheduling policy: SCHED_OTHER
pid 16244's current scheduling priority: 0
</screen>
   <para>プロセスに対して新しいスケジューリングポリシーを設定する前に、まずは各スケジューリングアルゴリズムで設定可能な最小および最大の優先順位を確認しておきます:</para>
<screen>&prompt.root;chrt -m
SCHED_SCHED_OTHER min/max priority : 0/0
SCHED_SCHED_FIFO min/max priority : 1/99
SCHED_SCHED_RR min/max priority : 1/99
SCHED_SCHED_BATCH min/max priority : 0/0
SCHED_SCHED_IDLE min/max priority : 0/0
</screen>
   <para>上記の例では、 SCHED_OTHER, SCHED_BATCH, SCHED_IDLE の各ポリシーに対しては優先順位 0 のみを設定することができ、 SCHED_FIFO, SCHED_RR の各ポリシーに対しては 1 から 99 までを設定することができることを表しています。</para>
   <para>SCHED_BATCH スケジューリングポリシーを設定するには、下記のようにします:</para>
<screen>&prompt.root;chrt -b -p 0 16244
pid 16244's current scheduling policy: SCHED_BATCH
pid 16244's current scheduling priority: 0
</screen>
   <para><command>chrt</command> に関する詳細については、マニュアルページ ( <command>man 1 chrt</command> ) をお読みください。</para>
  </sect2>

  <sect2 xml:id="sec-tuning-taskscheduler-cfs-tuning">
   <title><command>sysctl</command> による稼働中のチューニング</title>
   <para>稼働中にカーネルのパラメータを調査したり変更したりすることのできる <command>sysctl</command> インターフェイスを利用して変数を変更することで、タスクスケジューラの既定の動作を変更することができます。 <command>sysctl</command> の書式はシンプルですが、いずれのコマンドとも &rootuser; で実行しなければなりません。</para>
   <para>カーネル変数の値を表示するには、下記のように入力して実行します:</para>
<screen>&prompt.root;<command>sysctl <replaceable>変数名</replaceable></command></screen>
   <para>値を設定するには、下記のように入力して実行します:</para>
<screen>&prompt.root;<command>sysctl <replaceable>変数名</replaceable>=<replaceable>値</replaceable></command></screen>
   <para>スケジューラ関連の変数を全て表示したい場合は <command>sysctl</command> コマンドを利用し、 <command>grep</command> で出力をフィルタリングします:</para>
   <screen>&prompt.root;<command>sysctl -A | grep "sched" | grep -v "domain"</command>
kernel.sched_cfs_bandwidth_slice_us = 5000
kernel.sched_child_runs_first = 0
kernel.sched_compat_yield = 0
kernel.sched_latency_ns = 24000000
kernel.sched_migration_cost_ns = 500000
kernel.sched_min_granularity_ns = 8000000
kernel.sched_nr_migrate = 32
kernel.sched_rr_timeslice_ms = 25
kernel.sched_rt_period_us = 1000000
kernel.sched_rt_runtime_us = 950000
kernel.sched_schedstats = 0
kernel.sched_shares_window_ns = 10000000
kernel.sched_time_avg_ms = 1000
kernel.sched_tunable_scaling = 1
kernel.sched_wakeup_granularity_ns = 10000000</screen>
   <para>なお、 <quote>_ns</quote> や <quote>_us</quote> で終わる名前の変数は、値をナノ秒単位やマイクロ秒単位で指定するものであることを示しています。</para>
<!-- fs 2010-07-01: Commenting, since we give some more tuning advice below
   <para>
    According to Ingo Molnar, the author of CFS, there is only one important
    tuning option for CFS:
    <literal>kernel.sched_min_granularity_ns</literal>. It can be used to
    fine-tune the scheduler from low-latency response suitable for desktops,
    to server deployment giving more priority to batch tasks.
   </para>
-->
   <para>最も重要なタスクスケジューラ関連の <command>sysctl</command> チューニング変数 (<filename>/proc/sys/kernel/</filename> からもアクセスすることができます) と、その簡潔な説明を下記に示します:</para>
   <variablelist>
    <varlistentry>
     <term><systemitem>sched_cfs_bandwidth_slice_us</systemitem></term>
     <listitem>
      <para>CFS の帯域制御が使用されている場合、このパラメータはタスクのコントロールグループの帯域プールから実行キューに転送されるランタイムの量 (帯域幅) を制御することができます。小さい値であるほど、全体の帯域幅をタスク間できめ細かく共有できるようになりますし、大きい値であるほど、転送にかかるオーバーヘッドを減らすことができます。詳しくは <link xlink:href="https://www.kernel.org/doc/Documentation/scheduler/sched-bwc.txt"/> (英語) をお読みください。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_child_runs_first</systemitem></term>
     <listitem>
      <para>新しく fork された子プロセスは、親プロセスの実行が再開されるよりも早く実行が行われます。このパラメータを <literal>1</literal> にすると、子プロセスが fork 後すぐに処理を始めるような場合に有用となります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_compat_yield</systemitem></term>
     <listitem>
      <para>古い <emphasis>O(1)</emphasis> スケジューラに存在していた、放棄タスクを実行可能キューの末尾 (赤黒木で一番右側) に移動させる積極的な CPU の yielding 動作を有効にするかどうかを設定します。 <option>sched_yield(2)</option> システムコールの動作に依存するアプリケーションでは、競合の激しいリソース (たとえばロックなど) が存在するような場合、他のプロセスに対して実行のチャンスを与えることになることから、性能面での改善をもたらす場合があります。その一方、このシステムコールはコンテキストスイッチによって発生するものであるため、誤って使用してしまうと逆に性能が落ちてしまう場合があります。そのため、性能面での改善が確実である場合にのみ設定してください。既定値は <literal>0</literal> です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_migration_cost_ns</systemitem></term>
     <listitem>
      <para>直近の実行が行われたのち、特定のタスクがマイグレーションの決定に際して <quote>キャッシュホット</quote> であると判断する時間量を設定します。 <quote>ホット</quote> なタスクほど、他の CPU にマイグレーション (移行) することが少なくなりますので、この値を増やすことでタスクマイグレーションを少なくすることができます。既定値は <literal>500000</literal> [ナノ秒] です。</para>
      <para>実行可能なプロセスが存在しているにもかかわらず、 CPU のアイドル時間が予想よりも長い場合は、この値を小さくすることをお勧めします。逆に、 CPU 間やノード間でのタスクのマイグレーションが過剰である場合、大きくすることをお勧めします。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_latency_ns</systemitem></term>
     <listitem>
      <para>CPU バウンドのタスクに対して、ターゲットとするプリエンプション遅延を指定します。この値を増やすと、 CPU バウンドのタスクのタイムスライスが長くなります。タスクのタイムスライスは、スケジューリングの間隔と重み付けの設定から、下記のように公平な共有が行われます:</para>
      <para><replaceable>タイムスライス</replaceable> = <replaceable>スケジュール間隔</replaceable> * (<replaceable>タスクの重み</replaceable> / <replaceable>実行キュー内にあるタスクの重みの合計</replaceable>)</para>
      <para>タスクの重みはタスクの nice レベルとスケジューリングポリシーによって決まります。 SCHED_OTHER の場合、最小のタスクの重みは 15 で、これは nice 値 19 に対応します。最大のタスクの重みは 88761 で、これは nice 値 -20 に対応します。</para>
      <para>タイムスライスは負荷が増えるほど小さくなります。実行可能なタスクの数が <systemitem>sched_latency_ns</systemitem> / <systemitem>sched_min_granularity_ns</systemitem>  を越えると、タイムスライスは <replaceable>実行可能なタスクの数</replaceable> * <systemitem>sched_min_granularity_ns</systemitem> になります。それより前に、タイムスライスは <systemitem>sched_latency_ns</systemitem> に等しくなります。</para>
      <para>この値は、実行権情報の計算のために、休眠中のタスクが実行中であると見なされる最大の時間幅を指定することにもなります。また、この値を増やすことで、動作中のタスクが消費する可能性のある時間を増やすことになります。そのため、 CPU バウンドのタスクに対しては、スケジューラによる遅延を増やすことになります。既定値は <literal>6000000</literal> [ナノ秒] です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_min_granularity_ns</systemitem></term>
     <listitem>
      <para>CPU バウンドのタスクに対するプリエンプションの粒度です。詳しくは <systemitem>sched_latency_ns</systemitem> をご覧ください。既定値は <literal>4000000</literal> [ナノ秒] です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_wakeup_granularity_ns</systemitem></term>
     <listitem>
      <para>起床プリエンプション粒度を表します。この変数の値を増やすと、起床時のプリエンプションを減らし、計算処理が主となるタスクの乱れを減らすことになります。この値を減らすと、起床の遅延を改善することができますので、遅延の回避が重要となるタスクではスループットを改善することができます。特に短いデューティサイクルの負荷コンポーネントが、 CPU バウンドのコンポーネントと確実に競合するような場合に有用です。既定値は <literal>2500000</literal> [ナノ秒] です。</para>
      <warning>
       <title>正しい起床粒度値の選択について</title>
       <para><systemitem>sched_latency_ns</systemitem> の半分よりも大きな値を設定してしまうと、起床時のプリエンプションが発生しなくなってしまいます。また、短いデューティサイクルのタスクが CPU を多く使用するタスクに打ち勝てなくなります。</para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_rr_timeslice_ms</systemitem></term>
     <listitem>
      <para>SCHED_RR のタスクが、他のタスクに奪われたり、タスクリストの末尾に回されたりすることなく実行できる時間単位を表します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_rt_period_us</systemitem></term>
     <listitem>
      <para>リアルタイムタスクの帯域強制を測定する時間を表します。既定値は <literal>1000000</literal> [マイクロ秒] です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_rt_runtime_us</systemitem></term>
     <listitem>
      <para>sched_rt_period_us の間にリアルタイムタスクに割り当てられる時間単位です。 -1 を設定すると、リアルタイムタスクの帯域強制を行わなくなります。既定では、リアルタイムタスクは 95 [%CPU/sec] を消費するため、 5 [%CPU/sec] もしくは 0.05s が SCHED_OTHER のタスクに残されることになります。既定値は <literal>950000</literal> [マイクロ秒] です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_nr_migrate</systemitem></term>
     <listitem>
      <para>負荷分散の目的で、プロセッサ間でタスクをマイグレーション (移行) できるタスクの数を制御します。負荷分散では割り込みを無効化 (ソフト IRQ) して実行キューを列挙するため、リアルタイムのタスクに対しては IRQ 遅延のペナルティを招く可能性があります。そのため、この値を増やすと、巨大な SCHED_OTHER のスレッドに対して性能を向上させる代わりに、リアルタイムタスクの IRQ 遅延が増えることになります。既定値は <literal>32</literal> です。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>sched_time_avg_ms</systemitem></term>
     <listitem>
      <para>このパラメータは、リアルタイムのタスクの実行に費やす時間の平均値を設定します。この平均値は CFS に対して、負荷分散の決定を支援する値となるほか、 CPU が高い優先順位のリアルタイムタスクでどれだけ忙しくなっているのかを表す値にもなっています。</para>
      <para>このパラメータに対する最適な設定値は、負荷の内容に大きく依存するものであるほか、リアルタイムのタスクをどれだけ頻繁に、どれだけ長く実行するのかにもよります。</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>

<!-- fs commenting, since the package schedtool is not available for
     any SUSE Linux/opensuse distribution
     but see FATE#310074 !!

  <sect2 id="sec-tuning-taskscheduler-cfs-tuning-other">
   <title>Other tuning options</title>
   <para>
    Long running, non-interactive tasks (that don't like preemption) and batch
    workloads may benefit from setting the scheduler policy to SCHED_BATCH.
    Changing the scheduling policy of the shell to SCHED_BATCH can be done by:
   </para>
<screen>~# schedtool -B $$
~# <replaceable>START_YOUR_PROGRAM</replaceable>
</screen>
   <para>
    After doing this, all programs being started in this shell will inherit
    using the SCHED_BATCH scheduling policy instead of SCHED_NORMAL.
   </para>
   <note>
    <para>
     You need to have the package <systemitem
      class="resource">schedtool</systemitem> installed.
    </para>
   </note>
  </sect2>
-->

  <sect2 xml:id="sec-tuning-taskscheduler-cfs-debug">
   <title>デバッグ用インターフェイスとスケジューラの統計情報</title>
   <para>CFS では新しく改善されたデバッグインターフェイスが用意され、稼働中の統計情報を提供することができるようになっています。これらのファイルは <filename>/proc</filename> ファイルシステム内に用意されていますので、 <command>cat</command> や <command>less</command> などのコマンドを使用することで、簡単に調べることができるようになっています。下記にはタスクスケジューラ関連の <filename>/proc</filename> ファイルと、その簡潔な説明を示しています:</para>
   <variablelist>
    <varlistentry>
     <term><filename>/proc/sched_debug</filename></term>
     <listitem>
      <para>タスクスケジューラの動作に関わる全てのチューニング可能な変数 (詳しくは <xref linkend="sec-tuning-taskscheduler-cfs-tuning"/> をご覧ください) のほか、 CFS の統計情報や全てのプロセッサでの実行キュー (CFS, RT, deadline) に対する現在の値を含んでいるファイルです。各プロセッサで動作しているタスクの概要についても、タスク名と PID 、そしてスケジューラ固有の統計情報を表示することができます。最初の列には <option>tree-key</option> 列が表示されていますが、これはタスクの仮想ランタイムを示すもので、その名前は赤黒木内で全ての実行可能なタスクを並べ替える際のキーでもあります。また <option>switches</option> 列には、スイッチの合計数 (involuntary であるものを含む) を示しています。さらに、 <option>prio</option> 列にはプロセスの優先順位が、 <option>wait-time</option> にはタスクがスケジュールされるまでに待機した時間の合計値が、 <option>sum-exec</option> と <option>sum-sleep</option> には、それぞれそのタスクをプロセッサ内で実行した時間の合計と、休眠 (スリープ) していた時間の合計がナノ秒単位で示されています。</para>
<screen>&prompt.root;cat /proc/sched_debug
Sched Debug Version: v0.11, 4.4.21-64-default #1
ktime                                   : 23533900.395978
sched_clk                               : 23543587.726648
cpu_clk                                 : 23533900.396165
jiffies                                 : 4300775771
sched_clock_stable                      : 0

sysctl_sched
  .sysctl_sched_latency                    : 6.000000
  .sysctl_sched_min_granularity            : 2.000000
  .sysctl_sched_wakeup_granularity         : 2.500000
  .sysctl_sched_child_runs_first           : 0
  .sysctl_sched_features                   : 154871
  .sysctl_sched_tunable_scaling            : 1 (logarithmic)

cpu#0, 2666.762 MHz
  .nr_running                    : 1
  .load                          : 1024
  .nr_switches                   : 1918946
[...]

cfs_rq[0]:/
  .exec_clock                    : 170176.383770
  .MIN_vruntime                  : 0.000001
  .min_vruntime                  : 347375.854324
  .max_vruntime                  : 0.000001
[...]

rt_rq[0]:/
  .rt_nr_running                 : 0
  .rt_throttled                  : 0
  .rt_time                       : 0.000000
  .rt_runtime                    : 950.000000

dl_rq[0]:
  .dl_nr_running                 : 0

  task   PID         tree-key  switches  prio     wait-time        [...]
------------------------------------------------------------------------
R  cc1 63477     98876.717832       197   120      0.000000         ...</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/proc/schedstat</filename></term>
     <listitem>
      <para>現在の実行キューに関連する統計情報を表示します。 SMP システムの場合、接続されている全てのプロセッサに対して、ドメイン固有の統計情報も表示することができます。出力形式はわかりにくい形式であるため、詳しくは <filename>/usr/src/linux/Documentation/scheduler/sched-stats.txt</filename> をお読みください。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><filename>/proc/<replaceable>PID</replaceable>/sched</filename></term>
     <listitem>
      <para><replaceable>PID</replaceable> で指定したプロセスのスケジューリング情報を表示することができます。</para>
<screen>&prompt.root;cat /proc/$(pidof gdm)/sched
gdm (744, #threads: 3)
-------------------------------------------------------------------
se.exec_start                                :          8888.758381
se.vruntime                                  :          6062.853815
se.sum_exec_runtime                          :             7.836043
se.statistics.wait_start                     :             0.000000
se.statistics.sleep_start                    :          8888.758381
se.statistics.block_start                    :             0.000000
se.statistics.sleep_max                      :          1965.987638
[...]
se.avg.decay_count                           :                 8477
policy                                       :                    0
prio                                         :                  120
clock-delta                                  :                  128
mm-&gt;numa_scan_seq                            :                    0
numa_migrations, 0
numa_faults_memory, 0, 0, 1, 0, -1
numa_faults_memory, 1, 0, 0, 0, -1
</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect2>
 </sect1>
 <sect1 xml:id="cha-tuning-taskscheduler-moreinfo">
  <title>さらなる情報</title>

  <para>Linux のタスクスケジューリングに関して、よりコンパクトな知識を得たい場合は、下記のような情報源をお読みになることをお勧めします:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>タスクスケジューラ関連のシステムコールの説明については、それぞれ対応するマニュアルページ (例: <command>man 2 sched_setaffinity</command>) をお読みください。</para>
   </listitem>
   <listitem>
    <para>Linux のスケジューラポリシーおよびアルゴリズムに関するわかりやすい説明については、<link xlink:href="http://www.inf.fu-berlin.de/lehre/SS01/OS/Lectures/Lecture08.pdf"/> (英語) をお読みになることをお勧めします。</para>
   </listitem>
   <listitem>
    <para>Linux のプロセススケジューリングに関する概要については、 Robert Love 氏による <citetitle>Linux Kernel Development</citetitle> (ISBN-10: 0-672-32512-8) (英語) がよいでしょう。詳しくは <link xlink:href="https://www.informit.com/articles/article.aspx?p=101760"/> をご覧ください。</para>
   </listitem>
   <listitem>
    <para>Linux カーネルの内部に関する非常に広範囲な概要を知りたい場合は、 Daniel P. Bovet 氏と Marco Cesati 氏による <citetitle>Understanding the Linux Kernel</citetitle> (ISBN 978-0-596-00565-8) (英語) がよいでしょう。</para>
   </listitem>
   <listitem>
    <para>タスクスケジューラに関する技術的な情報については、 <filename>/usr/src/linux/Documentation/scheduler</filename> 内にあるファイルをお読みください。</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
