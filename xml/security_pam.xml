<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-pam">
 <title>PAM を利用した認証</title>
 <info>
      <abstract>
        <para>Linux では認証処理に際して PAM (Pluggable Authentication Modules; プラグインを使用することのできる認証モジュール) を利用し、ユーザとアプリケーションとの間の仲介を行なっています。 PAM のモジュールはシステム全体に対して提供されているため、様々なアプリケーションから利用できるようになっています。本章では、このようなモジュール型の認証機構の動作と、設定方法について説明しています。</para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>

 <sect1 xml:id="sec-security-pam-whatis">
  <title>PAM とは？</title>

  <para>システム管理者やプログラマは、システムの特定の箇所や、アプリケーション内の特定の機能に対してアクセスを制限したいと考えることがあります。 PAM の無い状態では、それぞれのアプリケーションは LDAP や Samba, Kerberos など、様々な認証機構に対応しなければならなくなります。このような開発には時間を要するばかりか、開発によってエラーを引き起こす可能性すらあります。このような欠点を防ぐ唯一の方法は、認証の仕組みとアプリケーションを分離するという方法で、集中管理されたモジュール内で、認証の仕組みを代行させるやり方です。このような仕組みであれば、新しい認証方式が開発された場合でも、対応する <emphasis>PAM モジュール</emphasis> を作成すれば、アプリケーション側ですぐに利用できるようになります。</para>

  <para>PAM は下記のような考え方から成り立っています:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para><emphasis>PAM モジュール</emphasis>: 特定の認証機構に対応する共有ライブラリです。</para>
   </listitem>
   <listitem>
    <para><emphasis>モジュールスタック</emphasis>: 複数の PAM モジュールから構成されるものです。</para>
   </listitem>
   <listitem>
    <para>PAM 対応の <emphasis>サービス</emphasis>: モジュールスタック、もしくは PAM モジュールを利用して、認証の仕組みを利用するものです。通常、サービスは <command>login</command> や <command>su</command> のように、対応するアプリケーションに対する分かりやすい名前を指定します。サービス名 <literal>other</literal> は、既定のルールで使用される予約語です。</para>
   </listitem>
   <listitem>
    <para><emphasis>モジュールのパラメータ</emphasis>: 特定の PAM モジュールに対して、その処理に影響を与えるためのものです。</para>
   </listitem>
   <listitem>
    <para><emphasis>結果</emphasis>: それぞれの PAM モジュールの実行結果を意味します。正の値が返された場合、次の PAM モジュールを実行します。負の値は設定によって異なる動作となり、 <quote>何も影響を与えず、そのまま次のモジュールに進む</quote> から <quote>即時に終了する</quote> まで、様々な処理を行なうことができます。</para>
   </listitem>
  </itemizedlist>
 </sect1>
 <sect1 xml:id="sec-pam-struc-files">
  <title>PAM 設定ファイルの構造</title>

  <para>PAM は下記の 2 種類の方式で設定することができます:</para>

  <variablelist>
   <varlistentry>
    <term>ファイルベースの設定 ( <filename>/etc/pam.conf</filename> )</term>
    <listitem>
     <para>それぞれのサービスに対する設定を <filename>/etc/pam.conf</filename> に書き込む方式です。この方式は、メンテナンス性と利便性が損なわれることから、 &productname; では使用していません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ディレクトリベースの設定 ( <filename>/etc/pam.d/</filename> )</term>
    <listitem>
     <para>PAM の仕組みを利用する各サービス (もしくはプログラム) に対する設定を、 <filename>/etc/pam.d/</filename> ディレクトリ内のそれぞれの設定ファイルに保存する方式です。たとえば <systemitem class="daemon">sshd</systemitem> サービスに対する設定は、 <filename>/etc/pam.d/sshd</filename> ファイル内に書き込むことになります。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para><filename>/etc/pam.d/</filename> ディレクトリ内のファイルでは、認証に使用する PAM モジュールを設定します。ファイル内の各行には最大で 4 つの値を指定します:</para>

<screen><replaceable>種類</replaceable>  <replaceable>制御</replaceable>
 <replaceable>モジュールパス</replaceable>  <replaceable>モジュールパラメータ</replaceable></screen>

  <para>それぞれの意味は下記のとおりです:</para>

  <variablelist>
   <varlistentry>
    <term><replaceable>種類</replaceable></term>
    <listitem>
     <para>PAM モジュールの種類を指定します。 PAM モジュールはスタックとして処理されます。それぞれの種類はそれぞれ別々の目的で使用します。たとえば一方のモジュールではパスワードをチェックし、他方のモジュールではシステムにアクセスする際のアクセス元をチェックし、さらに別のモジュールではユーザ固有の設定を読み込む、などです。 PAM では、下記 4 つのモジュールの種類に対応しています:</para>
     <variablelist>
      <varlistentry>
       <term><literal>auth</literal></term>
       <listitem>
        <para>従来であればパスワードの問い合わせなど、ユーザの正当性を確認するための種類です。現在では IC カードによる認証や生体認証 (指紋認証、虹彩認証など) も使用することができます。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>account</literal></term>
       <listitem>
        <para>そのサービスを使用できる権限があるかどうかを確認するための種類です。たとえば有効期限の切れたユーザ名でログインできないようにする、などの目的で使用します。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>password</literal></term>
       <listitem>
        <para>認証トークン (通常はパスワード) の変更を有効化するための種類です。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>session</literal></term>
       <listitem>
        <para>ユーザセッションを管理したり設定したりするための種類です。ログインに際しては認証前と認証後の両方で開始され、ユーザ固有の環境 (メールアカウント、ホームディレクトリ、システム制限など) を設定するために使用します。</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>制御</replaceable></term>
    <listitem>
     <para>PAM モジュールの動作を表わす箇所です。それぞれのモジュールには、下記のような制御フラグを設定することができます:</para>
     <variablelist>
      <varlistentry>
       <term><literal>required</literal></term>
       <listitem>
        <para>このフラグを設定したモジュールは、認証を成功させるにあたって必ず成功しなければならないものであることを表わします。 <literal>required</literal> フラグを設定したモジュールが失敗すると、同じフラグを設定した他のモジュールは、ユーザが認証失敗メッセージを受け取る前に処理が行なわれます。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>requisite</literal></term>
       <listitem>
        <para>このフラグを設定したモジュールは、 <literal>required</literal> フラグと同様に処理が成功しなければならないものであることを表わします。ただし、このフラグを設定したモジュールが失敗すると、ユーザに対して即時にフィードバックが送られ、その他のモジュールは処理されなくなります。成功した場合は、 <literal>required</literal> フラグを設定した場合と同様に、その他のモジュールは引き続き処理されます。 <literal>requisite</literal> フラグは、認証を成功させるために必要な条件をチェックするための基本フィルタとして動作します。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>sufficient</literal></term>
       <listitem>
        <para>このフラグを設定したモジュールの処理が成功すると、それより前に存在する <literal>required</literal> フラグ付きのモジュールの処理が失敗しない限り、サービスは成功を示すメッセージを即時に受け取り、その他のモジュールが処理されなくなります。なお、 <literal>sufficient</literal> フラグが設定されたモジュールの処理が失敗しても、直接的な結果には至らず、残りのモジュールは通常通り処理されます。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>optional</literal></term>
       <listitem>
        <para>このフラグを設定したモジュールの処理は、成功した場合も失敗した場合も、直接的な影響を与えません。このフラグは、メッセージ (たとえばメールが到着しているなど) を表示し、それ以外の処理を行なわないモジュールを使用する場合に有用です。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><literal>include</literal></term>
       <listitem>
        <para>このフラグを指定した場合、この位置に指定した追加設定を取り込むことを表わします。</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>モジュールパス</replaceable></term>
    <listitem>
     <para>PAM モジュールに対する完全なファイル名を指定します。モジュールが既定のディレクトリ (32 ビット版の場合は <filename>/lib/security</filename>, 64 ビット版の場合は <filename>/lib64/security</filename>) 内に存在している場合、ディレクトリを指定する必要はありません。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><replaceable>モジュールパラメータ</replaceable></term>
    <listitem>
     <para>PAM モジュールの動作に影響を与えるための、スペース区切りのパラメータリストです。たとえば <option>debug</option> (デバッグの有効化) や <option>nullok</option> (空のパスワードを許可する) などがあります。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>これらに加えて、 <filename>/etc/security</filename> ディレクトリ内には PAM モジュール向けのグローバルな設定ファイルが用意されています。このディレクトリ内には、モジュールに対する厳密な動作設定が書かれています (<filename>pam_env.conf</filename> や <filename>time.conf</filename> など) 。 PAM モジュールを使用する各アプリケーションは、 PAM の機能を実際に呼び出したあと、様々な設定ファイルに含まれる情報を処理して、結果を返します。</para>

  <para>PAM モジュールの作成やメンテナンスを簡略化する目的で、 <literal>auth</literal> , <literal>account</literal> , <literal>password</literal> , <literal>session</literal> の各種類に対応する一般的な既定の設定ファイルが用意されています。これらは、各アプリケーション側の PAM 設定から読み込まれるようになっているため、これらの設定ファイルが更新されると、それぞれの PAM 設定ファイルを個別に書き換えることなく、各アプリケーションに適用できるようになっています。</para>

  <para>このような PAM のグローバル設定ファイルは、 <command>pam-config</command> ツールを利用して管理します。このツールは設定ファイルに新しいモジュールを自動的に追加したり、既存の設定ファイルを変更したり、既存の設定ファイルからモジュール (もしくはオプション) を削除したりすることができます。このような仕組みにより、 PAM の設定ファイルを手作業で管理する手間が最小化できているばかりか、場合によっては全く不要にもなっています。</para>

  <note>
   <title>64 ビットアプリケーションと 32 ビットアプリケーションの混在する環境について</title>
   <para>64 ビットのオペレーティングシステムをお使いの場合、 32 ビットアプリケーション向けのランタイム環境をそろえることもできます。この場合、 32 ビット版の PAM モジュールを追加でインストールする必要があります。</para>
  </note>
 </sect1>
 <sect1 xml:id="sec-pam-struc-format">
  <title>sshd の PAM 設定</title>

  <para>sshd の PAM 設定ファイルを例として取り上げてみます:</para>

  <example xml:id="dat-pam-sshd">
   <title>sshd の PAM 設定 ( <filename>/etc/pam.d/sshd</filename> )</title>
<screen>#%PAM-1.0 <co xml:id="co-security-pam-sshd-pam-line"/>
auth     requisite      pam_nologin.so                              <co xml:id="co-security-pam-sshd-pam-nologin"/>
auth     include        common-auth                                 <co xml:id="co-security-pam-sshd-common-auth"/>
account  requisite      pam_nologin.so                              <xref xrefstyle="select:nopage" linkend="co-security-pam-sshd-pam-nologin"/>
account  include        common-account                              <xref xrefstyle="select:nopage" linkend="co-security-pam-sshd-common-auth"/>
password include        common-password                             <xref linkend="co-security-pam-sshd-common-auth" xrefstyle="select:nopage"/>
session  required       pam_loginuid.so                             <co xml:id="co-security-pam-sshd-pam-loginuid"/>
session  include        common-session                              <xref linkend="co-security-pam-sshd-common-auth" xrefstyle="select:nopage"/>
session  optional       pam_lastlog.so   silent noupdate showfailed <co xml:id="co-security-pam-sshd-lastlog"/></screen>
   <calloutlist>
    <callout arearefs="co-security-pam-sshd-pam-line">
     <para>設定ファイルのバージョンを表わす文字列です。慣習として書かれているだけの項目ですが、将来のバージョンでも使用できるよう、必ず記述しておくことをお勧めします。</para>
    </callout>
    <callout arearefs="co-security-pam-sshd-pam-nologin">
     <para><filename>/etc/nologin</filename> ファイルが存在するかどうかをチェックするモジュールの指定です。存在した場合、 <systemitem class="username">root</systemitem> 以外のユーザがログインできなくなります。</para>
    </callout>
    <callout arearefs="co-security-pam-sshd-common-auth">
     <para>4 種類のモジュールタイプに対して、それぞれ設定ファイルを参照しています (<filename>common-auth</filename> , <filename>common-account</filename> , <filename>common-password</filename> , <filename>common-session</filename>) 。これらの 4 種類のファイルには、それぞれのモジュールの種類に対応する既定の設定が含まれています。</para>
    </callout>
    <callout arearefs="co-security-pam-sshd-pam-loginuid">
     <para>認証を行なったプロセスに対して、ログイン UID プロセス属性を設定します。</para>
    </callout>
    <callout arearefs="co-security-pam-sshd-lastlog">
     <para>ユーザの最終ログイン情報を表示します。</para>
    </callout>
   </calloutlist>
  </example>

  <para>それぞれの PAM モジュールに対する設定ファイルに個別に追加していく代わりに、他の設定ファイルを取り込むように指定することで、管理者側が既定値を変更するだけで、その設定を取り込み元のモジュールに反映させることができるようになります。従来は PAM に対して変更があったり、新しいアプリケーションをインストールしたりするたびに、全ての設定ファイルを手作業で調整しなければなりませんでした。現在はこのような仕組みになっているため、設定の変更を一箇所で行なうことができるようになっていて、各サービスの PAM 設定にもそのまま反映できるようになっています。</para>

  <para>最初の <literal>include</literal> では <filename>common-auth</filename> という設定ファイルを取り込むように指定していますが、ここでは <literal>auth</literal> の種類に対して、 3 種類のモジュール (<systemitem class="library">pam_env.so</systemitem> , <systemitem class="library">pam_gnome_keyring.so</systemitem> , <systemitem class="library">pam_unix.so</systemitem> を呼び出しています。詳しくは <xref linkend="dat-pam-common-auth"/>) をご覧ください。</para>

  <example xml:id="dat-pam-common-auth">
   <title><literal>auth</literal> セクションに対する既定の設定 ( <filename>common-auth</filename> )</title>
<screen>auth  required  pam_env.so                   <co xml:id="co-security-pam-sshd-pam-env"/>
auth  optional  pam_gnome_keyring.so         <co xml:id="co-security-pam-sshd-gnome"/>
auth  required  pam_unix.so  try_first_pass <co xml:id="co-security-pam-sshd-pam-unix"/></screen>
  </example>

  <calloutlist>
   <callout arearefs="co-security-pam-sshd-pam-env">
    <para><systemitem class="library">pam_env.so</systemitem> は <filename>/etc/security/pam_env.conf</filename> ファイルを読み込んで、そのファイルに指定されているとおりに環境変数を設定します。これは、 <systemitem class="library">pam_env</systemitem> ではログインが行なわれた場所に関する情報を保持していることから、 <envar>DISPLAY</envar> 環境変数を適切な値に設定するために使用されています。</para>
   </callout>
   <callout arearefs="co-security-pam-sshd-gnome">
    <para><systemitem class="library">pam_gnome_keyring.so</systemitem> では、 &gnome; 鍵リングに対してユーザのログイン名とパスワードをチェックします。</para>
   </callout>
   <callout arearefs="co-security-pam-sshd-pam-unix">
    <para><systemitem class="library">pam_unix</systemitem> は、ユーザのログイン名とパスワードを、 <filename>/etc/passwd</filename> および <filename>/etc/shadow</filename> でチェックします。</para>
   </callout>
  </calloutlist>

  <para><literal>auth</literal> 内の全てのモジュールは、 <systemitem class="daemon">sshd</systemitem> 側でログインが成功したかどうかについて、結果を得る前に処理が行なわれます。また、制御フラグ <literal>required</literal> が設定された全てのモジュールは、 <systemitem class="daemon">sshd</systemitem> が肯定応答を受け取るよりも前に成功していなければなりません。これらのうちのいずれかのモジュールが成功以外の状態になると、残りのモジュールはそのまま処理されるものの、最終的には <systemitem class="daemon">sshd</systemitem> が否定応答を受け取ることになります。</para>

  <para><literal>auth</literal> の種類が設定された全てのモジュールが成功すると、その他のステートメントが処理されるようになります。この場合は <xref linkend="dat-pam-common-account"/> で示されている内容になります。この <filename>common-account</filename> には 1 つのモジュール (<literal>pam_unix</literal>) のみが書かれています。この <literal>pam_unix</literal> は対象のユーザが存在しているかどうかを返すもので、 sshd が成功を表わすメッセージを受け取ると、さらに続くモジュールスタック (この場合は <xref linkend="dat-pam-common-password"/> に示されている <literal>password</literal>) を実行することになります。</para>

  <example xml:id="dat-pam-common-account">
   <title><literal>account</literal> セクションに対する既定の設定 ( <filename>common-account</filename> )</title>
<screen>account  required  pam_unix.so  try_first_pass</screen>
  </example>

  <example xml:id="dat-pam-common-password">
   <title><literal>password</literal> セクションに対する既定の設定 ( <filename>common-password</filename> )</title>
<screen>password  requisite  pam_cracklib.so
password  optional   pam_gnome_keyring.so  use_authtok
password  required   pam_unix.so  use_authtok nullok shadow try_first_pass</screen>
  </example>

  <para><systemitem class="daemon">sshd</systemitem> の PAM 設定では、 <filename>common-password</filename> のファイル名で指定されている <literal>password</literal> モジュール向けの既定の設定のみが include で設定されています。ここには、アプリケーションが認証トークンの変更を要求した場合、必ず成功しておかなければならないもの (制御フラグ <literal>requisite</literal> および <literal>required</literal>) が書かれています。</para>

  <para>パスワードなどの認証トークンを変更する際には、セキュリティチェックを必要とします。セキュリティチェックは <filename>pam_cracklib</filename> モジュールで行ないます。 <filename>pam_unix</filename> モジュールはその後に動作するモジュールで、 <filename>pam_cracklib</filename> から古いパスワードと新しいパスワードを受け取ります。これにより、パスワードの変更に際しても、ユーザ側で再度認証を行なう必要が無いようにしています。また、このような仕組みにより、 <filename>pam_cracklib</filename> 側のチェックは回避できないようにもなっています。 <literal>account</literal> や <literal>auth</literal> の種類でパスワードの有効期限を確認するよう設定する場合は、 <literal>password</literal> モジュールも使用する必要があります。</para>

  <example xml:id="dat-pam-common-session">
   <title><literal>session</literal> セクションに対する既定の設定 ( <filename>common-session</filename> )</title>
<screen>session  required  pam_limits.so
session  required  pam_unix.so  try_first_pass
session  optional  pam_umask.so
session  optional  pam_systemd.so
session  optional  pam_gnome_keyring.so auto_start only_if=gdm,gdm-password,lxdm,lightdm
session  optional  pam_env.so</screen>
  </example>

  <para>最後のステップとして、 <literal>session</literal> の種類が指定されたモジュール (<filename>common-session</filename> ファイル内に書かれています) を呼び出して、対象のユーザの設定に従ってセッションを設定します。 <filename>pam_limits</filename> モジュールは <filename>/etc/security/limits.conf</filename> ファイルを読み込むモジュールで、特定のシステム資源の使用に対して制限を設定することができるものです。ここでは再度 <filename>pam_unix</filename> モジュールを使用しています。 <filename>pam_umask</filename> モジュールは、ファイル作成時のマスクを設定するためのモジュールです。このモジュールには <literal>optional</literal> フラグが設定されているため、このモジュールの処理が失敗しても、セッションモジュールスタックの処理には影響を与えないようになっています。なお、 <literal>session</literal> の種類が設定されたモジュールは、ユーザがログアウトする際にも再度呼び出されます。</para>
 </sect1>
 <sect1 xml:id="sec-pam-struc-conf">
  <title>PAM モジュールの設定</title>

  <para>PAM モジュールによっては、設定ファイルが別途用意されているものがあります。設定ファイルは <filename>/etc/security</filename> 内に配置します。本章では、 sshd の例に示されているモジュール (<filename>pam_env.conf</filename> および <filename>limits.conf</filename>) について、概要を説明しています。</para>

  <sect2 xml:id="sec-pam-struc-conf-pamenv">
   <title>pam_env.conf</title>
   <para><filename>pam_env.conf</filename> は、 <systemitem>pam_env</systemitem> モジュールが呼び出された際に、対象のユーザに対して標準化された環境を設定するために使用するファイルです。このファイルでは、下記のような書式で環境変数を設定します:</para>
<screen><replaceable>変数名</replaceable>  [DEFAULT=<replaceable>値</replaceable>]  [OVERRIDE=<replaceable>値</replaceable>]</screen>
   <variablelist>
    <varlistentry>
     <term><replaceable>変数名</replaceable></term>
     <listitem>
      <para>設定したい環境変数の名前を指定します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>[DEFAULT=&lt;値&gt;]</systemitem></term>
     <listitem>
      <para>管理者側で設定したい既定値を指定します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><systemitem>[OVERRIDE=&lt;値&gt;]</systemitem></term>
     <listitem>
      <para><systemitem>pam_env</systemitem> に対して問い合わせ、必要であれば既定値を上書きして設定する値を指定します。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para><systemitem>pam_env</systemitem> の一般的な用途としては、 <envar>DISPLAY</envar> 環境変数があげられます。これはリモートからログインが行なわれることで、常に変化する可能性があるものです。詳しくは <xref linkend="dat-pam-pamenv"/> をご覧ください。</para>
   <example xml:id="dat-pam-pamenv">
    <title>pam_env.conf</title>
<screen>
REMOTEHOST  DEFAULT=localhost          OVERRIDE=@{PAM_RHOST}
DISPLAY     DEFAULT=${REMOTEHOST}:0.0  OVERRIDE=${DISPLAY}
</screen>
   </example>
   <para>最初の行では環境変数 <envar>REMOTEHOST</envar> の値に対して、 <filename>pam_env</filename> 側で判断が付かなかった場合、 <literal>localhost</literal> を設定するよう指定しています。 2 行目の <envar>DISPLAY</envar> 環境変数は、 <envar>REMOTEHOST</envar> の値をもとに設定を行なう意味です。詳しくは <filename>/etc/security/pam_env.conf</filename> 内のコメント (英語) をお読みください。</para>
  </sect2>

<!-- pam_mount is a stand-alone package -->

  <sect2 xml:id="sec-pam-struc-conf-pammount">
   <title>pam_mount.conf.xml</title>
   <para><systemitem>pam_mount</systemitem> は、ログインの処理中にユーザのホームディレクトリをマウントし、ログアウト時にマウントを解除するためのモジュールです。一般的には、中央のファイルサーバ内にユーザのホームディレクトリが存在しているような環境で使用するものです。この方式を使用することで、 <filename>/home</filename> 全体を共有してマウントする必要がなくなり、ログインしているユーザのホームディレクトリのみをマウントして使用できるようになります。</para>
   <para><systemitem>pam_mount</systemitem> をインストールすると、 <filename>/etc/security</filename> 内に <filename>pam_mount.conf.xml</filename> に対するテンプレートファイルが用意されるようになります。様々な要素の説明について、詳しくは <command>man 5 pam_mount.conf</command> で表示されるマニュアルページをお読みください。</para>
   <para>なお、 &yast; を利用することで、この機能に対する基本的な設定を行なうことができます。 <menuchoice><guimenu>ネットワークサービス</guimenu> <guimenu>Windows ドメインメンバーシップ</guimenu> <guimenu>熟練者向け設定</guimenu></menuchoice> を選択して、ファイルサーバを追加してください。詳しくは <xref linkend="sec-samba-client-inst"/> をお読みください。</para>
   <note>
    <title>LUKS2 サポートについて</title>
    <para>LUKS2 へのサポートは <command>cryptsetup</command> 2.0 で追加されています。 &productname; ではバージョン <phrase os="sles;sled">12 SP3</phrase> <phrase os="osuse">42.3</phrase> 以降で、 <systemitem>pam_mount</systemitem> の LUKS2 サポートが追加されています。</para>
   </note>
  </sect2>

  <sect2 xml:id="sec-pam-struc-pamlimits">
   <title>limits.conf</title>
   <para>システムに対する制限は、 <systemitem>pam_limits</systemitem> モジュールが読み込む <filename>limits.conf</filename> ファイルで設定することができます。制限はユーザ単位やグループ単位で設定することができます。このファイルでは、超過を許さないハード制限のほか、一時的であれば超過を許すソフト制限も設定することができます。文法とオプションについて、詳しくは <filename>/etc/security/limits.conf</filename> ファイル内のコメント (英語) をお読みください。</para>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-pam-pam-config">
  <title>pam-config を利用した PAM の設定</title>

  <para><command>pam-config</command> ツールは、グローバルな PAM 設定ファイル ( <filename>/etc/pam.d/common-*</filename> ) やいくつかのアプリケーション設定を行なう際の支援ツールとなるものです。対応するモジュールの一覧は、 <command>pam-config --list-modules</command> を実行して得ることができます。また、 <command>pam-config</command> コマンドは、お使いの PAM 設定ファイルを管理するためにも使用することができます。 PAM 設定への新しいモジュールの追加や、既存のモジュールの削除、モジュールに対する設定の変更などを行なうことができます。グローバルな PAM 設定ファイルを変更する場合は、個別のアプリケーションに対して PAM の設定を手作業で調整する必要はありません。</para>

  <para><command>pam-config</command> の使用例としては、下記のようなものがあります:</para>

  <procedure>
   <step>
    <formalpara>
     <title>新しい Unix 形式の PAM 設定の自動生成:</title>
     <para>pam-config に対して、あとから追加や変更ができるよう、最もシンプルな設定を作成するように指示します。具体的には <command>pam-config --create</command> というコマンドを実行することで、シンプルな Unix 認証設定を作成することができます。 pam-config で管理されていない設定が既に存在していた場合、設定は上書きされてしまいますが、バックアップコピーが <literal>*.pam-config-backup</literal> という形式で保存されます。</para>
    </formalpara>
   </step>
   <step>
    <formalpara>
     <title>新しい認証方式の追加:</title>
     <para>新しい認証方式 (たとえば LDAP) をお使いの PAM モジュールスタックに追加するには、 <command>pam-config --add --ldap</command> のようにコマンドを実行します。このコマンドを実行すると、 LDAP は全ての PAM 設定ファイルに対して追加されるようになります。</para>
    </formalpara>
   </step>
   <step>
    <formalpara>
     <title>テスト目的でのデバッグの有効化:</title>
     <para>新しい認証の仕組みが期待通りに動作しているかどうかを確認するには、全ての PAM 関連操作に対して、デバッグ機能を有効化する必要があります。たとえば <command>pam-config --add --ldap-debug</command> のように実行すると、 LDAP 関連の PAM 操作に対して、デバッグが有効化されます。デバッグ出力は、 &systemd; のジャーナル (詳しくは <xref linkend="cha-journalctl"/> をお読みください) 経由で読むことができます。</para>
    </formalpara>
   </step>
   <step>
    <formalpara>
     <title>設定の問い合わせ:</title>
     <para>新しい PAM の設定を適用する際には、必要な全てのオプションを指定しているかどうかを確認しておいてください。 <command>pam-config --query --</command> <replaceable>モジュール名</replaceable> コマンドを実行すると、使用されている種類の一覧と、モジュールに対して指定されているオプションを表示することができます。</para>
    </formalpara>
   </step>
   <step>
    <formalpara>
     <title>デバッグオプションの削除:</title>
     <para>設定に問題がないことを確認し終えたら、最後にデバッグオプションを削除します。たとえば <command>pam-config --delete --ldap-debug</command> のように実行すると、 LDAP 認証に対して設定していたデバッグを無効化することができます。他のモジュールの場合も、同じようなコマンドで無効化することができます。</para>
    </formalpara>
   </step>
  </procedure>

  <para><command>pam-config</command> コマンドに対する詳しい使用方法と利用可能なオプションについて、詳しくは <command>pam-config(8)</command> のマニュアルページをお読みください。</para>
 </sect1>
 <sect1 xml:id="sec-pam-manual-config">
  <title>PAM の手動設定</title>

  <para>PAM の設定ファイルを手作業で作成もしくは管理したい場合は、これらのファイルに対する <command>pam-config</command> を無効化する必要があります。</para>

  <para><command>pam-config --create</command> コマンドを利用して独自の PAM 設定ファイルを手作業で作成する場合、 <filename>common-<replaceable>*</replaceable></filename> から <filename>common-<replaceable>*</replaceable>-pc</filename> ファイルに対するシンボリックリンクが作成されます。 <command>pam-config</command> では <filename>common-<replaceable>*</replaceable>-pc</filename> の設定ファイルのみを修正しますので、これらのシンボリックリンクを削除することで、 pam-config を効率的に無効化することができます。</para>
  <warning>
   <title>設定内に <filename>pam_systemd.so</filename> を含める必要性について</title>
   <para>独自の PAM 設定を作成する場合は、 <literal>pam_systemd.so</literal> モジュールを<literal>session optional</literal> で指定するようにしてください。 <literal>pam_systemd.so</literal> を含めるように指定しないと、 &systemd; のタスク制限で問題が発生するようになります。詳しくは <literal>pam_systemd.so</literal> のマニュアルページをお読みください。</para>
  </warning>
 </sect1>
 <sect1 xml:id="sec-pam-info">
  <title>さらなる情報</title>

  <para><systemitem>pam-doc</systemitem> パッケージをインストールすると、 <filename>/usr/share/doc/packages/pam</filename> ディレクトリ内に下記のような追加のドキュメンテーションが提供されるようになります:</para>

  <variablelist>
   <varlistentry>
    <term>README</term>
    <listitem>
     <para>このディレクトリの直下には <filename>modules</filename> サブディレクトリがあり、ここには利用可能な PAM モジュールに関する説明 (英語) の書かれた README ファイルがあります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Linux-PAM System Administrators' Guide (Linux-PAM システム管理者ガイド)</term>
    <listitem>
     <para>この文書には、システム管理者が PAM について知っておくべき内容を説明しています。設定ファイルの文法から、 PAM のセキュリティ要素までの範囲を説明しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Linux-PAM Module Writers' Manual (Linux-PAM モジュール開発者マニュアル)</term>
    <listitem>
     <para>この文書には、開発者の観点からの内容を説明しています。具体的には、標準に準拠した PAM モジュールの作成方法などを説明しています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Linux-PAM Application Developers' Guide (Linux-PAM アプリケーション開発者マニュアル)</term>
    <listitem>
     <para>この文書には、 PAM ライブラリを使用したいアプリケーション開発者に対して、必要な全ての情報が含まれています。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>PAM マニュアルページ</term>
    <listitem>
     <para>PAM の一般的な説明と、全てのコンポーネントの機能をよりよく説明するためのモジュール向けマニュアルページが用意されています。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
</chapter>
