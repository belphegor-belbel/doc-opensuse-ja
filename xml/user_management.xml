<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" role="General" xml:id="sec-sec-user-management">
 <title>ユーザ管理</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 
  <sect1 xml:id="sec-sec-prot-general-accounts">
   <title>様々なアカウントのチェック</title>

   <sect2 xml:id="sec-sec-prot-general-accounts-unlocked">
    <title>ロック (施錠) されていないアカウント</title>
    <para>ログインに使用していないシステムアカウントやベンダーのアカウントについては、ロック (施錠) を行っておくのが重要です。 <filename>/etc/shadow</filename> ファイル内のパスワード欄が <literal>!</literal> や <literal>*</literal> で始まって <emphasis>いない</emphasis> ものが、ロックされていないアカウントになります。また <command>passwd</command> <option>-l</option> コマンドでアカウントをロックすると、同ファイルのパスワード欄の冒頭に <literal>!!</literal> が追加されますので、これによって簡単にロックを行うことができます。また、 <command>usermod</command> <option>-L</option> でロックを行った場合は、パスワード欄の冒頭に <literal>!</literal> が追加されます。多くのシステムや共有アカウントの場合、パスワード欄に <literal>*</literal> や <literal>!!</literal> が追加されることで、暗号化されたパスワードとしては使用できない文字列となることから、これによってログインを防止しています。このような事情から、ロックされていないアカウントを一覧表示するには、下記のようなコマンドを入力して実行します:</para>
    <screen>&prompt.root;egrep -v ':\*|:\!' /etc/shadow | awk -F: '{print $1}'</screen>
    <para>また、 <filename>/etc/passwd</filename> ファイルのパスワード欄に <literal>x</literal> が設定されていることも確認しておいてください。下記のコマンドは、パスワード欄に <literal>x</literal> が書かれていないアカウントの一覧を表示します:</para>
    <screen>&prompt.root;grep -v ':x:' /etc/passwd</screen>
    <para>パスワード欄に <literal>x</literal> が書かれているアカウントは、そのパスワードが shadow で暗号化されていることを表します。この場合、実際のパスワードは <filename>/etc/shadow</filename> 内に暗号化されて記録されます。また、 <filename>/etc/passwd</filename> ファイルのパスワード欄が空である場合は、 shadow ファイルの参照は行われず、ログイン時のパスワード入力も行われない意味になります。</para>
   </sect2>

   <sect2 xml:id="sec-sec-prot-general-accounts-unused">
    <title>使用されていないアカウント</title>
    <para>ユーザやアプリケーション、システムやデーモンが使用していないシステムアカウントやベンダーアカウントについては、システムから削除しておくべきです。下記のコマンドを使用することで、それぞれのアカウントがどのファイルを所有しているのかを調べることができます:</para>
    <screen>&prompt.root;find / -path /proc -prune -o -user <replaceable>アカウント</replaceable> -ls</screen>
    <para>上記では <option>-prune</option> オプションを設定していますが、これは /proc ファイルシステム以下を読み飛ばす設定です。上記を実行した結果、アカウントを削除しても問題がないと判断できれば、下記のコマンドを実行してアカウントを削除してかまいません:</para>
    <screen>&prompt.root;userdel -r <replaceable>アカウント</replaceable></screen>
    <para><command>userdel</command> コマンドに <option>-r</option> オプションを指定しないと、ユーザのホームディレクトリやメールスプールファイル ( <filename>/var/spool/mail/<replaceable>アカウント</replaceable></filename> ) が削除されなくなります。なお、多くのシステムアカウントに対しては、ホームディレクトリの設定はありません。</para>
   </sect2>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-pw-aging">
   <title>パスワードの有効期限の設定</title>

   <para>パスワードに対して有効期限を設定することは、一般に推奨されるセキュリティ設定ですが、システムアカウントや共有アカウント (例: Oracle) については、このルールから除外しておく必要があります。これは、パスワードの期限が切れたタイミングで、そのアカウントを使用するアプリケーションが動作しなくなってしまうからです。</para>

   <para>一般に企業内のポリシーでは、システムアカウントや共有アカウントのパスワード変更に関する条項を作成しておくべきです。それ以外の一般ユーザのアカウントについては、自動的に期限が切れるように設定しておくとよいでしょう。下記の例では、ユーザアカウントごとにパスワードの有効期限を設定するための方法を示しています。</para>

   <para>下記の表には、 <command>useradd</command> コマンドで新しいアカウントを作成する際に使用できる、各種のファイルとパラメータが示されています。これらの設定は、アカウントの作成時に <filename>/etc/shadow</filename> ファイル内に書き込みが行われます。新しいユーザを作成する際に &yast; のツール ( <guimenu>ユーザとグループの管理</guimenu> ) を使用すると、ユーザごとに設定を行うことができます。また、設定内容によってはシステム全体に適用されるものもあります (たとえば <filename>/etc/login.defs</filename> ファイルや <filename>/etc/default/useradd</filename> ファイルの変更がそれにあたります):</para>

   <informaltable>
    <tgroup cols="3">
     <tbody>
      <row>
       <entry>
        <para><filename>/etc/login.defs</filename></para>
       </entry>
       <entry>
        <para><literal>PASS_MAX_DAYS</literal></para>
       </entry>
       <entry>
        <para>パスワードの最長有効期間 (日) を指定します。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>/etc/login.defs</filename></para>
       </entry>
       <entry>
        <para><literal>PASS_MIN_DAYS</literal></para>
       </entry>
       <entry>
        <para>パスワードの最短有効期間 (日) を指定します。これより短い間隔では、パスワードの変更ができなくなります。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>/etc/login.defs</filename></para>
       </entry>
       <entry>
        <para><literal>PASS_WARN_AGE</literal></para>
       </entry>
       <entry>
        <para>前回のパスワード変更から、次のパスワード変更通知までの日数を指定します。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>/etc/default/useradd</filename></para>
       </entry>
       <entry>
        <para><literal>INACTIVE</literal></para>
       </entry>
       <entry>
        <para>パスワードの有効期限が切れてから、アカウントが無効化されるまでの日数を指定します。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>/etc/default/useradd</filename></para>
       </entry>
       <entry>
        <para><literal>EXPIRE</literal></para>
       </entry>
       <entry>
        <para>アカウントそのものの有効期限を YYYY-MM-DD の形式で指定します。</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>

   <note>
    <para>上記のファイルは、いずれもアカウントの作成時に適用されるもので、ファイルの変更前に作成されたアカウントについては効果がありません。</para>
   </note>

   <para>上記の <filename>/etc/login.defs</filename> ファイルや <filename>/etc/default/useradd</filename> ファイルを変更したことを確認したら、あとは実際にユーザを作成して、 <filename>/etc/shadow</filename> ファイルにどのような設定が行われるのかを確認します。</para>

   <para>新しいユーザを作成するには、下記のようなコマンドを入力して実行します:</para>

   <screen>&prompt.root;useradd -c "<replaceable>テストユーザ</replaceable>" -g <replaceable>グループ</replaceable> <replaceable>ユーザ名</replaceable></screen>

   <para><option>-g</option> オプションは、追加するアカウントのプライマリグループを指定するためのオプションです:</para>

<screen>&prompt.root;id <replaceable>ユーザ名</replaceable>
uid=509(test) gid=100(users) groups=100(users)</screen>

   <para><filename>/etc/login.defs</filename> と <filename>/etc/default/useradd</filename> に設定した内容が、新しく作成した test ユーザに対してどのように反映されたのかを確認します。 <filename>/etc/shadow</filename> ファイル内を下記のようにして表示します:</para>

<screen>&prompt.root;grep <replaceable>ユーザ名</replaceable> /etc/shadow
test:!!:12742:7:60:7:14::</screen>

   <para>パスワードの有効期限については、 <command>chage</command> コマンドを使用することでいつでも変更できます。システムアカウントや共有アカウントに対してパスワードの有効期限を無効化したい場合は、 <command>chage</command> コマンドで下記のように入力して実行します:</para>

   <screen>&prompt.root;chage -M -1 <replaceable>システムアカウント名</replaceable></screen>

   <para>パスワードの有効期限に関する情報を表示するには、下記のように入力して実行します:</para>

   <screen>&prompt.root;chage -l <replaceable>システムアカウント名</replaceable></screen>

   <para>たとえば下記のようになります:</para>

<screen>&prompt.root;chage -l <replaceable>TEST</replaceable>
Minimum: 7
Maximum: 60
Warning: 7
Inactive: 14
Last Change: Jan 11, 2015
Password Expires: Mar 12, 2015
Password Inactive: Mar 26, 2015
Account Expires: Never</screen>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-pw-strength">
   <title>複雑なパスワードの強制</title>

   <para>セキュリティの実践の一環として、ユーザに対し単純なパスワードを禁止するような措置を取っておくことが重要です。パスワードが安全に保管されている限り、複雑なパスワードを設定すれば、容易には侵入できなくなるからです。また、複雑なパスワードを設定しておくことで辞書攻撃からアカウントを保護することができますし、ロックアウト (施錠) と併用すれば、さらに侵入を困難にすることができます。しかしながら、必ずしもこの方式が適切とは限りません。ロックアウトを併用すれば誰もアプリケーションやシステムに入れなくなってしまうことになりますので、サービス拒否攻撃 (DoS) というもう 1 つの問題を引き起こしてしまいます。</para>

   <para>このような事情から、まずはパスワードの管理をより現実的かつ効率的に行うことが重要です。多くの企業ではパスワードに対して、 1 文字以上の数字と小文字、大文字を必要とするようにしています。ポリシーは企業によって異なりますが、パスワードの複雑さの強制と効率性の両立は、いくぶん難しいものになります。</para>
  </sect1>
  <xi:include href="hardening_pam_stack.xml"/>
  <sect1 xml:id="sec-sec-prot-restrict-root">
   <title>&rootuser; ログインの制限</title>

   <para>既定では &rootuser; にはパスワードを設定するため、さまざまな方法でログインができることになります。たとえばローカルの端末やグラフィカルなセッション、 SSH 経由でのログインなどがあります。これらはセキュリティ上の理由から、できる限り制限しておくことが望ましいものです。もちろん root アカウントを共有して使用するようなことも避けるべきです。このようなことから管理者は、 <literal>su</literal> や <literal>sudo</literal> (詳しくは <command>man 1 su</command> コマンドもしくは <command>man 8 sudo</command> コマンドで表示されるマニュアルページをお読みください) などのツールを使用して特権を得るべきです。これにより、管理者でのログインを特定のユーザに結びつけることができるようになります。この方式では &rootuser; のパスワードに加え、もう 1 つの安全性も提供します。それは root の特権を得るには &rootuser; のパスワード <emphasis>だけでなく</emphasis> 、管理者 (一般ユーザ) のパスワード認証も突破しなければならないようにできる、という点です。本章では、システムのさまざまなレベルにおいて、直接的な root ログインを制限するための方法を説明しています。</para>
   <sect2 xml:id="sec-sec-prot-restrict-root-tty">
    <title>ローカルのテキストコンソールへのログイン制限</title>

    <para>TTY デバイスはコンソール経由でのテキストモードアクセスを提供するデバイスです。デスクトップシステムの場合は直接接続されたキーボード経由で、サーバシステムの場合は KVM スイッチやリモートマネージメントカード (例: ILO, DRAC) 経由でも使用することができます。既定では、 Linux は 6 つの異なるコンソールを提供します。これらは <keycombo><keycap function="alt"/><keycap>F1</keycap></keycombo> から <keycombo><keycap function="alt"/><keycap>F6</keycap></keycombo> までを押すことで切り替えることができます。グラフィカル環境が動作している場合は、それぞれ <keycombo><keycap function="control"/><keycap function="alt"/><keycap>F1</keycap></keycombo> から <keycombo><keycap function="control"/><keycap function="alt"/><keycap>F6</keycap></keycombo> までを押してください。それぞれの端末は <literal>tty1</literal> から <literal>tty6</literal> に対応します。</para>

    <para>下記の手順では、最初の TTY のみを使用できるよう root アクセスを制限しています。この方式は緊急時の管理者アクセスを残しておくためのもので、通常は TTY を使用すべきではありません。</para>

    <note>
     <para>また、ここで示している手順は一般的な PC アーキテクチャ (&x86; および &x86-64;) 向けの設定手順となります。 &power; 等のアーキテクチャの場合は、 <literal>tty1</literal> ではないデバイス名になります。また、端末デバイス名は誤って指定することのないように注意してください。現在使用している端末デバイス名を知りたい場合は、 <literal>tty</literal> コマンドをお使いください。また、 SSH 経由でのログインやグラフィカルなセッションを使用している場合 (表示されるデバイス名が <filename>/dev/pts/<replaceable>N</replaceable></filename> のようになります) は設定しないでください。実際のログイン端末 (<keycombo><keycap function="alt"/><keycap>F<replaceable>N</replaceable></keycap></keycombo> でアクセスできるもの) にのみ設定してください。</para>
    </note>

    <procedure>
     <title>ローカル TTY への root ログインの制限</title>
     <step>
      <para>まずは PAM スタックの設定ファイル <filename>/etc/pam.d/login</filename> 内の <literal>auth</literal> ブロックに、 <literal>pam_securetty</literal> モジュールを設定します:</para>
      <screen>auth     requisite      pam_nologin.so
 auth     [user_unknown=ignore success=ok ignore=ignore auth_err=die default=bad] pam_securetty.so noconsole
 auth     include        common-auth</screen>
      <para>これにより、ローカルコンソールでの認証時に、 <literal>pam_securetty</literal> モジュールが使用されるようになります。このモジュールは &rootuser; に対し、ログイン可能な TTY デバイスを制限する機能を提供します。ログイン可能な TTY デバイスの一覧は、 <filename>/etc/securetty</filename> ファイルで設定します。</para>
     </step>
     <step>
      <para><filename>/etc/securetty</filename> ファイルの内容を編集して、 1 つだけ残すようにします。これにより、 root ユーザが使用できる TTY デバイスを制限できることになります。</para>
     <screen>#
# This file contains the device names of tty lines (one per line,
# without leading /dev/) on which root is allowed to login.
#
tty1</screen>
     </step>
     <step>
      <para>設定を行ったら、実際に &rootuser; でログインを試してみて、指定した TTY 以外からログインできなくなっていることを確認します。上記の例ではたとえば <literal>tty2</literal> などがそれにあたります。この場合、パスワードを尋ねられることなく即時に拒否されるはずですので、こちらもご確認ください。また、指定した TTY  (<literal>tty1</literal>) からログインできることも確認しておいてください。これにより、ロックアウトされているのではなく、端末の制限でログインできなくなっていることが確定できるためです。</para>
     </step>
    </procedure>

    <important>
     <para><filename>/etc/pam.d/common-auth</filename> に対しては <literal>pam_securetty</literal> を設定してはなりません。設定してしまうと <command>su</command> や <command>sudo</command> のコマンドにも影響が及ぶことになり、これらのコマンドでも TTY が制限されることになるためです。</para>
    </important>

    <important>
     <para>上記のように設定変更を行うと、シリアルコンソール (例: <filename>/dev/ttyS0</filename>) からのログインも制限対象となり、ログインができなくなります。シリアルコンソールからのログインを許可したい場合は、 <filename>/etc/securetty</filename> ファイル内にシリアルのデバイス名を追加してください。</para>
    </important>
   </sect2>

   <sect2 xml:id="sec-sec-prot-retrict-root-graphical">
    <title>グラフィカルセッションへのログインの制限</title>

    <para>サーバのセキュリティをより高めたい場合は、グラフィカル環境そのものの使用を避けることをお勧めします。グラフィカル環境のプログラムはいずれも &rootuser; での使用を想定しておらず、コンソールプログラムよりもセキュリティ上の問題となりうる可能性があるためです。どうしてもグラフィカルログインが必要な場合は &rootuser; 以外でログインするものとし、 &rootuser; ではグラフィカルログインができないように設定してください。</para>

    <para>&rootuser; に対してグラフィカル環境へのログインを禁止したい場合も、 <xref linkend="sec-sec-prot-restrict-root-tty"/> と同じ手順を使用することができます。ディスプレイマネージャに属する PAM スタックの設定ファイル (たとえば GDM であれば <filename>/etc/pam.d/gdm</filename>) に、 <literal>pam_securetty</literal> モジュールを追加してください。また、グラフィカルなセッションは TTY デバイス (既定では <literal>tty7</literal>) で動作していますので、 &rootuser; のログインを <literal>tty1</literal> だけに制限すれば、 &rootuser; はグラフィカル環境も使用できないようになります。</para>
   </sect2>

   <sect2 xml:id="sec-sec-prot-restrict-root-ssh">
    <title>SSH ログインの制限</title>
    <para>既定では、 &rootuser; ユーザは SSH ネットワークプロトコル経由でログインできるようになっています (SSH ポートがファイアウオールでブロックされていない限り) 。 &rootuser; でのログインを禁止したい場合は、 OpenSSH の設定を変更することで実現することができます:</para>
    <procedure>
     <step>
      <para><filename>/etc/ssh/sshd_config</filename> ファイルを編集して、下記のようなパラメータを設定します:</para>
      <screen>PermitRootLogin no</screen>
     </step>
     <step>
      <para>あとは <systemitem class="service">sshd</systemitem> サービスを再起動して、設定を適用します:</para>
      <screen>systemctl restart sshd.service</screen>
     </step>
    </procedure>
    <note>
     <para>OpenSSH の場合、 <literal>pam_securetty</literal> モジュールでの設定は不適切です。これは SSH の仕様上の理由で、 PAM スタック経由でログインするとは限らない (たとえば SSH は公開鍵認証にも対応しており、この場合は PAM を経由しない) ためです。これに加えて SSH では、パスワードの入力が誤っている場合と、ポリシーによって制限されている場合とで応答が異なるため、悪意のある攻撃者であれば容易に識別されてしまう問題もあります。</para>
    </note>
   </sect2>

  </sect1>
  <sect1 xml:id="sec-sec-prot-inactivity-logout">
   <title>対話型シェルセッションに対する無操作タイムアウトの設定</title>
   <para>対話型のシェルに対しては、何も操作していない場合のタイムアウト時間を設定して、一定の時間が経過すると自動的に切断するように設定するとよいでしょう。この設定を行うことでセッションの盗用を未然に防ぐことができるほか、システムリソースの浪費を防ぐことにも繋がります。</para>
   <para>既定ではシェルに対する無操作タイムアウトは設定されていません。シェルを開いて何も操作を行わなくても、何日も何年も開いたままになります。ほとんどのシェルには無操作タイムアウトの設定が存在し、一定時間の経過後自動的にセッションを終了させることができます。下記では、一般的に使用されるシェルを対象に、無操作タイムアウトの設定を示しています。</para>
   <para>無操作タイムアウトはログインシェルにのみ適用するか、全ての対話型シェルに適用するかを選択することができます。全ての対話型シェルに設定した場合、タイムアウトはそれぞれのシェルで別々に動作し、タイムアウト値は累積して処理されます。言い換えると、サブシェルや子シェルを起動した場合、そのシェルに対しては新しいタイムアウト値が設定されるため、サブシェルもしくは子シェルが時間切れになっても親のシェルはそのタイミングでは終了せず、動作し続けることになります。</para>
   <para>下記の表には、 &productname; に同梱されている各種のシェルと、設定方法に関する一覧が記述されています:</para>
   <informaltable frame="all" rowsep="1" colsep="1">
    <tgroup cols="7">
     <colspec colname="col_1" colwidth="14.2857*"/>
     <colspec colname="col_2" colwidth="14.2857*"/>
     <colspec colname="col_3" colwidth="14.2857*"/>
     <colspec colname="col_4" colwidth="14.2857*"/>
     <colspec colname="col_5" colwidth="14.2857*"/>
     <colspec colname="col_6" colwidth="14.2857*"/>
     <colspec colname="col_7" colwidth="14.2858*"/>
     <thead>
      <row>
       <entry>パッケージ</entry>
       <entry>使用できるシェル</entry>
       <entry align="center">シェル変数</entry>
       <entry align="center">時間単位</entry>
       <entry>読み込み専用にするための設定方法</entry>
       <entry align="center">設定パス (ログインシェルの場合)</entry>
       <entry align="center">設定パス (全てのシェルの場合)</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><para><literal>bash</literal></para></entry>
       <entry><para><literal>bash, sh</literal></para></entry>
       <entry align="center"><para><literal>TMOUT</literal></para></entry>
       <entry align="center"><para>秒</para></entry>
       <entry><para><literal>read-only TMOUT=</literal></para></entry>
       <entry><para><filename>/etc/profile.local</filename> , <filename>/etc/profile.d/</filename></para></entry>
       <entry><para><filename>/etc/bash.bashrc</filename></para></entry>
      </row>
      <row>
       <entry><para><literal>mksh</literal></para></entry>
       <entry><para><literal>ksh, lksh, mksh, pdksh</literal></para></entry>
       <entry align="center"><para><literal>TMOUT</literal></para></entry>
       <entry align="center"><para>秒</para></entry>
       <entry><para><literal>read-only TMOUT=</literal></para></entry>
       <entry><para><filename>/etc/profile.local</filename> , <filename>/etc/profile.d/</filename></para></entry>
       <entry><para><filename>/etc/ksh.kshrc.local</filename></para></entry>
      </row>
      <row>
       <entry><para><literal>tcsh</literal></para></entry>
       <entry><para><literal>csh, tcsh</literal></para></entry>
       <entry align="center"><para><literal>autologout</literal></para></entry>
       <entry align="center"><para>分</para></entry>
       <entry><para><literal>set -r autologout=</literal></para></entry>
       <entry><para><filename>/etc/csh.login.local</filename></para></entry>
       <entry><para><filename>/etc/csh.cshrc.local</filename></para></entry>
      </row>
      <row>
       <entry><para><literal>zsh</literal></para></entry>
       <entry><para><literal>zsh</literal></para></entry>
       <entry align="center"><para><literal>TMOUT</literal></para></entry>
       <entry align="center"><para>秒</para></entry>
       <entry><para><literal>readonly TMOUT=</literal></para></entry>
       <entry><para><filename>/etc/profile.local</filename> , <filename>/etc/profile.d/</filename></para></entry>
       <entry><para><filename>/etc/zsh.zshrc.local</filename></para></entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
   <para>上記のシェルはいずれも内部タイムアウト値の設定が存在し、これに値を設定することで無操作タイムアウトを実現しています。ユーザ側でタイムアウト設定を上書きさせたくない場合は、シェル変数を読み込み専用にしてください。具体的な設定方法も上記で示しています。</para>

   <note>
    <para>この機能は、ユーザがセッションの存在を忘れてしまいがちな状況や、セキュリティに配慮していない使い方に対する対策として設定できる項目であり、悪意に対する対策にはならないことに注意してください。また、このタイムアウト値はシェルの待機状態に対してのみ働くもので、悪意を持ってすれば容易にタイムアウトを無効化できてしまいます。</para>
   </note>

   <para>無操作タイムアウトを設定するには、それぞれのシェルの設定ファイルに対して変数を設定します。ログインシェルのみに設定する場合と、全てのシェルに対して設定する場合とでファイルが異なることにも注意してください。下記の例は <command>bash</command> と <command>ksh</command> に対して働く設定で、ユーザ側からはタイムアウト値を書き換えることができないよう、読み込み専用の設定を行っています。下記の内容は <filename>/etc/profile.d/timeout.sh</filename> ファイルを作成して記述してください:</para>
   <screen># /etc/profile.d/timeout.sh for SUSE Linux
#
# Timeout in seconds until the bash/ksh session is terminated
# in case of inactivity.
# 24h = 86400 sec
readonly TMOUT=86400</screen>

   <tip>
    <para>ログアウト後にもセッションを残しておきたい場合は、 <command>screen</command> ツールをお使いになることをお勧めします。 <command>screen</command> セッションはログアウト時にも終了させられることがなく、必要に応じて再接続できるためです。また、ログアウトせずにセッションをロック (施錠) することもできます (<command>man screen</command> で表示されるマニュアルページで、 <keycombo action="seq"> <keycombo action="press"><keycap function="control"/><keycap>a</keycap></keycombo> <keycap>x</keycap> </keycombo> ) に関する説明をお読みください) 。</para>
   </tip>

  </sect1>
  <sect1 xml:id="sec-sec-prot-dos">
   <title>不用意なサービス拒否攻撃の防止</title>

   <para>Linux ではユーザやグループに対して、システムリソースの制限を設定することができます。これはプログラム内にバグ (たとえばメモリリーク) があったような場合に非常に有用な仕組みで、これによってシステムの動作が遅くなったり、場合によっては全く使えなくなってしまったりするようなことを防ぐことができます。また、この制限を設定することにより、プログラムがリソースを使用しすぎてしまい (たとえばプログラムが利用可能なファイルハンドル全てを占有してしまったりなど) 、新しい接続を受け付けられなくなってしまったり、ローカルログインができなくなってしまったりする問題を防ぐこともできます。その反面、リソースの制限はサービス拒否攻撃を容易にしてしまうことにも注意してください。一般的にはユーザやグループに対してリソース制限を設定すると、その用途にもよりますが、システムの保護に役立てることができます。</para>

   <sect2 xml:id="sec-sec-prot-dos-restrict-ressources">
    <title>システムリソースの制限例</title>
    <para>下記の例では Oracle というユーザアカウントに対してリソース制限を設定しています。リソース制限の設定項目については、 <filename>/etc/security/limits.conf</filename> ファイルを読むか、 <command>man limits.conf</command> で表示されるマニュアルページをお読みください。</para>
    <para>bash などのようなほとんどのシェルでは、さまざまなリソース (最大ファイルディスクリプタ数や最大プロセス数など) の制限を行うことができます。これらはユーザ単位で設定することができます。現在のシェルでのリソース制限設定を表示するには、下記のようなコマンドを入力して実行します:</para>
    <screen>&prompt.root;ulimit -a</screen>
    <para>bash シェルにおける <command>ulimit</command> の説明については、 bash のマニュアルページをお読みください。</para>
    <important>
     <title>SSH セッションに対する制限の設定について</title>
     <para>SSH セッションに対しては、 <quote>hard</quote> や <quote>soft</quote> の制限が期待通りにならないことがあります。正しく動作させたい場合は、いったん root でログインしたのち、対象のユーザ (たとえば <literal>Oracle</literal>) に <command>su</command> をして切り替えるようにしてください。またリソースの制限は、システムの起動時に開始されたアプリケーションに対しても作用させることができます。 SSH 経由でリソース制限が正しく動作していないように見える場合は、 <filename>/etc/ssh/sshd_config</filename> ファイル内の <option>UsePrivilegeSeparation</option> オプションを <literal>no</literal> に設定して、 SSH デーモンを再起動 ( <command>systemctl restart sshd</command> ) してください。ただし、このような設定は、別の意味でシステムのセキュリティを弱める結果になることに注意してください。</para>
    </important>
    <tip>
     <title><command>ssh</command> でのパスワードログインの禁止について</title>
     <para>SSH 経由でのログインに際しては、パスワードでのログインそのものを禁止することで、さらに安全性を高めることができます。なお、パスワードでのログインを禁止する場合は、あらかじめ公開鍵でのログインが正しく動作することを確認した後にしてください。パスワードでのログインを禁止するには、 <filename>/etc/ssh/sshd_config</filename> ファイルに下記のような行を追加します:</para>
<screen>UseLogin no
UsePAM no
PasswordAuthentication no
PubkeyAuthentication yes</screen>
    </tip>
    <para>下記の例では <literal>oracle</literal> ユーザが開くことのできるファイルおよびファイルハンドルの数を変更しています。この変更は &rootuser; で <filename>/etc/security/limits.conf</filename> ファイルを編集することで行います:</para>
<screen>oracle           soft    nofile          4096
oracle           hard    nofile          63536</screen>
    <para>上記の "soft" の行は <systemitem class="username">oracle</systemitem> ユーザがログインしてからのファイルハンドル (開いているファイル) の数の上限を設定していて、この値を超過すると警告メッセージが表示されるようになります。絶対的な上限は "hard" の行で設定し、この例では 65536 個までを利用できることになります。コマンドで設定する場合は、下記のように入力して実行します:</para>
    <screen>&prompt.root;ulimit -n 63536</screen>
    <para>上記の "soft", "hard" の値は必要に応じて調整してください。</para>
    <note>
     <para>ulimit を設定する場合は、よく注意して設定してください。 <quote>nofile</quote> に対して <quote>hard</quote> の上限をカーネルの規定する最大値 ( <filename>/proc/sys/fs/file-max</filename> ) に設定してしまうと、もしもそのユーザが全てのファイルハンドルを使用してしまった場合、 PAM モジュールにアクセスする際にもファイルハンドルを使用しますので、ログインさえもできなくなってしまうことになります。</para>
    </note>
    <para>リソース制限は <literal>pam_limits</literal> を使用して設定することもできます。全てのサービスで共通で設定する場合は <filename>/etc/pam.d/common-auth</filename> ファイルを、 SSH, su, login, telnet など、サービスごとに設定する場合は下記のファイルをそれぞれ編集してください:</para>
    <simplelist>
     <member><filename>/etc/pam.d/sshd</filename> (SSH の場合)</member>
     <member><filename>/etc/pam.d/su</filename> (su の場合)</member>
     <member><filename>/etc/pam.d/login</filename> (ローカルログインや telnet の場合)</member>
    </simplelist>
    <para>全てのログインに対して適用したくない場合は、 <filename>/etc/security/limits.conf</filename> ファイルを読み込む PAM モジュールがあります。 PAM の設定ディレクティブは下記のようになります:</para>
<screen>session     required      /lib/security/pam_limits.so
session     required      /lib/security/pam_unix.so</screen>
    <para>なお、上記で変更を行っても即時には反映されず、次回のログインから適用されることに注意してください:</para>
<screen>&prompt.root;su - oracle
&prompt.user;ulimit -n
4096</screen>
    <para>また、ここでの説明はいずれも bash シェルを使用した場合の例であり、それ以外のシェルを使用する場合は <command>ulimit</command> オプションが異なることに注意してください。たとえば <literal>oracle</literal> ユーザに対する制限が <literal>4096</literal> であった場合、これを <literal>63536</literal> まで増やすには、下記のように入力して実行します:</para>
<screen>&prompt.root;su - oracle
&prompt.user;ulimit -n
4096
&prompt.user;ulimit -n 63536
&prompt.user;ulimit -n
63536</screen>
    <para><command>ulimit -n 63536</command> のような設定 (この例では bash) を恒久的に保存したい場合は、 &productname; が提供する bash シェル向けのスタートアップファイル ( <filename>~/.bashrc</filename> ファイルもしくは <filename>~/.profile</filename> ファイル) にそれを記述します (使用しているシェルを確認したい場合は、 <command>echo $SHELL</command> を実行してください) 。下記のようなコマンドを実行することで、 <literal>oracle</literal> ユーザに対する bash シェルのリソース制限を設定することができます:</para>
<screen>&prompt.root;su - oracle
&prompt.user;cat &gt;&gt; ~oracle/.bash_profile &lt;&lt; EOF
ulimit -n 63536
EOF</screen>
   </sect2>
  </sect1>
  
  <sect1 xml:id="sec-sec-prot-banners">
   <title>ログインバナーの表示</title>

   <para>ポリシーや監査の理由から、もしくはユーザに対してセキュリティ手順を示しておく理由から、ログイン時にバナーを表示させることができます。</para>

   <para>SSH やローカルコンソールなどからユーザがログインした <emphasis>後</emphasis> にログインバナーを表示させたい場合は、 <filename>/etc/motd</filename> (motd = message of the day の略) ファイルにそれを記述します。このファイルは &productname; の既定で提供されていますが、特に何も書かれていません。表示したい内容をそのまま記述してください。</para>

   <note>
    <title>バナーの長さについて</title>
    <para>バナーとして表示するメッセージは、長くても端末 1 ページ以内に収まるようにしてください。端末によってはスクロールして戻ることができない場合があるため、長すぎると読めなくなってしまうことがあるためです。</para>
   </note>

   <para>ログインバナーはテキストベースの端末であれば、ログイン <emphasis>前</emphasis> に表示することもできます。ローカルコンソールへのログイン前に表示したい場合は <filename>/etc/issue</filename> ファイルに内容を記述してください。これはログインプロンプトよりも前に表示されます。 SSH 経由でのログインの場合は、 <filename>/etc/ssh/sshd_config</filename> ファイルの <quote>Banner</quote> パラメータを設定してください。こちらも SSH のログインプロンプトよりも前に表示されます。</para>

   <para>GDM 経由でのグラフィカルログインの場合は、 <link xlink:href="https://help.gnome.org/admin/system-admin-guide/stable/login-banner.html.en"> GNOME 管理者ガイド (英語)</link> にある手順でログインバナーを設定することができます。これに加えて、 <guimenu>はい</guimenu> か <guimenu>いいえ</guimenu> を選択するようなバナーを表示することもできます。これを行うには、 <filename>/etc/gdm/Xsession</filename> ファイルを編集して、スクリプトの <emphasis>最初のほう</emphasis> に下記のような内容を記述します:</para>

<screen>if ! /usr/bin/gdialog --yesno '
<replaceable>This system is classified...</replaceable>
' 10 10; then
    /usr/bin/gdialog --infobox 'Aborting login'
    exit 1;
fi</screen>

   <para>上記の <replaceable>This system is classified...</replaceable> の部分に、表示したいバナーテキストを指定します。なお、このダイアログはログイン処理そのものを防ぐ仕組みではありません。 GDM のスクリプト処理について、詳しくは <link xlink:href="https://help.gnome.org/admin/gdm/stable/configuration.html.en#scripting"> GDM 管理者マニュアル (英語)</link> をお読みください。</para>
  </sect1>
     <sect1 xml:id="sec-sec-prot-misc-account-utils">
    <title>各種のアカウント関連ユーティリティ</title>
    <para>下記はユーザログインに関するデータを取得できるコマンドの一覧です:</para>
    <formalpara>
     <title><command>who</command></title>
     <para>現時点でログインしているユーザを一覧表示します。</para>
    </formalpara>
    <formalpara>
     <title><command>w</command></title>
     <para>誰がログインしているのかと、何をしているのかを表示します。</para>
    </formalpara>
    <formalpara>
     <title><command>last</command></title>
     <para>直近のユーザログインを一覧で表示します。ログイン日時のほかログアウト日時、 IP アドレスなどの情報が含まれます。</para>
    </formalpara>
    <formalpara>
     <title><command>lastb</command></title>
     <para><command>last</command> と同じ出力を行いますが、こちらはログインの失敗を記録する <filename>/var/log/btmp</filename> の内容を出力します。</para>
    </formalpara>
    <formalpara>
     <title><command>lastlog</command></title>
     <para>このコマンドは、各ユーザの最終ログイン日時を記録する <filename>/var/log/lastlog</filename> 内のデータを出力します。</para>
    </formalpara>
    <formalpara>
     <title><command>ac</command></title>
     <para><systemitem>acct</systemitem> パッケージをインストールすると利用できるようになるコマンドです。このコマンドは、ユーザ単位もしくは日単位の接続時間を表示します。このコマンドは <filename>/var/log/wtmp</filename> を読み込んで処理します。</para>
    </formalpara>
    <formalpara>
     <title><command>dump-utmp</command></title>
     <para><filename>/var/run/utmp</filename> もしくは <filename>/var/log/wtmp</filename> の内容を読み込んで、これをテキストとして処理可能な形式に変換します。</para>
    </formalpara>
    <para>そのほかにも <filename>/var/log/messages</filename> や <command>journalctl</command> コマンドの出力を確認してもかまいません。前者は何らかのログ記録 (syslog) アプリケーションが動作している場合、後者は動作していない場合に使用します。 <command>journalctl</command> で使用する &systemd; のジャーナル機能については、 <xref linkend="cha-journalctl"/> をお読みください。</para>
   </sect1>
  </chapter>
