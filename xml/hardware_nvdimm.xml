<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-nvdimm">
 <title>永続型メモリ</title>
 <info>
  <abstract>
   <para>本章では、 1 枚以上の NVDIMM から構成される不揮発性メインメモリ (<emphasis>永続型メモリ</emphasis> と呼ばれる場合もあります) を &productname; で使用するための情報を記述しています。</para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <sect1 xml:id="sec-nvdimm-intro">
  <title>概要</title>

  <para>永続型メモリは新しいタイプのコンピュータストレージで、 DRAM (ダイナミック RAM) の高速性とバイト単位でのアクセス機能を維持したまま、ソリッドステートドライブ (SSD) の永続性を付加した仕組みを指します。</para>

  <para>&suse; では現在、 &x86-64; および &power; の各アーキテクチャで動作する &productname; で、永続型メモリの使用をサポートしています。</para>

  <para>一般的な RAM と同様に、永続型メモリはメインボードのメモリスロットに直接差し込む形態で設置を行います。つまりこれは、 DIMM と呼ばれる通常型の RAM と物理的に全く同じ構造であることを意味しています。このような永続型メモリを NVDIMM (不揮発型 DIMM) と呼ぶ場合もあります。</para>

  <para>ただし RAM とは異なり、永続型メモリは SSD のようなフラッシュメモリとも類似しています。 SSD も永続型メモリも半導体メモリではありますが、いずれも揮発性がありません。つまり、システムの電源を落としたり、再起動したりしても、中に書き込まれた内容はそのまま保持されるということを意味しています。またどちらの媒体も、書き込みのほうが読み込みよりも遅く、書き換え回数にも制限が存在しています。このほか SSD と同様に、永続型メモリはセクタ単位でのアクセスにも対応し、アプリケーション側からの要件に合わせることができるようになっています。</para>

  <para>また、不揮発型メモリは Intel 3D XPoint という特殊なフラッシュメモリを搭載したものや、 NAND フラッシュと DRAM の両方を搭載したものなど、様々な構成で提供されています。このような新しい不揮発型メモリは現在も開発が続けられていて、様々な販売元がさらに性能を強化し耐久性を高めるよう新製品が作り続けられています。</para>

  <para>このような永続型メモリの技術は未だ発展途上の段階にあるため、販売元によって様々な制限が存在する場合があります。そのため本章では、一般論のみを説明しています。</para>

  <para>永続型メモリは DRAM と比べると 10 倍程度遅い仕組みですが、フラッシュメモリと比較すると 1000 倍程度高速です。フラッシュメモリは一般にセクタ単位で消去して書き換えを行いますが、永続型メモリは 1 バイト単位で書き換えが可能です。また、書き換え回数には制限があるものの、ほとんどの永続型メモリは 100 万回程度の書き換えに対応しています。これはフラッシュメモリの 1000 回程度に比べるとずっと大きな値です。</para>

  <para>このようなことから、下記の 2 つの結果をもたらします:</para>

  <itemizedlist>
   <listitem>
    <para>現在の技術では、永続型メモリのみでシステムを動作させることはできないため、完全な永続性は提供できません。通常型の RAM と NVDIMM の両方を組み合わせて使用することになります。オペレーティングシステムやアプリケーションは通常型の RAM 内で実行し、 NVDIMM は高速な補助型ストレージとして使用することになります。</para>
   </listitem>
   <listitem>
    <para>永続型メモリは販売元によって様々な性能の差異や特徴があることから、プログラマ側はサーバ内の NVDIMM のハードウエア特性を知っておく必要があります。これには NVDIMM の容量のほか、使用しているメモリスロットの場所も含まれます。これによってハイパーバイザ用途での使用やホストマシン間のソフトウエア移行など、様々な箇所の性能に影響があるためです。</para>
   </listitem>
  </itemizedlist>

  <para>この新しいストレージサブシステムは、 ACPI のバージョン 6 標準で規定されています。ただし、 <filename>libnvdimm</filename> は標準化される前の NVDIMM のみに対応しているため、その仕組みでのみ使用できることに注意してください。</para>

  <tip>
   <title>Intel Optane DC 永続型メモリ</title>
   <para>Intel Optane DIMM メモリは、下記の固有モードで使用することができます:</para>
   <itemizedlist>
    <listitem>
     <para><emphasis>App Direct モード</emphasis>: Intel Optane メモリを高速な永続型ストレージとして使用するモードで、 SSD や NVMe デバイスの代替として扱うことができます。このモードを指定すると、システムの電源が落ちてもデータは保持されるようになります。</para>
     <para os="sles;sled;slemicro">App Direct モードは &slsa; 12 SP4 およびそれ以降でサポートされています。</para>
    </listitem>
    <listitem>
     <para><emphasis>Memory モード</emphasis>: Intel Optane メモリを、 DRAM と比べて費用対効果の高い大容量メモリとして使用するモードです。このモードでは Optane DIMM の容量を生かして、個別の DIMM 内にアクセス頻度の高いデータをキャッシュとして保存します。ただし DRAM のみのシステムとは異なり、このモードはランダムアクセスの多い用途には向いておらず、性能が落ちてしまうことに注意してください。また、このモードを使用する場合は、アプリケーション側に Optane 固有の機能拡張を使用する必要があることにも注意してください。なお、このモードではシステムの電源が落とされると、データが失われます。</para>
     <para os="sles;sled;slemicro">Memory モードは &slsa; 15 SP1 およびそれ以降でサポートされています。</para>
    </listitem>
    <listitem>
     <para><emphasis>Mixed モード</emphasis>: Intel Optane メモリを内部で区分けして、上述の両方のモードを同時に使用します。</para>
     <para os="sles;sled;slemicro">Mixed モードは &slsa; 15 SP1 およびそれ以降でサポートされています。</para>
    </listitem>
   </itemizedlist>
   <para>Intel Optane DC 永続型メモリに関する詳細は、 <link xlink:href="https://www.intel.com/content/dam/support/us/en/documents/memory-and-storage/data-center-persistent-mem/Intel-Optane-DC-Persistent-Memory-Quick-Start-Guide.pdf"/> (英語) をお読みください。</para>
  </tip>
 </sect1>
 <sect1 xml:id="sec-nvdimm-terms">
  <title>用語</title>

  <variablelist>
   <varlistentry>
    <term>リージョン</term>
    <listitem>
     <para><emphasis>リージョン</emphasis> とは永続型メモリの中のブロックを意味する用語で、 1 つまたは複数の <emphasis>ネームスペース</emphasis> が含まれるものです。永続型メモリを使用する際には、まずネームスペースに割り当ててからアクセスを行います。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ネームスペース</term>
    <listitem>
     <para>永続型メモリ内の連続したアドレス領域を指す用語で、 NVM Express SSD におけるネームスペースや SCSI での Logical Unit (LUN) と同じような意味を持ちます。ネームスペースはサーバ内の <filename>/dev</filename> ディレクトリ内に個別のブロックデバイスとして提供されます。必要なアクセス方式によっても異なりますが、複数の NVDIMM からのストレージを組み合わせてネームスペースを大きなボリュームにしたり、小さなボリュームに分割したりすることもできます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>モード</term>
    <listitem>
     <para>それぞれのネームスペースには <emphasis>モード</emphasis> が設定されます。これはネームスペース内で有効化する NVDIMM の機能を意味するもので、同じ親リージョンを持つ兄弟姉妹間のネームスペースでは同じ型になるものの、異なるモードを設定することができます。ネームスペースのモードには下記のようなものがあります:</para>
     <variablelist>
      <varlistentry>
       <term>devdax</term>
       <listitem>
        <para>デバイス DAX と呼ばれるモードで、単一のキャラクタデバイスファイル ( <filename> /dev/dax<replaceable>X</replaceable>.<replaceable>Y</replaceable> </filename> ) を作成します。このモードの場合、ファイルシステムの作成は不要です。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>fsdax</term>
       <listitem>
        <para>ファイルシステム DAX と呼ばれるモードで、何もモードを指定しない場合の既定値です。<literal>ext4</literal> や <literal>XFS</literal> のファイルシステムを構築できるブロックデバイス ( <filename>/dev/pmem<replaceable>X</replaceable> [.<replaceable>Y</replaceable>]</filename> ) を作成します。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>sector</term>
       <listitem>
        <para>チェックサムメタデータに対応していない古いファイルシステム向けの設定です。小さな起動ボリュームに最適な構成で、古いその他のオペレーティングシステムとの互換性もあります。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>raw</term>
       <listitem>
        <para>ラベルやメタデータを持たない純粋なメモリディスクのモードです。 DAX には対応していません。古いその他のオペレーティングシステムとの互換性があります。</para>
        <note>
         <para><literal>raw</literal> モードは &suse; ではサポート対象外となります。また、 <literal>raw</literal> ネームスペース内に作成したファイルシステムをマウントすることもできません。</para>
        </note>
       </listitem>
      </varlistentry>
     </variablelist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>型</term>
    <listitem>
     <para>それぞれのネームスペースやリージョンには <emphasis>型</emphasis> が設定されます。この <emphasis>型</emphasis> はネームスペースやリージョンに割り当てられた永続型メモリへのアクセス方式を設定するもので、ネームスペースは親となるリージョンと同じ型になります。型には 2 種類のものがあり、それぞれ <emphasis>永続型メモリ</emphasis> (さらに 2 種類の設定形態があります) と <emphasis>ブロックモード</emphasis> (古い形式です) と呼ばれています。</para>
     <variablelist>
      <varlistentry>
       <term>永続型メモリ (PMEM)</term>
       <listitem>
        <para>PMEM ストレージは通常のメモリ (RAM) と同様に、 1 バイト単位のアクセス機能を提供します。 PMEM を使用することで、複数のインターリーブされた NVDIMM を単一のネームスペースにまとめて 1 つのデバイスとして使用することができます。</para>
        <para>PMEM 型のネームスペースの設定には、 2 種類の形態があります。</para>
        <variablelist>
         <varlistentry>
          <term>DAX を使用する PMEM</term>
          <listitem>
           <para>PMEM 型のネームスペースに対してダイレクトアクセス (DAX) を設定すると、メモリへのアクセス時にカーネルのページキャッシュを使用せず、直接メディアにアクセスするようになります。ソフトウエア側では、ネームスペース内の任意の箇所を個別に読み書きできるようになります。</para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>ブロック変換テーブル (BTT) を利用する PMEM</term>
          <listitem>
           <para>PMEM 型のネームスペースに対して BTT モードを設定すると、通常のメモリアクセスのようなバイト単位でのアクセスではなく、通常のディスクドライブと同様のセクタ単位でのアクセスを行うようになります。変換テーブルの仕組みにより、セクタ単位で一括アクセスします。</para>
           <para>BTT の利点はデータ保護にあります。ストレージサブシステムでは、それぞれのセクタがメディアに全て書き込まれたかどうかを監視しますので、書き込み切れていない場合 (たとえば何らかの理由で書き込みが失敗した場合など) はセクタ全体を以前の状態に戻す処理を行いますので、中途半端な状態にならないように動作します。</para>
           <para>これに加えて、 BTT ネームスペースへのアクセスはカーネル側でのキャッシュ対象となります。</para>
           <para>ただし、 BTT ネームスペースの場合は DAX を利用できない欠点があることに注意してください。</para>
          </listitem>
         </varlistentry>
        </variablelist>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>ブロックモード (BLK)</term>
       <listitem>
        <para>ブロックモードでは、それぞれの NVDIMM を個別のデバイスとして割り当てます。このモードは古い方式であり、サポート対象外となります。</para>
       </listitem>
      </varlistentry>
     </variablelist>
     <para><literal>devdax</literal> 以外の全ての型では、通常のドライブと同様にファイルシステムを指定してフォーマットを行う必要があります。 &productname; では <literal>ext2</literal> , <literal>ext4</literal> , <literal>XFS</literal> の各ファイルシステムに対応しています。</para>
   </listitem>
   </varlistentry>
   <varlistentry>
    <term>直接アクセス (DAX)</term>
    <listitem>
     <para>DAX は永続型メモリを直接アクセスする方式で、 <literal>mmap</literal> システムコールなどを利用してプロセスのメモリ領域内に直接マッピングすることができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>DIMM 物理アドレス (DPA)</term>
    <listitem>
     <para>特定の DIMM メモリ内のオフセット値として表現するメモリアドレスを意味します。 DIMM 内の最初のバイトを 0 とした値で表現します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ラベル</term>
    <listitem>
     <para>NVDIMM 内に保存されたメタデータで、たとえばネームスペースの設定などが含まれます。 DSM を利用してアクセスすることができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>デバイス固有メソッド (DSM)</term>
    <listitem>
     <para>NVDIMM 内のファームウエアにアクセスするための ACPI メソッドです。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-nvdimm-uses">
  <title>用途</title>

  <sect2 xml:id="sec-nvdimm-uses-pmem">
   <title>DAX を使用する PMEM</title>
   <para>この形態でのメモリアクセスはトランザクション処理に対して <emphasis>安全ではありません</emphasis> 。電源障害やその他のシステム障害が発生した場合、ストレージ内に全てのデータが書き込まれていることを保証できない仕組みであるため、アプリケーション側でそれを保証できる場合にのみ使用してください。</para>
   <sect3>
    <title>1 バイト単位でアクセス可能な巨大ストレージとしての使用</title>
    <para>高速な巨大ストレージにバイト単位で直接アクセスできるアプリケーションを使用する場合は、プログラム側で <literal>mmap</literal> システムコールを利用して永続型メモリをアプリケーションのメモリ領域に展開して使用することができます。この場合、追加のシステムメモリは不要となります。</para>
   </sect3>
   <sect3>
    <title>カーネルのページキャッシュの回避について</title>
    <para>ページキャッシュ用のメモリを節約したい場合は、カーネルのページキャッシュを使用しないように設定するものとし、余ったメモリはアプリケーション側に割り当てるようにしてください。たとえば永続型メモリを仮想マシン (VM) のイメージ保存用に占有させるような場合がそれに該当します。ページキャッシュを使用しないように設定することで、ホスト内でのメモリ使用量を削減できますので、それによってホスト内でさらに多くの VM を動作させることができるようになります。</para>
   </sect3>
  </sect2>

  <sect2>
   <title>BTT を使用する PMEM</title>
   <para>こちらは永続型メモリを高速なディスクプールとして構成する場合に便利な仕組みです。たとえば BTT を指定した PMEM 内にファイルシステムのジャーナルを配置すると、電源やその他の障害が発生した場合に信頼性を向上させることができます (詳しくは <xref linkend="sec-nvdimm-setup-btt"/> をお読みください) 。</para>
   <para>アプリケーション側からは高速な SSD デバイスに見えますので、通常のストレージデバイスと同じように扱うことができます。たとえば永続型メモリ内に LVM を構成したりすることもできます。</para>
   <para>また BTT はセクタ単位での書き込みを行いますので、常に一貫性が保たれる利点もあります。アプリケーション側ではデータの信頼性確保に力を注ぐことなく処理することができます。メディアエラーが発生したような場合でも、標準のエラー報告チャンネルを介して通知が行われます。</para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-nvdimm-tools">
  <title>永続型メモリを管理するためのツール</title>

  <para>永続型メモリを管理するには、 <literal>ndctl</literal> パッケージをインストールします。このパッケージをインストールすると <filename>libndctl</filename> パッケージもインストールされますが、こちらは NVDIMM を設定するためのユーザスペース側ライブラリです。</para>

  <para>これらのツールは <filename>libnvdimm</filename> ライブラリを介して動作しますが、このライブラリは下記 3 種類の NVDIMM に対応しています:</para>

  <itemizedlist>
   <listitem>
    <para>PMEM</para>
   </listitem>
   <listitem>
    <para>BLK</para>
   </listitem>
   <listitem>
    <para>PMEM と BLK の共存環境</para>
   </listitem>
  </itemizedlist>

  <para><command>ndctl</command> にはさまざまなマニュアルページ (<command>man</command>) が含まれています。マニュアルページを表示するには、下記のコマンドを実行してください:</para>

<screen>&prompt.user;<command>ndctl help <replaceable>サブコマンド名</replaceable></command></screen>

  <para>利用可能なサブコマンドの一覧を表示するには、下記のとおり実行してください:</para>

<screen>&prompt.user;<command>ndctl --list-cmds</command></screen>

  <para>利用可能なサブコマンドには、下記のようなものがあります:</para>

  <variablelist>
   <varlistentry>
    <term>version</term>
    <listitem>
     <para>NVDIMM サポートツールのバージョンを表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>enable-namespace</term>
    <listitem>
     <para>指定したネームスペースを使用できるように設定します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>disable-namespace</term>
    <listitem>
     <para>指定したネームスペースを使用できないように設定します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>create-namespace</term>
    <listitem>
     <para>指定したストレージデバイスから新しいネームスペースを作成します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>destroy-namespace</term>
    <listitem>
     <para>指定したネームスペースを削除します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>enable-region</term>
    <listitem>
     <para>指定したリージョンを使用できるように設定します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>disable-region</term>
    <listitem>
     <para>指定したリージョンを使用できないように設定します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>zero-labels</term>
    <listitem>
     <para>デバイス内のメタデータを消去します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>read-labels</term>
    <listitem>
     <para>指定したデバイスからメタデータを取得します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>list</term>
    <listitem>
     <para>利用可能なデバイスの一覧を表示します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>help</term>
    <listitem>
     <para>このツールの使用方法に関する情報を表示します。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-nvdimm-setup">
  <title>永続型メモリの設定</title>

  <sect2 xml:id="sec-nvdimm-setup-view">
   <title>利用可能な NVDIMM ストレージの表示</title>
   <para><command>ndctl</command> <literal>list</literal> コマンドを実行すると、システム内で利用可能な全ての NVDIMM を表示することができます。</para>
   <para>下記の例では、システム内に 3 つの NVDIMM が存在していて、それらは単一で 3 チャンネルのインターリーブセットを構成しています。</para>
<screen>&prompt.root;<command>ndctl list --dimms</command>

[
 {
  "dev":"nmem2",
  "id":"8089-00-0000-12325476"
 },
 {
  "dev":"nmem1",
  "id":"8089-00-0000-11325476"
 },
 {
  "dev":"nmem0",
  "id":"8089-00-0000-10325476"
 }
]</screen>
   <para><command>ndctl</command> <literal>list</literal> に異なるパラメータを指定することで、利用可能なリージョンの一覧を表示することもできます。</para>
   <note>
    <para>リージョンは番号順に出力されない場合があります。</para>
   </note>
   <para>下記は 3 つの NVDIMM が搭載されているものの、 4 つのリージョンが設定されていることに注意してください。</para>
<screen>&prompt.root;<command>ndctl list --regions</command>

[
 {
  "dev":"region1",
  "size":68182605824,
  "available_size":68182605824,
  "type":"blk"
 },
 {
  "dev":"region3",
  "size":202937204736,
  "available_size":202937204736,
  "type":"pmem",
  "iset_id":5903239628671731251
  },
  {
   "dev":"region0",
   "size":68182605824,
   "available_size":68182605824,
   "type":"blk"
  },
  {
   "dev":"region2",
   "size":68182605824,
   "available_size":68182605824,
   "type":"blk"
  }
]</screen>
   <para>領域には 2 種類の異なる形式が設定されています。一方は 3 つの BLK 型の 64 GB の領域として、もう一方は 3 つの NVDIMM を単一のボリュームとして利用できる、 PMEM 型の 189GB 領域です。</para>
   <para>なお、上記の例では <literal>available_size</literal> と <literal>size</literal> の値が同じになっていますが、これは現時点では領域を何も使用していないことを表します。</para>
  </sect2>

  <sect2 xml:id="sec-nvdimm-setup-dax">
   <title>DAX を利用し単一の PMEM ネームスペースとして使用する設定</title>
   <para>最初の例では、 3 つの NVDIMM を単一の PMEM ネームスペースに統合し、これを直接アクセス (DAX) 型として設定します。</para>
   <para>最初にやるべきことは、新しいネームスペースを作成することです。</para>
<screen>&prompt.root;<command>ndctl create-namespace --type=<replaceable>pmem</replaceable> --mode=<replaceable>fsdax</replaceable> --map=<replaceable>memory</replaceable></command>
{
 "dev":"namespace3.0",
 "mode":"memory",
 "size":199764213760,
 "uuid":"dc8ebb84-c564-4248-9e8d-e18543c39b69",
 "blockdev":"pmem3"
}</screen>
   <para>上記を実行すると <filename>/dev/pmem3</filename> という DAX に対応したブロックデバイスが作成されます。デバイス名の <literal>3</literal> は親リージョンの番号 (<filename>region3</filename>) から受け継いだ値になります。</para>
   <para><option>--map=memory</option> オプションを指定すると、 NVDIMM 内の PMEM ストレージの一部を予約して <literal>ページ記述子</literal> と呼ばれるカーネル内部データ構造を保存させることができます。これにより、新しい PMEM ネームスペースで <literal>O_DIRECT I/O</literal> や <literal>RDMA</literal> のような機能を使用できるようになります。</para>
   <para>カーネルのデータ構造を永続型メモリ内に予約することから、生成される PMEM ネームスペースは、親の PMEM リージョンより小さい容量になります。</para>
   <para>次に、新しく作成したブロックデバイスがオペレーティングシステム側からアクセスできることを確認します:</para>
<screen>&prompt.root;<command>fdisk -l /dev/<replaceable>pmem3</replaceable></command>
Disk /dev/pmem3: 186 GiB, 199764213760 bytes, 390164480 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes</screen>
   <para>他のドライブと同様に、こちらもフォーマットを行う必要があります。下記の例では、 XFS でフォーマットしています:</para>
<screen>&prompt.root;<command>mkfs.xfs /dev/<replaceable>pmem3</replaceable></command>
meta-data=/dev/pmem3      isize=256    agcount=4, agsize=12192640 blks
         =                sectsz=4096  attr=2, projid32bit=1
         =                crc=0        finobt=0, sparse=0
data     =                bsize=4096   blocks=48770560, imaxpct=25
         =                sunit=0      swidth=0 blks
naming   =version 2       bsize=4096   ascii-ci=0 ftype=1
log      =internal log    bsize=4096   blocks=23813, version=2
         =                sectsz=4096  sunit=1 blks, lazy-count=1
realtime =none            extsz=4096   blocks=0, rtextents=0</screen>
   <para>次に、新しいドライブをディレクトリにマウントします:</para>
<screen>&prompt.root;<command>mount -o dax /dev/<replaceable>pmem3</replaceable> /mnt/<replaceable>pmem3</replaceable></command></screen>
   <para>あとは DAX に対応したデバイスとしてマウントできていることを確認します:</para>
<screen>&prompt.root;<command>mount | grep dax</command>
/dev/pmem3 on /mnt/pmem3 type xfs (rw,relatime,attr2,dax,inode64,noquota)</screen>
   <para>上記までの作業で、 PMEM ネームスペースを XFS ファイルシステムでフォーマットし、 DAX でマウントすることができます。</para>
   <para>このファイルシステム内のファイルに対して <literal>mmap()</literal> システムコールを使用することで、 NVDIMM 内の永続型メモリに直接辿り着くことのできる仮想アドレスを取得することができます。もちろんページキャッシュは迂回する形になります。</para>
   <para>このファイルシステム内のファイルに対して <literal>fsync</literal> や <literal>msync</literal> コールを実行すると、 NVDIMM 内に変更されたデータ全てを書き込んでいることが保証されます。これらのコールは、ユーザスペース側で <literal>mmap</literal> した内容のページを、プロセッサキャッシュからも排除して書き込みを保証します。</para>
   <sect3 xml:id="sec-nvdimm-setup-deldax">
    <title>ネームスペースの削除</title>
    <para>同じストレージで別の種類のボリュームを作成したい場合は、あらかじめマウントを解除して PEM ストレージを削除しておく必要があります。</para>
    <para>まずはマウントを解除します:</para>
<screen>&prompt.root;<command>umount /mnt/<replaceable>pmem3</replaceable></command></screen>
    <para>続いてネームスペースを無効化します:</para>
<screen>&prompt.root;<command>ndctl disable-namespace <replaceable>namespace3.0</replaceable></command>
disabled 1 namespace</screen>
    <para>あとは削除するだけです:</para>
<screen>&prompt.root;<command>ndctl destroy-namespace <replaceable>namespace3.0</replaceable></command>
destroyed 1 namespace</screen>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-nvdimm-setup-btt">
   <title>BTT を利用した PMEM ネームスペースの作成</title>
   <para>BTT はセクタ単位での書き込み一貫性を提供する仕組みで、 ext4 や xfs のジャーナルのようにデータ保護を必要とする場合に適切な選択肢です。電源障害が発生したりした場合、ジャーナルは保護され復元可能な状態にならなければなりませんが、下記の例では BTT を利用した PMEM ネームスペースを作成して、ジャーナルをそこに配置する場合の手順を示しています。</para>
<screen>&prompt.root;<command>ndctl create-namespace --type=pmem --mode=sector</command>
{
 "dev":"namespace3.0",
 "mode":"sector",
 "uuid":"51ab652d-7f20-44ea-b51d-5670454f8b9b",
 "sector_size":4096,
 "blockdev":"pmem3s"
}</screen>
   <para>次に新しいデバイスが存在していることを確認します:</para>
<screen>&prompt.root;<command>fdisk -l /dev/<replaceable>pmem3s</replaceable></command>
Disk /dev/pmem3s: 188.8 GiB, 202738135040 bytes, 49496615 sectors
Units: sectors of 1 * 4096 = 4096 bytes
Sector size (logical/physical): 4096 bytes / 4096 bytes
I/O size (minimum/optimal): 4096 bytes / 4096 bytes</screen>
   <para>上述の手順で作成した DAX 対応の PMEM ネームスペースと同様に、この BTT 対応の PMEM ネームスペースは NVDIMM 内で利用可能な全てのストレージを使用しています。</para>
   <note>
    <para>デバイス名 ( <filename>/dev/<replaceable>pmem3s</replaceable></filename> ) の末尾にある <literal>s</literal> は <literal>sector</literal> (セクタ) の意味で、 BTT が設定されていることを名前から容易に判別できるようにしています。</para>
   </note>
   <para>作成されたボリュームは、上述の例と同じくフォーマットしてマウントすることができます。</para>
   <para>ただし、ここで示した PMEM ネームスペースでは DAX を使用できません。その代わり、 BTT を利用して <emphasis>セクタ単位の書き込み保証</emphasis> を提供します。それぞれのセクタへの書き込みは PMEM ブロックドライバを介して行われますが、この場合まず BTT は新しいセクタを書き込み用に確保します。 BTT は確保したセクタ内に書き込みが完了したことを確認したのち、内部マッピングを新しいセクタに書き換えて、アプリケーション側からアクセスできるようにします。この仕組みにより、処理中に電源障害が発生したような場合でも、書き込み前の古いデータを参照できるようになります。これにより、 "torn sectors" と呼ばれる中途半端に書き込まれたデータになることを防いでいます。</para>
   <para>このように BTT が有効化された PMEM ネームスペースは、通常の標準ブロックデバイスと同様にファイルシステムを指定してフォーマットすることができます。 DAX は使用できませんが、そのブロックデバイス内のファイルに対して <literal>mmap</literal> を行うことでページキャッシュを使用することができます。</para>
  </sect2>

  <sect2 xml:id="sec-nvdimm-fs-journal">
      <title>PMEM/BTT 内へのファイルシステムジャーナルの配置</title>
   <para>ファイルシステムのジャーナルを別のデバイスに配置する場合、元のファイルシステムと同じブロックサイズを使用しなければなりません。一般的には 4096 が最も使用されていますが、念のため下記のコマンドで確認してください:</para>
  <screen>&prompt.root;<command>blockdev --getbsz /dev/<replaceable>sda3</replaceable></command></screen>
  <para>下記の例では、 NVDIMM デバイス内に新しい ext4 ジャーナルを、 SATA デバイス内に新しい ext4 ファイルシステムをそれぞれ作成して、ファイルシステムとジャーナルを結びつけるまでの処理を行っています:</para>
 <screen>
&prompt.root;<command>mke2fs -b 4096 -O journal_dev /dev/<replaceable>pmem3s</replaceable></command>
&prompt.root;<command>mkfs.ext4 -J device=/dev/<replaceable>pmem3s</replaceable> /dev/<replaceable>sda3</replaceable></command>
</screen>
  <para>下記の例では SATA ドライブに新しい XFS ファイルシステムを、別の NVDIMM デバイス内にジャーナルを作成しています:</para>
<screen>&prompt.root;<command>mkfs.xfs -l logdev=/dev/<replaceable>pmem3s </replaceable> /dev/<replaceable>sda3</replaceable></command>
</screen>
<para>オプションの指定方法に関する詳細は、 <command>man 8 mkfs.ext4</command> および<command>man 8 mkfs.ext4</command> をお読みください。</para>
</sect2>
 </sect1>

 <sect1 xml:id="sec-nvdimm-moreinfo">
  <title>さらなる情報</title>

  <para>本件に関するその他の情報は、それぞれ下記をお読みください (いずれも英語のみの提供となります):</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para><link xlink:href="https://nvdimm.wiki.kernel.org/"> Persistent Memory Wiki</link></para>
    <para>NVDIMM システムの設定手順やテストに関する情報、そして NVDIMM の有効化に関する個別の情報へのリンクがそれぞれ提供されています。このサイトは Linux 内での NVDIMM サポートとともに記述が進められています。</para>
   </listitem>
   <listitem>
    <para><link xlink:href="https://pmem.io/">Persistent Memory Programming</link></para>
    <para>Linux やその他のオペレーティングシステムで、永続型メモリの設定方法やプログラミングシステムに関する情報が提供されています。ここにはユーザスペース側で永続型メモリを使用する際に便利な API を含む NVM ライブラリ (NVML) の説明もあります。</para>
   </listitem>
   <listitem>
    <para><link xlink:href="https://www.kernel.org/doc/Documentation/nvdimm/nvdimm.txt"> LIBNVDIMM: Non-Volatile Devices</link></para>
    <para>カーネル開発者向けの資料で、最新の Linux カーネルツリー内の Documentation ディレクトリ以下にある文書です。 NVDIMM の有効化に関わるカーネルモジュールに関する説明のほか、カーネル内の実装に関する技術詳細や <command>ndctl</command> ツールが使用する <filename>sysfs</filename> カーネルインターフェイスに関する情報などが提供されています。</para>
   </listitem>
   <listitem>
    <para><link xlink:href="https://github.com/pmem/ndctl">GitHub: pmem/ndctl</link></para>
    <para>Linux カーネル内で <command>libnvdimm</command> サブシステムを管理するためのユーティリティライブラリです。ユーザスペース側のライブラリのほか、単体テストやドキュメンテーションなども提供されています。</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
