<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-libvirt-admin-migrate">
  <title>&vmguest; の移行</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>仮想化における最大の利点として、 &vmguest; を移動できるという点があります。たとえば &vmhost; でメンテナンスを実施しなければならないような場合や、 &vmhost; の負荷が過剰である場合、ゲストを他の &vmhost; に移行することができます。 &kvm; と &xen; では <quote>ライブ</quote> マイグレーションにも対応していますので、これにより &vmguest; を動作させたまま移行することもできます。</para>
  <sect1 xml:id="libvirt-migration-types">
    <title>移行の種類</title>

    <para>仮想マシン (VM) の移行に際しては、要件に応じて下記の 3 種類の方式から選択することができます。</para>

    <variablelist>
      <varlistentry>
        <term>ライブマイグレーション</term>
        <listitem>
          <para>移行元の VM を動作させたまま、設定とメモリ内容を移行先のホストに転送します。全ての転送が完了した時点で移行元の VM を一時停止し、移行先の VM を復元します。</para>
          <para>ライブマイグレーションは、常に動作させておく必要のある VM を移行したい場合に有用です。</para>
          <note>
            <para>ライブマイグレーションを行う場合、 I/O 負荷やメモリページへの書き込みが非常に多くなります。このような場合は、非ライブマイグレーションやオフラインマイグレーションの使用をご検討ください。</para>
          </note>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>非ライブマイグレーション</term>
        <listitem>
          <para>いったん移行元の VM を一時停止して、設定とメモリを移行先のホストに転送します。転送完了後、移行先で VM を再開します。</para>
          <para>非ライブマイグレーションは、ライブマイグレーションより信頼性の高い方式ではありますが、 VM にアクセスできなくなる時間が存在するという問題があります。このようなダウンタイムを許容できるシステムであれば、ライブマイグレーションの難しい VM には有用な選択肢となります。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>オフラインマイグレーション</term>
        <listitem>
          <para>VM の設定を移行先のホストにコピーするだけです。移行元の VM は停止させず、移行先の VM を復元させない方式です。</para>
          <para>オフラインマイグレーションは、その時点で動作させていない VM を移行する際に使用します。</para>
          <important>
            <para>オフラインマイグレーションを行う場合、 <option>--persistent</option> オプションを指定しておかなければなりません。</para>
          </important>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1 xml:id="libvirt-admin-live-migration-requirements">
    <title>移行における要件</title>

    <para>&vmguest; を他の &vmhost; に移行する場合は、下記の要件を満たす必要があります:</para>

    <itemizedlist>
      <listitem>
        <para>移行元と移行先のシステムが同じアーキテクチャであること。</para>
      </listitem>
      <listitem>
        <para>NFS や iSCSI など、両方のマシンから同じストレージデバイスにアクセスできること。詳しくは <xref linkend="cha-libvirt-storage"/> をお読みください。</para>
        <para>なお、移行の時点で接続済みの CD-ROM やフロッピィディスクのイメージについても、両方のマシンからアクセスできるようにしなければなりません。ただし、これらは移行実施前に取り外しておくことができます。詳しくは <xref linkend="sec-libvirt-config-cdrom-media-change"/> をお読みください。</para>
      </listitem>
      <listitem>
        <para>両方の &vmhost; で &libvirtd; を動作させ、かつ移行元と移行先の間でリモートの &libvirt; 接続を許可しておくこと。詳しくは <xref linkend="sec-libvirt-connect-remote"/> をお読みください。</para>
      </listitem>
      <listitem>
        <para>移行先のホストでファイアウオールを動作させている場合は、移行時に使用するポートを開いておく必要があります。移行処理時に特に何も指定しない場合、 &libvirt; では 49152:49215 の範囲からポート番号を選択します。 <emphasis>移行先のホスト</emphasis> でこのポート範囲の通信を許可するように設定するか、もしくは独自にポートを選択して許可し、移行処理時にそのポート番号を指定してください。</para>
      </listitem>
      <listitem>
        <para>移行元と移行先のホストが、ネットワーク内の同じサブネットに属していること。異なるサブネットに属している場合、移行後に接続できなくなってしまいます。</para>
      </listitem>
      <listitem>
        <para>移行元と移行先の &vmhost; で、 qemu ユーザ, kvm グループ, qemu グループ, libvirt グループの UID や GID が一致していること。</para>
      </listitem>
      <listitem>
        <para>移行先のホストで既に同名の &vmguest; が設定されていないこと。同名の &vmguest; が存在していて停止している場合、設定は上書きされてしまいます。</para>
      </listitem>
      <listitem>
        <para>CPU モデルの設定で <emphasis>host cpu</emphasis> モデルを選択していないこと。</para>
      </listitem>
      <listitem>
        <para><xref linkend="gloss-vt-acronym-sata"/> ディスクデバイスを使用していないこと。</para>
      </listitem>
      <listitem>
        <para>ファイルシステムのパススルー機能を使用していないこと。</para>
      </listitem>
      <listitem>
        <para>&vmhost; と &vmguest; の間で適切な時刻維持機能が設定されていること。詳しくは <xref linkend="sec-kvm-managing-clock"/> をお読みください。</para>
      </listitem>
      <listitem>
        <para>&vmhost; から &vmguest; に対して、物理デバイスに直接アクセスできる機能を提供していないこと。現時点でのライブマイグレーションは、 PCI パススルーや <xref linkend="vt-io-sriov"/> を使用している場合、サポート対象外となります。ライブマイグレーションを使用したい場合は、ソフトウエアによる仮想化 (準仮想化または完全仮想化) をお使いください。</para>
      </listitem>
      <listitem>
        <para>キャッシュモードを適切に設定していること。詳しくは <xref linkend="sec-cache-mode-live-migration"/> をお読みください。</para>
      </listitem>
      <listitem os="sles;sled">
        <para os="sles;sled">古いバージョンへの移行 (例: &slsa; 15 SP2 から 15 SP1 へ) はサポートされていません。</para>
      </listitem>
      <listitem os="sles;sled">
        <para>SUSE 社では、同一の &slsa; メジャーバージョン内にある &vmhost; 間の移行のうち、 LTSS の適用されたサービスパックの &vmhost; から、より新しいサービスパックの &vmhost; へのライブマイグレーションをサポートするように努力しています。たとえば &slsa; 12 SP2 のホストから &slsa; 12 SP5 のホストへの移行が該当します。ただし、 SUSE 社ではこのような移行に対して最低限のテストのみを実施していますので、本番環境の &vmguest; を移行する場合は、事前に同一環境でのテストを実施してから行うようにしてください。</para>
      </listitem>
      <listitem>
        <para>両方のホストでイメージディレクトリが同じパスであること。</para>
      </listitem>
      <listitem>
        <para>全てのホストは同一レベルのマイクロコード (特に Spectre マイクロコード更新) が適用されていること。これは全てのホストで &productname; の最新版をインストールすることで実現できます。</para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1 xml:id="sec-libvirt-admin-migrate-virtmanager">
    <title>&vmm; によるライブマイグレーション</title>

    <para>&vmm; で &vmguest; の移行を行う場合、どちらのマシンで処理を開始してもかまいません。移行元のホストで &vmm; を実行してもかまいませんし、全く別のホストで実行してもかまいません。ただし、後者の場合は移行元と移行先の両方に接続できるように設定しておく必要があります。</para>

    <procedure>
      <step>
        <para>まずは &vmm; を起動し、移行元と移行先に接続します。移行元のホストでも移行先のホストでもない場所から &vmm; を起動している場合は、両方のホストに接続してください。</para>
      </step>
      <step>
        <para>移行したい &vmguest; を選択して右クリックし、 <guimenu>移行</guimenu> を選択します。なお、対象のゲストが実行中か、もしくは一時停止されている必要があります。停止中の場合は移行できません。</para>
        <tip>
          <title>移行処理の高速化について</title>
          <para>移行処理を高速化するためには、 &vmguest; を一時停止するのが最適です。これは <xref linkend="libvirt-migration-types"/> で説明している <quote>非ライブマイグレーション</quote> と同じ処理になります。</para>
        </tip>
      </step>
      <step>
        <para>&vmguest; の移行先となる <guimenu>新しいホスト</guimenu> を選択します。移行先が表示されない場合は、移行先に対して接続を実施しているかどうかをご確認ください。</para>
        <para>移行先のホストに対する接続オプションを変更したい場合は、 <guimenu>接続</guimenu> 内の <guimenu>モード</guimenu>, <guimenu>アドレス</guimenu> (IP アドレスまたはホスト名), <guimenu>ポート</guimenu> をそれぞれ設定します。なお、 <guimenu>ポート</guimenu> を指定した場合は <guimenu>アドレス</guimenu> の設定も行わなければなりません。</para>
        <para>また、 <guimenu>詳細なオプション</guimenu> 内では、恒久的な移行か一時的な移行かを選択することができます。一時的に移行するだけであれば、 <guimenu>一時的に移動</guimenu> を選択します。</para>
        <para>このほか、 <guimenu>安全ではない場合を許可する</guimenu> というオプションも用意されています。これは &vmhost; のキャッシュ機構を無効化することなく移行を実施するためのオプションで、移行処理を高速化することができますが、 <literal>cache=&quot;none&quot;</literal> / <literal>0_DIRECT</literal> を使用しておらず、 &vmguest; のストレージに対する一貫したビューが利用可能な場合にのみ動作します。</para>
        <note>
          <title>帯域オプションについて</title>
          <para>&vmm; の新しいバージョンでは、移行時の帯域設定に関する設定オプションが削除されています。帯域を指定して移行を行いたい場合は、 <command>virsh</command> をお使いください。</para>
        </note>
      </step>
      <step>
        <para>移行を開始するには <guimenu>マイグレーション</guimenu> を押します。</para>
        <para>移行処理が完了すると <guimenu>マイグレーション</guimenu> ウインドウが閉じ、 &vmm; ウインドウ内の移行先ホスト内に &vmguest; が表示されるようになります。なお、移行元の &vmguest; についても、シャットダウン状態で残ります。</para>
      </step>
    </procedure>
  </sect1>
  <sect1 xml:id="sec-libvirt-admin-migrate-virsh">
    <title><command>virsh</command> による移行</title>

    <para>&vmguest; を <command>virsh</command> <option>migrate</option> コマンドで移行するには、 &vmhost; に対する直接のアクセスまたはリモートからのシェルアクセスが必要となります。これは、コマンドをホスト内で実行する必要があるためです。移行のコマンドは下記のように記述します:</para>

<screen>&prompt.user;virsh migrate [オプション] <replaceable>VM_ID_または名前</replaceable> <replaceable>接続_URI</replaceable> [--migrateuri tcp://<replaceable>リモートホスト:ポート</replaceable>]</screen>

    <para>下記に主要なオプションを示します。完全な一覧を読みたい場合は、 <command>virsh help migrate</command> コマンドを実行してください。</para>

    <variablelist>
      <varlistentry>
        <term><option>--live</option></term>
        <listitem>
          <para>ライブマイグレーションを実行します。このオプションを指定しない場合、ゲストは移行の際に一時停止します ( <quote>非ライブマイグレーション</quote> になります) 。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--suspend</option></term>
        <listitem>
          <para>ライブマイグレーションや非ライブマイグレーションで、移行先のホストを一時停止したままの状態にします。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--persistent</option></term>
        <listitem>
          <para>移行先のホストで恒久的な VM 移行を実施します。このオプションを指定しないと、 VM をシャットダウンした段階で <command>virsh list --all</command>  の一覧には表示されなくなります。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--undefinesource</option></term>
        <listitem>
          <para>このオプションを指定すると、移行が成功した時点で移行元のホストでの &vmguest; の定義を削除します。なお、ゲストに接続されている仮想ディスクは削除<emphasis>されない</emphasis> ことに注意してください。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><option>--parallel --parallel-connections <replaceable>接続数</replaceable></option></term>
        <listitem>
          <para>パラレルマイグレーション (並行移行) は、単一スレッドの移行処理ではネットワークの帯域を使い切れないような場合に使用するもので、移行処理をより高速化する目的で使用されます。たとえば 40&nbsp;GB のネットワークインターフェイスを持つホストの場合、スレッドを 4 つにすることでネットワーク帯域を埋めることができるようになります。またパラレルマイグレーションを使用することで、移行処理に必要な巨大なメモリ占有の時間を減らすこともできます。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>下記の例では、移行元を &wsIVname; とし、移行先を &wsIname; とした移行処理を実行しています。また、 &vmguest; の名前は <literal>opensuse131</literal> で、 ID が <literal>37</literal> である場合の例となります。</para>

    <variablelist>
      <varlistentry>
        <term>既定のパラメータを利用した非ライブマイグレーションの例</term>
        <listitem><screen>&prompt.user;virsh migrate 37 qemu+ssh://&exampleuser_plain;@&wsIname;/system</screen></listitem>
      </varlistentry>
      <varlistentry>
        <term>既定のパラメータを利用した一時的なライブマイグレーションの例</term>
        <listitem><screen>&prompt.user;virsh migrate --live opensuse131 qemu+ssh://&exampleuser_plain;@&wsIname;/system</screen></listitem>
      </varlistentry>
      <varlistentry>
        <term>恒久的なライブマイグレーションで、移行元の VM 定義を削除する例</term>
        <listitem>
<screen>&prompt.user;virsh migrate --live --persistent --undefinesource 37 \
qemu+tls://&exampleuser_plain;@&wsIname;/system</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>ポート 49152 を利用した非ライブマイグレーション</term>
        <listitem>
<screen>&prompt.user;virsh migrate opensuse131 qemu+ssh://&exampleuser_plain;@&wsIname;/system \
--migrateuri tcp://@&wsIname;:49152</screen>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>使用している全てのストレージを転送するライブマイグレーション</term>
        <listitem>
<screen>&prompt.user;virsh migrate --live --persistent --copy-storage-all \
opensuse156 qemu+ssh://&exampleuser_plain;@&wsIname;/system</screen>
          <important>
            <para><option>--copy-storage-all</option> オプションを指定して VM のストレージを転送する場合、ストレージは &libvirt; のストレージプール内に存在していなければなりません。また、移行先でも同じ種類かつ同じ名前のストレージプールが存在していなければなりません。</para>
            <para>移行元でストレージプールの XML 形式出力を行いたい場合は、下記のようなコマンドを入力して実行します:</para>
<screen>&prompt.sudo;virsh pool-dumpxml <replaceable>VM_名</replaceable> &gt; <replaceable>EXAMPLE_POOL.xml</replaceable></screen>
            <para>移行先のホストでストレージプールを作成して開始するには、上記で出力した XML ファイルをコピーしてから下記のコマンドを実行します:</para>
<screen>&prompt.sudo;virsh pool-define <replaceable>EXAMPLE_POOL.xml</replaceable>
&prompt.sudo;virsh pool-start <replaceable>EXAMPLE_VM</replaceable></screen>
          </important>
        </listitem>
      </varlistentry>
    </variablelist>

    <note>
      <title>一時的な移行と恒久的な移行</title>
      <para>既定では、 <command>virsh migrate</command> は移行先のホスト内に一時的な &vmguest; のコピーを作成します。移行元のホストには元のゲストの設定が残り、ゲストはシャットダウン状態になります。また、移行先のゲストをシャットダウンすると、一時的な移行の場合は削除されてしまいます。</para>
      <para>移行先のホストで恒久的に動作させたい場合は、 <option>--persistent</option> オプションを指定してください。この場合も移行元のホストには、ゲストがシャットダウンした状態で残されます。 <option>--persistent</option> に加えて <option>--undefinesource</option> を指定することで、移行先のホストに恒久的な移行を実施し、移行元のゲストを削除するようになります。</para>
      <para>なお、 <option>--persistent</option> オプションを指定せずに <option>--undefinesource</option> オプションを指定してしまうと、移行先のホストではゲストをシャットダウンしたタイミングで設定が失われてしまうため、両方のホストからゲストが削除されてしまうことに注意してください。</para>
    </note>
  </sect1>
<!-- Step by step example -->
  <sect1 xml:id="sec-libvirt-migrate-stepbstep">
    <title>手順例</title>

    <sect2 xml:id="sec-migrate-stepbstep-export">
      <title>ストレージのエクスポート</title>
      <para>まずはホスト間でゲストイメージを共有するため、ストレージのエクスポート (公開) を実施します。一般的には NFS サーバを利用します。下記の例では、 <filename>/volume1/VM</filename> ディレクトリを 10.0.1.0/24 のネットワーク内にある全てのホストに対して提供します。具体的には、 root ユーザで <filename>/etc/exports</filename> ファイルを編集して、下記の内容を追記します:</para>
<screen>/volume1/VM 10.0.1.0/24  (rw,sync,no_root_squash)</screen>
      <para>設定変更後は NFS サーバの再起動が必要です:</para>
<screen>&prompt.sudo;systemctl restart nfsserver
&prompt.sudo;exportfs
/volume1/VM      10.0.1.0/24</screen>
    </sect2>

    <sect2 xml:id="sec-migrate-stepbstep-pool">
      <title>移行先ホストでのプールの設定</title>
      <para>&vmguest; の移行を行いたい全てのホストにおいて、ボリュームへのアクセスを許可するためのプール定義を実施しなければなりません。ここでは NFS サーバのアドレスが 10.0.1.99 であり、 <filename>/volume1/VM</filename> ディレクトリを <filename>/var/lib/libvirt/images/VM</filename> ディレクトリにマウントするものとします。また、プール名は <emphasis>VM</emphasis> であるものとします。プールを定義するには、 <filename>VM.xml</filename> ファイルを作成して下記のような内容を記述します:</para>
<screen>&lt;pool type='netfs'&gt;
  &lt;name&gt;VM&lt;/name&gt;
  &lt;source&gt;
    &lt;host name='10.0.1.99'/&gt;
    &lt;dir path='/volume1/VM'/&gt;
    &lt;format type='auto'/&gt;
  &lt;/source&gt;
  &lt;target&gt;
    &lt;path&gt;/var/lib/libvirt/images/VM&lt;/path&gt;
    &lt;permissions&gt;
      &lt;mode&gt;0755&lt;/mode&gt;
      &lt;owner&gt;-1&lt;/owner&gt;
      &lt;group&gt;-1&lt;/group&gt;
    &lt;/permissions&gt;
  &lt;/target&gt;
  &lt;/pool&gt;</screen>
      <para>あとは <command>pool-define</command> コマンドを利用して &libvirt; に読み込みます:</para>
<screen>&prompt.root;virsh pool-define VM.xml</screen>
      <para>このほかにも、プールの定義は <command>virsh</command> コマンドで直接実施することもできます:</para>
<screen>&prompt.root;virsh pool-define-as VM --type netfs --source-host 10.0.1.99 \
     --source-path /volume1/VM --target /var/lib/libvirt/images/VM
プール VM が作成されました</screen>
      <para>下記のコマンドは、 <command>virsh</command> に何もパラメータを付与せずに実行した場合に起動される、 <command>virsh</command> の対話型シェル内で実行した場合の例となります。あとはホストの起動時に自動的にプールを開始するように設定します (autostart オプションを指定します):</para>
<screen><prompt>virsh # </prompt>pool-autostart VM
プール VM が自動起動としてマークされました</screen>
      <para>自動起動を無効化したい場合は、下記のように入力して実行します:</para>
<screen><prompt>virsh # </prompt>pool-autostart VM --disable
プール VM の自動起動マークが解除されました</screen>
      <para>プールが存在しているかどうかを確認します:</para>
<screen><prompt>virsh # </prompt>pool-list --all
 名前                 状態      自動起動
-------------------------------------------
 default              動作中    はい (yes)
 VM                   動作中    はい (yes)

<prompt>virsh # </prompt>pool-info VM
名前:           VM
UUID:           42efe1b3-7eaa-4e24-a06a-ba7c9ee29741
状態:           実行中
永続:           はい (yes)
自動起動:       はい (yes)
容量:           2,68 TiB
割り当て:       2,38 TiB
利用可能:       306,05 GiB</screen>
      <warning>
        <title>全ての宛先ホストにプールが必要となる件について</title>
        <para>注意: &vmguest; の移行を行う場合、移行元と移行先の両方で同じプールを定義しなければなりません。</para>
      </warning>
    </sect2>

    <sect2 xml:id="sec-migrate-stepbstep-volume">
      <title>ボリュームの作成</title>
      <para>プールを定義したら、次はディスクイメージを保持するボリュームを定義します:</para>
<screen><prompt>virsh # </prompt>vol-create-as VM sled12.qcow2 8G --format qcow2
ボリューム sled12.qcow2 が作成されました</screen>
      <para>ここで設定したボリューム名は、 virt-install でゲストをインストールする際に使用します。</para>
    </sect2>

    <sect2 xml:id="sec-migrate-stepbstep-guest">
      <title>&vmguest; の作成</title>
      <para>あとは <command>virt-install</command> コマンドで &productname; の &vmguest; を作成するだけです。 <emphasis>VM</emphasis> プールは <command>--disk</command> オプションで指定しますが、移行時に <command>--unsafe</command> オプションを指定しなくて済むようにするため、 <emphasis>cache=none</emphasis> を指定しておくことをお勧めします。</para>
<screen>&prompt.root;virt-install --connect qemu:///system --virt-type kvm --name \
   sles15 --memory 1024 --disk vol=VM/sled12.qcow2,cache=none --cdrom \
   /mnt/install/ISO/SLE-15-Server-DVD-x86_64-Build0327-Media1.iso --graphics \
   vnc --os-variant sled15
インストールの開始中...
ドメインを作成中...</screen>
    </sect2>

    <sect2 xml:id="sec-migrate-stepbstep-migrate">
      <title>&vmguest; の移行</title>
      <para>これで移行に関する全ての準備ができました。あとは現時点で &vmguest; が動作している &vmhost; で、移行先を指定して <command>migrate</command> コマンドを実行するだけです。</para>
<screen>virsh # migrate --live sled12 --verbose qemu+ssh://<replaceable>IP/ホスト名</replaceable>/system
パスワード:
Migration: [ 12 %]</screen>
    </sect2>
  </sect1>
</chapter>
