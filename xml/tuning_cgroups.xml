<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-cgroups">

 <title>カーネルコントロールグループ</title>
 <info>
  <abstract>
   <para>カーネルコントロールグループ ( <quote>cgroups</quote> ) は、プロセスに対してハードウエアやシステムの資源を割り当てたり、制限したりするための仕組みです。この機能を利用することで、プロセスをツリー構造で管理することができるようになります。</para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>

 <sect1 xml:id="sec-tuning-cgroups-overview">
  <title>概要</title>
  <para>それぞれのプロセスは正確に 1 つの管理用 cgroup に割り当てられます。 cgroup は階層構造型のツリーとして管理されます。リソースに対する制限は特定の 1 つのプロセスに対して設定することができるほか、特定の階層ツリー全体に対して設定することもできます。制限には CPU やメモリのほか、ディスクの I/O やネットワーク帯域などを割り当てることができます。</para>
  <para>&productname; では、 &systemd; が cgroup を利用してグループ内の全てのプロセスを管理しています。この場合、 &systemd; はグループをスライスと呼んでいます。 &systemd; には、 cgroup の設定を行なうためのインターフェイスも用意されています。</para>
  <para><command>systemd-cgls</command> コマンドでは、階層構造を表示することができます。</para>
  <para>本章は概要のみを説明しています。詳しい説明については、列挙されている参照先をお読みください。</para>
 </sect1>

 <sect1 xml:id="sec-tuning-cgroups-usage">
  <title>リソース制限の設定</title>
  <note>
    <title>暗黙のリソース消費について</title>
    <para>暗黙のうちに消費され、実行環境によって異なるリソースが存在することに注意してください。これにはたとえば、ライブラリやカーネル内のデータ構造のほか、利用しているユーティリティの fork() 処理の振る舞い、計算の効率性などがあります。このようなことから、実行環境を変えた場合は、リソース制限を再計算する必要があります。</para>
  </note>
  <para><literal>cgroup</literal> に対する制限は、 <command>systemctl set-property</command> コマンドで設定します。書式は下記のとおりです:</para>
  <screen>&prompt.root;<command>systemctl set-property [--runtime] <replaceable>名前</replaceable> <replaceable>プロパティ_1</replaceable>=<replaceable>値</replaceable> [<replaceable>プロパティ_2</replaceable>=<replaceable>値</replaceable>]</command></screen>
  <para>必要であれば <option>--runtime</option> オプションを指定することもできます。このオプションを指定すると、再起動後には指定した制限が適用されなくなります。</para>
  <para>なお、 <replaceable>名前</replaceable> には &systemd; のスライス名やスコープ名、ソケット名やマウント名、スワップ名を指定します。また、プロパティには下記のものがあります:</para>
  <variablelist>
   <varlistentry>
    <term><literal>CPUAccounting=</literal> <option>[yes|no]</option></term>
    <listitem>
     <para>CPU 使用率の算出を行なうかどうかを指定します。値には <literal>yes</literal> (はい) または <literal>no</literal> (いいえ) のいずれかを指定することができます。</para>
     <para>例:</para>
     <screen>&prompt.root;<command>systemctl set-property user.slice CPUAccounting=yes</command></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>CPUQuota=</literal> <replaceable>パーセント値</replaceable></term>
    <listitem>
     <para>プロセスに対して CPU 時間の割り当てを行ないます。この値はパーセント単位で指定するため、末尾に <literal>%</literal> を付けて指定します。この設定を行なうと、 <literal>CPUAccounting=yes</literal> が設定されたものとして扱われます。</para>
     <para>例:</para>
     <screen>&prompt.root;<command>systemctl set-property user.slice CPUQuota=50%</command></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>MemoryAccounting=</literal> <option>[yes|no]</option></term>
    <listitem>
     <para>メモリ使用率の算出を行なうかどうかを指定します。値には <literal>yes</literal> (はい) または <literal>no</literal> (いいえ) のいずれかを指定することができます。</para>
     <para>例:</para>
     <screen>&prompt.root;<command>systemctl set-property user.slice MemoryAccounting=yes</command></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>MemoryLow=</literal> <replaceable>容量</replaceable></term>
    <listitem>
     <para>プロセスからの未使用メモリが指定した容量より少ない場合、メモリを他の用途に再利用しないようにします。 <replaceable>容量</replaceable> の値には K (キロ), M (メガ), G (ギガ), T (テラ) の各接頭辞を使用することができます。この設定を行なうと、 <literal>MemoryAccounting=yes</literal> が設定されたものとして扱われます。</para>
     <para>例:</para>
     <screen>&prompt.root;<command>systemctl set-property nginx.service MemoryLow=512M</command></screen>
     <note>
      <title>統合型のコントロールグループ階層構造について</title>
      <para>この設定は、統合型のコントロールグループ階層構造を使用している場合にのみ利用することができます。また、 <option>MemoryLimit=</option> の設定が無効化されます。統合型のコントロールグループ階層構造を使用するには、 &grub; ブートローダのカーネルコマンドラインパラメータに対して、 <option>systemd.unified_cgroup_hierarchy=1</option> を追加してください。なお、 &grub; の設定に関する詳細は、 <xref linkend="cha-grub2"/> をお読みください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>MemoryHigh=</literal> <replaceable>容量</replaceable></term>
    <listitem>
     <para>この制限以上にメモリを使用した場合、プロセスからできる限り積極的にメモリを取り除こうとする動きをします。 <replaceable>容量</replaceable> の値には K (キロ), M (メガ), G (ギガ), T (テラ) の各接頭辞を使用することができます。この設定を行なうと、 <literal>MemoryAccounting=yes</literal> が設定されたものとして扱われます。</para>

     <para>例:</para>
     <screen>&prompt.root;<command>systemctl set-property nginx.service MemoryHigh=2G</command></screen>
     <note>
      <title>統合型のコントロールグループ階層構造について</title>
      <para>この設定は、統合型のコントロールグループ階層構造を使用している場合にのみ利用することができます。また、 <option>MemoryLimit=</option> の設定が無効化されます。統合型のコントロールグループ階層構造を使用するには、 &grub; ブートローダのカーネルコマンドラインパラメータに対して、 <option>systemd.unified_cgroup_hierarchy=1</option> を追加してください。なお、 &grub; の設定に関する詳細は、 <xref linkend="cha-grub2"/> をお読みください。</para>
     </note>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>MemoryMax=</literal> <replaceable>容量</replaceable></term>
    <listitem>
     <para>メモリの最大値を設定することができます。プロセスがこの値を超えてメモリを確保した場合、プロセスは kill されます。 <replaceable>容量</replaceable> の値には K (キロ), M (メガ), G (ギガ), T (テラ) の各接頭辞を使用することができます。この設定を行なうと、 <literal>MemoryAccounting=yes</literal> が設定されたものとして扱われます。</para>
     <para>例:</para>
     <screen>&prompt.root;<command>systemctl set-property nginx.service MemoryMax=4G</command></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>DeviceAllow=</literal></term>
    <listitem>
     <para>読み込み ( <literal>r</literal> ), 書き込み ( <literal>w</literal> ), mknod ( <literal>m</literal> ) のアクセスを許可します。このコマンドの場合、デバイスノードの指定と、スペースを入れて <literal>r</literal> , <literal>w</literal>, <literal>m</literal> の一覧を指定する必要があります。</para>
     <para>例:</para>
     <screen>&prompt.root;<command>systemctl set-property system.slice DeviceAllow="/dev/sdb1 r"</command></screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>DevicePolicy=</literal> <option>[auto|closed|strict]</option></term>
    <listitem>
     <para><literal>strict</literal> に設定した場合、 <literal>DeviceAllow</literal> に列挙したデバイスにのみアクセスを許可するようになります。 <literal>closed</literal> を指定すると、 <filename>/dev/null</filename> , <filename>/dev/zero</filename> , <filename>/dev/full</filename> , <filename>/dev/random</filename> , <filename>/dev/urandom</filename> などの標準疑似デバイスにもアクセスを許可するようになります。 <literal>auto</literal> を設定した場合は、 <literal>DeviceAllow</literal> でルールが設定されない場合、全てのデバイスへのアクセスが許可されるようになります。既定値は <literal>auto</literal> です。</para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>プロパティに対する詳細と完全な一覧については、 <command>man systemd.resource-control</command> で表示されるマニュアルページをお読みください。</para>
 </sect1>
 
 <sect1 xml:id="sec-tuning-cgroups-tasksmax">
  <title>Preventing Fork Bombs with TasksMax</title>
   <para>
      &systemd; 228 shipped with a <literal>DefaultTasksMax</literal> 
      limit of 512. This limited the number of processes any system unit 
      can create at one time to 512. Previous versions had no default 
      limit. The goal was to improve security by preventing runaway 
      processes from creating excessive forks, or spawning enough 
      threads to exhaust system resources.
   </para> 
   <para>
      However, it soon became apparent that there is not a single
      default that applies to all use cases. 512 is not low enough
      to prevent a runaway process from crashing a system, especially 
      when other resources such as CPU and RAM are not restricted, 
      and not high enough for processes that create a lot of threads, 
      such as databases. In &systemd; 234 the default was changed to 15%, 
      which is 4915 tasks (15% of the kernel limit of 32768; 
      see <command>cat /proc/sys/kernel/pid_max</command>). This default is
      compiled, and can be changed in configuration files. The compiled
      defaults are documented in
      <filename>/etc/systemd/system.conf</filename>. You can edit this file
      to override the defaults, though there are other methods we will
      show in the following sections.
   </para>
  
 <sect2 xml:id="sec-tasksmax-defaults">
  <title>Finding the Current Default TasksMax Values</title>
   <para>
      &sle; ships with two custom configurations that override the upstream
      defaults for system units and for user slices, and sets them both to 
      <literal>infinity</literal>.  
      <filename>/usr/lib/systemd/system.conf.d/20-suse-defaults.conf</filename>
      contains these lines:
   </para>
   <screen>
[Manager]
DefaultTasksMax=infinity
   </screen>
   <para>
      <filename>/usr/lib/systemd/system/user-.slice.d/20-suse-defaults.conf</filename>
      contains these lines:
   </para>
   <screen>[Slice]
TasksMax=infinity
   </screen>
  <para>
      <literal>infinity</literal> means having no limit. It is not a 
      requirement to change the default, but setting some limits may help to 
      prevent system crashes from runaway processes.
  </para>
</sect2>

<sect2 xml:id="sec-edit-taskmax-default">
 <title>Overriding the DefaultTasksMax Value</title>
  <para>
      Change the global <literal>DefaultTasksMax</literal> value by creating 
      a new override file, 
      <filename>/etc/systemd/system.conf.d/10-system-tasksmax.conf</filename>,
      and write the following lines to set new default limit of 256 tasks per 
      system unit:
   </para>
   <screen>
[Manager]
DefaultTasksMax=256
</screen>
   <para>
       Load the new setting, then verify that it changed:
   </para>
   <screen>&prompt.sudo;systemctl daemon-reload
&prompt.user;systemctl show --property DefaultTasksMax
DefaultTasksMax=256
   </screen>
   <para>
       Adjust this default value to suit your needs. You can set higher 
       limits on individual services as needed. This example is for MariaDB. 
       First check the current active value:
   </para>
   <screen>
&prompt.user;systemctl status mariadb.service
  ● mariadb.service - MariaDB database server
   Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; vendor preset&gt;
   Active: active (running) since Tue 2020-05-26 14:15:03 PDT; 27min ago
     Docs: man:mysqld(8)
           https://mariadb.com/kb/en/library/systemd/
 Main PID: 11845 (mysqld)
   Status: "Taking your SQL requests now..."
    Tasks: 30 (limit: 256)
   CGroup: /system.slice/mariadb.service
           └─11845 /usr/sbin/mysqld --defaults-file=/etc/my.cnf --user=mysql
   </screen>
   <para>
       The Tasks line shows that MariaDB currently has 30 tasks running, and has
       an upper limit of the default 256, which is inadequate for a database. The 
       following example demonstrates how to raise MariaDB's limit to 8192. Create a new override file with <command>systemctl edit</command>, and enter the new value:
   </para>
   <screen>&prompt.sudo;systemctl edit mariadb.service
       
[Service]
TasksMax=8192

&prompt.user;systemctl status mariadb.service 
● mariadb.service - MariaDB database server
   Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; vendor preset: disab&gt;
  Drop-In: /etc/systemd/system/mariadb.service.d
           └─override.conf
   Active: active (running) since Tue 2020-06-02 17:57:48 PDT; 7min ago
     Docs: man:mysqld(8)
           https://mariadb.com/kb/en/library/systemd/
  Process: 3446 ExecStartPre=/usr/lib/mysql/mysql-systemd-helper upgrade (code=exited, sta&gt;
  Process: 3440 ExecStartPre=/usr/lib/mysql/mysql-systemd-helper install (code=exited, sta&gt;
 Main PID: 3452 (mysqld)
   Status: "Taking your SQL requests now..."
    Tasks: 30 (limit: 8192)
   CGroup: /system.slice/mariadb.service
           └─3452 /usr/sbin/mysqld --defaults-file=/etc/my.cnf --user=mysql
   </screen>
   <para>
       <command>systemctl edit</command> creates an override file, 
       <filename>/etc/systemd/system/mariadb.service.d/override.conf</filename>, 
       that contains only the changes you want to apply to the existing unit file.
       The value does not have to be 8192, but should be whatever limit is
       appropriate for your workloads.
   </para>
</sect2>
   
<sect2>
    <title>Deafult TasksMax Limit on Users</title>
   <para>
       The default limit on users should be fairly high, because user sessions need more 
       resources. Set your own default for users by creating a new file, for
       example
       <filename>/etc/systemd/system/user-.slice.d/user-taskmask.conf</filename>.
       The following example sets a default of 16284:
   </para>
   <screen>
[Slice]
TasksMax=16284
   </screen>
   <para>
       Then reload systemd to load the new value, and verify the change:
   </para>
   <screen>&prompt.sudo;systemctl daemon-reload
       
&prompt.user;systemctl show --property TasksMax user-.slice
TasksMax=16284

&prompt.user;systemctl show --property TasksMax user-1000.slice
TasksMax=16284
   </screen>
   <para>
       How do you know what values to use? This varies according to your workloads,
       system resources, and other resource configurations. When your TasksMax 
       value is too low, you will see error messages like "Failed to fork (Resources
       temporarily unavailable)", "Can't create thread to handle 
       new connection" and "Error: Function call 'fork' failed with error code 11, 
       'Resource temporarily unavailable'".
   </para>
   <para>
       For more information on configuring system resources in systemd, see
       <literal>systemd.resource-control (5)</literal>.
   </para>
</sect2>
</sect1>

<sect1>
    <title>さらなる情報</title>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>カーネルのドキュメンテーション <filename>/usr/src/linux/Documentation/cgroups</filename> (<systemitem>kernel-source</systemitem> パッケージ内)</para>
   </listitem>
   <listitem>
    <para><link xlink:href="http://lwn.net/Articles/604609/"/>: Brown, Neil: Control Groups Series (2014 年, 7 部構成)</para>
   </listitem>
   <listitem>
    <para><link xlink:href="http://lwn.net/Articles/243795/"/>: Corbet, Jonathan: Controlling memory use in containers (2007 年)</para>
   </listitem>
   <listitem>
    <para><link xlink:href="http://lwn.net/Articles/236038/"/>: Corbet, Jonathan: Process containers (2007 年)</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
