<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-cachemodes">
 <title>ディスクのキャッシュモード</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
  </dm:docmanager>
 </info>
 <para/>
 <sect1 xml:id="what-is-disk-cache">
  <title>What is a disk cache?</title>

  <para>
   A disk cache is a memory used to speed up the process of storing and
   accessing data from the hard disk. Physical hard disks have their cache
   integrated as a standard feature. For virtual disks, the cache uses
   &vmhost;'s memory and you can fine-tune its behavior, for example, by
   setting its type.
  </para>
 </sect1>
 <sect1 xml:id="how-it-works-disk-cache">
  <title>How does a disk cache work?</title>

  <para>
   Normally, a disk cache stores the most recent and frequently used programs
   and data. When a user or program requests data, the operating system first
   checks the disk cache. If the data is there, the operating system quickly
   delivers the data to the program instead of re-reading the data from the
   disk.
  </para>

  <figure xml:id="fig-caching">
   <title>Caching mechanism</title>
   <mediaobject>
    <imageobject role="html">
     <imagedata fileref="virt-disk-cache.png"/>
    </imageobject>
    <imageobject role="fo">
     <imagedata fileref="virt-disk-cache.png" width="85%"/>
    </imageobject>
   </mediaobject>
  </figure>
 </sect1>
 <sect1 xml:id="benefits-disk-cache">
  <title>Benefits of disk caching</title>

  <para>
   Caching of virtual disk devices affects the overall performance of guest
   machines. You can improve the performance by optimizing the combination of
   cache mode, disk image format, and storage subsystem.
  </para>
 </sect1>
 <sect1 xml:id="cachemodes-descr">
  <title>ディスクのキャッシュモード</title>

  <para>
   If you do not specify a cache mode, <literal>writeback</literal> is used by
   default. Each guest disk can use a one of the following cache modes:
  </para>

  <variablelist>
   <varlistentry xml:id="cache-writeback">
    <term>writeback</term>
    <listitem>
     <para>このモードはハイパーバイザに対して、 <literal>O_DSYNC</literal> も <literal>O_DIRECT</literal> も指定せずにディスクイメージやブロックデバイスを扱うように指定します。ホスト側のページキャッシュも使用し、書き込み処理はホスト側のページキャッシュ内に保存した段階で完了となります。通常のページキャッシュ管理で実際のストレージデバイスへの書き込みを行うことになります。これに加えて、ゲスト側の仮想ストレージアダプタに対してライトバックキャッシュが存在しているものとして通知しますので、ゲスト側からはデータの一貫性維持のため、フラッシュコマンドを送信する必要があることになります。これにより、メモリキャッシュ付きの RAID コントローラを使用しているような動作になります。</para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="cache-writethrough">
    <term>writethrough</term>
    <listitem>
     <para>このモードはハイパーバイザに対して、 <literal>O_DSYNC</literal> を指定してディスクイメージやブロックデバイスを扱うように指定します。書き込みは実際のストレージデバイスに書き込みが完了するまで待機させられるようになります。つまり、ホスト側のページキャッシュは、ライトスルーキャッシュとして使用されることになります。ゲスト側の仮想ストレージアダプタにはライトバックキャッシュが存在しないものとして通知しますので、ゲスト側からはデータの一貫性維持に必要なフラッシュコマンドを送信する必要がなくなります。これにより、ストレージはライトスルーキャッシュが存在する動作になります。</para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="cache-none">
    <term>none</term>
    <listitem>
     <para>このモードはハイパーバイザに対して、 <literal>O_DIRECT</literal> を指定してディスクイメージやブロックデバイスを扱うように指定します。ホスト側のページキャッシュは迂回され、 I/O 処理はハイパーバイザ側のユーザスペースバッファとストレージデバイスとの間で直接行われることになります。ただし実際のストレージデバイスでは、書き込みキュー内に配置できた段階で書き込み完了とされることがありますので、ゲスト側の仮想ストレージアダプタに対しては、ライトバックキャッシュが存在するものとして通知します。そのため、ゲスト側からはデータの一貫性維持のため、フラッシュコマンドを送信する必要があることになります。性能という観点では、ホスト側のディスクに対して直接アクセスするのと等価になります。</para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="cache-unsafe">
    <term>unsafe</term>
    <listitem>
     <para>このモードは上述の <literal>writeback</literal> モードに似ています。ただし <quote>unsafe</quote> モードでは、ゲスト側からのフラッシュコマンドが全て無視されます。このモードの使用にあたっては、ホスト側で何らかの障害が発生した際、データ損失の可能性があるリスクと引き替えに、性能を向上させている点に注意する必要があります。そのため、ゲスト側のインストール作業時などにのみ有用な仕組みで、本番環境の負荷に対して適用すべきではありません。</para>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="cache-directsync">
    <term>directsync</term>
    <listitem>
     <para>
      Writes are reported as completed only when the data has been committed to
      the storage device and the host cache is bypassed. Similar to
      <emphasis>writethrough</emphasis>, this mode can be useful for guests
      that do not send flushes when needed.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="qemu-cachemodes-data-integrity">
  <title>Cache modes and data integrity</title>

  <variablelist>
   <varlistentry>
    <term>writethrough, none, directsync</term>
    <listitem>
     <para>
      These modes are considered to be safest when the guest operating system
      uses flushes as needed. For unsafe or unstable guests, use
      <emphasis>writethough</emphasis> or <emphasis>directsync</emphasis>.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>writeback</term>
    <listitem>
     <para>このモードはゲスト側に対して書き込みキャッシュの存在を通知する仕組みであるため、ディスクイメージ内のデータの一貫性を維持するには、ゲスト側からフラッシュコマンドを送信してもらう必要があります。これは新しいファイルシステムで完全に考慮されている一般的なストレージ設計出もあります。このモードは、ゲスト側に対して書き込み完了を通知するタイミングと、実際にストレージデバイスに書き込むタイミングに時間差が存在することから、ホスト側の障害時にはデータ損失が発生しうる仕組みでもあります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>unsafe</term>
    <listitem>
     <para>
      This mode is similar to <emphasis>writeback</emphasis> caching, except
      the guest flush commands are ignored. This means a higher risk of data
      loss due to host failure.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-cache-mode-live-migration">
  <title>ライブマイグレーション時のキャッシュモードの効果</title>

  <para>ストレージのデータやメタデータのキャッシュは、ライブマイグレーションに対応する際には障害となりうるものです。現時点では、ライブマイグレーションを行うには <literal>raw</literal> , <literal>qcow2</literal> のいずれかのイメージ形式を使用する必要があります。クラスタ型のファイルシステムを使用している場合は、全てのキャッシュモードでライブマイグレーションを行うことができます。それ以外の場合、読み書き可能な共有ストレージで使用できるキャッシュモードは <literal>none</literal> のみとなります。</para>

  <para>&libvirt; の管理レイヤには、いくつかの要素をベースにした移行の互換性チェック機能が含まれています。ゲスト側のストレージがクラスタ型のファイルシステム内に存在している場合、それが読み込み専用か共有可能としてマークされていれば、移行が許可されるかどうかの判断ではキャッシュモードを考慮しなくなります。それ以外の場合、 &libvirt; ではキャッシュモードが <literal>none</literal> に設定されていない限り、移行を拒否するようになっています。ただし、移行時に <quote>unsafe</quote> オプションを指定することで、この制限を無視することができます。 <command>virsh</command> を利用して移行する場合は、下記のようにします:</para>

<screen>&prompt.user;virsh migrate --live --unsafe</screen>

  <tip>
   <para>AIO モード設定が <literal>native</literal> の場合、キャッシュモードを <literal>none</literal> に設定する必要があります。それ以外のキャッシュモードを使用している場合、 AIO モードは自動的に既定値である <literal>threads</literal> に切り戻されます。ホスト内でのゲストのフラッシュ処理は、 <systemitem>fdatasync()</systemitem> で行われるようになります。</para>
  </tip>
 </sect1>
</chapter>
