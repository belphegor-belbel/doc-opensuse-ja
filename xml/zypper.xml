<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="sec-zypper">
 <title>zypper の使用</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <para>zypper はパッケージのインストールや更新、削除などを行うことができる、コマンドライン型のパッケージマネージャです。特にリモートからのソフトウエア管理作業や、シェルスクリプトからのソフトウエア管理に便利な仕組みです。</para>

 <sect2 xml:id="sec-zypper-usage">
  <title>一般的な使用方法</title>
  <para>zypper の一般的な書式は、下記のとおりです:</para>
<screen>zypper <option>[--グローバルオプション]</option>&nbsp;<replaceable>コマンド</replaceable>&nbsp;<option>&nbsp;[--コマンドオプション]</option>&nbsp;<option>[パラメータ]</option></screen>
<!-- Note that Zypper distinguishes between "commands" and "subcommands" in
    ways which are inconsistent with our other documentation:
    + A "command" is a preinstalled functionality of Zypper ("install",
      "remove").
    + A "subcommand" is an executable that users can put into a special path and
      can be run via Zypper.
    - sknorr, 2016-04-21 -->
  <para>[] で括られた箇所は任意指定のもので、必ずしも指定する必要があるものではありません。オプションとコマンドの一覧については、 <command>zypper help</command> を実行してください。また、特定のコマンドに対してヘルプを表示したい場合は、 <command>zypper help</command> <replaceable>コマンド</replaceable> と入力して実行してください。</para>
  <variablelist>
   <varlistentry>
    <term>zypper のコマンド</term>
    <listitem>
     <para>zypper で最も簡単な使用方法は、コマンドに続いて名前を入力する方法です。たとえば、システムに対して必要なすべての修正を適用するには、下記のように入力します:</para>
<screen>&prompt.sudo;zypper patch</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>グローバルオプション</term>
    <listitem>
     <para>また、コマンドの直前には 1 つ以上のグローバルオプションを指定することができます:</para>
<screen>&prompt.sudo;zypper --non-interactive patch</screen>
     <para>上記の例では <option>--non-interactive</option> というグローバルオプションを指定しています。これは、コマンドの実行時に一切の問い合わせを行わない (既定の回答がなされたものとして扱う) オプションです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>コマンド固有のオプション</term>
    <listitem>
     <para>特定のコマンドに固有のオプションを指定したい場合は、コマンドの直後で指定します:</para>
<screen>&prompt.sudo;zypper patch --auto-agree-with-licenses</screen>
     <para>上記の例では <option>--auto-agree-with-licenses</option> というオプションを指定しています。これは、システムに対して修正を適用する際、ライセンスの確認を行わない (ライセンスを自動的に受け入れる) オプションです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>パラメータ</term>
    <listitem>
     <para>コマンドによっては、 1 つ以上のパラメータを受け付けるものがあります。たとえば <command>install</command> というコマンドでは、 <emphasis>インストール</emphasis> したいパッケージを指定します:</para>
<screen>&prompt.sudo;zypper install mplayer</screen>
     <para>オプションによっては 1 つのパラメータを必要とするものがあります。たとえば下記のコマンドは、既知の全てのパターンを一覧表示します:</para>
<screen>&prompt.user;zypper search -t pattern</screen>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>これまでのオプションやパラメータは、組み合わせて指定することもできます。たとえば下記のコマンドは、 <literal>factory</literal> という名前のリポジトリから <package>mc</package> と <package>vim</package> というパッケージをインストールし、インストール時に詳細な出力 (verbose) を行うようにしています:</para>
<screen>&prompt.sudo;zypper -v install --from factory mc vim</screen>
  <para><option>--from</option> オプションは、依存関係の解決に際して全てのリポジトリを有効化した状態のまま、指定したリポジトリからパッケージをインストールするためのオプションです。 <option>--repo</option> オプションは <option>--from</option> オプションと同じ意味で、どちらを使用してもかまいません。</para>
  <para>また、ほとんどの zypper コマンドには <literal>dry-run</literal> オプションが用意されています。これは、指定したコマンドの実行をシミュレーションするためのもので、テスト用に使用することができます。</para>
<screen>&prompt.sudo;zypper remove --dry-run MozillaFirefox</screen>
  <para>このほか、 zypper ではグローバルオプションとして <option>--userdata <replaceable>文字列</replaceable></option> というものも用意されています。このオプションは、指定した文字列を zypper およびプラグイン (たとえば brtfs プラグイン) のログファイル内に書き込み、後からログファイル内を検索しやすくするためのオプションです。</para>
<screen>&prompt.sudo;zypper --userdata <replaceable>文字列</replaceable> patch</screen>
 </sect2>

 <sect2 xml:id="sec-zypper-subcommands">
  <title>zypper のサブコマンドの使用</title>
  <para>zypper でのサブコマンドは、それ自身が実行ファイルの形で zypper_execdir (<filename>/usr/lib/zypper/commands</filename>) ディレクトリ内に存在します。なお、サブコマンドが zypper_execdir 内に存在しない場合、 zypper は $PATH 環境変数内の残りの箇所を自動的に検索します。これにより、独自の拡張を作成してユーザスペース内に配置することができるようになっています。</para>
  <para>ただし、 zypper シェル内でサブコマンドを実行したり、 zypper のグローバルオプションを使用したりすることはできません。</para>
  <para>利用可能なサブコマンドは下記のように実行することで表示することができます:</para>
<screen>&prompt.user;zypper help subcommand
[...]
'/usr/lib/zypper/commands' 内で利用可能な zypper のサブコマンド

  appstream-cache
  lifecycle
  migration
  search-packages

お使いの $PATH 内の他の場所で利用可能な zypper サブコマンド

  &lt;なし&gt; </screen>
  <para>サブコマンドに対するヘルプ画面を表示するには、下記のように実行します:</para>
<screen>
&prompt.user;zypper help appstream-cache
</screen>
 </sect2>

 <sect2 xml:id="sec-zypper-softman">
  <title>zypper を利用したソフトウエアのインストールと削除</title>
  <para>パッケージをインストールしたり削除したりしたい場合は、下記のコマンドをお使いください:</para>
<screen>&prompt.sudo;zypper install <replaceable>パッケージ名</replaceable>
&prompt.sudo;zypper remove <replaceable>パッケージ名</replaceable></screen>
<!-- fate#304459 -->
  <warning>
   <title>必須パッケージの削除について</title>
   <para><package>glibc</package>, <package>zypper</package> , <package>kernel</package> など、システムにとって必須のパッケージを削除しないでください。これらを削除してしまうと、システムが不安定になったり、全く動作しなくなったりしてしまいます。</para>
  </warning>
  <sect3 xml:id="sec-zypper-selectpackage">
   <title>インストールまたは削除するパッケージの選択</title>
   <para><command>zypper install</command> や <command>zypper remove</command> のコマンドでは、様々な方法でパッケージを指定することができます。</para>
   <variablelist>
    <varlistentry>
     <term>パッケージ名のみ</term>
     <listitem>
<screen>&prompt.sudo;zypper install MozillaFirefox</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>パッケージ名とバージョン番号</term>
     <listitem>
<screen>&prompt.sudo;zypper install MozillaFirefox-52.2</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>リポジトリの別名とパッケージ名</term>
     <listitem>
<screen>&prompt.sudo;zypper install mozilla:MozillaFirefox</screen>
      <para>ここで、 <literal>mozilla</literal> はインストール元となるリポジトリの別名を意味します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ワイルドカードを使用したパッケージ名</term>
     <listitem>
      <para>特定の文字列で始まる、もしくは特定の文字列で終わる全てのパッケージをインストールすることができます。なお、特にパッケージを削除する際には、よく注意して使用してください。たとえば下記のコマンドを実行すると、 <quote>Moz</quote> で始まる全てのパッケージをインストールします:</para>
<screen>&prompt.sudo;zypper install 'Moz*'</screen>
      <tip>
       <title>全ての <filename>-debuginfo</filename> パッケージの削除</title>
       <para>何らかの問題を調査するにあたっては、実行中のプロセスから様々な情報を取得する目的で、多数の <filename>-debuginfo</filename> パッケージを一時的にインストールしなければならない場合があります。デバッグの作業が終わると、これらは不要なパッケージとなりますので、環境を元に戻すために下記のようにコマンドを実行することができます:</para>
<screen>&prompt.sudo;zypper remove '*-debuginfo'</screen>
      </tip>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>能力による指定</term>
     <listitem>
      <para>パッケージ名が分からない場合は、能力による指定を行うこともできます。たとえば下記のコマンドを実行すると、 <package>MozillaFirefox</package> パッケージをインストールします:</para>
<screen>&prompt.sudo;zypper install firefox</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>能力やハードウエアアーキテクチャ、バージョンによる指定</term>
     <listitem>
      <para>能力とハードウエアアーキテクチャ、バージョンをそれぞれ組み合わせて指定することもできます:</para>
      <itemizedlist>
       <listitem>
        <para>能力の後ろにピリオド (.) を置き、続いて必要なハードウエアアーキテクチャを指定してください。たとえば &x86-64; アーキテクチャ (zypper では <literal>x86_64</literal> と命名されています) を指定するには、下記のようにします:</para>
<screen>&prompt.sudo;zypper install 'firefox.x86_64'</screen>
       </listitem>
       <listitem>
        <para>バージョン番号は文字列の末尾に指定するほか、合わせて下記のいずれかの演算子を指定します: <literal>&lt;</literal> (より小さい), <literal>&lt;=</literal> (より小さいか等しい), <literal>=</literal> (等しい), <literal>&gt;=</literal> (より大きいか等しい), <literal>&gt;</literal> (より大きい)</para>
<screen>&prompt.sudo;zypper install 'firefox&gt;=74.2'</screen>
       </listitem>
       <listitem>
        <para>ハードウエアアーキテクチャとバージョン番号の両方を指定することもできます:</para>
<screen>&prompt.sudo;zypper install 'firefox.x86_64&gt;=74.2'</screen>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>RPM ファイルのパスによる指定</term>
     <listitem>
      <para>パッケージに対するローカルのパス、もしくはリモートのパスを指定することもできます:</para>
<screen>&prompt.sudo;zypper install /tmp/install/MozillaFirefox.rpm
&prompt.sudo;zypper install http://download.&exampledomain;/MozillaFirefox.rpm</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
  <sect3 xml:id="sec-zypper-combineinstall">
   <title>パッケージのインストールと削除の組み合わせ</title>
   <para>パッケージのインストールと削除を同時に実施したい場合は、 <literal>+/-</literal> の修飾子を指定します。たとえば <package>emacs</package> パッケージをインストールし、同時に <package>vim</package> パッケージを削除したい場合は、下記のようにします:</para>
<screen>&prompt.sudo;zypper install emacs -vim</screen>
   <para><package>emacs</package> パッケージを削除し、同時に <package>vim</package> パッケージをインストールしたい場合は、下記のようにします:</para>
<screen>&prompt.sudo;zypper remove emacs +vim</screen>
   <para><literal>-</literal> でパッケージの削除を指定する場合は、これがコマンドオプションと取り違えられたりしないようにするため、 <literal>-</literal> を 2 つめ以降に指定するようにしてください。 2 つめ以降に書くことが難しい場合は、 <literal>--</literal> でオプションの終了を表わしてもかまいません:</para>
<screen>&prompt.sudo;zypper install -emacs +vim       # 誤り
&prompt.sudo;zypper install vim -emacs        # 正しい
&prompt.sudo;zypper install -- -emacs +vim    # 正しい
&prompt.sudo;zypper remove emacs +vim         # 正しい</screen>
  </sect3>
  <sect3 xml:id="sec-zypper-clean">
   <title>削除したパッケージが必要としていた依存関係の清掃</title>
   <para>特定のパッケージ名の指定と組み合わせることで、削除後に不要となるパッケージを自動的に削除させることもできます。これを行いたい場合は、 <option>--clean-deps</option> オプションを指定してください:</para>
<screen>&prompt.sudo;zypper rm --clean-deps <replaceable>パッケージ名</replaceable></screen>
  </sect3>
  <sect3 xml:id="sec-zypper-script">
   <title>スクリプト内での zypper の使用</title>
   <para>既定では、 zypper は選択したパッケージをインストール／削除する前、および何らかの問題が発生した場合に、確認メッセージを表示します。確認メッセージの表示は、<option>--non-interactive</option> オプションを指定することで省略することができます。ただし、このオプションは実際のコマンド (たとえば <command>install</command>, <command>remove</command>, <command>patch</command> など) よりも前に指定しなければなりません。具体的には、下記のようになります:</para>
<screen>&prompt.sudo;zypper <option>--non-interactive</option> install <replaceable>パッケージ名</replaceable></screen>
   <para>このオプションを指定することで、 zypper をスクリプト内や cron のジョブ内で利用できるようになります。</para>
  </sect3>
  <sect3 xml:id="sec-zypper-softman-sources">
   <title>ソースパッケージのインストールとダウンロード</title>
   <para>該当するソースパッケージをインストールしたい場合は、下記のように実行します:</para>
<screen>&prompt.user;zypper source-install <replaceable>パッケージ名</replaceable></screen>
   <para>上記のコマンドを &rootuser; で実行すると、ソースパッケージは既定で <filename>/usr/src/packages/</filename> 以下にインストールされます。それ以外のユーザで実行すると、 <filename>~/rpmbuild</filename> 以下にインストールされます。これらの設定は、 <command>rpm</command> の設定で変更することができます。</para>
   <para>このコマンドは、指定したパッケージが構築時に依存するパッケージについても、インストールを行います。これを回避したい場合は、 <literal>-D</literal> スイッチを指定してください:</para>
<screen>&prompt.sudo;zypper source-install -D <replaceable>パッケージ名</replaceable></screen>
   <para>構築時の依存関係のみをインストールしたい場合は、 <literal>-d</literal> を指定してください。</para>
<screen>&prompt.sudo;zypper source-install -d <replaceable>パッケージ名</replaceable></screen>
   <para>もちろん、これらの処理はソースパッケージのあるリポジトリが有効化されている場合にのみ動作するものです (ソースパッケージのあるリポジトリは、既定で追加されていますが、有効化はされていません) 。リポジトリの管理について、詳しくは <xref linkend="sec-zypper-instrepo"/> をお読みください。</para>
   <para>お使いのリポジトリ内にある全てのソースパッケージを一覧表示するには、下記のコマンドを実行してください:</para>
<screen>&prompt.user;zypper search -t srcpackage</screen>
   <para>また、インストール済みの全てのパッケージに対して、対応するソースパッケージをダウンロードすることもできます。ソースパッケージをダウンロードしたい場合は、下記のコマンドをお使いください:</para>
<screen>&prompt.user;zypper source-download</screen>
   <para>既定のダウンロード先ディレクトリは <filename>/var/cache/zypper/source-download</filename> に設定されていますが、 <option>--directory</option> オプションを指定することで、自由に変更することができます。また、ダウンロードや削除を行うことなく、必要もしくは不要なパッケージを確認したい場合は、 <option>--status</option> オプションを指定してください。不要なソースパッケージを削除したい場合は、 <option>--delete</option> オプションを指定してください。削除を行いたくない場合は、 <option>--no-delete</option> を指定してください。</para>
  </sect3>
  <sect3 xml:id="sec-zypper-softman-pluscontent">
   <title>無効化されているリポジトリからのパッケージのインストール</title>
   <para>通常は、パッケージをインストールしたり更新したりする場合、有効化されたリポジトリのパッケージのみを使用することができます。ですが、 <option>--plus-content <replaceable>タグ</replaceable></option> オプションを指定すると、その zypper の実行時に限定して一時的にリポジトリを有効化し、インストールや交信を行うことができるようになります。 zypper のコマンドが終了すると元に戻されます (無効化されます) 。</para>
   <para>たとえば <filename>-debuginfo</filename> や <filename>-debugsource</filename> などのパッケージを提供する追加リポジトリを有効化したい場合は、 <option>--plus-content debug</option> オプションを指定してください。なお、 <option>--plus-content</option> は必要に応じて複数回指定することができます。</para>
   <para>このような 'debug' (デバッグ) リポジトリを有効化して、特定の <filename>-debuginfo</filename> パッケージをインストールするには、下記のように実行します:</para>
<screen>&prompt.sudo;zypper --plus-content debug \
   install "debuginfo(build-id)=eb844a5c20c70a59fc693cd1061f851fb7d046f4"</screen>
   <para>ここで、 <literal>build-id</literal> 以下の文字列は、 <command>gdb</command> コマンドで表示される ID を指定します。</para>
   <note>
    <title>無効化されているインストールメディアについて</title>
    <para><remark>cwickert 2019-04-18: JSC#SLE-3191</remark> &productname; のインストールメディアを表わすリポジトリが設定されますが、無効化された状態になります。オンラインのリポジトリではなく、インストールメディアからインストールを行いたい場合は、 <option>--plus-content</option> オプションをお使いください。なお、 <command>zypper</command> コマンドを使用する際には、あらかじめドライブに DVD を挿入しておくなど、メディア側を用意してから実行してください。</para>
   </note>
  </sect3>
  <sect3 xml:id="sec-zypper-softman-util">
   <title>ユーティリティ</title>
   <para>依存関係が全て満たされていることを確認し、満たされていない場合は修復作業を実施したい場合は、下記のコマンドを実行します:</para>
<screen>&prompt.user;zypper verify</screen>
   <para>パッケージには、満たすべき依存関係だけでなく、 <quote>推奨</quote> という設定も用意されています。これら推奨パッケージは、利用可能でインストールできる場合にのみインストールされます。特定のパッケージをインストールした後や、ハードウエアを追加したことによって、新しく推奨されるパッケージをインストールするには、下記のコマンドを実行します:</para>
<screen>&prompt.sudo;zypper install-new-recommends</screen>
   <para>このコマンドは、たとえば Web カメラや無線 LAN デバイスを接続したような場合に有用です。これにより、デバイスを利用するためのドライバと、関連するソフトウエアがそれぞれ存在すれば、インストールされるようになります。なお、ドライバと関連ソフトウエアは、ハードウエア要件が合致した場合にのみインストールされます。</para>
  </sect3>
 </sect2>

 <sect2 xml:id="sec-zypper-softup">
  <title>zypper を利用したソフトウエアの更新</title>
  <para>zypper では 3 種類の方法でソフトウエアを更新することができます。 1 つめの方法は修正 (パッチ) をインストールする方法で、 2 つめは同じパッケージの新しいバージョンをインストールする方法、そして最後はディストリビューション全体を更新する方法です。ディストリビューション全体を更新する場合は <command>zypper dist-upgrade</command> を使用しますが、こちらに関しては <!-- cwickert 2018-11-19: No whitespace and no line break with indention between the phrases, otherwise there will be a trailing whitespace in the resulting media at the end of the sentence just before the dot. --> <phrase os="sles;sled"><xref linkend="cha-upgrade-paths"/></phrase> <phrase os="osuse"><xref linkend="cha-update-osuse"/></phrase> をお読みください。</para>
  <sect3 xml:id="sec-zypper-softup-patch">
   <title>必要な全パッケージのインストール</title>
   <para>お使いのシステムに対して、提供されている全ての修正をインストールするには、下記のコマンドを実行します:</para>
<screen>&prompt.sudo;zypper patch</screen>
   <para>お使いのコンピュータに設定されているリポジトリについて、提供されている全ての修正を現在のインストール状態と比較して、インストール作業を行います。これらの修正が必要なものであれば (<literal>optional</literal> (任意指定) または <literal>feature</literal> (機能追加) でなければ) 、それらを即時にインストールします。 <phrase os="sles;sled">なお、公式の更新リポジトリは、お使いの &productname; を登録した場合にのみ利用できます。</phrase></para>
   <para>なお、インストールしようとしている修正がシステムの再起動を必要とするような変更を伴う場合は、その旨が事前に警告されます。</para>
   <para>また、 <command>zypper patch</command> コマンドは、サードパーティ製のリポジトリが提供する修正については、適用を行いません。サードパーティ製のリポジトリについても更新を行いたい場合は、 <literal>with-update</literal> というコマンドオプションを追加してください。</para>
<screen>&prompt.sudo;zypper patch --with-update</screen>
<!--taroth 2016-07-04: fate#320447-->
   <para>任意指定の修正もあわせてインストールしたい場合は、下記のように実行します:</para>
<screen>&prompt.sudo;zypper patch --with-optional</screen>
   <remark>
    The structure here is a bit unfortunate: We explain how to use the
    --cve/--bugzilla options in more detail below ("Listing Patches").
    However, the first bit people get is the very brief intro immediately below.
    Not sure whether to replicate all the information from "Listing Patches"
    here.
    - sknorr, 2016-04-25
   </remark>
   <para>特定の Bugzilla バグ番号に関連する全ての修正をインストールしたい場合は、下記のように実行します:</para>
<screen>&prompt.sudo;zypper patch --bugzilla=<replaceable>番号</replaceable></screen>
   <para>特定の CVE データベースエントリに対応する全ての修正をインストールしたい場合は、下記のように実行します:</para>
<screen>&prompt.sudo;zypper patch --cve=<replaceable>番号</replaceable></screen>
   <para>たとえば、 CVE 番号 <literal>CVE-2010-2713</literal> に対応するセキュリティ修正をインストールするには、下記のように実行します:</para>
<screen>&prompt.sudo;zypper patch --cve=CVE-2010-2713</screen>
   <para>また、 zypper やパッケージ管理システム自身に対する修正のみをインストールするには、下記のように実行します:</para>
<screen>&prompt.sudo;zypper patch --updatestack-only</screen>
   <para>なお、 <literal>updatestack-only</literal> オプションを指定すると、他のリポジトリが提供する更新をあわせてインストールするようなコマンドオプションは、無効化されることに注意してください。</para>
  </sect3>
  <sect3 xml:id="sec-zypper-softup-listpatch">
   <title>修正の一覧表示</title>
   <para>どのような修正が提供されているのかを確認するにあたって、 zypper は下記のような情報を提供します:</para>
   <variablelist>
    <varlistentry>
     <term>必要な修正の数</term>
     <listitem>
      <para>必要な修正の数 (お使いのシステムに適用可能で、まだインストールされていないもの) を表示するには、 <command>patch-check</command> コマンドを使用します:</para>
<screen>&prompt.user;zypper patch-check
リポジトリのデータを読み込んでいます...
インストール済みのパッケージを読み込んでいます...

5 個のパッチが必要です (1 個のセキュリティパッチ)</screen>
      <para>このコマンドでは、 <option>--updatestack-only</option> オプションをあわせて指定することができます。これを指定すると、 zypper とパッケージ管理システム自身に関わる修正のみを表示します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>必要な修正の一覧表示</term>
     <listitem>
      <para>必要な全ての修正 (お使いのシステムに適用可能で、まだインストールされていないもの) を一覧表示するには、 <command>list-patches</command> コマンドを使用します:</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>全ての修正の一覧表示</term>
     <listitem>
      <para>既に適用済みのものを含め、 &productname; に対して提供されている全ての修正を一覧表示するには、 <command>zypper patches</command> コマンドを使用します。</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>なお、特定の問題に限定して修正を一覧表示したり、インストールしたりすることもできます。特定の修正のみを一覧表示するには、 <command>zypper list-patches</command> に続いて下記のオプションを設定してください:</para>
   <variablelist>
    <varlistentry>
     <term>Bugzilla のバグ番号を指定する方法</term>
     <listitem>
      <para>特定の Bugzilla バグ番号に関連する全ての修正を一覧表示するには、 <option>--bugzilla</option> オプションを指定します。</para>
      <para>特定のバグに対する修正を一覧表示するには、 <option>--bugzilla=<replaceable>番号</replaceable></option> のようにしてバグ番号を指定します。複数の Bugzilla バグに関連する修正を検索するには、バグ番号をカンマで区切って指定してください。たとえば下記のようになります:</para>
<screen>&prompt.user;zypper list-patches --bugzilla=972197,956917</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>CVE 番号を指定する方法</term>
     <listitem>
      <para>CVE (Common Vulnerabilities and Exposures; 汎用脆弱性公開) データベースの項目番号に関連する全ての修正を一覧表示するには、 <option>--cve</option> オプションを使用します。</para>
      <para>特定の CVE データベースエントリに対応する修正を一覧表示するには、 <option>--cve=<replaceable>NUMBER</replaceable></option> のようにして CVE 番号を指定します。複数の CVE データベースエントリに関連する修正を検索するには、 CVE 番号をカンマで区切って指定してください。たとえば下記のようになります:</para>
<screen>&prompt.user;zypper list-patches --bugzilla=CVE-2016-2315,CVE-2016-2324</screen>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>不要な修正であるかどうかに関わらず修正を一覧表示したい場合は、 <option>--all</option> オプションをお使いください。たとえば CVE 番号が割り当てられている全ての修正を一覧表示するには、下記のように実行します:</para>
<screen><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper list-patches --all --cve
リポジトリのデータを読み込んでいます...
インストール済みのパッケージを読み込んでいます...

発信番号  | 番号          | パッチ            | カテゴリ     | 重要度    | 状態
---------+---------------+-------------------+-------------+-----------+----------------------------------------------------
cve      | CVE-2019-0287 | SUSE-SLE-Module.. | recommended | moderate  | 必要
cve      | CVE-2019-3566 | SUSE-SLE-SERVER.. | recommended | moderate  | 不要
[...]</screen>
  </sect3>
  <sect3 xml:id="sec-zypper-softup-update">
   <title>新しいバージョンのパッケージのインストール</title>
   <para>リポジトリ内に新しいバージョンのパッケージだけが用意されていて、修正としては提供していない場合、 <command>zypper&nbsp;patch</command> は何も行いません。システムの一貫性を維持したまま、利用可能な新しいバージョンに更新するには、下記のように実行します:</para>
<screen>&prompt.sudo;zypper update</screen>
   <para>個別のパッケージを更新したい場合は、 update もしくは install のコマンドでパッケージ名を指定してください:</para>
<screen>&prompt.sudo;zypper update <replaceable>パッケージ名</replaceable>
&prompt.sudo;zypper install <replaceable>パッケージ名</replaceable></screen>
   <para>インストール可能な全ての新しいパッケージを一覧表示するには、下記のように実行します:</para>
<screen>&prompt.user;zypper list-updates</screen>
   <para>ただし、下記の条件に該当する新しいバージョンだけが表示されることに注意してください:</para>
   <itemizedlist>
    <listitem>
     <para>既にインストールされているパッケージと同じベンダ (製造元) であること。</para>
    </listitem>
    <listitem>
     <para>既にインストールされているパッケージのリポジトリと同じか、もしくは高い優先順位が設定されていること。</para>
    </listitem>
    <listitem>
     <para>インストール可能であること (全ての依存関係が満たされていること) 。</para>
    </listitem>
   </itemizedlist>
   <para>インストール可能であるかどうかにかかわらず、利用可能な <emphasis>全ての</emphasis> 新しいパッケージを一覧表示するには、下記のように実行します:</para>
<screen>&prompt.sudo;zypper list-updates --all</screen>
   <para>なぜインストール可能であると判断されないのかについては、上述の <command>zypper install</command> または <command>zypper update</command> コマンドでパッケージ名を指定するとわかります。</para>
  </sect3>
  <sect3 xml:id="sec-zypper-softup-orphaned">
   <title>孤立したパッケージの検出</title>
   <para>zypper を利用してリポジトリを削除したり、システムをアップグレードしたりしたあとは、いくつかのパッケージが <quote>孤立した</quote> 状態になることがあります。これらの <emphasis>孤立した</emphasis> パッケージは、設定されている有効なリポジトリ内には存在していないパッケージを意味します。これらは下記のコマンドを実行することで、一覧表示することができます:</para>
<screen>&prompt.sudo;zypper packages --orphaned</screen>
   <para>出力された一覧を元に、それらを現状のまま維持しておくか、不要なパッケージであるものとして安全に削除しておくことができます。</para>
  </sect3>
<!--taroth 2014-04-30: commenting the following content due to trello#42
    (https://trello.com/c/pyYJ7sQ1)

  <sect3 id="sec-zypper-softup-upgrade">
   <title>Upgrading to a new product version</title>
   <para>&suse; offers various tools to upgrade to a new product version.
    The scenario very much depends on how the system is registered and where it
    gets its repositories from. For more information, see <xref linkend="cha-upgrade-paths"/>.
   </para>
   <para>
    To easily upgrade your installation to a new product version
    (for example, from &sls; 11 to
    &sls; 11 SP1, first adjust your repositories to match the
    current &productname; repositories. For details, refer to
    <xref
     linkend="sec-zypper-instrepo"/>. Then use the <command>zypper
    dist-upgrade</command> command with the required repositories. This
    command ensures that all packages will be installed from the
    repositories currently enabled. For detailed instructions, refer to
    <xref
     linkend="sec-update-zypper"/>.
   </para>
   <para>
    To restrict the distribution upgrade to packages from a certain
    repository while considering also the other repositories for satisfying
    dependencies, use the <option>-/-from</option> option and specify the
    repository by either its alias, its number or URI.
   </para>
   <note>
    <title>Differences between <command>zypper update</command> and <command>zypper dist-upgrade</command></title>
    <para>
     Choose <command>zypper update</command> to update packages to newer
     versions available for your product version while maintaining system
     integrity. <command>zypper update</command> will honor the following
     rules:
    </para>
    <simplelist>
     <member>no vendor changes</member>
     <member>no architecture changes</member>
     <member>no downgrades</member>
     <member>keep installed packages</member>
    </simplelist>
    <para>
     When executing <command>zypper dist-upgrade</command>, all packages
     will be installed from the repositories currently enabled. This rule is
     enforced, so packages might change vendor or architecture or even might
     get downgraded. All packages that have unfulfilled dependencies after
     the upgrade will be uninstalled.
    </para>
   </note>
  </sect3>-->
 </sect2>

 <sect2 xml:id="sec-zypper-ps">
  <title>削除したファイルを使用しているプロセスやサービスの検出</title>
  <para>修正のインストールやパッケージの更新／削除などを行った場合、更新や削除によって置き換えられたり削除されたりしたファイルを、実行中のプロセスが使用したままになっていることがあります。このような状況を検出するには、 <command>zypper ps</command> コマンドをお使いください。これにより、削除されたファイルを使用しているプロセスを一覧で表示することができます。なお、プロセスが既知のサービスに属している場合は、サービス側から再起動することができるようにするため、サービス名もあわせて表示されます。既定では <command>zypper ps</command> は表形式で出力します:</para>
<screen><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper ps
PID   | PPID | UID | ユーザ | コマンド      | サービス     | ファイル
------+------+-----+--------+--------------+--------------+-------------------
814   | 1    | 481 | avahi  | avahi-daemon | avahi-daemon | /lib64/ld-2.19.s-&gt;
      |      |     |        |              |              | /lib64/libdl-2.1-&gt;
      |      |     |        |              |              | /lib64/libpthrea-&gt;
      |      |     |        |              |              | /lib64/libc-2.19-&gt;
[...]</screen>
  <simplelist><member><emphasis role="bold">PID</emphasis>: そのプロセスの ID</member><member><emphasis role="bold">PPID</emphasis>: 親プロセスの ID</member><member><emphasis role="bold">UID</emphasis>: プロセスを実行しているユーザの ID</member><member><emphasis role="bold">ユーザ</emphasis>: プロセスを実行しているユーザのログイン名</member><member><emphasis role="bold">コマンド</emphasis>: プロセスで使用しているコマンド</member><member><emphasis role="bold">サービス</emphasis>: サービス名 (コマンドがシステムサービスに属している場合のみ)</member><member><emphasis role="bold">ファイル</emphasis>: 削除されたファイルの一覧</member>
  </simplelist>
  <para><command>zypper ps</command> の出力形式は、下記のように指定することで変更することができます:</para>
  <variablelist>
   <varlistentry>
    <term><command>zypper ps</command> <option>-s</option></term>
    <listitem>
     <para>削除されたファイルの一覧を表示せず、短い表形式にします。</para>
<screen><?dbsuse-fo font-size="0.70em"?>&prompt.user;zypper ps -s
PID   | PPID | UID  | ユーザ   | コマンド     | サービス
------+------+------+---------+--------------+--------------
814   | 1    | 481  | avahi   | avahi-daemon | avahi-daemon
817   | 1    | 0    | root    | irqbalance   | irqbalance
1567  | 1    | 0    | root    | sshd         | sshd
1761  | 1    | 0    | root    | master       | postfix
1764  | 1761 | 51   | postfix | pickup       | postfix
1765  | 1761 | 51   | postfix | qmgr         | postfix
2031  | 2027 | 1000 | tux     | bash         |</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>zypper ps</command> <option>-ss</option></term>
    <listitem>
     <para>システムサービスに属しているプロセスのみを表示します。</para>
<screen>PID   | PPID | UID  | ユーザ  | コマンド      | サービス
------+------+------+---------+--------------+--------------
814   | 1    | 481  | avahi   | avahi-daemon | avahi-daemon
817   | 1    | 0    | root    | irqbalance   | irqbalance
1567  | 1    | 0    | root    | sshd         | sshd
1761  | 1    | 0    | root    | master       | postfix
1764  | 1761 | 51   | postfix | pickup       | postfix
1765  | 1761 | 51   | postfix | qmgr         | postfix</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>zypper ps</command> <option>-sss</option></term>
    <listitem>
     <para>削除されたファイルを使用しているシステムサービスのみを表示します。</para>
<screen>avahi-daemon
irqbalance
postfix
sshd</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>zypper ps</command> <option>--print "systemctl status %s"</option></term>
    <listitem>
     <para>再起動を必要としているサービスに対して、状態を取得するためのコマンドを表示します。</para>
<screen>systemctl status avahi-daemon
systemctl status irqbalance
systemctl status postfix
systemctl status sshd</screen>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>サービスの取り扱いについて、詳しくは <xref linkend="cha-systemd"/> をお読みください。</para>
 </sect2>

<!--taroth 2014-04-30: commenting the following content due to trello#42
  (https://trello.com/c/pyYJ7sQ1)-->

<!-- <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="zypper_upgrade.xml"/>-->

 <sect2 xml:id="sec-zypper-instrepo">
  <title>zypper を利用したリポジトリの管理</title>
  <para>zypper におけるインストールや修正のインストールは、いずれもリポジトリの設定に依存しています。システムに設定されているリポジトリを一覧表示するには、下記のコマンドを実行します:</para>
<screen>&prompt.user;zypper repos</screen>
  <para>出力は、たとえば下記のようになります:</para>
  <example xml:id="ex-zypper-repos">
   <title>zypper - 既知のリポジトリの一覧表示</title>
<screen os="sles;sled"><?dbsuse-fo font-size="0.60em"?>&prompt.user;zypper repos
# | 別名         | 名前          | 有効   | 更新
--+--------------+---------------+--------+-------------
1 | SLEHA-15-GEO | SLEHA-15-GEO  | はい    | いいえ
2 | SLEHA-15     | SLEHA-15      | はい    | いいえ
3 | SLES15       | SLES15        | はい    | いいえ</screen>
<screen os="osuse"><?dbsuse-fo font-size="0.60em"?>&prompt.user;zypper repos
#  | 別名                  | 名前              | 有効   | GPGチェック | 更新
---+-----------------------+------------------+--------+-------------+-------
 1 | Leap-15.1-Main        | Main (OSS)       | はい    | (r ) はい  | はい
 2 | Leap-15.1-Update      | Update (OSS)     | はい    | (r ) はい  | はい
 3 | Leap-15.1-NOSS        | Main (NON-OSS)   | はい    | (r ) はい  | はい
 4 | Leap-15.1-Update-NOSS | Update (NON-OSS) | はい    | (r ) はい  | はい
[...]</screen>
  </example>
  <para>様々なコマンドでリポジトリを指定する際、 <command>zypper repos</command> コマンドの出力で表示される別名や URI のほか、番号も指定することができます。リポジトリの別名とは、リポジトリに対して設定する短い名前で、コマンドでの指定を簡略化するための仕組みです。なお、リポジトリに対して何らかの編集作業を行うと、番号が変わることがありますので、ご注意ください。別名については、明示的に変更しない限り、変わることはありません。</para>
  <para>既定では URI やリポジトリの優先順位は表示されません。全ての詳細情報をあわせて表示したい場合は、下記のコマンドを実行してください:</para>
<screen>&prompt.user;zypper repos -d</screen>
  <sect3 xml:id="sec-zypper-instrepo-add">
   <title>リポジトリの追加</title>
   <para>リポジトリを追加するには、下記のように実行します:</para>
<screen>&prompt.sudo;zypper addrepo <replaceable>URI</replaceable> <replaceable>別名</replaceable></screen>
   <para><replaceable>URI</replaceable> はインターネットリポジトリの場合は URL を、ネットワークリソースやディレクトリ、 CD や DVD の場合は、それぞれの形式で指定します (詳しくは <link xlink:href="https://ja.opensuse.org/openSUSE:Libzypp_URI"/>  をお読みください) 。 <replaceable>別名</replaceable> はリポジトリに対して設定する、短い独自の名前を指定します。別名は自由に設定することができますが、他のリポジトリの別名とは異なるものでなければなりません。既に使用されている別名を設定しようとすると、 zypper は警告を表示します。</para>
  </sect3>
  <sect3 xml:id="sec-zypper-instrepo-refresh">
   <title>リポジトリの更新</title>
   <para><command>zypper</command> は設定済みのリポジトリから、変更されたパッケージの情報を取得することができます。変更された情報を取得するには、下記のコマンドを実行します:</para>
<screen>&prompt.sudo;zypper refresh</screen>
   <note>
    <title><command>zypper</command> の既定の動作</title>
    <para>既定では、いくつかのコマンドで <command>refresh</command> を自動的に実行します。そのため、このコマンドを明示的に実行する必要はありません。</para>
   </note>
   <para>また、 <command>refresh</command> コマンドでは、無効化されたリポジトリの変更も取得することができます。これを実行するには、 <literal>--plus-content</literal> オプションを指定します:</para>
<screen>&prompt.sudo;zypper --plus-content refresh</screen>
   <para>このオプションは、リポジトリ内の変更を取得しますが、無効化されたリポジトリは同じ状態のまま (つまり、無効化されたまま) になります。</para>
  </sect3>
  <sect3 xml:id="sec-zypper-instrepo-rm">
   <title>リポジトリの削除</title>
   <para>一覧からリポジトリを削除するには、 <command>zypper removerepo</command> で削除したいリポジトリの別名または番号を指定します。たとえば <xref linkend="ex-zypper-repos"/> の状態から <literal os="sles;sled">SLEHA-12-GEO</literal><literal os="osuse">repo-update-non-oss</literal>リポジトリを削除するには、下記のいずれかのコマンドを実行します:</para>
<screen os="sles;sled">&prompt.sudo;zypper removerepo 1
&prompt.sudo;zypper removerepo "SLEHA-12-GEO"</screen>
<screen os="osuse">&prompt.sudo;zypper removerepo 4
&prompt.sudo;zypper removerepo "repo-update-non-oss"</screen>
  </sect3>
  <sect3 xml:id="sec-zypper-instrepo-mofify">
   <title>リポジトリの修正</title>
   <para><command>zypper modifyrepo</command> コマンドを使用することで、リポジトリを有効化したり無効化したりすることができます。このほか、このコマンドではリポジトリの設定 (自動更新や名前、優先順位など) も変更することができます。たとえば下記のコマンドを実行すると、 <literal>updates</literal> という名前のリポジトリの自動更新を有効化し、優先順位を 20 にします:</para>
<screen>&prompt.sudo;zypper modifyrepo -er -p 20 'updates'</screen>
   <para>リポジトリの編集は、リポジトリ 1 つに対して行うことができるだけではありません。複数のリポジトリに対して一括で変更することもできます:</para>
   <simplelist><member><option>-a</option>: 全てのリポジトリ</member><member><option>-l</option>: ローカルのリポジトリ</member><member><option>-t</option>: リモートのリポジトリ</member><member><option>-m <replaceable>種類</replaceable></option>: 特定の種類のリポジトリ (<replaceable>種類</replaceable> には下記のいずれかを指定することができます: <literal>http</literal>, <literal>https</literal>, <literal>ftp</literal>, <literal>cd</literal>, <literal>dvd</literal>, <literal>dir</literal>, <literal>file</literal>, <literal>cifs</literal>, <literal>smb</literal>, <literal>nfs</literal>, <literal>hd</literal>, <literal>iso</literal>)</member>
   </simplelist>
   <para>リポジトリの別名を変更するには、 <literal>renamerepo</literal> コマンドを使用します。下記の例では、 <literal>Mozilla Firefox</literal> という別名のリポジトリを <literal>firefox</literal> という別名に変更しています:</para>
<screen>&prompt.sudo;zypper renamerepo 'Mozilla Firefox' firefox</screen>
  </sect3>
 </sect2>

 <sect2 xml:id="sec-zypper-query">
  <title>zypper を利用したリポジトリやパッケージの問い合わせ</title>
  <para>zypper では、様々な方法でリポジトリやパッケージの問い合わせを行うことができます。利用可能な全ての製品 (products) やパターン (patterns) 、パッケージ (packages) や修正 (patches) などを一覧で表示するには、下記のコマンドをお使いください:</para>
<screen>&prompt.user;zypper products
&prompt.user;zypper patterns
&prompt.user;zypper packages
&prompt.user;zypper patches</screen>
  <para>特定のパッケージに対して全てのリポジトリを検索するには、 <literal>search</literal> を使用します。また、特定のパッケージに関する情報を取得するには、<literal>info</literal> コマンドを使用します。</para>
  <sect3 xml:id="sec-zypper-query-search">
   <title>ソフトウエアの検索</title>
   <para><command>zypper search</command> コマンドはパッケージ名だけでなく、必要であればパッケージの概要説明や詳細説明を対象として検索することができます。また、<literal>/</literal> で括られた文字列は正規表現として扱われます。なお、既定では大文字と小文字を区別せずに検索します。</para>
   <variablelist>
    <varlistentry>
     <term>パッケージ名に <literal>fire</literal> という文字列を含むものの単純な検索</term>
     <listitem>
<screen>&prompt.user;zypper search "fire"</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>MozillaFirefox</literal> という名前に一致するパッケージの検索</term>
     <listitem>
<screen>&prompt.user;zypper search --match-exact "MozillaFirefox"</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>パッケージの概要説明と詳細説明の両方を対象にする検索</term>
     <listitem>
<screen>&prompt.user;zypper search -d fire</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>インストールされていないパッケージのみを表示する検索</term>
     <listitem>
<screen>&prompt.user;zypper search -u fire</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>fir</literal> という文字列を含むが、その後ろに <literal>e</literal> を含まないようなパッケージの検索</term>
     <listitem>
<screen>&prompt.user;zypper se "/fir[^e]/"</screen>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
  <sect3 xml:id="sec-zypper-query-search-packages" os="sles;sled">
   <title>全ての &slea; モジュールに対するパッケージの検索</title>
   <para>現在有効化されている &slea; モジュールを、内外問わずにパッケージ検索したい場合は、<command>search-packages</command> サブコマンドを使用します。このコマンドは &scc; に接続して、該当するパッケージに対する全てのモジュールを検索します。</para>
<screen>&prompt.user;zypper search-packages <replaceable>パッケージ_1</replaceable> <replaceable>パッケージ_2</replaceable></screen>
   <para><command>zypper search-packages</command> では下記のようなオプションを提供しています:</para>
   <itemizedlist>
    <listitem>
     <para>指定した文字列に厳密に一致するもののみを検索: <option>-x</option> , <option>--match-exact</option></para>
    </listitem>
    <listitem>
     <para>モジュールごとに結果をグループ化 (既定ではパッケージごとにグループ化します): <option>-g,</option> <option>--group-by-module</option></para>
    </listitem>
    <listitem>
     <para>パッケージに関するより詳しい情報の表示: <option>-d</option> , <option>--details</option></para>
    </listitem>
    <listitem>
     <para>検索結果を XML で出力: <option>--xmlout</option></para>
    </listitem>
   </itemizedlist>
  </sect3>
  <sect3 xml:id="sec-zypper-query-what-provides">
   <title>特定の能力を指定する検索</title>
   <para>特定の能力設定を指定してパッケージを検索したい場合は、<literal>what-provides</literal> コマンドを使用します。たとえば Perl モジュールの <literal>SVN::Core</literal> を提供するパッケージを検索したい場合は、下記を実行します:</para>
<screen>&prompt.user;zypper what-provides 'perl(SVN::Core)'</screen>
   <para><literal>what-provides <replaceable>パッケージ名</replaceable></literal> は <command>rpm -q --whatprovides</command> <replaceable>パッケージ名</replaceable> に似た仕組みですが、 RPM コマンドは RPM データベース (インストールされている全てのパッケージに対するデータベース) 内のみを検索するのに対して、 zypper はインストールされていないものを含めて、任意のリポジトリ内にあるパッケージを検索します。</para>
  </sect3>
  <sect3 xml:id="sec-zypper-query-info">
   <title>パッケージの情報表示</title>
   <para>単一のパッケージの情報を表示したい場合は、 <command>info</command> コマンドに続いて正確なパッケージ名を指定します。これにより、指定したパッケージに対する詳細な情報が表示されます。指定したパッケージ名が、どのリポジトリ内にも見つからない場合は、パッケージ名以外を対象として検索を行い、詳細情報を表示します。また、種類を指定 (<literal>-t</literal> オプションを設定) して情報を要求した場合で、その種類が見つからない場合、詳細な情報を表示せずに該当するもののみを表示します。</para>
   <para>また、ソースパッケージを指定すると、このコマンドはソースパッケージから構築されたバイナリパッケージを表示します。バイナリパッケージを指定した場合、このコマンドはパッケージを構築する際に使用するソースパッケージを表示します。</para>
   <para>このパッケージが必要とするパッケージや、推奨するパッケージについても表示を行いたい場合は、それぞれ <option>--requires</option> (必要とするもの) または <option>--recommends</option> (推奨するもの) オプションを指定してください:</para>
<screen>&prompt.user;zypper info --requires MozillaFirefox</screen>
  </sect3>
 </sect2>

 <sect2 xml:id="sec-zypper-lifecycle" os="sles;sled">
  <title>ライフサイクル情報の表示</title>
  <para>&suse; 製品は一般に 10 年間のサポート期間が用意されています。また、必要であれば、標準のサポート期間に加えて 3 年間の延長サポートを提供する &suse; の拡張サポートも利用することができます。お使いの製品に対する正確なライフサイクル情報は <link xlink:href="https://www.suse.com/lifecycle"/> をご覧ください。</para>
  <para>お使いの製品に対するライフサイクル情報を確認するには、下記のようにして <command>zypper lifecycle</command> コマンドを実行します:</para>
<screen>&prompt.root;<command>zypper lifecycle</command>
    Product end of support                                  
Codestream: SUSE Linux Enterprise Server 15             2028-07-30
    SUSE Linux Enterprise Server 15 SP2                 n/a*

Module end of support                                   
Transactional Server Module                             2022-07-30
Basesystem Module                                       n/a*
Desktop Applications Module                             n/a*
Server Applications Module                              n/a*

Extension end of support                                
SUSE Package Hub 15                                     n/a*

Package end of support if different from product:
autoyast2-installation                   Now, installed 4.2.29-1.3, update available 4.2.31-1.8 
bluez                                    Now, installed 5.48-11.31, update available 5.48-11.34 
branding-SLE                             Now, installed 15-17.77, update available 15-17.83 
cantarell-fonts                          Now, installed 0.111-1.5, update available 0.111-1.8 
checkmedia                               Now, installed 5.3-1.49, update available 5.3-1.52 
cpupower                                 Now, installed 5.5-2.12, update available 5.5-2.14 
</screen>
 </sect2>

 <sect2 xml:id="sec-zypper-configure">
  <title>zypper の設定</title>
  <para>zypper では、設定ファイルを利用することで、システム全体もしくはユーザ単位で、動作を恒久的に変更することができます。システム全体に対する変更を行いたい場合は、 <filename>/etc/zypp/zypper.conf</filename> ファイルを編集してください。また、ユーザ単位で設定を変更したい場合は、 <filename>~/.zypper.conf</filename> ファイルを編集してください。 <filename>~/.zypper.conf</filename> ファイルが存在しない場合は、 <filename>/etc/zypp/zypper.conf</filename> ファイルを雛形としてお使いください。具体的には、左記のファイルを <filename>~/.zypper.conf</filename> にコピーしてから、必要な変更を行ってください。設定可能な項目について、詳しくはファイル内のコメントをお読みください。</para>
 </sect2>

 <sect2 xml:id="sec-zypper-trouble">
  <title>トラブルシューティング</title>
  <para>設定済みのリポジトリが提供するパッケージにアクセスできない場合 (たとえば、いずれかのリポジトリ内に存在するにもかかわらず、パッケージを見つけることができない場合) は、リポジトリを更新することで解決する場合があります:</para>
<screen>&prompt.sudo;zypper refresh</screen>
  <para>それでもうまく動かない場合は、下記をお試しください:</para>
<screen>&prompt.sudo;zypper refresh -fdb</screen>
  <para>これにより、生のメタデータを強制的にダウンロードして、完全な更新とデータベースの再構築を行います。</para>
 </sect2>

 <sect2 xml:id="sec-zypper-rollback">
  <title>btrfs ファイルシステムにおける zypper のロールバック機能</title>
  <para>ルートパーティションに btrfs ファイルシステムを使用していて、かつ <command>snapper</command> がインストールされている場合、 zypper はファイルシステムに対して変更点をコミットする際、自動的に <command>snapper</command> を呼び出して、ファイルシステムのスナップショットを採取します。これらのスナップショットは、 zypper によってなされた変更点を元に戻したいような場合に利用することができます。詳しくは <xref linkend="cha-snapper"/> をお読みください。</para>
 </sect2>

 <sect2 xml:id="sec-zypper-more">
  <title>さらなる情報</title>
  <para>コマンドラインからのソフトウエア管理について詳しく調べたい場合は、 <command>zypper help</command> または <command>zypper help&nbsp;</command> <replaceable>コマンド</replaceable> を実行するか、 <command>zypper(8)</command> のマニュアルページをお読みください。完全で詳細なコマンドリファレンスを読みたい場合や、主要なコマンドが書かれた <literal>チートシート</literal> を見たい場合、もしくは zypper をスクリプトやアプリケーション内で使用する方法について調べたい場合は、 <link xlink:href="https://ja.opensuse.org/SDB:Zypper_%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9"/> をお読みください。最新の &productname; でのソフトウエアの更新情報について知りたい場合は、 <link xlink:href="https://ja.opensuse.org/openSUSE:Zypper_%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3"/> をお読みください。</para>
 </sect2>
</sect1>
