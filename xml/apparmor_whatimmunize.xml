<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<!-- fs 2009-02-25: Todo Code 11:

* split Chapter 2 (apparmor_profiles.xml) into:
  - basic profile (basic file rules, and profile syntax)
  - advanced (all the newer stuff, owner rules, link pairs,
    unattached profiles, ...)
* External Local Profiles and Hats (in appendix?)
* /sys/kernel/security/apparmor/matching (for scripts):
  pattern=aadfa audit perms=rwxamlk/ user::other

  pattern=aadfa - means the matching is done by the aadfa engine, the old
                engine was individual rule based on pcre.  The aadfa
                engine is a lot faster and cleaner kernel side but
                requires the user side to do significantly more work
                setting things up.

                This tells the parser which set of routines to use.
  audit - means that rule auditing and quieting is supported
  perms=rwxamlk/ - is the list of perms supported.  / means that directory
                 are match by trailing / in policy.  This wasn't the
                 case pre AppArmor 2.1 (opensuse 10.3).
                 10.3 perms string looks like
                     pattern=aadfa perms=rwxamlz
                 the z is a bug it is supposed to be k, but it was also
                 had another bug because it was missing /, so z now = k/
                 to the tools.

                 if you look at SP2 perms it will look like
                    pattern=aadfa perms=rwxml
                 because it doesn't support everything that 10.3 does

  user::other - indicates the permission are support for both user and
              other matching.  Internally AA does something very similar
              to unix dac permission checking of user, group, other,
              except AA's is user, extended user acl, other.

              owner rules set the user set, none owner rules set the
              user and other set.  By the way it is actually possible to
              write an other rule.

                 other /bin/foo r,   # only matches files not owned by
                                       the user, nor matched by extended
                                       owner checks.
              But the syntax isn't set in stone yet, and I didn't add
              support to the tools yet.

              The extended permission acl (which replaces unix group
              check) will allow for specifying who the file is owned by.

                 owner=root /bin/foo rw,  # only allow access if the
                                            file is owned by root.

* the ability to drop/migrate events out of the events db
* mount rules (implemented)?

-->
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-apparmor-concept">
 <title>プログラムに対する予防接種</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>コンピュータシステムのセキュリティを効率的に強化するには、まず権限を仲介するプログラムをできる限り少なくした後、それらのプログラムをできるだけ強く保護する流れで行います。 &aa; は、お使いの環境下で攻撃にさらされるプログラムに対してプロファイルを作成するだけで保護が実現できる仕組みであることから、セキュリティを強化する際の手間を劇的に減らすことができます。 &aa; ではポリシーの仕組みによって、プログラムが想定通りの動作のみを実行するよう強制することができます。</para>
 <para>&aa; では予防接種技術により、アプリケーションが直面する可能性のあるプログラム固有の脆弱性から身を守ることができます。 &aa; をインストールしてプロファイルを構築し、コンピュータを再起動するだけで、 &aa; のセキュリティポリシーを強制することができますので、システムを保護することができるようになります。ちなみに、 &aa; によるプログラムの保護を <emphasis>予防接種 (immunizing)</emphasis> と呼びます。</para>
 <para>このような構造により、管理者は攻撃に対して脆弱なアプリケーションに対して関心を持っておいて、それらに対してプロファイルを作成するだけでよいことになります。つまりシステムの保護は、 &aa; のプロファイルの作成と運用、そしてそこから発生し &aa; のレポート機能によって報告される、ポリシー違反や例外の監視を行うだけの作業となるわけです。</para>
 <para>ユーザ側では &aa; の存在に気がつくことはありません。 &aa; は <quote>裏方で</quote> 動作している仕組みであり、ユーザ側での操作は何も必要としないためです。 &aa; での性能劣化もほとんど発生しません。 &aa; のプロファイルでカバーしていない動作や、 &aa; によって禁止されているアプリケーションの動作が発生したような場合でも、管理者がそれに気づいてプロファイルの調整を行うだけであるためです。</para>
 <para>&aa; には、様々な既定のアプリケーションプロファイル集が用意されていて、標準的な Linux サービスを保護しています。他のアプリケーションを保護したい場合は、 &aa; のツールを利用して、保護対象のアプリケーションに対してプロファイルを作成してください。本章では、プログラムに対する予防接種の考え方について説明しています。既に一通りの知識をお持ちで、 &aa; のプロファイルを作成したり管理したりしたい場合は、 <xref linkend="cha-apparmor-profiles"/> , <xref linkend="cha-apparmor-yast"/> , <xref linkend="cha-apparmor-commandline"/> などをお読みください。</para>
 <para>&aa; では、ネットワークサービスに対する直感的なアクセス制御の仕組みが提供されています。この仕組みでは、それぞれのプログラムが読み込んだり書き込んだり、実行したりすることを許すファイルのほか、どの種類のネットワークに接続できるのかを制御します。このような仕組みにより、それぞれのプログラムが期待通りの動作をするように強制することができます。また、 &aa; ではプログラムを検疫することで、不正な処理によるダメージからシステムを保護することができるようになっています。</para>
 <para>&aa; はホストへの侵入保護や強制アクセス制御の仕組みを提供するものです。従来のアクセス制御では、コンピュータを巨大なタイムシェアリングシステムとして使用してきた経緯から、ユーザを中心にして構成されてきました。現在のネットワークサーバでは、ユーザに対して直接的なログインを許可することはなく、ユーザに対して様々なネットワークサービス (Web, メール, ファイル, 印刷などの各サーバ) を提供する存在へと変遷しています。 &aa; では、ネットワークサービスやその他のプログラムに対するアクセス制御を設定し、脆弱性を突かれないように保護します。</para>
 <tip>
  <title>&aa; に関する背景情報</title>
  <para>&aa; に関するより深い情報のほか、全体的な考え方については、 <xref linkend="sec-apparmor-intro-background"/> をお読みください。</para>
 </tip>
 <sect1 xml:id="sec-apparmor-concept-tools">
  <title>&aa; フレームワークの紹介</title>

  <para>本章では、 <quote>舞台裏</quote> で何が起こっているのか (および &yast; の裏では何を行っているのか) について、非常に基本的な部分を説明しています。</para>

  <para>&aa; のプロファイルは純粋なテキストファイル形式で、ここにはパス表記とアクセス許可が書かれています。プロファイルに関する詳細な書式情報については、 <xref linkend="sec-apparmor-profiles-parts"/> をお読みください。また、このテキストファイル内にはディレクティブも含まれていて、ここには &aa; のルーチンがプロセスやプログラムを検疫する際に強制される仕組みも設定されています。</para>

  <para>&aa; のプロファイルやポリシーを構築したり強制したりするにあたって、下記のようなツールが提供されています:</para>

  <variablelist>
   <varlistentry>
    <term><command>aa-status</command></term>
    <listitem>
     <para><command>aa-status</command> は、現時点での &aa; の制限について、様々な内容をレポートします。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-unconfined</command></term>
    <listitem>
     <para><command>aa-unconfined</command> はお使いのシステムで動作しているアプリケーションのうち、ネットワーク接続を待ち受けていながら、 &aa; のプロファイルで保護されていないものを検出します。このツールに関する詳細については、 <xref linkend="sec-apparmor-commandline-profiling-summary-unconfined"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-autodep</command></term>
    <listitem>
     <para><command>aa-autodep</command> はプロファイルに対する基本フレームワークで、本番環境で使用する前に肉付けを行う必要があるものです。生成されたプロファイルを読み込んで不平モードに設定すると、 &aa; のルールでカバーされていないアプリケーションの挙動をレポートします。このツールに関する詳しい使い方については、 <xref linkend="sec-apparmor-commandline-profiling-summary-autodep"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-genprof</command></term>
    <listitem>
     <para><command>aa-genprof</command> は基本的なプロファイルを作成して、そのプロファイルを元にしてアプリケーションを実行し、プロファイルを改良するよう求めて、 &aa; ポリシーで配慮する必要のある箇所をイベントとして報告します。アプリケーションの実行時に生成されたそれぞれのログイベントに対しては質問が表示され、どのように扱うべきかを判断することになります。プロファイルの生成が終わったあとは、そのまま強制モードに配置されます。このツールの詳しい使い方については、 <xref linkend="sec-apparmor-commandline-profiling-summary-genprof"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-logprof</command></term>
    <listitem>
     <para><command>aa-logprof</command> は、アプリケーションが不平モードと強制モードの両方の制限で生成したログ項目を読み込んで確認することができるツールです。プロファイル内に新しい項目を生成する支援を行います。このツールの詳しい使い方については、 <xref linkend="sec-apparmor-commandline-profiling-summary-logprof"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-easyprof</command></term>
    <listitem>
     <para><command>aa-easyprof</command> は &aa; のプロファイル生成に関して使いやすいインターフェイスを提供します。 <command>aa-easyprof</command>  では雛形とポリシーグループを利用して、アプリケーションのプロファイルを素早く作成できるようにします。ただし、このツールはポリシーの生成支援までは行いますが、雛形とポリシーグループ、そして抽象化の仕組みに大きく依存していることに注意してください。 <command>aa-genprof</command> や <command>aa-logprof</command> と比較すると、 <command>aa-easyprof</command> では制限の緩いプロファイルを作成することになります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-complain</command></term>
    <listitem>
     <para><command>aa-complain</command> は &aa; のプロファイルを強制モードから不平モードに切り替えます。プロファイル内に書かれたルールへの違反はログ内に記録されるものの、プロファイルは強制されません。このツールに関する詳しい使い方については、 <xref linkend="sec-apparmor-commandline-profiling-summary-complain"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-enforce</command></term>
    <listitem>
     <para><command>aa-enforce</command> は &aa; のプロファイルを不平モードから強制モードに切り替えます。プロファイル内に書かれたルールへの違反は記録され拒否されるようになり、結果としてプロファイルを強制することになります。この津ルールに関する詳しい使い方については、 <xref linkend="sec-apparmor-commandline-profiling-summary-enforce"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-disable</command></term>
    <listitem>
     <para><command>aa-disable</command> は、 1 つもしくは複数の &aa; プロファイルに対して、強制モードを無効化することができます。このコマンドはカーネルからプロファイルの読み込みを解除するだけでなく、 &aa; の起動時に読み込まれないようにもします。 <command>aa-enforce</command> および <command>aa-complain</command> を使用することで、この動作を変更することができます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-exec</command></term>
    <listitem>
     <para><command>aa-exec</command> は指定した &aa; プロファイルやネームスペースで制限した状態でプログラムを起動します。プロファイルとネームスペースの両方を指定すると、コマンドは新しいポリシーネームスペース内のプロファイルで制限されることになります。ネームスペースのみを指定した場合は、現在の制限のプロファイル名を使用します。プロファイルもネームスペースも指定しない場合は、標準的なプロファイル適用 (つまり <command>aa-exec</command> を使用せずに実行した場合) と同じ動作になります。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><command>aa-notify</command></term>
    <listitem>
     <para><command>aa-notify</command> はお使いのデスクトップ環境内に &aa; の通知を表示することのできる、使いやすいユーティリティです。指定した日数の直近の通知に関して、概要を表示するように設定することもできます。詳しくは <xref linkend="commandline-profiling-summary-aa-notify"/> をお読みください。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-apparmor-concept-determine">
  <title>予防接種を行うプログラムの決定</title>

  <para>&aa; に関するある程度の知識を得たら、次にプロファイルを作成するアプリケーションの選択を行いましょう。プロファイルを作成する必要のあるプログラムとは、権限を仲介するタイプのプログラムです。下記のようなプログラムでは、一般ユーザが保持していない資源へのアクセスを行うことがありますので、実質的に権限を仲介していることになります:</para>

  <variablelist>
   <varlistentry>
    <term><systemitem class="daemon">cron</systemitem> ジョブ</term>
    <listitem>
     <para><systemitem class="daemon">cron</systemitem> で定期的に実行されるタイプのプログラムです。これらのプログラムは様々な情報源から入力を受け付け、特別な (場合によっては &rootuser; の) 権限で動作します。たとえば <systemitem class="daemon">cron</systemitem> では <command>/usr/sbin/logrotate</command> を実行することがありますが、これはシステムログのローテーション (一定時間以上古いログを廃棄する) のほか、圧縮やメール送信などを行うことがあります。これらの種類のプログラムを見つける方法について、詳しくは <xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-concept-cron"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Web アプリケーション</term>
    <listitem>
     <para>CGI スクリプトや PHP のページ、その他の複雑な Web アプリケーションなど、 Web ブラウザ経由で実行されるプログラムです。これらの種類のプログラムを見つける方法について、詳しくは <xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-concept-network-web"/> をお読みください。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>ネットワークエージェント</term>
    <listitem>
     <para>ネットワークポートを開いて通信するプログラム (クライアントやサーバ) です。電子メールクライアントや Web ブラウザなどのユーザクライアントでも、権限を仲介していることになります。これらのプログラムは、ユーザのホームディレクトリに書き込むことのできる権限を保有していて、場合によっては不正な Web サイトや電子メール内に埋め込まれた不正なコードにアクセスすることで、潜在的に攻撃を受ける可能性があるためです。これらの種類のプログラムを見つける方法について、詳しくは <xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-concept-network-agents"/> をお読みください。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>逆に、権限を使用しないプログラムに対しては、プロファイルを作成する必要はありません。たとえばシェルスクリプトでは <command>cp</command> プログラムを利用してファイルのコピーを行いますが、 <command>cp</command> プログラムには既定のプロファイルやサブプロファイルが提供されていません。これは <command>cp</command> プログラムが単純にファイルコピーの機能しか提供しないためで、呼び出し元のシェルスクリプトのプロファイルを引き継ぐだけで十分であるためです。そのため、 <command>cp</command> プログラムは、呼び出し元のシェルスクリプトのプロファイルに書かれた許可内容に応じてファイルをコピーすることになります。</para>
 </sect1>
 <sect1 xml:id="sec-apparmor-concept-cron">
  <title><systemitem class="daemon">cron</systemitem> ジョブへの予防接種</title>

  <para><systemitem class="daemon">cron</systemitem> ジョブ内で実行されるプログラムを見つけるには、ご利用の環境内の <systemitem class="daemon">cron</systemitem> の設定をご確認ください。残念ながら、 <systemitem class="daemon">cron</systemitem> の設定は比較的複雑で、様々なファイルを調べる必要があります。それぞれ下記のファイルをご覧ください:</para>

<screen>/etc/crontab
/etc/cron.d/*
/etc/cron.daily/*
/etc/cron.hourly/*
/etc/cron.monthly/*
/etc/cron.weekly/*
</screen>

  <para><remark>sknorr, 2014-08-26: To have gone in a circle, go in a circle. Iow: the definition of (a) crontab is not very clear here.</remark> <command>crontab</command> コマンドを実行すると、現在のユーザに対する cron ジョブの一覧を表示したり編集したりすることができます。 &rootuser; に対する <systemitem class="daemon">cron</systemitem> ジョブの一覧を表示／編集したい場合は、 &rootuser; になってから <command>crontab -e</command> を実行することで編集を、 <command>crontab -l</command> を実行することで一覧表示をすることができます。</para>
 </sect1>
 <sect1 xml:id="sec-apparmor-concept-network">
  <title>ネットワークアプリケーションへの予防接種</title>

  <para><command>aa-unconfined</command> ツールを使用することで、プロファイルを作成すべきネットワークサーバデーモンを自動的に見つけることができます。 <!-- fs 2011-11-09 - see bnc #722915 (reporting is not available in 12.1 (aa-eventd isn't maintained upstream, and doesn't understand the (not-so-)new audit.log format)) You can also simply view a report of this information in the &yast; module (refer to <xref xrefstyle="HeadingOnPage" linkend="sec-apparmor-managing-config-reports-view-audit"/> for instructions).--></para>

<!-- bnc#880080: netstat vs. ss/ip -->

  <para><command>aa-unconfined</command> ツールは <command>netstat -nlp</command> コマンドを利用して、コンピュータ内でポートを開いているプログラムを検出します。このツールでは、開いているポート番号と対応するプログラム、そして読み込まれている &aa; のプロファイルセットをそれぞれ検出することができます。検出が完了すると、 <command>aa-unconfined</command> ツールはそれぞれのプログラムと、対応する &aa; のプロファイルが存在していればそれを、存在していなければ <quote>none</quote> (つまり制限が課されていない) を表示します。</para>

  <note>
   <para>新しいプロファイルを作成した場合、 &aa; で正しく制限を受けるようにするため、プロファイルを作成したプログラムを再起動しなければなりません。</para>
  </note>

  <para>下記は <command>aa-unconfined</command> の出力例です:</para>

<screen>3702<co xml:id="co-apparmor-concept-network-id"/> /usr/sbin/sshd<co xml:id="co-apparmor-concept-network-string"/> confined
   by '/usr/sbin/sshd<co xml:id="co-apparmor-concept-network-confine"/> (enforce)'
4040 /usr/sbin/smbd confined by '/usr/sbin/smbd (enforce)'
4373 /usr/lib/postfix/master confined by '/usr/lib/postfix/master (enforce)'
4505 /usr/sbin/httpd2-prefork confined by '/usr/sbin/httpd2-prefork (enforce)'
646 /usr/lib/wicked/bin/wickedd-dhcp4 not confined
647 /usr/lib/wicked/bin/wickedd-dhcp6 not confined
5592 /usr/bin/ssh not confined
7146 /usr/sbin/cupsd confined by '/usr/sbin/cupsd (complain)'</screen>

  <calloutlist>
   <callout arearefs="co-apparmor-concept-network-id">
    <para>最初に表示されるのが番号です。この番号は、接続を待ち受けているプログラムのプロセス ID 番号 (PID) です。</para>
   </callout>
   <callout arearefs="co-apparmor-concept-network-string">
    <para>次に表示されるのが文字列で、接続を待ち受けているプログラムの絶対パスです。</para>
   </callout>
   <callout arearefs="co-apparmor-concept-network-confine">
    <para>最後に表示されるのが、プログラムの権限を制限しているプロファイル (もしあれば) です。</para>
   </callout>
  </calloutlist>

  <note>
   <para><command>aa-unconfined</command> は &rootuser; の権限が必要なプログラムであり、 &aa; のプロファイルによる制限が課されたシェルからは、実行すべきではありません。</para>
  </note>

  <para><command>aa-unconfined</command> ではネットワークインターフェイスを区別せずに扱います。そのため、内部の LAN インターフェイスのみで待ち受けているプロセスに対しても、ポートを開いていれば一覧に記載されることになります。</para>

  <para>ユーザが使用しているネットワーククライアントアプリケーションの検出は、お使いの環境によって異なる方法になります。 <command>aa-unconfined</command> ツールは、クライアントアプリケーションが開いているネットワークポートに対しても報告を行いますが、 <command>aa-unconfined</command> で分析している最中に動作していたアプリケーションのみが検出されます。一般に、ネットワークサーバアプリケーションは常に動作させておくものですが、クライアントアプリケーションは必要に応じて起動する仕組みであることから、常に検出されるとは限らないことになります。</para>

  <para>&aa; のプロファイルによるネットワーククライアントアプリケーションへの適用は、ユーザ側の希望に応じて行ってください。そのため、クライアントアプリケーションのプロファイル作成については、ここでは説明しません。</para>

  <para>デスクトップアプリケーションを積極的に制限したい場合は、 <command>aa-unconfined</command> コマンドに <option>--paranoid</option> オプションを追加して実行してください。これにより、動作中の全てのプロセスを一覧で表示し、それらに対して関連づけられている可能性のある &aa; プロファイルを表示することができます。これにより、 &aa; のプロファイルを必要とするプログラムを判断することができるようになります。</para>

  <para>新しくプロファイルを作成した場合やプロファイルを修正した場合、可能であれば、実施したアプリケーションの使用範囲を添えて <email>apparmor@lists.ubuntu.com</email> のメーリングリストに送信していただければ幸いです。 &aa; チームではその内容を精査して、 &productname; の一部として組み込むかもしれません。ただし、お送りいただいたプロファイルを全て組み込むことは保証できませんが、できる限りの努力はさせていただきます。</para>

  <sect2 xml:id="sec-apparmor-concept-network-web">
   <title>Web アプリケーションへの予防接種</title>
   <para>Web アプリケーションを見つけたい場合は、まず Web サーバの設定ファイルを調査することをお勧めします。 Apache Web サーバであれば、非常に細かく設定することができるシステムであるため、設定によって Web アプリケーションを様々なディレクトリ内に配置することができます。 &productname; の既定では、 Web アプリケーションは <filename>/srv/www/cgi-bin/</filename> 内に配置されます。なお、可能な限りそれぞれの Web アプリケーションに &aa; プロファイルを作成してください。</para>
   <para>これらのプロクラムが見つかったら、あとは <command>aa-genprof</command> ツールと <command>aa-logprof</command> ツールを使用することで、それらに対する &aa; のプロファイルを作成することができます。</para>
   <para>CGI プログラムは Apache Web サーバが実行する仕組みであることから、 &productname; 向けの Apache2 それ自身用に作成されている <filename>usr.sbin.httpd2-prefork</filename> というプロファイルは、 CGI プログラムにあわせて実行許可を追加するよう変更しなければなりません。たとえば <literal>/srv/www/cgi-bin/my_hit_counter.pl rPx</literal> という行を追加すると、 <filename>my_hit_counter.pl</filename> という Perl スクリプトを Apache から実行する許可を与え、 <filename>my_hit_counter.pl</filename> 用のプロファイルを別途に用意することになります。 <filename>my_hit_counter.pl</filename> に専用のプロファイルを用意していない場合は、 <literal>/srv/www/cgi-bin/my_hit_counter.pl rix</literal> のように指定して、 <filename>my_hit_counter.pl</filename> が <filename>usr.sbin.httpd2-prefork</filename> のプロファイルを引き継ぐように設定してください。</para>
   <para>Apache が実行するそれぞれの CGI スクリプトに対していちいち実行許可を設定するのは、ユーザにとっては不便に感じるかもしれません。その代わりに管理者は、複数の CGI スクリプトに対してアクセスを制御することができます。たとえば <literal>/srv/www/cgi-bin/*.{pl,py,pyc} rix</literal> のように指定すると、 <literal>/srv/www/cgi-bin/</literal> ディレクトリ内にあって <filename>.pl</filename> (Perl スクリプト) もしくは <filename>.py</filename> や <filename>.pyc</filename> (Python スクリプト) で終わるファイル名のスクリプト全てを含めることができるようになります。この設定では、 <literal>ix</literal> と書かれていることから、 Python スクリプトが Apache のプロファイルを引き継ぐようになります。このような設定は、それぞれの CGI スクリプトに対して、いちいち個別のプロファイルを作成したくない場合に便利です。</para>
   <note>
    <para>Apache モジュール ( <filename>mod_perl</filename> や <filename>mod_php</filename> ) で Web アプリケーションを動作させていて、サブプロセスを制限するモジュール ( <filename>apache2-mod-apparmor</filename> ) の機能を使用したい場合は、 &yast; 内もしくはコマンドラインでプロファイルを追加する際に、 ChangeHat の機能をお使いください。サブプロセス制限に関する利点について、詳しくは <xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-hat-apache-managing"/> をお読みください。</para>
   </note>
   <para><filename>mod_perl</filename> や <filename>mod_php</filename> を使用する Web アプリケーションのプロファイルを作成する場合は、少し異なる作業が必要となります。この場合の <quote>プログラム</quote> は、 Apache プロセス内のモジュールが直接解釈して実行するスクリプトとなりますので、プログラムの実行が発生しないためです。この場合は、 &aa; に対応した Apache が要求先の URI の名前からサブプロファイル (<quote>ハット</quote>) を判断して <command>change_hat()</command> を呼び出します。</para>
   <note>
    <para>Apache がモジュールのスクリプトを探す際の設定にもよりますが、スクリプトに対する名前と URI とが無関係になってしまうことがあります。 Apache 側で異なる場所にスクリプトを配置するように設定している場合は、 &aa; がアクセス違反を報告する際、ログファイル内に異なる名前で記録されてしまうことがあります。詳しくは <xref linkend="cha-apparmor-managing"/> をお読みください。</para>
   </note>
   <para><filename>mod_perl</filename> や <filename>mod_php</filename> のスクリプトの場合、これはリクエストした Perl スクリプトや PHP ページの名前になります。たとえば下記のようなサブプロファイルを設定したとすると、 <filename>localtime.php</filename> のページからローカルのシステム時刻とロケールファイルへのアクセスができるようになります:</para>
<screen>/usr/bin/httpd2-prefork {
  # ...
  ^/cgi-bin/localtime.php {
    /etc/localtime                  r,
    /srv/www/cgi-bin/localtime.php  r,
    /usr/lib/locale/**              r,
  }
}
</screen>
   <para>何もサブプロファイルを指定しない場合、 Apache の &aa; 対応版は <systemitem>DEFAULT_URI</systemitem> ハットを適用します。このサブプロファイルは Web ページを表示するだけであれば十分なサブプロファイルです。 &aa; が提供する <systemitem>DEFAULT_URI</systemitem> は、下記のようになっています:</para>
<screen>^DEFAULT_URI {
    /usr/sbin/suexec2                  mixr,
    /var/log/apache2/**                rwl,
    @{HOME}/public_html                r,
    @{HOME}/public_html/**             r,
    /srv/www/htdocs                    r,
    /srv/www/htdocs/**                 r,
    /srv/www/icons/*.{gif,jpg,png}     r,
    /srv/www/vhosts                    r,
    /srv/www/vhosts/**                 r,
    /usr/share/apache2/**              r,
    /var/lib/php/sess_*                rwl
}
    </screen>
   <para>Apache が提供する全ての Web ページと CGI スクリプトに対して、単一の &aa; プロファイルを使用したい場合は、 <systemitem>DEFAULT_URI</systemitem> サブプロファイルを編集することをお勧めします。 Apache 内での Web アプリケーションの制限について、詳しくは <xref linkend="cha-apparmor-hat"/> をお読みください。</para>
  </sect2>

  <sect2 xml:id="sec-apparmor-concept-network-agents">
   <title>ネットワークエージェントに対する予防接種</title>
   <para>プロファイルを作成する必要のあるネットワークサーバデーモンやネットワーククライアント (<command>fetchmail</command> や Firefox など) を見つけるには、まずお使いのマシンで開いているポートを探してください。その後、これらのポートを使用しているプログラムを探して、できる限り多くのプログラムに対してプロファイルを作成してください。ネットワークポートを開いている全てのプログラムに対してプロファイルを設定すれば、攻撃者は &aa; のプロファイルポリシーで許可されていない限り、マシン内のファイルシステムには全くアクセスできなくなります。</para>
<!-- bnc#880080: netstat vs. ss/ip -->
   <para>スキャナ (nmap など) を使用すれば、サーバの外側から開いているネットワークポートを調べることができますし、内部からであれば &rootuser; で <command>netstat --inet -n -p</command> を実行することで、調べることができます。その後、それらのポートで待ち受けているプログラムが何であるのかを調査します。</para>
   <tip>
<!-- bnc#880080: netstat vs. ss/ip -->
    <para>利用可能なオプションについて、詳しくは <command>netstat</command> コマンドのマニュアルページをお読みください。</para>
   </tip>
  </sect2>
 </sect1>
</chapter>
