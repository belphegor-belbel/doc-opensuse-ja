<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-boot">
 <title>起動処理の紹介</title>
 <info xmlns:d="http://docbook.org/ns/docbook">
  <abstract>
   <para>Linux システムの起動に際しては、様々なコンポーネントや処理が介在しています。ファームウエアとハードウエアの初期化処理が完了した後は、マシンのアーキテクチャによって異なりますが、ブートローダ &grub; などを利用してカーネルを起動します。この時点まで到達すると、ようやくオペレーティングシステムが制御できる状況になり、 &systemd; が続きを処理するようになります。 &systemd; は <quote>ターゲット</quote> と呼ばれるセットを提供し、日々の費用やメンテナンス、緊急時用など、それぞれに役割が設定されています。</para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 <revhistory xml:id="rh-cha-boot">
   <revision>
     <date>2024-06-27</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>


 <sect1 xml:id="sec-boot-terminology">
  <title>用語説明</title>
  <para>この章では、誤解を生みやすい用語に関して、詳しい説明を行っています:</para>
  <variablelist>
   <varlistentry>
    <term><systemitem>init</systemitem></term>
    <listitem>
     <para>一般的に <quote>init</quote> というと、下記の 2 つの意味があります:</para>
     <itemizedlist>
      <listitem>
       <para>ルートファイルシステムをマウントするための <systemitem>initramfs</systemitem> の処理</para>
      </listitem>
      <listitem>
       <para>実際のルートファイルシステムをマウントしたあとに実行される、様々なプログラムを起動するためのオペレーティングシステムの処理</para>
      </listitem>
     </itemizedlist>
     <para>いずれの処理に対しても &systemd; がその役割を担っています。まず &systemd; はルートファイルシステムをマウントするため、 <systemitem>initramfs</systemitem> 内に存在するものが最初に起動され、ルートファイルシステムのマウントが成功すると、最初のプロセスとしてルートファイルシステム内に存在するものが起動され、元のプロセスを置き換えて動作します。このような構造から、 &systemd; のプロセスのうち前者を <emphasis>init on initramfs</emphasis> 、後者を <emphasis>systemd</emphasis> と呼びます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><systemitem>initrd</systemitem> / <systemitem>initramfs</systemitem></term>
    <listitem>
     <para><systemitem>initrd</systemitem> (INITial Ram Disk (初期 RAM ディスク) の略) は一時的なルートファイルシステムのイメージを含むファイルで、カーネルによって読み込まれ、 <filename>/dev/ram</filename> からマウントされる仕組みです。このファイルシステムをマウントするには、ファイルシステムドライバが必要となります。</para>
     <para>カーネルバージョン 2.6.13 より、 initrd は <systemitem>initramfs</systemitem> (INITial RAM File System) と呼ばれるようになり、マウント時にファイルシステムのドライバを必要とはしなくなりました。 &productname; では <systemitem>initramfs</systemitem> のみを使用しています。ですが、現在も <systemitem>initramfs</systemitem> は<filename>/boot/initrd</filename> というファイル名で保存されることから、今も <quote>initrd</quote> と呼ばれることが多くなっています。本章では <systemitem>initramfs</systemitem> の用語に統一して説明しています。</para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-boot-proc">
  <title>Linux の起動処理</title>
  <para>Linux の起動処理は、複数のフェーズ (段階) に分けられます。それぞれは別々のコンポーネントが使われます:</para>
  <orderedlist>
   <listitem>
    <para><xref linkend="sec-boot-proc-initialization"/></para>
   </listitem>
   <listitem>
    <para><xref linkend="sec-boot-proc-kernel"/></para>
   </listitem>
   <listitem>
    <para><xref linkend="sec-boot-initramfs"/></para>
   </listitem>
   <listitem>
    <para><xref linkend="sec-boot-systemd"/></para>
   </listitem>
  </orderedlist>

  <sect2 xml:id="sec-boot-proc-initialization">
   <title>初期化とブートローダの処理フェーズ</title>
   <para>初期化フェーズでは、マシンのハードウエアの初期化を行い、デバイスの準備を実施します。この処理は、ハードウエアのアーキテクチャによって異なる処理になります。</para>
   <para>&productname; では、全てのアーキテクチャで &grub; を使用しています。アーキテクチャとファームウェアによりますが、 &grub; ブートローダの開始処理は複数の段階に分けることができます。ブートローダの目的は、カーネルと initramfs (初期 RAM ファイルシステム) を読み込むことです。 &grub; についての詳細は、 <xref linkend="cha-grub2"/> をお読みください。</para>
   <sect3 xml:id="sec-boot-proc-initialization-x86-aarch" arch="x86_64;aarch64">
    <title>&aarch64; と &x86-64; における初期化とブートローダの処理フェーズ</title>
    <para>コンピュータの電源を投入すると、 BIOS や UEFI が画面とキーボードを初期化し、メインメモリのテストを行います。この段階では、マシンはストレージメディアにアクセスすることは行いません。続いて現在の日付と時刻と、最も重要な周辺機器類に関する情報を CMOS から読み込みます。起動メディアとそのジオメトリ情報が認識できるようになると、システムは BIOS/UEFI からブートローダに処理を渡します。</para>
    <para>従来型の BIOS を搭載したマシンの場合、起動ディスク内の最初の 512 バイト分のデータセクタ (マスターブートレコード、略して MBR) だけを読み込むことができます。 MBR には最小限の機能だけを持つ &grub; を書き込むことができます。この最小限の機能の &grub; には、ファイルシステムのドライバを含む &grub; のメインイメージを読み込むだけの機能が含まれています。メインイメージは MBR と最初のパーティションまでの間のギャップに含まれている (MBR パーティションテーブルの場合) か、もしくは BIOS の起動パーティション内に含まれています (GPT パーティションテーブルの場合) 。メインイメージにはファイルシステムドライバが含まれていますので、ルートファイルシステムにある <filename>/boot</filename> にアクセスすることができます。 <filename>/boot</filename> には &grub; のメインイメージに対応する追加のモジュールのほか、カーネルや initramfs のイメージが含まれていますので、あとはこれらを読み込めばカーネルに処理を渡すことができるようになります。</para>
    <para>暗号化された <filename>/boot</filename> を含む暗号化ファイルシステムから BIOS のシステムを起動する場合、暗号化を解くためのパスワードは 2 回入力する必要があります。 1 回目は &grub; が <filename>/boot</filename> を解読するために、 2 回目は &systemd; が暗号化されたボリュームをマウントするために必要となります。</para>
    <para>UEFI のマシンの場合は、従来型の BIOS マシンより簡単です。ファームウェアは GPT パーティションテーブル内の FAT でフォーマットされたパーティションを読み込むことができます (これを EFI システムパーティションと呼び、起動後のシステムでは <filename>/boot/efi</filename> にマウントします) ので、このパーティション内に完全機能の &grub; を配置すれば、それを直接読み込んで実行することができるようになります。</para>
    <para>BIOS/UEFI のマシンがネットワーク経由での起動に対応している場合は、 PXE と呼ばれる仕組みを利用して起動用のサーバからブートローダを取得することができます。この場合、 BIOS/UEFI 自身がブートローダ機能の一部を持つことになります。あとは起動用のサーバからイメージを取得してシステムを起動しますので、ローカルのハードディスクを全く使用することなくシステムを立ち上げることができます。</para>
   </sect3>
   <sect3 xml:id="sec-boot-proc-initialization-zsystems" arch="zseries">
    <title>&zseries; における初期化とブートローダの処理フェーズ</title>
    <para>&zseries; において、起動処理は <command>zipl</command> (Z 初期プログラム読み込みプログラム; Z Initial Program Load) と呼ばれるブートローダで準備しなければなりません。 <command>zipl</command> では様々なファイルシステムを読み込むことができますが、 &slea; の既定のファイルシステム (btrfs) やスナップショットからの起動には対応していません。そのため、 &productname; は 2 ステージから構成される起動処理を使用して、起動時から btrfs に対応できるようにしています:</para>
    <procedure>
     <step>
      <para><command>zipl</command> は ext2, ext3, ext4, xfs のいずれかのファイルシステムでフォーマットされたパーティション <filename>/boot/zipl</filename> から起動することができます。このパーティションには最小限のカーネルのほか、メモリに読み込まれる initramfs が含まれています。 initramfs には btrfs のドライバなどと共に &grub; が含まれ、これによってそのカーネルに <literal>initgrub</literal> を渡して &grub; を起動します。</para>
     </step>
     <step>
      <para>カーネルはルートファイルシステムをマウントし、 <filename>/boot</filename> にもアクセスできるようになります。これで &grub; を initramfs から起動することができます。あとは <filename>/boot/grub2/grub.cfg</filename> から設定ファイルを読み込むと共に、最終的なカーネルと initramfs を <filename>/boot</filename> から読み込みます。新しく読み込んだカーネルは、 &kexec; 経由で実行されるようになります。</para>
     </step>
    </procedure>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-proc-kernel">
   <title>カーネルの処理フェーズ</title>
   <para>ブートローダの処理が終わると、起動処理は全てのアーキテクチャで同じになります。ブートローダはカーネルと <systemitem>initramfs</systemitem> (RAM ベースの初期ファイルシステム) をメモリに読み込んで、カーネルが動き始めます。</para>
   <para>カーネルがメモリ管理機能を設定し、 CPU の種類と機能を検出すると、ハードウエアの準備を行い、 <systemitem>initramfs</systemitem> として読み込んでおいた、メモリ内にある一時的なルートファイルシステムをマウントします。</para>

   <sect3 xml:id="sec-boot-initrd">
    <title><systemitem>initramfs</systemitem> ファイル</title>
    <para><systemitem>initramfs</systemitem> (INITial RAM File System; 初期 RAM ファイルシステム) は小さな cpio アーカイブで、カーネルが RAM ディスク内に読み込むことができる仕組みです。これは <filename>/boot/initrd</filename> に配置されるもので、 <command>dracut</command> というツールで作成することができます (詳しくは <command>man 8 dracut</command> をお読みください) 。</para>
    <para><systemitem>initramfs</systemitem> は最小限の Linux 環境を提供するもので、実際のルートファイルシステムをマウントするまでの間に、プログラムを実行する仕組みを提供します。この最小限の Linux 環境は BIOS や UEFI のルーチンからメモリ内に読み込まれ、メモリ以外には特定のハードウエア要件を持ちません。また、 <systemitem>initramfs</systemitem> には <systemitem>init</systemitem> と呼ばれる実行ファイルが存在していなければなりません。このプログラムはルートファイルシステムの &systemd; デーモンを読み込んで、続きの起動処理を実行させる役割を持ちます。</para>
    <para>ルートファイルシステムがマウントできるようになり、オペレーティングシステムが開始できるようになるには、カーネルはルートファイルシステムの存在するデバイスにアクセスするためのドライバを読み込む必要があります。これらのドライバは特殊なハードディスク向けのドライバであったり、ネットワーク経由でアクセスする場合はネットワークドライバであったりする場合もあります。ルートファイルシステムに対して必要なモジュールは、 <systemitem>initramfs</systemitem> 内にある <systemitem>init</systemitem> が読み込みます。必要なモジュールが読み込まれると、 <systemitem class="service">udev</systemitem> が <systemitem>initramfs</systemitem> に対して必要なデバイスを提供するようになります。その後ルートファイルシステムの切り替えが行われ、再度デバイスの生成が行われます。これは &systemd; のユニットである <filename>systemd-udev-trigger.service</filename> が行います。</para>

    <sect4 xml:id="sec-boot-initrd-regenerate">
     <title>initramfs の再生成</title>
     <para><systemitem>initramfs</systemitem> にはドライバが含まれているため、新しいバージョンのドライバが提供されるようになった場合は、 <systemitem>initramfs</systemitem> を更新する必要があります。なお、ドライバ更新を含むパッケージをインストールした場合には自動で実行されますし、 &yast; や zypper でそれらのパッケージをインストールした場合は、 <systemitem>initramfs</systemitem> を生成したことを表す出力を表示します。しかしながら、場合によっては <systemitem>initramfs</systemitem> を手作業で生成しなければならなくなる場合があります:</para>

     <variablelist>
      <varlistentry xml:id="var-initrd-regenerate-drivers">
       <term>ハードウエアを変更したことによってドライバを追加する必要がある場合</term>
       <listitem>
        <para>ハードウエア (例: ハードディスク) の変更を行った場合で、変更したハードウエアが起動時に必要であり、かつ従来とは異なるドライバを必要とする場合は、 <systemitem>initramfs</systemitem> ファイルの更新が必要になります。</para>
        <para><filename>/etc/dracut.conf.d/10-<replaceable>ドライバ</replaceable>.conf</filename> ファイルを開くか新規に作成して、下記の行を追加します (最初の引用符の後にスペースが含まれていることに注意してください):</para>
        <screen>force_drivers+=" <replaceable>ドライバ_1</replaceable> "</screen>
        <para><replaceable>ドライバ_1</replaceable> の箇所はドライバのモジュール名に置き換えてお使いください。なお、複数のドライバが必要な場合は、スペース区切りで指定します:</para>
        <screen>force_drivers+=" <replaceable>ドライバ_1</replaceable> <replaceable>ドライバ_2</replaceable> "</screen>
        <para>あとは <xref linkend="pro-generate-initramfs"/> の手順に従って進めます。</para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-raidroot">
       <term>システムディレクトリを RAID や LVM に移動した場合</term>
       <listitem>
        <para>スワップファイルや <filename>/usr</filename> などのシステムディレクトリを、 RAID や論理ボリュームに移動した場合も、 <systemitem>initramfs</systemitem> を再生成して、ソフトウエア RAID や LVM のドライバが含まれるようにする必要があります。</para>
        <para>この場合は、 <filename>/etc/fstab</filename> 内に対応する項目を作成して、その項目をマウント (例: <command>mount -a</command> または <command>swapon -a</command>) してください。</para>
        <para>あとは <xref linkend="pro-generate-initramfs"/> の手順に従って進めます。</para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-lvmadd">
       <term>ルートファイルシステムを含む LVM グループや btrfs RAID にディスクを追加した場合</term>
       <listitem>
        <para>ルートファイルシステムを含む論理ボリュームグループや btrfs の RAID に対して、ディスクを追加 (または削除) した場合も、サイズの変更したボリュームにアクセスすることができるようにするため、 <systemitem>initramfs</systemitem> を再生成する必要があります。この場合は <xref linkend="pro-generate-initramfs"/> にある手順に従ってください。</para>
        <para>あとは <xref linkend="pro-generate-initramfs"/> の手順に従って進めます。</para>
       </listitem>
      </varlistentry>
      <varlistentry xml:id="var-initrd-regenerate-kernelvars">
       <term>カーネルの変数を変更した場合</term>
       <listitem>
        <para><filename>/etc/sysctl.conf</filename> や <filename>/etc/sysctl.d/*.conf</filename> などのファイルを利用して、 <command>sysctl</command> インターフェイスを介してカーネルの変数を変更した場合、この変更は次回の再起動で失われてしまいます。これは実行中に <command>sysctl --system</command> で変数を指定していても同様で、これらは <systemitem>initramfs</systemitem> ファイル内に保存が行われません。この場合も <xref linkend="pro-generate-initramfs"/> に示されている手順を実行する必要があります。</para>
       </listitem>
      </varlistentry>
      <varlistentry>
          <term>スワップ出刃は椅子の追加や削除、再作成を行った場合</term>
          <listitem>
            <para>スワップデバイスの追加や削除のほか、異なる UUID で再作成を行った場合は、 <xref linkend="pro-generate-initramfs"/> にある手順に従って initramfs を更新する必要があります。また、 <filename>/etc/default/grub</filename> 内の <option>GRUB_CMDLINE_*</option> 変数についても、 <option>resume=</option> 以下にスワップデバイスの UUID が書かれていますので、こちらについても修正を行い、 <xref linkend="sec-grub2-cfg"/> に書かれた手順に従って <filename>/boot/grub2/grub.cfg</filename> を作り直してください。</para>
          </listitem>
      </varlistentry>
     </variablelist>

     <procedure xml:id="pro-generate-initramfs">
      <title>initramfs の生成</title>
      <important>
        <para>なお、下記の手順では、いずれも &rootuser; による実行が必要となります。</para>
      </important>
      <step>
      <para>まずは <filename>/boot</filename> ディレクトリに移動します:</para>
      <screen>&prompt.root;cd /boot</screen>
      </step>
      <step>
       <para><command>dracut</command> コマンドを実行して、新しい <systemitem>initramfs</systemitem> ファイルを生成します。このとき、 <replaceable>出力先ファイル名</replaceable> には出力先のファイル名を指定します:</para>
       <screen>&prompt.root;dracut <replaceable>出力先ファイル名</replaceable></screen>
       <para><command>dracut -f</command> <replaceable>出力先ファイル名</replaceable> のように実行してもかまいません。この場合は、既存のファイルを上書きします。</para>
      </step>
      <step>
       <para>(この手順は、以前の手順で <command>dracut -f</command> を実行した場合には不要です) 以前の手順で生成した <systemitem>initramfs</systemitem> ファイルから、 <filename>initrd</filename> に対してシンボリックリンクを作成します:</para>
       <screen>&prompt.root; ln -sf <replaceable>出力先ファイル名</replaceable> <systemitem>initrd</systemitem></screen>
      </step>
      <step arch="zseries">
       <para>&zseries; アーキテクチャでは、あわせて <command>grub2-install</command> を実行してください。</para>
      </step>
     </procedure>
    </sect4>
   </sect3>
  </sect2>

  <sect2 xml:id="sec-boot-initramfs">
   <title>initramfs での初期化フェーズ</title>
   <para>&systemd; (<systemitem>initramfs</systemitem> 内では <systemitem>init</systemitem> とも呼びます。詳しくは <xref linkend="sec-boot-terminology"/> をお読みください) を含む <systemitem>initramfs</systemitem> がカーネルによってマウントされ、一時的なルートファイルシステムになります。このプログラムは適切なルートファイルシステムをマウントするのに必要な、全ての処理を実施するほか、必要なファイルシステム向けの機能や、 <systemitem class="service">udev</systemitem> によるマスストレージコントローラ向けのデバイスドライバの読み込みなどを行います。</para>

   <para><systemitem>initramfs</systemitem> における <systemitem>init</systemitem> の主な目的は、実際のルートファイルシステムのマウントを準備し、アクセスすることにあります。システムの設定によっても異なりますが、 <systemitem>initramfs</systemitem> における <systemitem>init</systemitem> は、下記を実施します:</para>

   <variablelist>
    <varlistentry>
     <term>カーネルモジュールの読み込み</term>
     <listitem>
      <para>ハードウエア設定にも依存しますが、お使いのコンピュータのハードウエアコンポーネント (ハードディスクなどの最も重要なもの) に対して、特別なドライバが必要となる場合があります。最終的なルートファイルシステムにアクセスするため、カーネルは適切なファイルシステムドライバも読み込む必要があります。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ブロックスペシャルファイルの提供</term>
     <listitem>
      <para>カーネルは読み込んだモジュールに従って、デバイスイベントを生成します。 <systemitem class="service">udev</systemitem> はそれらのイベントを処理して、 RAM ファイルシステムである <filename>/dev</filename> 内に、必要なブロックスペシャルファイルを作成します。これらのスペシャルファイルが存在しないと、ファイルシステムやその他のデバイスにアクセスすることができなくなります。</para>
    </listitem>
    </varlistentry>
    <varlistentry>
     <term>RAID と LVM の設定管理</term>
     <listitem>
      <para>RAID や LVM の中にルートファイルシステムを保持するような設定を行っている場合、 <systemitem>initramfs</systemitem> 内の <systemitem>init</systemitem> は、 LVM や RAID を設定して後続の手順でルートファイルシステムにアクセスできるように構成します。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>ネットワーク設定の管理</term>
     <listitem>
      <para>お使いのシステムのルートファイルシステムが、ネットワーク経由でマウントするもの (例: NFS) であった場合、 <systemitem>init</systemitem> は必要なネットワークドライバを読み込んで、ルートファイルシステムにアクセスできる状態にする必要があります。</para>
      <para>iSCSI や SAN のようなネットワークブロックデバイス内にファイルシステムが存在する場合も、 <systemitem>initramfs</systemitem> 内の <systemitem>init</systemitem> がネットワークを設定します。 &productname; では、プライマリ (最初) のターゲットにアクセスできない場合、セカンダリ (第 2) の iSCSI ターゲットから起動する機能に対応しています。 <phrase os="sles">iSCSI ターゲットからの起動に関する設定について、詳しくは <xref linkend="sec-iscsi-initiator-yast"/> をお読みください。</phrase></para>
     </listitem>
    </varlistentry>
   </variablelist>

   <note>
    <title>マウント失敗時の処理</title>
    <para>起動環境内でのルートファイルシステムのマウントが失敗した場合は、起動を続行するためにそれらを確認したり修復したりする必要があります。 ext3 や ext4 のファイルシステムである場合は、ファイルシステムチェッカーが自動で起動します。 XFS や btrfs のファイルシステムの場合は、修復処理が自動化されていませんので、指定可能なオプションを利用して手作業で修復作業を行います。修復が成功すると、起動環境はシステムに対してマウントのやり直しを指示します。これで問題なくマウントできれば、起動処理はそのまま続行されます。</para>
   </note>

   <sect3 xml:id="sec-boot-linuxrc-initramfs">
    <title>インストール処理内での initramfs の処理</title>
    <para><systemitem>initramfs</systemitem> 内の <systemitem>init</systemitem> がインストール処理内の一部として起動時に呼び出された場合、上述とは異なる方式で処理が進みます。インストールシステムでは <systemitem>initramfs</systemitem> から &systemd; を開始することはせず、代わりに <command>linuxrc</command> がこれらの処理を行います。</para>

    <variablelist>
     <varlistentry>
      <term>インストールメディアの検出</term>
      <listitem>
       <para>インストール処理を開始すると、お使いのマシンはインストール用のカーネルと、 &yast; インストーラを含む特別な <systemitem>init</systemitem> を読み込みます。 &yast; インストーラは RAM 内のファイルシステムで動作するもので、オペレーティングシステムのインストールを行うためのインストールメディアの場所に関する情報を与える必要があります。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>ハードウエア検出の実行と適切なカーネルモジュールの読み込み</term>
      <listitem>
       <para><xref linkend="sec-boot-initrd"/> でも説明しているとおり、起動処理はほとんどのハードウエア設定で使用できる最小セットのドライバで開始されます。 &aarch64;, &power;, &x86-64; の各マシンでは、 <command>linuxrc</command> が初期のハードウエア検出処理を行い、お使いのハードウエア設定でどのようなドライバが必要なのかを判別します。 &zseries; では、 linuxrc や parmfile などで、ドライバとパラメータの一覧を指定する必要があります。</para>
       <para>これらのドライバは、システムを起動するのに必要な独自の <systemitem>initramfs</systemitem> を生成するために使用されることになります。なお、起動時にはモジュールを必要としないコールドプラグ型のハードウエアの場合は、それらのモジュールは &systemd; 側で読み込みます。詳しくは <xref linkend="sec-boot-systemd-advanced-kernel-modules"/> をお読みください。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>インストールシステムの読み込み</term>
      <listitem>
       <para>ハードウエアが正しく認識されると、必要なドライバが読み込まれます。 <systemitem class="service">udev</systemitem> プログラムは特殊なデバイスファイルを作成し、 &yast; インストーラを含む <command>linuxrc</command> を開始します。</para>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>&yast; の起動</term>
      <listitem>
       <para>最後に <command>linuxrc</command> が &yast; を起動します。これでパッケージのインストールやシステムの設定などを行うことができるようになります。</para>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect3>
  </sect2>


  <sect2 xml:id="sec-boot-systemd">
   <title>systemd の処理フェーズ</title>
   <para><quote>実際の</quote> ルートファイルシステムが見つかると、まずはエラーがないかどうかを確認して、マウントを行います。マウントが成功すれば、 <systemitem>initramfs</systemitem> がメモリ内から削除され、ルートファイルシステム内の &systemd; デーモンを起動します。 &systemd; は Linux システムとサービスのマネージャです。また、プロセス ID (PID) 1 で起動される親プロセスでもあり、ユーザスペースのサービスを立ち上げて管理するための init システムとしても動作します。詳しくは <xref linkend="cha-systemd"/> をお読みください。</para>
  </sect2>
 </sect1>
</chapter>
