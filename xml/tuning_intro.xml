<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE preface [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<preface xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="preface-tuning">
 <title>このガイドについて</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>&productname; は企業内の環境やデータセンターなど、様々な用途に使用できるシステムです。 &suse; では、 &productname; をどのような用途に使用した場合でも、適切な性能を発揮できるように設計しています。ところが、 &productname; を数値計算サーバとして使用した場合と、ファイルサーバとして使用した場合などでは、全く異なる要件を満たす必要があることになります。</para>
 <para>このような背景から、全ての用途に対して最適に動作するようなディストリビューションを作成することは、そもそもできないことになります。異なる用途で使用する場合は、最適化の方向も大きく異なります。最適化の要素にはたとえば、 I/O アクセスのパターンやメモリアクセスのパターン、プロセスのスケジューリングなどが絡んできます。一方の用途に対して完全に最適化されたシステムは、他方の用途では標準よりも性能を落としてしまうようなこともありがちです。たとえばデータベースリクエストなど、 I/O 負荷が集中するような処理は、ビデオエンコーディングなどの CPU に負荷が集中するような処理とは、全く異なる要件になります。 Linux が持つ多用途性によって、お使いのシステムを用途にあったシステムに仕立て上げていくことが重要となるわけです。</para>
 <para>このマニュアルでは、お使いのシステムを監視して分析するための手順を説明しています。具体的には、システムリソースの管理からシステムのチューニングまでの範囲になります。なお、このガイドでは具体的な用途に対するレシピは説明して <emphasis>いません</emphasis> 。なぜなら上述のとおり、用途によって要件が大きく異なるためです。そのため、このマニュアルでは、サーバにおける課題を抽出して、それらを解決していくための手法を説明しています。</para>
 <variablelist>
<!--
  <varlistentry>
   <term>Understanding the Basics</term>
   <listitem>
    <para>
     How does the kernel handle
     - processes
     - memory management
     - I/O
     - networking
    </para>
   </listitem>
  </varlistentry>
-->
  <varlistentry>
   <term>"\n  <xref linkend="part-tuning-basics"/>\n"</term>
   <listitem>
    <para>システムのチューニングは注意して実施する必要があります。ここでは、お使いのシステムを適切に改善していくのに必要な、様々な手順を説明しています。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
<!-- System Monitoring -->
   <term>"\n  <xref linkend="part-tuning-monitoring"/>\n"</term>
   <listitem>
    <para>Linux にはシステム内のほぼ全ての要素を監視するための、様々なツールが提供されています。ここでは、それらのユーティリティの使用方法と、システムログファイルの読み方、および分析方法を説明しています。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
<!-- Kernel Monitoring -->
   <term>"\n  <xref linkend="part-tuning-kerneltrace"/>\n"</term>
   <listitem>
    <para>Linux カーネルそれ自身には、システムの内部を細かく調べるための仕組みが用意されています。ここでは SystemTap と呼ばれる、データ分析やフィルタリングに使用することのできるスクリプト型言語を紹介しています。このほか、カーネルプローブと Perf を利用したデバッグ情報の収集とボトルネックの発見方法や、 Oprofile によるアプリケーション監視の方法なども説明しています。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
<!-- Resource Management -->
   <term>"\n  <xref linkend="part-tuning-resources"/>\n"</term>
   <listitem>
    <para>ここでは、要件に正確に適合したサーバを仕立て上げるための方法について説明しています。電源管理機能を使用しながら、現在の要件にあわせてサーバの性能を調整するための方法についても説明しています。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
<!--  Kernel Tuning -->
   <term>"\n  <xref linkend="part-tuning-kernel"/>\n"</term>
   <listitem>
    <para>Linux カーネルは sysctl や <filename>/proc</filename>, <filename>/sys</filename> などのファイルシステム、そしてカーネルのコマンドラインパラメータを利用することで、様々な最適化を行なうことができます。ここでは、 I/O 性能のチューニングと Linux のプロセススケジューリングについて説明しています。このほか、メモリ管理の基本的な原則や、特定のアプリケーションや使用パターンの要件にあわせるためのチューニング方法についても説明しています。また、ネットワーク性能の最適化についても説明しています。</para>
   </listitem>
  </varlistentry>
  <varlistentry>
<!--  Handling System Dumps -->
   <term>"\n  <xref linkend="part-tuning-dumps"/>\n"</term>
   <listitem>
    <para>ここでは、アプリケーションやシステムがクラッシュした場合の分析方法や対処方法を説明しています。 strace や ltrace などのトレーシングツールの紹介のほか、 Kexec や Kdump を使用したシステムクラッシュの対応方法を説明しています。</para>
   </listitem>
  </varlistentry>
 </variablelist>
 <tip os="sles;sled">
  <title>&sle; SDK の取得について</title>
  <para>SDK は &sle; 向けのモジュールで、 &scc; のオンラインチャンネルからダウンロードすることができます。それ以外にも、 <link os="sles;sled" xlink:href="http://download.suse.com/"/> <link os="osuse" xlink:href="https://doc.opensuse.org/"/> にアクセスして <literal>&sle; Software Development Kit</literal> と入力して検索を行なうことでも、ダウンロードすることができます。詳しくは <xref linkend="cha-add-ons"/> をお読みください。</para>
 </tip>
 <xi:include href="common_intro_available_doc_i.xml"/>
 <xi:include href="common_intro_feedback_i.xml"/>
 <xi:include href="common_intro_typografie_i.xml"/>
</preface>
