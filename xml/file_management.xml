<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" role="General" xml:id="sec-sec-file-management">
 <title>ファイルの管理</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 
   <sect1 xml:id="sec-sec-prot-general-partitions">
   <title>ディスクのパーティション</title>

   <para>サーバには一般に、 <filename>/</filename> , <filename>/boot</filename> , <filename>/usr</filename> , <filename>/var</filename> , <filename>/tmp</filename> , <filename>/home</filename> などの個別のファイルシステムが設定されています。それぞれ別々のパーティション内に配置することで、 <filename>/var</filename> や <filename>/tmp</filename> のディレクトリ内にあるログや一時ファイルなどが容量を大きく浪費して、ルートパーティションに書き込めなくなってしまうような事態を防ぐことができます。場合によっては、サードパーティ製のアプリケーションを配置する <filename>/opt</filename> ディレクトリを別のパーティションに配置する必要がある場合もあります。</para>

   <para>このようにファイルシステムを分けることにより、もう 1 つの利点が生まれます。別々のマウントとして処理されることから、それぞれ別々のマウントオプションを設定できる、という点です。たとえば下記のようなマウントオプションがあります:</para>

   <itemizedlist>
    <listitem>
     <para><literal>noexec</literal> : プログラムの実行を禁止します。</para>
    </listitem>
    <listitem>
     <para><literal>nodev</literal> : キャラクタデバイスやブロックデバイスを使用できないようにします。</para>
    </listitem>
    <listitem>
     <para><literal>nosuid</literal> : <literal>set-user-ID</literal> や <literal>set-group-ID</literal> の効果を無効化します。</para>
    </listitem>
    <listitem>
     <para><literal>ro</literal> : ファイルシステムを <literal>読み込み専用</literal> にします。</para>
    </listitem>
   </itemizedlist>

   <para>それぞれのオプションの設定は注意して行なってください。アプリケーションによっては動作しなくなってしまうことがあるほか、保守を受けられなくなってしまう場合もあります。マウントオプションは、適切な設定を行なうことで、セキュリティに関わる攻撃を防いだり、設定の誤りによる予期しない動作を防いだりすることができます。たとえば <filename>/tmp</filename> に保存されるファイルには <literal>set-user-ID</literal> フラグの付いたプログラムを配置する必要は無いはずです。</para>

   <para>また、 <xref linkend="cha-common-criteria"/> についてもお読みになることをお勧めします。この原則にもあるとおり、動作中のシステムに対してパーティションを分離することが重要です (たとえば <filename>/var/log</filename> ディレクトリ内にログが大量に出力されるような環境の場合、 <filename>/</filename> パーティションと <filename>/var</filename> パーティションを別々にしたほうがよいことになります) 。もう 1 つ知っておくべきこととしては、一般的な PC システムではプライマリパーティションが最大 4 つまでに制限されるため、 LVM やその他のボリューム管理の仕組みを活用する必要がある、ということもあります。</para>

   <para>&productname; ではそのほかに、パーティションや単一のディレクトリを暗号化することができほか、ファイルをコンテナとして利用して暗号化することもできます。詳しくは <xref linkend="cha-security-cryptofs"/> をお読みください。</para>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-check-perms">
   <title>ファイルのパーミッションと所有権の確認</title>

   <para>本章では、ホストのセキュリティをより向上させるために、既定のパーミッションやファイルの設定を取り扱うための方法について説明しています。なお、 &productname; に付属する <command>seccheck</command> のようなユーティリティを使用することで、一般的なロックダウンのほか、ファイルセキュリティやユーザ環境の改善を行なうことができます。しかしながら、これらの設定を変更する方法についても知っておくとよいでしょう。</para>

   <para>&productname; には 3 種類の既定のパーミッション設定が添付されています。それぞれ <filename>permissions.easy</filename> , <filename>permissions.secure</filename> , <filename>permissions.paranoid</filename> というファイル名で、いずれも <filename>/etc</filename> ディレクトリ内に配置されています。これらのファイルは全ユーザが書き込み可能なディレクトリやファイル、 setuid ビット (プログラムを起動したユーザの権限ではなく、ファイル所有者 (通常は &rootuser;) の権限で動作させるためのビット) などの特殊なパーミッション設定を表わすものです。</para>

   <para>独自の設定を行ないたい場合は、 <filename>/etc/permissions.local</filename> ファイル内に設定を追加してください。また、簡単に設定したい場合は、 &yast; の <guimenu>セキュリティセンター<!-- NOTE: original is "Local Security", but.. --></guimenu>モジュールを使用するとよいでしょう。</para>

   <para>以降のトピックで説明している内容は上記で選択したルールセットによって上書きされてしまいますが、どのような設定ができるのかを知っておくことが重要です。</para>
  </sect1>
  <sect1 xml:id="sec-sec-prot-general-umask">
   <title>既定の umask</title>

   <para><command>umask</command> (ユーザがファイルを作成する際のモードマスク値) コマンドはシェルの内蔵コマンドで、新しく作成するファイルやディレクトリに対して、そのパーミッションを制御するためのものです。この値はシステムコールを利用することで変更することができますが、多数のプログラムやユーティリティでは <command>umask</command> コマンドを呼び出しています。既定では <command>umask</command> の値は <literal>022</literal> に設定されていますが、全ユーザに対して変更を行ないたい場合には <filename>/etc/profile</filename> ファイル、各ユーザに対して個別に設定したい場合は、シェルのスタートアップファイルでそれぞれ設定することができます。</para>

   <para>現在の umask 値を表示するには、 <command>umask</command> コマンドに何もパラメータを付けずに実行します:</para>

<screen>&prompt.user;umask
022</screen>

   <para>umask の値は、ファイルやディレクトリを作成する際に設定するパーミッションのうち、設定しておきたくないビットを 1 にするものです。</para>

   <para>既定の umask 値はほとんどのユーザにとって十分な値になっています。たとえば下記のようになります。</para>

<screen>
&prompt.user;touch a
&prompt.user;mkdir b
&prompt.user;ls -on
total 16
-rw-r--r--. 1 17086    0 Nov 29 15:05 a
drwxr-xr-x. 2 17086 4096 Nov 29 15:05 b
</screen>

   <para>必要であれば umask 値を変更することもできます。</para>
<screen>
&prompt.user;umask 111
&prompt.user;touch c
&prompt.user;mkdir d
&prompt.user;ls -on
total 16
-rw-rw-rw-. 1 17086    0 Nov 29 15:05 c
drw-rw-rw-. 2 17086 4096 Nov 29 15:05 d
</screen>

   <para>使用するスレッドモデルによっては、より制限の厳しい <literal>037</literal> のような値を設定することで、不用意なデータ漏洩を防ぐことができます。</para>
<screen>
&prompt.user;umask 037
&prompt.user;touch e
&prompt.user;mkdir f
&prompt.user;ls -on
total 16
-rw-r-----. 1 17086    0 Nov 29 15:06 e
drwxr-----. 2 17086 4096 Nov 29 15:06 f
</screen>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-s-bit">
   <title>SUID/SGID フラグの付いたファイル</title>

   <para>SUID (set user ID) や SGID (set group ID) のビットを実行可能なファイルに設定すると、そのプログラムを起動したユーザではなく、その実行可能なファイルを所有しているユーザもしくはグループとしてプログラムを起動することができます。たとえば SUID ビットが設定され、 &rootuser; が所有するプログラムがあった場合、誰がそのプログラムを起動しても、プログラムは &rootuser; の UID で実行されることになります。よくある例は <command>passwd</command> コマンドで、 &rootuser; が所有する <filename>/etc/shadow</filename> ファイルのパスワード欄に書き込みを行なうために設定されています。</para>

   <para>SUID/SGID のビットを誤って他のプログラムに設定したりしてしまうと、それはセキュリティホールとなってしまいます。そのため、システム全体を調べて、予期せず SUID/SGID のビットが設定されているものが無いかどうかを調べる必要があります。具体的には、下記のようなコマンドを入力して実行します:</para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -type f -perm '/6000' -ls</screen>

   <para>ファイルシステムの構造によっては、上記にさらにディレクトリを追加する必要があるかもしれません。</para>


   <para>&suse; では、どうしても必要なプログラムにのみ SUID/SGID ビットを設定しています。また、コードの開発者に対しても、どうしても必要な理由がある場合を除いて、 SUID/SGID のビットを設定しないように求めています。また、全てのユーザからは実行できないようにすることで、 SUID/SGID ビットの悪影響を防ぐこともできます。もちろんソフトウエア側の設計改善やケーパビリティの使用などで、 SUID/SGID ビットの使用を回避できるほうが望ましいです。</para>

   <para>&productname; ではファイルのケーパビリティ機能に対応し、 &rootuser; に与えられる権限の一部のみをプログラムに許可することもできます:</para>

<screen>&prompt.root;getcap -v /usr/bin/ping
      /usr/bin/ping = cap_new_raw+eip</screen>

   <para>上記の例では、 <command>ping</command> を実行するユーザに対して CAP_NET_RAW のケーパビリティを許可しています。この場合、たとえ <command>ping</command> に脆弱性が存在していても、攻撃者は CAP_NET_RAW のケーパビリティのみが許可され、 &rootuser; の全権限を得ることはありません。また可能であれば、 SUID ビットとともにファイルのケーパビリティを設定しておくことをお勧めします。ただし、これは &rootuser; にのみ当てはまるもので、それ以外の <literal>news</literal> , <literal>lp</literal> などのシステムユーザには当てはまりません。</para>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-filepermissions">
   <title>全てのユーザが書き込むことのできるファイル</title>

   <para>誰にでも書き込み可能なファイルは、システム内の任意のユーザが書き込めるファイルであることから、セキュリティリスクとなりうるものです。これに加えて、誰にでも書き込めるディレクトリは、誰にでもファイルの作成や削除ができてしまいます。これらのファイルやディレクトリを検索するには、下記のようなコマンドを入力して実行します:</para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -type f -perm -2 ! -type l -ls</screen>

   <para>ファイルシステムの構造によっては、上記にさらにディレクトリを追加する必要があるかもしれません。</para>

   <para>なお、上記では <option>! -type l</option> パラメータを指定していますが、これはシンボリックリンクを読み飛ばすための設定で、シンボリックリンクは通常全てのユーザが書き込めるファイルになっているためです。シンボリックリンクが指し示すファイルやディレクトリへの書き込みは、その示した先のファイルやディレクトリのパーミッションに従って処理されるし、そのファイルやディレクトリは上記のコマンドでチェック対象となるので、特に問題はありません。</para>

   <para>また、 <filename>/tmp</filename> ディレクトリなどのようにスティッキー (sticky) ビットが設定されたディレクトリに対しては、全てのユーザへの書き込みが許可されていても、そのファイルやディレクトリの所有者のみが削除もしくは名前変更を行なうことができます。スティッキービットは、そのファイルやディレクトリを作成したユーザに "ベタベタ貼り付く" (sticky) ことで、他のユーザからの削除や名前変更を防ぐ意味を持ちます。そのため、ディレクトリの用途によっては、スティッキービットが設定されていれば、全てのユーザからの書き込みを許しても問題ない場合があります。</para>

<screen>&prompt.user;ls -ld /tmp
drwxrwxrwt 18 root root 16384 Dec 23 22:20 /tmp</screen>

   <para>上記の <literal>t</literal> 表示がスティッキービットを表わしています。</para>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-orphaned">
   <title>孤立したファイル／所有者のいないファイル</title>

   <para>どのユーザやグループにも所有されていないファイルは、現時点ではセキュリティ上の問題となることはありません。ですが、このようなファイルは将来的にセキュリティ上の問題となる場合があります。たとえば新しいユーザを作成した際、偶然にもその UID を持つファイル (つまり、以前はどのユーザも所有していなかったファイル) があると、そのファイルに対する所有権を得てしまうことになります。</para>

   <para>所有者や所有グループのいないファイルを検索するには、下記のコマンドを入力して実行します:</para>

    <screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -nouser -o -nogroup</screen>

   <para>ファイルシステムの構造によっては、上記にさらにディレクトリを追加する必要があるかもしれません。</para>

   <para>もう 1 つ発生しうる問題としては、パッケージシステム経由でインストールしていないプログラムがある場合、そのプログラムに対しては自動では更新できないという問題があります。このようなファイルを検索するには、下記のようなコマンドを入力して実行します:</para>

   <screen>&prompt.user;find /bin /lib /lib64 /usr -path /usr/local -prune -o -type f -a -exec /bin/sh -c "rpm -qf {} &amp;&gt; /dev/null || echo {}" \;</screen>

   <para>なお、上記のコマンドは権限を持たないユーザ (例: nobody) で実行してください。これは、ファイル名をうまく加工することで、コマンドそのものを実行してしまうことがあり得るためです。通常、これらのディレクトリは &rootuser; のみに書き込み権限がありますので、特に問題となることはありませんが、念のため注意してください。</para>

   <para>上記のコマンドは、 <filename>/bin</filename> , <filename>/lib</filename> , <filename>/lib64</filename> , <filename>/usr</filename> の各ディレクトリ内にある全てのファイル (ただし <filename>/usr/local</filename> を除く) を列挙し、パッケージマネージャで管理されていないファイルを出力するものです。これらのファイルはすぐにセキュリティ問題になるとは言い切れませんが、どのファイルが追跡対象外なのかを把握しておき、あらかじめ注意しておくことが重要です。</para>
  </sect1>
</chapter>
