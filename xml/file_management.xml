<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" role="General" xml:id="sec-sec-file-management">
 <title>ファイルの管理</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

   <sect1 xml:id="sec-sec-prot-general-partitions">
   <title>ディスクのパーティション</title>

   <para>サーバには一般に、 <filename>/</filename> , <filename>/boot</filename> , <filename>/var</filename> , <filename>/tmp</filename> , <filename>/home</filename> などの個別のファイルシステムが設定されています。それぞれ別々のパーティション内に配置することで、 <filename>/var</filename> や <filename>/tmp</filename> のディレクトリ内にあるログや一時ファイルなどが容量を大きく浪費して、ルートパーティションに書き込めなくなってしまうような事態を防ぐことができます。場合によっては、サードパーティ製のアプリケーションを配置する <filename>/opt</filename> ディレクトリを別のパーティションに配置する必要がある場合もあります。</para>

   <para>このようにファイルシステムを分けることにより、もう 1 つの利点が生まれます。別々のマウントとして処理されることから、それぞれ別々のマウントオプションを設定できる、という点です。たとえば下記のようなマウントオプションがあります:</para>

   <itemizedlist>
    <listitem>
     <para><literal>noexec</literal> : プログラムの実行を禁止します。</para>
    </listitem>
    <listitem>
     <para><literal>nodev</literal> : キャラクタデバイスやブロックデバイスを使用できないようにします。</para>
    </listitem>
    <listitem>
     <para><literal>nosuid</literal> : <literal>set-user-ID</literal> や <literal>set-group-ID</literal> の効果を無効化します。</para>
    </listitem>
    <listitem>
     <para><literal>ro</literal> : ファイルシステムを <literal>読み込み専用</literal> にします。</para>
    </listitem>
   </itemizedlist>

   <para>それぞれのオプションの設定は注意して行ってください。アプリケーションによっては動作しなくなってしまうことがあるほか、保守を受けられなくなってしまう場合もあります。マウントオプションは、適切な設定を行うことで、セキュリティに関わる攻撃を防いだり、設定の誤りによる予期しない動作を防いだりすることができます。たとえば <filename>/tmp</filename> に保存されるファイルには <literal>set-user-ID</literal> フラグの付いたプログラムを配置する必要は無いはずです。</para>

   <para>また、 <phrase os="sles;sled;slemicro"> <xref linkend="cha-common-criteria"/> についても読んでおくことをお勧めします。この原則にもあるとおり、 </phrase>システムの動作に合わせてパーティションを設計することも重要です。たとえば <filename>/var/log</filename> ディレクトリ内にログが大量に出力されるような環境の場合、 <filename>/</filename> パーティションと <filename>/var</filename> パーティションを別々にしたほうがよいことになります。もう 1 つ知っておくべきこととしては、一般的な PC システムではプライマリパーティションが最大 4 つまでに制限されるため、 LVM やその他のボリューム管理の仕組みを活用する必要があるかもしれません。</para>

   <para>&productname; ではそのほかに、パーティションや単一のディレクトリを暗号化することができほか、ファイルをコンテナとして利用して暗号化することもできます。詳しくは <xref linkend="cha-security-cryptofs"/> をお読みください。</para>
  </sect1>

 <sect1 xml:id="sec-sec-prot-general-file-permissions">
  <title>特定のシステムファイルに対するパーミッションの変更</title>

  <para>特に <filename>/etc</filename> ディレクトリ内に存在するファイルがそれに該当しますが、システム内の多数のファイルが読み取り可能な状態になっています。これは言い換えると、特権を持たないユーザでも自由に内容を読むことができる、ということを意味しています。一般的に、これは特に大きな問題とはなりませんが、システムの運用上の都合等の様々な理由で、機密情報を持つファイルを保護しておきたいという要件が存在することがあります。</para>

  <para>&productname; では <package>permissions</package> パッケージで、ファイルのパーミッションを簡単に制御できるようになっています。このパッケージには 3 種類のシステムプロファイルが用意されています:</para>

  <variablelist>
   <varlistentry>
    <term>easy (簡易)</term>
    <listitem>
     <para>ユーザにとって扱いやすいグラフィカルユーザシステムを構築するためのプロファイルです。こちらが既定のプロファイルです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>secure (厳格)</term>
    <listitem>
     <para>グラフィカルユーザインターフェイスを持たない、サーバシステム向けのプロファイルです。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>paranoid (偏執)</term>
    <listitem>
     <para>最大限にセキュリティを確保するためのプロファイルです。 <literal>secure</literal> (厳格) プロファイルに加えて、 setuid/setgid のようなフラグやケーパビリティフラグなどの特殊なパーミッションが <emphasis>全て</emphasis> 削除されます。</para>

     <warning>
      <title>特権を持たないユーザには使用できないシステムになる問題について</title>
      <para>パスワードの変更などの簡単な作業を除き、特権を持たないユーザには使い物にならないシステムになってしまうことに注意してください。</para>
      <para>そのため、 <literal>paranoid</literal> (偏執) プロファイルはそのまま使用するのではなく、独自の許可設定を追加するためのテンプレートとしてのみお使いください。詳しい情報は <filename>permissions.paranoid</filename> ファイル内に英語にて記述があります。</para>
     </warning>

    </listitem>
   </varlistentry>
  </variablelist>

  <para>独自のファイルアクセス許可を設定したい場合は、 <filename>/etc/permissions.local</filename> ファイルを編集するか、もしくは <filename>/etc/permissions.d/</filename> ディレクトリ内に新しくファイルを作成してください。</para>

  <screen># 追加の設定
/etc/security/access.conf       root:root       0400
/etc/sysctl.conf                root:root       0400
/root/                          root:root       0700</screen>

  <para>最初の列はファイル名を表しています。ただし、ディレクトリを表したい場合は、必ずスラッシュ (/) で終わらせてください。 2 つめの列には所有者とグループを、 3 つめの列にはモードを指定します。設定ファイルの書式についての詳細は、 <command>man permissions</command> をお読みください。</para>

  <para>あとは <filename>/etc/sysconfig/security</filename> ファイル内で、使用したいプロファイルを選択します。 <literal>easy</literal> プロファイルと <filename>/etc/permissions.local</filename> ファイルの内容を適用したい場合は、下記のように指定します:</para>

  <screen>PERMISSION_SECURITY="<replaceable>easy local</replaceable>"</screen>

  <para>設定を適用するには、 <command>chkstat --system --set</command> コマンドを実行します。</para>

  <para>パーミッションは <command>zypper</command> によるパッケージ更新でも適用されます。そのため、 <systemitem class="daemon">cron</systemitem> もしくは &systemd; タイマーを利用して、定期的に <command>chkstat</command> を実行するようにしてください。</para>

  <important>
   <title>独自のファイルパーミッションのサポートについて</title>
   <para>システムが提供するプロファイルは細部に至るまでよくテストされて構築されていますが、独自のファイルパーミッションを指定してしまうと、アプリケーションによっては正しく動作しなくなってしまう場合があります。 &suse; ではそのような構成でご利用の場合、サポートを提供できませんのであらかじめご了承ください。</para>
   <para>また、 <command>chkstat</command> で独自のファイルパーミッションを適用するにあたっては、事前に必ずテストを実施して、普段の作業が想定通りに動作することを確認しておいてください。</para>
  </important>

 </sect1>

 <sect1 xml:id="sec-sec-prot-general-home-permissions">
  <title>ホームディレクトリに対する 755 から 700 へのパーミッション変更</title>
  <para>既定では、ユーザのホームディレクトリはシステム内の誰にでもアクセス (読み込み、実行) 可能な状態になります。これは潜在的な情報漏洩につながることから、所有者自身だけがホームディレクトリにアクセスできるようにする必要があります。</para>
  <para>下記のようなコマンドを入力して実行すると、 <filename>/home</filename> ディレクトリ以下にある既存のホームディレクトリに対して、 <literal>700</literal> というパーミッション (所有者のみがアクセスできる) を設定します:</para>
  <screen>&prompt.sudo;chmod 755 /home
&prompt.sudo;for a in /home/*; do \
echo "Changing rights for directory $a"; chmod 700 ”$a”; done</screen>

  <!-- cwickert 2021-11-11: the following only works with shadow >= 4.8.1,
   means SLES 15 >= SP3. Beware when backporting! -->
  <para>なお、このパーミッションを新しく作成するホームディレクトリに対して適用したい場合は、 <filename>/etc/login.defs</filename> ファイルを編集して、 <varname>HOME_MODE</varname> を <literal>700</literal> に設定してください。</para>

  <screen># HOME_MODE is used by useradd(8) and newusers(8) to set the mode for new
# home directories.
# If HOME_MODE is not set, the value of UMASK is used to create the mode.
HOME_MODE      0700</screen>

  <para><varname>HOME_MODE</varname> を指定しない場合、パーミッションは既定の umask 値から自動的に計算されます。なお、 <varname>HOME_MODE</varname> は設定するパーミッションを指定するものであって、 umask のように与えたくないフラグを指定するものではないことに注意してください。 umask に関する詳細は、 <xref linkend="sec-sec-prot-general-umask"/> をお読みください。</para>

  <para>この設定変更をテストするには、 <command>useradd -m testuser</command> のようにして新しいユーザを作成してみてください。あとは <command>ls -l /home</command> を実行して、作成されたディレクトリのパーミッションを確認してください。テストが終わったらユーザは削除してかまいません。</para>
  <!-- cwickert 2021-11-11: end of SLE 15 >= SP3-only content -->
  <important>
   <title>パーミッション変更のテスト</title>
   <para>ここまでの手順を実行することで、一般ユーザは他のユーザのホームディレクトリにアクセスできなくなります。ユーザやソフトウエアによっては、これが予期しない結果となる可能性もあります。</para>
   <para>そのため、これを本番環境で適用する場合は、あらかじめテストをしておく必要があるほか、ユーザに対しても変更を周知しておく必要があります。</para>
  </important>
 </sect1>

  <sect1 xml:id="sec-sec-prot-general-umask">
   <title>既定の umask</title>

   <para><command>umask</command> (ユーザがファイルを作成する際のモードマスク値) コマンドはシェルの内蔵コマンドで、新しく作成するファイルやディレクトリに対して、そのパーミッションを制御するためのものです。この値はシステムコールを利用することで変更することができますが、多数のプログラムやユーティリティでは <command>umask</command> コマンドを呼び出しています。</para>

   <para>既定では、 <command>umask</command> の値は <literal>022</literal> に設定されています。この umask の値は <!-- NOTE: modified for clear explanation in Japanese --><quote>許可を与えたくない</quote> ビットを指定する仕組みです。</para>

   <para>現在の umask 値を表示するには、 <command>umask</command> コマンドに何もパラメータを付けずに実行します:</para>

<screen>&prompt.user;umask
022</screen>

   <para>既定の umask 値はほとんどのユーザにとって十分な値になっています。たとえば下記のようになります。</para>

<screen>&prompt.user;touch a
&prompt.user;mkdir b
&prompt.user;ls -on
合計 16
-rw-r--r--. 1 17086    0 11月29 15:05 a
drwxr-xr-x. 2 17086 4096 11月29 15:05 b</screen>

   <para>必要であれば umask 値を変更することもできます。</para>

<screen>&prompt.user;umask 111
&prompt.user;touch c
&prompt.user;mkdir d
&prompt.user;ls -on
合計 16
-rw-rw-rw-. 1 17086    0 11月29 15:05 c
drw-rw-rw-. 2 17086 4096 11月29 15:05 d</screen>

   <para>不用意なデータ漏洩を防ぐため、さらに厳しい制限を行いたい場合は、 <literal>037</literal> のような値を設定することもできます。</para>

<screen>&prompt.user;umask 037
&prompt.user;touch e
&prompt.user;mkdir f
&prompt.user;ls -on
合計 16
-rw-r-----. 1 17086    0 11月29 15:06 e
drwxr-----. 2 17086 4096 11月29 15:06 f</screen>

   <tip>
    <title>最大限の保護について</title>
    <para>最大限の保護を設定したい場合は、 <literal>077</literal> という umask 値を設定してください。これにより、新しく作成されたファイルやディレクトリは、自分自身しかアクセスできなくなり、グループ内に対してもその他のユーザに対しても、全てのアクセスが禁止されるようになります。</para>
    <para>ただし、このような設定を行うことで、他のユーザに不便を強いる可能性があったり、ソフトウエアが予期しない動作をしてしまうことがあるかもしれません。また、サポートチームに余計な負担をかけてしまう可能性にも注意してください。</para>
   </tip>

   <sect2 xml:id="sec-sec-prot-general-umask-adjust">
    <title>既定の umask 値の調整</title>
    <para>全てのユーザに対する umask 値を調整したい場合は、 <filename>/etc/login.defs</filename> ファイル内にある <varname>UMASK</varname> の値を変更してください。</para>

<screen># Default initial "umask" value used by login(1) on non-PAM enabled systems.
# Default "umask" value for pam_umask(8) on PAM enabled systems.
# UMASK is also used by useradd(8) and newusers(8) to set the mode for new
# home directories.
# 022 is the default value, but 027, or even 077, could be considered
# for increased privacy. There is no One True Answer here: each sysadmin
# must make up their mind.
UMASK           022</screen>

    <para>個別のユーザに対して設定したい場合は、 <filename>/etc/passwd</filename> ファイル内の 'gecos' フィールドに umask 値を設定します。たとえば下記のようになります:</para>
<screen>&exampleuser_plain;:x:1000:100:&exampleuserfull;,UMASK=<replaceable>022</replaceable>:/home/tux:/bin/bash</screen>
    <para>上記の設定は <command>yast users</command> でも行うことができます。ユーザの <menuchoice><guimenu>詳細</guimenu> <guimenu>追加のユーザ情報</guimenu></menuchoice> 内に、 <literal>UMASK=<replaceable>022</replaceable></literal> のような形式で設定してください。</para>
    <para>なお、 <filename>/etc/login.defs</filename> や <filename>/etc/passwd</filename> に設定した値は、 <filename>pam_umask.so</filename> という PAM モジュールが読み込んで適用します。その他の設定オプションについての詳細は、 <command>man pam_umask</command> で表示されるマニュアルページをお読みください。</para>
    <para>また、設定値を反映させるためには、ユーザがログインし直す必要もあります。ログインし直したあと、 <command>umask</command> コマンドで正しく設定されたかどうかを確認してください。</para>

   </sect2>

  </sect1>

 <sect1 xml:id="sec-sec-prot-general-s-bit">
   <title>SUID/SGID フラグの付いたファイル</title>

   <para>SUID (set user ID) や SGID (set group ID) のビットを実行可能なファイルに設定すると、そのプログラムを起動したユーザではなく、その実行可能なファイルを所有しているユーザもしくはグループとしてプログラムを起動することができます。たとえば SUID ビットが設定され、 &rootuser; が所有するプログラムがあった場合、誰がそのプログラムを起動しても、プログラムは &rootuser; の UID で実行されることになります。よくある例は <command>passwd</command> コマンドで、 &rootuser; が所有する <filename>/etc/shadow</filename> ファイルのパスワード欄に書き込みを行うために設定されています。</para>

   <para>SUID/SGID のビットを誤って他のプログラムに設定したりしてしまうと、それはセキュリティホールとなってしまいます。そのため、システム全体を調べて、予期せず SUID/SGID のビットが設定されているものが無いかどうかを調べる必要があります。具体的には、下記のようなコマンドを入力して実行します:</para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin \
  /srv /tmp /usr /var -type f -perm '/6000' -ls</screen>

   <para>ファイルシステムの構造によっては、上記にさらにディレクトリを追加する必要があるかもしれません。</para>


   <para>&suse; では、どうしても必要なプログラムにのみ SUID/SGID ビットを設定しています。また、コードの開発者に対しても、どうしても必要な理由がある場合を除いて、 SUID/SGID のビットを設定しないように求めています。また、全てのユーザからは実行できないようにすることで、 SUID/SGID ビットの悪影響を防ぐこともできます。もちろんソフトウエア側の設計改善やケーパビリティの使用などで、 SUID/SGID ビットの使用を回避できるほうが望ましいです。</para>

   <para>&productname; ではファイルのケーパビリティ機能に対応し、 &rootuser; に与えられる権限の一部のみをプログラムに許可することもできます:</para>

<screen>&prompt.root;getcap -v /usr/bin/ping
/usr/bin/ping = cap_new_raw+eip</screen>

   <para>上記の例では、 <command>ping</command> を実行するユーザに対して <literal>CAP_NET_RAW</literal> のケーパビリティを許可しています。この場合、たとえ <command>ping</command> に脆弱性が存在していても、攻撃者は CAP_NET_RAW のケーパビリティのみが許可され、 &rootuser; の全権限を得ることはありません。また可能であれば、 SUID ビットとともにファイルのケーパビリティを設定しておくことをお勧めします。ただし、これは &rootuser; にのみ当てはまるもので、それ以外の <literal>news</literal> , <literal>lp</literal> などのシステムユーザには当てはまりません。</para>

  </sect1>

  <sect1 xml:id="sec-sec-prot-general-world-writable-files">
   <title>全てのユーザが書き込むことのできるファイル</title>

   <para>誰にでも書き込み可能なファイルは、システム内の任意のユーザが書き込めるファイルであることから、セキュリティリスクとなりうるものです。これに加えて、誰にでも書き込めるディレクトリは、誰にでもファイルの作成や削除ができてしまいます。これらのファイルやディレクトリを検索するには、下記のようなコマンドを入力して実行します:</para>

<screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin \
  /srv /tmp /usr /var -type f -perm -2 ! -type l -ls</screen>

   <para>ファイルシステムの構造によっては、上記にさらにディレクトリを追加する必要があるかもしれません。</para>

   <para>なお、上記では <option>! -type l</option> パラメータを指定していますが、これはシンボリックリンクを読み飛ばすための設定で、シンボリックリンクは通常全てのユーザが書き込めるファイルになっているためです。シンボリックリンクが指し示すファイルやディレクトリへの書き込みは、その示した先のファイルやディレクトリのパーミッションに従って処理されますし、そのファイルやディレクトリは上記のコマンドでチェック対象となるので、特に問題はありません。</para>

   <para>また、 <filename>/tmp</filename> ディレクトリなどのようにスティッキー (sticky) ビットが設定されたディレクトリに対しては、全てのユーザへの書き込みが許可されていても、そのファイルやディレクトリの所有者のみが削除もしくは名前変更を行うことができます。スティッキービットは、そのファイルやディレクトリを作成したユーザに "ベタベタ貼り付く" (sticky) ことで、他のユーザからの削除や名前変更を防ぐ意味を持ちます。そのため、ディレクトリの用途によっては、スティッキービットが設定されていれば、全てのユーザからの書き込みを許しても問題ない場合があります。</para>

<screen>&prompt.user;ls -ld /tmp
drwxrwxrwt 18 root root 16384 Dec 23 22:20 /tmp</screen>

   <para>上記の <literal>t</literal> 表示がスティッキービットを表しています。</para>

  </sect1>
  <sect1 xml:id="sec-sec-prot-general-orphaned">
   <title>孤立したファイル／所有者のいないファイル</title>

   <para>どのユーザやグループにも所有されていないファイルは、現時点ではセキュリティ上の問題となることはありません。ですが、このようなファイルは将来的にセキュリティ上の問題となる場合があります。たとえば新しいユーザを作成した際、偶然にもその UID を持つファイル (つまり、以前はどのユーザも所有していなかったファイル) があると、そのファイルに対する所有権を得てしまうことになります。</para>

   <para>所有者や所有グループのいないファイルを検索するには、下記のコマンドを入力して実行します:</para>

    <screen>&prompt.root;find /bin /boot /etc /home /lib /lib64 /opt /root /sbin /srv /tmp /usr /var -nouser -o -nogroup</screen>

   <para>ファイルシステムの構造によっては、上記にさらにディレクトリを追加する必要があるかもしれません。</para>

   <para>もう 1 つ発生しうる問題としては、パッケージシステム経由でインストールしていないプログラムがある場合、そのプログラムに対しては自動では更新できないという問題があります。このようなファイルを検索するには、下記のようなコマンドを入力して実行します:</para>

   <screen>&prompt.user;find /bin /lib /lib64 /usr -path /usr/local -prune -o -type f -a -exec /bin/sh -c "rpm -qf {} &amp;&gt; /dev/null || echo {}" \;</screen>

   <para>なお、上記のコマンドは権限を持たないユーザ (例: nobody) で実行してください。これは、ファイル名をうまく加工することで、コマンドそのものを実行してしまうことがあり得るためです。通常、これらのディレクトリは &rootuser; のみに書き込み権限がありますので、特に問題となることはありませんが、念のため注意してください。</para>

   <para>上記のコマンドは、 <filename>/bin</filename> , <filename>/lib</filename> , <filename>/lib64</filename> , <filename>/usr</filename> の各ディレクトリ内にある全てのファイル (ただし <filename>/usr/local</filename> を除く) を列挙し、パッケージマネージャで管理されていないファイルを出力するものです。これらのファイルはすぐにセキュリティ問題になるとは言い切れませんが、どのファイルが追跡対象外なのかを把握しておき、あらかじめ注意しておくことが重要です。</para>
  </sect1>
</chapter>
