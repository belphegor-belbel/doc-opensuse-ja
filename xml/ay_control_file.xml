<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" role="General" xml:id="cha-autoyast-control-file">
 <title>&ay; 制御ファイル</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

  <sect1 xml:id="Profile-Intro">
   <title>紹介</title>

   <para><emphasis>制御ファイル</emphasis> は <emphasis>プロファイル</emphasis> とも呼ばれ、単一のシステムに対する設定を記述します。このファイルにはリストやレコード、ツリーや巨大組み込み形式や参照オブジェクトなど、複雑な構造に対応したプロパティリソースから構成されています。</para>

   <important os="osuse;sles;sled">
    <title>&slsa; 12&nbsp;GA リリースおよび &opensuse; 42.0 以降の制御ファイルの非互換性について</title>
    <para>&slsa; 12 および &opensuse; Leap 42.0 では多数の大規模変更 (systemd への切り替えや &grub; など) が加えられています。これらの変更に伴い、 &ay; も大きく変更が加えられていますので、 &slsa; 11 で作成された &ay; の制御ファイルは &productname; &productnumber; で使用することができません。逆に &productname; &productnumber; 向けの制御ファイルを &productname; 11 で使用することもできません。</para>
   </important>
  </sect1>
  <sect1 xml:id="Profile-Format">
   <title>書式</title>

   <para>設定ファイルの形式に XML を採用していることにより、ファイル構造の一貫性が保たれているほか、新しいシステムを設定しようとする場合でも、学びやすく覚えやすい仕組みになっています。</para>

   <para>&ay; の制御ファイルでは、 XML を利用してシステムのインストールや設定を表現します。 XML は汎用目的のマークアップ言語で、多くのユーザが慣れ親しんでいる構造であるほか、 XML ファイルを処理するためのツールも多数用意されています。既存の制御ファイルを編集する場合でも、何もない状態から制御ファイルを作成する場合でも、制御ファイルの構造が正しいことを検証しておくことを強くお勧めします。これは <literal>xmllint</literal> や <literal>jing</literal> のような検証型 XML パーサーを使用することで行うことができます (たとえば <xref linkend="CreateProfile-Manual"/> をご覧ください) 。</para>
   <para>下記は XML 形式での制御ファイルの例です:</para>
   <example>
    <title>&ay; の制御ファイル (プロファイル)</title>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE profile&gt;
&lt;profile
  xmlns="http://www.suse.com/1.0/yast2ns"
  xmlns:config="http://www.suse.com/1.0/configns"&gt;
  &lt;partitioning config:type="list"&gt;
    &lt;drive&gt;
      &lt;device&gt;/dev/sda&lt;/device&gt;
      &lt;partitions config:type="list"&gt;
        &lt;partition&gt;
          &lt;filesystem config:type="symbol"&gt;btrfs&lt;/filesystem&gt;
          &lt;size&gt;10G&lt;/size&gt;
          &lt;mount&gt;/&lt;/mount&gt;
        &lt;/partition&gt;
        &lt;partition&gt;
          &lt;filesystem config:type="symbol"&gt;xfs&lt;/filesystem&gt;
          &lt;size&gt;120G&lt;/size&gt;
          &lt;mount&gt;/data&lt;/mount&gt;
        &lt;/partition&gt;
      &lt;/partitions&gt;
    &lt;/drive&gt;
  &lt;/partitioning&gt;
  &lt;scripts&gt;
    &lt;pre-scripts&gt;
      &lt;script&gt;
        &lt;interpreter&gt;shell&lt;/interpreter&gt;
        &lt;filename&gt;start.sh&lt;/filename&gt;
        &lt;source&gt;
        &lt;![CDATA[
#!/bin/sh
echo "Starting installation"
exit 0

]]&gt;

        &lt;/source&gt;
      &lt;/script&gt;
    &lt;/pre-scripts&gt;
  &lt;/scripts&gt;
&lt;/profile&gt;</screen>
   </example>
  </sect1>
  <sect1 xml:id="Profile-Structure">
   <title>構造</title>

   <para>下記は制御ファイルのコンテナで、この中に実際の設定を書き込んでいくものです。</para>

   <example>
    <title>制御ファイルのコンテナ</title>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE profile&gt;
&lt;profile
  xmlns="http://www.suse.com/1.0/yast2ns"
  xmlns:config="http://www.suse.com/1.0/configns"&gt;
  &lt;!-- リソース --&gt;
&lt;/profile&gt;</screen>
   </example>

   <para><literal>&lt;profile&gt;</literal> の要素 (ルートノード) には、 1 つもしくは複数のリソース要素を追加します。指定可能なリソース要素は、スキーマファイル内で指定されています。</para>

   <sect2 xml:id="Profile-Format-ressources">
    <title>リソースとプロパティ</title>
    <para>リソース要素には複数の重複しないプロパティ要素や子リソース要素を含めることができるほか、同じ子リソース要素を複数インスタンスとして追加することもできます。もちろん何も含めない指定も行うことができます。リソース要素内に含めることのできる要素は、スキーマファイル内で指定されています。</para>
    <para>プロパティ要素には値としてリテラルを指定することができます。もちろん値を指定しなくてもかまいません。それぞれのリソース要素内で指定可能なプロパティ要素とその値についても、スキーマファイル内で指定がされています。</para>
    <para>要素は他の要素に対するコンテナとする (リソース) ことができるほか、値としてリテラルを持つ (プロパティ) こともできますが、両方を同時に使用することはできません。この制限についても、スキーマファイル内に記述されています。 1 つ以上の値を持つ設定のコンポーネントは、プロパティ値内で組み込みのリストとして表現するか、入れ子型のリソースとして表現します。</para>
    <para><literal>&lt;foo&gt;&lt;/foo&gt;</literal> や <literal>&lt;bar/&gt;</literal> のような空要素は、処理済みのデータモデル内に存在すべきでは <emphasis>ありません</emphasis> 。通常、これらには適切な既定値を設定すべきです。意図的に空要素を指定したい場合は、 CDATA セクションを使用して <literal>&lt;foo&gt;&lt;![CDATA[]]&gt;&lt;/foo&gt;</literal> のように指定し、空文字列を設定してください。</para>
   </sect2>

   <sect2 xml:id="Profile-Format-ressources-nested">
    <title>入れ子になったリソース設定</title>
    <para>入れ子になったリソース要素を使用することで、任意の階層構造からなるツリー状の設定コンポーネントを作成することができます。</para>
    <para>入れ子になったリソースとしては、マップとリストの 2 種類が存在します。マップ (連想配列やハッシュ、辞書と呼ばれることもあります) にはタグ名とそれに対応する値の対を含めることができます。リスト (配列と呼ばれることもあります) には、単純に値の羅列を含めることができます。</para>
    <example>
     <title>入れ子になったリソース設定</title>
<screen>...
&lt;drive&gt;
  &lt;device&gt;/dev/sda&lt;/device&gt;
  &lt;partitions config:type="list"&gt;
     &lt;partition&gt;
        &lt;size&gt;10G&lt;/size&gt;
        &lt;mount&gt;/&lt;/mount&gt;
     &lt;/partition&gt;
     &lt;partition&gt;
        &lt;size&gt;1G&lt;/size&gt;
        &lt;mount&gt;/tmp&lt;/mount&gt;
     &lt;/partition&gt;
  &lt;/partitions&gt;
&lt;/drive&gt;
....</screen>
    </example>
    <para>上記の例では、 <literal>drive</literal> リソースは <literal>device</literal> プロパティと <literal>partitions</literal> リソースから構成されるマップの形態になっています。 <literal>partitions</literal> リソースは複数の <literal>partition</literal> から構成されるリストで、その <literal>partition</literal> リソースは <literal>size</literal> と <literal>mount</literal> のプロパティを含むマップの形態になっています。</para>
    <para>入れ子になったリソースの場合、既定ではマップとして処理されます。リストを使用したい場合は、 <literal>config:type="list"</literal> の属性を明示的に指定しなければなりません。</para>
   </sect2>

   <sect2 xml:id="Profile-Format-attributes">
    <title>属性</title>
    <para>グローバル属性は、リソースやプロパティ内のメタデータを定義する際に使用します。属性はコンテキストの切り替えを定義するために使用します。これらは上記の章に示されているプロパティの名前付けや型指定で使用されます。属性については独自のネームスペース内に存在していることから、既定のネームスペース内で予約語として扱う必要はありません。</para>
    <para><literal>config:type</literal> 属性は処理済みのデータモデル内で、リソースやプロパティの型を設定するためのものです。リソースの場合、リスト型を指定したい場合は <literal>list</literal> を設定する必要がありますが、マップ型の場合は既定の型であるため、属性の設定は不要となります。プロパティの場合、 <literal>boolean</literal> , <literal>symbol</literal> , <literal>integer</literal> の各型を指定することができます。こちらの場合は既定値は <literal>string</literal> となります。</para>

   <tip>
     <title>要素型の省略表記について</title>
    <para>&productname; <phrase os="sles;sled">15 SP3</phrase> <phrase os="osuse">15.3</phrase> <phrase os="slemicro">5.0</phrase> およびそれ以降のバージョンでは、 <literal>config:type</literal> の代わりに <literal>t</literal> という属性を使用することで、要素の型を指定することができます。</para>

<screen>&lt;mode t="boolean"&gt;true&lt;/mode&gt;</screen>
   </tip>
    
    <para>属性は基本的に任意指定ではありません。ただし、スキーマ内のさまざまな場所でさまざまな指定がされていて一貫性が無いことから、中には任意指定の属性も存在します。また、場所によっては、値を列挙するのにシンボルで表す場合があるほか、文字列を必要とするような場合も存在します。また一方のリソースでは <literal>config:type="integer"</literal> の指定が必要となるのに対して、他方では文字列属性で数値を処理する箇所もあります。またリソースによっては <literal>config:type="boolean"</literal> を使用するのに対して、他のリソースでは <literal>yes</literal> や <literal>1</literal> などを使用することもあります。詳しくはスキーマファイルをご覧ください。</para>
   </sect2>
  </sect1>
 </chapter>
