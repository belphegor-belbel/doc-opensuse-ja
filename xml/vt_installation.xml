<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-vt-installation">
  <title>仮想化コンポーネントのインストール</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <sect1 xml:id="introduction-install-virtualization-components">
    <title>概要</title>

    <para>1 つまたは複数のゲストシステム (&vmguest;) を実行する仮想化サーバ (&vmhost;) を動作させるには、サーバ内に仮想化コンポーネントをインストールする必要があります。インストールすべきコンポーネントは、利用したい仮想化技術によって異なります。</para>
  </sect1>
  <sect1 xml:id="install-virtualization-components">
    <title>仮想化コンポーネントのインストール</title>

    <para>&vmhost; を実行するのに必要な仮想化ツールをインストールするには、下記のいずれかの方式をとることができます:</para>

    <itemizedlist>
      <listitem>
        <para>&vmhost; 側での &productname; のインストール時に、システムの役割を選択する方式</para>
      </listitem>
      <listitem>
        <para>既にインストール済みで動作中の &productname; において、 <emphasis>&yast; 仮想化</emphasis> モジュールを実行する方式</para>
      </listitem>
      <listitem>
        <para>既にインストール済みで動作中の &productname; において、特定のパターンを選択してインストールする方式</para>
      </listitem>
    </itemizedlist>

    <sect2 xml:id="install-virtualization-components-system-role">
      <title>システムの役割の指定</title>
      <para>&vmhost; 側での &productname; のインストールの際、仮想化に必要なツール類全てをインストールするよう選択することができます。具体的にはインストールの際、 <guimenu>システムの役割</guimenu> 画面でそれを行います。</para>
      <figure>
        <title>システムの役割を選択する画面</title>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="virt-system-roles.png" width="75%"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="virt-system-roles.png" width="75%"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>ここで <guimenu>KVM 仮想化ホスト</guimenu> もしくは <guimenu>Xen 仮想化ホスト</guimenu> のいずれかの役割を選択してください。これで必要なソフトウエアが選択され、 &productname; のインストールと共に必要なツールもインストールされるようになります。</para>
      <tip>
        <para>どちらの仮想化ホストを選択した場合でも、 <filename>/var/lib/libvirt</filename> にマウントされる専用のパーティションが作成されるほか、 &firewalld; と &kdump; サービスの有効化がそれぞれ設定されます。</para>
      </tip>
    </sect2>

    <sect2 xml:id="install-virtualization-components-yast">
      <title><emphasis>&yast; 仮想化</emphasis> モジュールの実行</title>
      <para>&vmhost; 側での &productname; のインストール指定にもよりますが、通常はお使いのシステム内に仮想化ツールは全くインストールされません。必要なツールは <emphasis>&yast; 仮想化</emphasis> モジュールでハイパーバイザを選択することによって、インストールを行うことができます。</para>
      <tip>
        <para>なお、 <emphasis>&yast; 仮想化</emphasis> モジュールは <package>yast2-vm</package> パッケージ内に含まれています。仮想化コンポーネントをインストールするにあたっては、あらかじめ &vmhost; 内に本パッケージをインストールしておいてください。</para>
      </tip>
      <procedure>
        <title>&kvm; 環境のインストール</title>
        <para>&kvm; 仮想化環境や関連ツールをインストールするには、下記の手順を実施します:</para>
        <step>
          <para>&yast; を起動し、 <menuchoice> <guimenu>仮想化</guimenu> <guimenu>ハイパーバイザとツールのインストール</guimenu></menuchoice> を選択します。</para>
        </step>
        <step>
          <para><guimenu>&kvm; サーバ</guimenu> を選択すると、最小限の &qemu; ツールと &kvm; 環境をインストールすることができます。 &libvirt; ベースの管理スタックも必要とする場合は、 <guimenu>&kvm; ツール</guimenu> も選択してください。選択が終わったら、 <guimenu>了解</guimenu> を押します。</para>
        </step>
        <step>
          <para>&yast; でのインストールを行った場合は、  &vmhost; の設定の際、自動的にブリッジを設定するかどうかの確認を表示します。 &vmguest; に対して適切なネットワーク環境を提供するのに必要な設定であるため、通常は <guimenu>はい</guimenu> を押して進めてください。ネットワークが不要である場合は、 <guimenu>いいえ</guimenu> を押してもかまいません。</para>
        </step>
        <step>
          <para>インストールが終わったら、そのまま &vmguest; の設定を開始することができます。 &vmhost; の再起動は不要です。</para>
        </step>
      </procedure>
      <procedure>
        <title>&xen; 環境のインストール</title>
        <para>&xen; 仮想化環境をインストールするには、下記の手順を実施します:</para>
        <step>
          <para>&yast; を起動し、 <menuchoice> <guimenu>仮想化</guimenu> <guimenu>ハイパーバイザとツールのインストール</guimenu></menuchoice> を選択します。</para>
        </step>
        <step>
          <para><guimenu>&xen; サーバ</guimenu> を選択すると、最小限の &xen; 環境をインストールすることができます。 &libvirt; ベースの管理スタックも必要とする場合は、 <guimenu>&xen; ツール</guimenu> も選択してください。選択が終わったら、 <guimenu>了解</guimenu> を押します。</para>
        </step>
        <step>
          <para>&yast; でのインストールを行った場合は、  &vmhost; の設定の際、自動的にブリッジを設定するかどうかの確認を表示します。 &vmguest; に対して適切なネットワーク環境を提供するのに必要な設定であるため、通常は <guimenu>はい</guimenu> を押して進めてください。ネットワークが不要である場合は、 <guimenu>いいえ</guimenu> を押してもかまいません。</para>
        </step>
        <step>
          <para>インストールが終わったらシステムを再起動します。起動時に <emphasis>&xen; カーネル</emphasis> を選択してください。</para>
          <tip>
            <title>既定の起動カーネルについて</title>
            <para>全ての機能が期待通りに動作することを確認したら、 &yast; を利用して既定で起動するカーネルを変更し、 &xen; を有効化したカーネルを使用するようにしてください。既定のカーネルを変更する方法については、 <xref linkend="sec-grub2-yast2-config"/> をお読みください。</para>
          </tip>
        </step>
      </procedure>
    </sect2>

    <sect2 xml:id="install-virtualization-components-pattern">
      <title>特定のインストールパターンの選択</title>
      <para>&productname; のソフトウエアリポジトリでは、関連するソフトウエアパッケージをまとめて <emphasis>インストールパターン</emphasis> という形で提供しています。動作中の &productname; でこれらのパターンをインストールすることで、特定の仮想化に必要なコンポーネントをまとめてインストールすることができます。パターンをインストールするには <command>zypper</command> コマンドを下記のように入力して実行します:</para>
<screen>zypper install -t pattern <replaceable>パターン名</replaceable></screen>
      <para>&kvm; 環境向けには下記のようなパターンが用意されています:</para>
      <variablelist>
        <varlistentry>
          <term><literal>kvm_server</literal></term>
          <listitem>
            <para>&kvm; および &qemu; を利用するための基本的な環境をインストールします。</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>kvm_tools</literal></term>
          <listitem>
            <para>&kvm; 環境で &vmguest; を管理したり監視したりするための &libvirt; ツールをインストールします。</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>&xen; 環境向けには下記のようなパターンが用意されています:</para>
      <variablelist>
        <varlistentry>
          <term><literal>xen_server</literal></term>
          <listitem>
            <para>基本的な &xen; &vmhost; をインストールします。</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>xen_tools</literal></term>
          <listitem>
            <para>&xen; 環境で &vmguest; を管理したり監視したりするための &libvirt; ツールをインストールします。</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect2>
  </sect1>
  <sect1 xml:id="sec-vt-installation-ovmf">
    <title>UEFI サポートのインストール</title>

    <note>
      <para>&uefisecboot; は &x86-64; ゲストのみをサポート対象としています。また &kvm; ゲストの場合、 OVMF ファームウエアを利用する &uefisecboot; のみをサポートします。 &xen; HVM ゲストでも OVMF ファームウエアからの起動に対応していますが、 &uefisecboot; はサポートしていません。</para>
    </note>

    <para>UEFI への対応は <emphasis>OVMF</emphasis> ( <emphasis>Open Virtual Machine Firmware</emphasis> ) で提供されています。 UEFI での起動を有効化するには、まずお使いのアーキテクチャに合わせて <package>qemu-ovmf-x86_64</package> もしくは <package>qemu-uefi-aarch64</package> パッケージをインストールしてください。</para>

    <para>仮想マシンで使用されるファームウエアは自動的に選択されます。この自動選択の機能は、上述のファームウエアパッケージ内にある *.json ファイルをベースにしています。 &libvirt; &qemu; ドライバは読み込み時にこれらのファイルを処理して、ファームウエア側での機能を知ることができるようになっています。その後、 &libvirt; 側でユーザ側の要件に合わせ、必要な機能 (&uefisecboot; の有効可否など) のあるファームウエアを選択します。</para>

    <para>たとえば &uefisecboot; 機能付きの EFI を有効化するには、下記のような設定を追加します:</para>

<screen>
&lt;os firmware='efi'&gt;
 &lt;loader secure='yes'/&gt;
&lt;/os&gt;
</screen>

    <para><package>qemu-ovmf-x86_64</package> パッケージには、下記のような重要な UEFI ファームウエアイメージが含まれています。これらは様々な &vmguest; に対して、 &uefisecboot; の機能を提供します:</para>

<screen>
&prompt.root;<command>rpm -ql qemu-ovmf-x86_64</command>
[...]
/usr/share/qemu/ovmf-x86_64-smm-ms-code.bin
/usr/share/qemu/ovmf-x86_64-smm-ms-vars.bin
/usr/share/qemu/ovmf-x86_64-smm-opensuse-code.bin
/usr/share/qemu/ovmf-x86_64-smm-opensuse-vars.bin
/usr/share/qemu/ovmf-x86_64-smm-suse-code.bin
/usr/share/qemu/ovmf-x86_64-smm-suse-vars.bin
[...]
</screen>

    <itemizedlist>
      <listitem>
        <para>&sle; ゲストで &uefisecboot; を使用したい場合は、 <filename>ovmf-x86_64-smm-suse-code.bin</filename> ファームウエアをお使いください。</para>
      </listitem>
      <listitem>
        <para>&opensuse; ゲストで &uefisecboot; を使用したい場合は、 <filename>ovmf-x86_64-smm-opensuse-code.bin</filename> ファームウエアをお使いください。</para>
      </listitem>
      <listitem>
        <para>&mswin; ゲストで &uefisecboot; を使用したい場合は、 <filename>ovmf-x86_64-smm-ms-code.bin</filename> ファームウエアをお使いください。</para>
      </listitem>
    </itemizedlist>

    <para>&aarch64; アーキテクチャの場合、パッケージ名は <package>qemu-uefi-aarch32</package> になります:</para>

<screen>
&prompt.root;<command>rpm -ql qemu-uefi-aarch32</command>
[...]
/usr/share/qemu/aavmf-aarch32-code.bin
/usr/share/qemu/aavmf-aarch32-vars.bin
/usr/share/qemu/firmware
/usr/share/qemu/firmware/60-aavmf-aarch32.json
/usr/share/qemu/qemu-uefi-aarch32.bin
</screen>

    <para><filename>*-code.bin</filename> ファイルは UEFI ファームウエアです。 <filename>*-vars.bin</filename> ファイルは対応する変数ストアイメージで、 VM ごとの不揮発性ストア向けのテンプレートとして使用できるファイルです。 &libvirt; は VM を初めて作成する際、指定された <literal>vars</literal> テンプレートを VM ごとのパス (<filename>/var/lib/libvirt/qemu/nvram/</filename>) にコピーします。なお、ファイル名の中に <literal>code</literal> や <literal>vars</literal> を含まないファイルは、単独の UEFI イメージとして使用することができるものです。これらは VM のシャットダウン後には UEFI 変数が維持されない仕組みであることから、有用ではありません。</para>

    <para><filename>*-ms*.bin</filename> ファイルには、実際のハードウエア内に存在する  UEFI CA の鍵が含まれています。そのため、これらは &libvirt; の既定で設定されるようになっています。同様に、 <filename>*-suse*.bin</filename> ファイルには、事前にインストールされる &suse; の鍵が含まれています。このほか、事前にインストールされる鍵の無いファイルも提供されています。</para>

    <para>詳しくは <xref linkend="vle-libvirt-inst-virt-install-ovmf"/> と <link xlink:href="http://www.linux-kvm.org/downloads/lersek/ovmf-whitepaper-c770f8c.txt"/> (英語) をお読みください。</para>
  </sect1>
  <sect1 xml:id="sec-vt-installation-nested-vms">
    <title>&kvm; での入れ子型仮想化 (nested virtualization) の有効化</title>

    <important>
      <title>技術プレビューである件について</title>
      <para>&kvm; の入れ子型仮想化は現在技術プレビューの段階にあります。そのため、テスト目的にのみ使用されるべきものであり、サポート対象にも入っておりません。</para>
    </important>

    <para>入れ子型のゲストとは、 &kvm; ゲスト内で &kvm; のホストを動作させて、そのホスト内でさらに &kvm; ゲストを動作させることを指します。入れ子型の仮想化を説明するにあたっては、下記のような仮想化レイヤを使用します:</para>

    <variablelist>
      <varlistentry>
        <term>L0</term>
        <listitem>
          <para>&kvm; を動作させる物理マシンを意味します。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>L1</term>
        <listitem>
          <para>L0 内で動作する (1 段階目の) 仮想マシンを意味します。この中ではさらに &kvm; を動作させますが、これを <emphasis>ゲストハイパーバイザ</emphasis> と呼びます。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>L2</term>
        <listitem>
          <para>L1 内で動作する (2 段階目の) 仮想マシンを意味します。これを <emphasis>入れ子ゲスト</emphasis> と呼びます。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>入れ子型の仮想化を使用することで様々なメリットを受けることができます。たとえば下記のような用途が考えられます:</para>

    <itemizedlist>
      <listitem>
        <para>クラウド環境で必要な仮想化ソリューションを動作させ、その中に必要な仮想マシンを配置することができるようになります。</para>
      </listitem>
      <listitem>
        <para>ハイパーバイザ自身のライブマイグレーションを行うことができるようになります。もちろんその中のゲスト (仮想マシン) も一括で移行することができます。</para>
        <note>
          <para>入れ子型の仮想化を行った仮想マシンの場合、ライブマイグレーションには対応していません。</para>
        </note>
      </listitem>
      <listitem>
        <para>ソフトウエアの開発やテストにも使用することができます。</para>
      </listitem>
    </itemizedlist>

    <para>入れ子型の仮想化を有効化するには、まず今読み込まれているモジュールをいったん解除したあと、 <option>nested</option> &kvm; モジュールパラメータを指定して再読み込みを行う必要があります:</para>

    <itemizedlist>
      <listitem>
        <para>Intel CPU の場合、下記のように入力して実行します:</para>
<screen>
&prompt.sudo;modprobe -r kvm_intel &amp;&amp; modprobe kvm_intel nested=1
</screen>
      </listitem>
      <listitem>
        <para>AMD CPU の場合は、下記のように入力して実行します:</para>
<screen>
&prompt.sudo;modprobe -r kvm_amd &amp;&amp; modprobe kvm_amd nested=1
</screen>
      </listitem>
    </itemizedlist>

    <para>入れ子型の仮想化を恒久的に使用したい場合は、 <filename>/etc/modprobe.d/kvm_*.conf</filename> ファイルを作成して、その中に <option>nested</option> &kvm; モジュールパラメータを指定してください:</para>

    <itemizedlist>
      <listitem>
        <para>Intel CPU の場合は、 <filename>/etc/modprobe.d/kvm_intel.conf</filename> ファイルを作成して、下記のような行を記述します:</para>
<screen>options kvm_intel nested=1</screen>
      </listitem>
      <listitem>
        <para>AMD CPU の場合は、 <filename>/etc/modprobe.d/kvm_amd.conf</filename> ファイルを作成して、下記のような行を記述します:</para>
<screen>options kvm_amd nested=1</screen>
      </listitem>
    </itemizedlist>

    <para>L0 ホストが入れ子型の仮想化に対応していれば、 L1 ゲストに下記のいずれかの修正を加えることで、 L1 内で仮想化ができるようになります:</para>

    <itemizedlist>
      <listitem>
        <para>&qemu; のコマンドラインオプションに <option>-cpu host</option> を追加します。</para>
      </listitem>
      <listitem>
        <para>&qemu; のコマンドラインオプションの <option>-cpu</option> 以下に、 <literal>vmx</literal> (Intel CPU の場合) もしくは <literal>svm</literal> (AMD CPU の場合) を追加します。これにより、仮想 CPU 内で仮想化ができるようになります。</para>
      </listitem>
    </itemizedlist>

    <sect2 xml:id="sec-vt-installation-nested-vms-esxi">
      <title>&esx; のゲストハイパーバイザとしての使用</title>
      <para>&kvm; ハイパーバイザ内で入れ子型の &esx; ハイパーバイザを動作させると、ネットワークの接続が不安定になる事象が発生します。この問題は特に、 &kvm; ゲストとハイパーバイザの間、もしくは &kvm; ゲストと外部ネットワークとの間で発生します。これは &kvm; ゲストの設定で、下記のような既定の CPU 設定が存在する場合に生じる問題です:</para>
<screen>&lt;cpu mode='host-model' check='partial'/&gt;</screen>
      <para>この問題を解決するには、 CPU の設定を下記のように変更してください:</para>
<screen>
[...]
&lt;cpu mode='host-passthrough' check='none'&gt;
 &lt;cache mode='passthrough'/&gt;
&lt;/cpu&gt;
[...]
</screen>
    </sect2>
  </sect1>
</chapter>
