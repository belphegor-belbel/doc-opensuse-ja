<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-vt-installation">
 <title>仮想化コンポーネントのインストール</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker>
   </dm:bugtracker>
  </dm:docmanager>
 </info>
 <para>&vmhost; を実行するのに必要な仮想化ツールをインストールするには、下記の 2 つの方法があります:</para>
 <itemizedlist>
  <listitem>
   <para>OS のインストール時にシステムの役割を選択する方法</para>
  </listitem>
  <listitem>
   <para>OS のインストール後に &yast; モジュール経由でインストールする方法</para>
  </listitem>
 </itemizedlist>

 <sect1 xml:id="vt-installation-system-role">
  <title>システムの役割の指定</title>
  <para>&productname; のインストールの際、仮想化に必要なツール類全てをインストールするよう選択することができます。インストール手順 (詳しくは <xref linkend="cha-install"/> をお読みください) の途中で、下記のような役割選択の画面が表示されます。</para>
  <figure>
   <title>システムの役割を選択する画面</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="virt-system-roles.png" width="75%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="virt-system-roles.png" width="75%"/>
    </imageobject>
   </mediaobject>
  </figure>
  <para>ここで <guimenu>KVM 仮想化ホスト</guimenu> もしくは <guimenu>Xen 仮想化ホスト</guimenu> のいずれかの役割を選択してください。これで必要なソフトウエアが選択され、 OS のインストールと共に必要なツールもインストールされるようになります。</para>
  <tip>
   <para>なお、仮想化を選択すると、 <filename>/var/lib/libvirt</filename> にマウントされる専用のパーティションが作成されるほか、ファイアウオールと &kdump; サービスの有効化がそれぞれ設定されます。</para>
  </tip>
 </sect1>

 <sect1 xml:id="vt-installation-yast">
  <title><package>yast2-vm</package> モジュールの実行</title>
  <para>実際に利用したい仮想化環境にもよりますが、インストール直後の状態では、必要な仮想化ツールが全くインストールされていません。必要なツールは、 &yast; モジュールの <menuchoice> <guimenu>仮想化</guimenu> <guimenu>ハイパーバイザとツールのインストール</guimenu></menuchoice> でハイパーバイザを設定することによって、インストールを行なうことができます。 &yast; 内に上記のモジュールが見つからない場合は、 <package>yast2-vm</package> パッケージをインストールしてください。</para>

  <sect2 xml:id="sec-vt-installation-kvm">
   <title>&kvm; のインストール</title>

   <para>&kvm; 本体や KVM ツールをインストールするには、下記の手順を実施します:</para>

   <procedure>
    <step>
     <para>まずは <package>yast2-vm</package> パッケージがインストールされていることを確認します。このパッケージは &yast; の設定ツールで、仮想化のハイパーバイザのインストールを簡略化することができるものです。</para>
    </step>
    <step>
     <para>&yast; を起動し、 <menuchoice> <guimenu>仮想化</guimenu> <guimenu>ハイパーバイザとツールのインストール</guimenu></menuchoice> を選択します。</para>
    </step>
    <step>
     <para><guimenu>&kvm; サーバ</guimenu> を選択すると、最小限の &qemu; ツールまでをインストールすることができます。 &libvirt; ベースの管理スタックも必要とする場合は、 <guimenu>&kvm; ツール</guimenu> も選択してください。選択が終わったら、 <guimenu>了解</guimenu> を押します。</para>
    </step>
    <step>
     <para>&vmguest; に対して通常のネットワーク機能を使用できるようにするには、ネットワークブリッジを設定する必要があります。 &yast; では &vmhost; の設定の際、自動的にブリッジを設定するように確認を表示します。通常は <guimenu>はい</guimenu> を押してそのまま進めてください。ネットワークが不要である場合は、 <guimenu>いいえ</guimenu> を押してもかまいません。</para>
    </step>
    <step>
     <para>インストールが終わったら、そのまま &vmguest; の設定を開始することができます。 &vmhost; の再起動は不要です。</para>
    </step>
   </procedure>
  </sect2>
  <sect2 xml:id="sec-vt-installation-xen">
   <title>&xen; のインストール</title>

   <para>&xen; 本体や &xen; ツールをインストールするには、下記の手順を実施します:</para>

   <procedure>
    <step>
     <para>&yast; を起動し、 <menuchoice> <guimenu>仮想化</guimenu> <guimenu>ハイパーバイザとツールのインストール</guimenu></menuchoice> を選択します。</para>
    </step>
    <step>
     <para><guimenu>&xen; サーバ</guimenu> を選択すると、最小限の &xen; ツールまでをインストールすることができます。 &libvirt; ベースの管理スタックも必要とする場合は、 <guimenu>&xen; ツール</guimenu> も選択してください。選択が終わったら、 <guimenu>了解</guimenu> を押します。</para>
    </step>
    <step>
     <para>&vmguest; に対して通常のネットワーク機能を使用できるようにするには、ネットワークブリッジを設定する必要があります。 &yast; では &vmhost; の設定の際、自動的にブリッジを設定するように確認を表示します。通常は <guimenu>はい</guimenu> を押してそのまま進めてください。ネットワークが不要である場合は、 <guimenu>いいえ</guimenu> を押してもかまいません。</para>
    </step>
    <step>
     <para>インストールが終わったらシステムを再起動します。起動時に <emphasis>&xen; カーネル</emphasis> を選択してください。</para>
     <tip>
      <title>既定の起動カーネルについて</title>
      <para>全ての機能が期待通りに動作することを確認したら、 &yast; を利用して既定で起動するカーネルを変更し、 &xen; を有効化したカーネルを使用するようにしてください。既定のカーネルを変更する方法については、 <xref linkend="sec-grub2-yast2-config"/> をお読みください。</para>
     </tip>
    </step>
   </procedure>
  </sect2>
 </sect1>

 <!-- LXC deprecated SLE15SP3
 <sect1 xml:id="sec-vt-installation-containers">
  <title>Installing containers</title>

  <para>
   To install containers, proceed as follows:
  </para>

  <procedure>
   <step>
    <para>
     Start &yast; and choose <menuchoice>
     <guimenu>Virtualization</guimenu> <guimenu>Install Hypervisor and
     Tools</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Select <guimenu>libvirt lxc daemon</guimenu> and confirm with
     <guimenu>Accept</guimenu>.
    </para>
</step>
-->
<!-- ========================================================= -->
<!-- TODO Either fix Yast to reload apparmor or describe it here -->
<!-- ========================================================= -->
<!--
  </procedure>
 </sect1>
 -->
 <sect1 xml:id="sec-vt-installation-patterns">
  <title>パターン</title>

  <para>Zypper を利用してパターンを選択することで、仮想化パッケージをインストールすることもできます。 <command>zypper in -t pattern</command> <replaceable>パターン名</replaceable> のように入力して実行してください。利用可能なパターン名は下記のとおりです:</para>

  <variablelist>
   <varlistentry>
    <term>KVM</term>
    <listitem>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para><systemitem class="resource">kvm_server</systemitem> : &kvm; の &vmhost; と、管理用の &qemu; ツールをインストールします。</para>
      </listitem>
      <listitem>
       <para><systemitem class="resource">kvm_tools</systemitem> : &vmguest; を管理したり監視したりするための、 &libvirt; ツールをインストールします。</para>
      </listitem>
     </itemizedlist>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>Xen</term>
    <listitem>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para><systemitem class="resource">xen_server</systemitem> : &xen; の &vmhost; と、管理用の &xen; ツールをインストールします。</para>
      </listitem>
      <listitem>
       <para><systemitem class="resource">xen_tools</systemitem> : &vmguest; を管理したり監視したりするための、 &libvirt; ツールをインストールします。</para>
      </listitem>
     </itemizedlist>
    </listitem>
</varlistentry>
<!--
   <varlistentry>
    <term>Containers</term>
    <listitem>
     <para>
      There is no pattern for containers; install the
      <emphasis>libvirt-daemon-lxc</emphasis> package.
     </para>
    </listitem>
</varlistentry>
-->
  </variablelist>
 </sect1>

 <sect1 xml:id="sec-vt-installation-ovmf">
  <title>UEFI サポートのインストール</title>
  <note>
   <para>&kvm; ゲストの場合、 OVMF ファームウエアを使用することで Secure Boot に対応させることができます。 &xen; ゲストの場合は、 OVMF からの起動には対応しているものの、 Secure Boot には対応できません。</para>
  </note>
  <para>UEFI への対応は <emphasis>OVMF</emphasis> ( <emphasis>Open Virtual Machine Firmware</emphasis> ) で提供されています。 UEFI での起動を有効化するには、まずお使いのアーキテクチャに合わせて <package>qemu-ovmf-x86_64</package> もしくは <package>qemu-uefi-aarch64</package> パッケージをインストールしてください。</para>
  <para>仮想マシンで使用されるファームウエアは自動的に選択されます。この自動選択の機能は <package>qemu-ovmf-<replaceable>ARCH</replaceable></package> パッケージ内の *.json ファイルをベースにしています。 &libvirt; &qemu; ドライバは読み込み時にこれらのファイルを処理して、ファームウエア側での機能を知ることができるようになっています。その後、 &libvirt; 側でユーザ側の要件に合わせ、必要な機能 (Secure Boot の有効可否など) のあるファームウエアを選択します。</para>
  <para>たとえば EFI で Secure Boot を有効化するには、下記のような設定を追加します:</para>
<screen>
&lt;os firmware='efi'&gt;
 &lt;loader secure='yes'/&gt;
&lt;/os&gt;
</screen>
  <para><package>qemu-ovmf-<replaceable>ARCH</replaceable></package> パッケージには下記のようなファイルが含まれています:</para>
<screen>
&prompt.root;<command>rpm -ql qemu-ovmf-x86_64</command>
[...]
/usr/share/qemu/ovmf-x86_64-ms-code.bin
/usr/share/qemu/ovmf-x86_64-ms-vars.bin
/usr/ddshare/qemu/ovmf-x86_64-ms.bin
/usr/share/qemu/ovmf-x86_64-suse-code.bin
/usr/share/qemu/ovmf-x86_64-suse-vars.bin
/usr/share/qemu/ovmf-x86_64-suse.bin
[...]
</screen>
  <para><filename>*-code.bin</filename> ファイルは UEFI ファームウエアです。 <filename>*-vars.bin</filename> ファイルは対応する変数ストアイメージで、 VM ごとの不揮発性ストア向けのテンプレートとして使用できるファイルです。 &libvirt; は VM を初めて作成する際、指定された <literal>vars</literal> テンプレートを VM ごとのパス (<filename>/var/lib/libvirt/qemu/nvram/</filename>) にコピーします。なお、ファイル名の中に <literal>code</literal> や <literal>vars</literal> を含まないファイルは、単独の UEFI イメージとして使用することができるものです。これらは VM のシャットダウン後には UEFI 変数が維持されない仕組みであることから、有用ではありません。</para>
  <para><filename>*-ms*.bin</filename> ファイルには、実際のハードウエア内に存在する Microsoft 社の鍵が含まれています。そのため、これらは &libvirt; の既定で設定されるようになっています。同様に、 <filename>*-suse*.bin</filename> ファイルには、事前にインストールされる &suse; の鍵が含まれています。このほか、事前にインストールされる鍵の無いファイルも提供されています。</para>
  <para>詳しくは <xref linkend="vle-libvirt-inst-virt-install-ovmf"/> と <link xlink:href="http://www.linux-kvm.org/downloads/lersek/ovmf-whitepaper-c770f8c.txt"/> (英語) をお読みください。</para>
 </sect1>
 <sect1 xml:id="sec-vt-installation-nested-vms">
  <title>&kvm; での入れ子型仮想化 (nested virtualization) の有効化</title>

  <important>
   <title>技術プレビューである件について</title>
   <para>&kvm; の入れ子型仮想化は現在技術プレビューの段階にあります。そのため、テスト目的にのみ使用されるべきものであり、サポート対象にも入っておりません。</para>
  </important>

  <para>入れ子型のゲストとは、 &kvm; ゲスト内で &kvm; のホストを動作させて、そのホスト内でさらに &kvm; ゲストを動作させることを指します。入れ子型の仮想化を説明するにあたっては、下記のような仮想化レイヤを使用します:</para>

  <variablelist>
   <varlistentry>
    <term>L0</term>
    <listitem>
     <para>&kvm; を動作させる物理マシンを意味します。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>L1</term>
    <listitem>
     <para>L0 内で動作する (1 段階目の) 仮想マシンを意味します。この中ではさらに &kvm; を動作させますが、これを <emphasis>ゲストハイパーバイザ</emphasis> と呼びます。</para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>L2</term>
    <listitem>
     <para>L1 内で動作する (2 段階目の) 仮想マシンを意味します。これを <emphasis>入れ子ゲスト</emphasis> と呼びます。</para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>入れ子型の仮想化を使用することで様々なメリットを受けることができます。たとえば下記のような用途が考えられます:</para>

  <itemizedlist>
   <listitem>
    <para>クラウド環境で必要な仮想化ソリューションを動作させ、その中に必要な仮想マシンを配置することができるようになります。</para>
   </listitem>
   <listitem>
    <para>ハイパーバイザ自身のライブマイグレーションを行なうことができるようになります。もちろんその中のゲスト (仮想マシン) も一括で移行することができます。</para>
   </listitem>
   <listitem>
    <para>ソフトウエアの開発やテストにも使用することができます。</para>
   </listitem>
  </itemizedlist>

  <para>入れ子型の仮想化を有効化するには、まず今読み込まれているモジュールをいったん解除したあと、 <option>nested</option> &kvm; モジュールパラメータを指定して再読み込みを行なう必要があります:</para>

  <itemizedlist>
   <listitem>
    <para>Intel CPU の場合、下記のように入力して実行します:</para>
<screen>
&prompt.sudo;modprobe -r kvm_intel &amp;&amp; modprobe kvm_intel nested=1
</screen>
   </listitem>
   <listitem>
    <para>AMD CPU の場合は、下記のように入力して実行します:</para>
<screen>
&prompt.sudo;modprobe -r kvm_amd &amp;&amp; modprobe kvm_amd nested=1
</screen>
   </listitem>
  </itemizedlist>

  <para>入れ子型の仮想化を恒久的に使用したい場合は、 <filename>/etc/modprobe.d/kvm_*.conf</filename> ファイルを作成して、その中に <option>nested</option> &kvm; モジュールパラメータを指定してください:</para>

  <itemizedlist>
   <listitem>
    <para>Intel CPU の場合は、 <filename>/etc/modprobe.d/kvm_intel.conf</filename> ファイルを作成して、下記のような行を記述します:</para>
    <screen>options kvm_intel nested=Y</screen>
   </listitem>
   <listitem>
    <para>AMD CPU の場合は、 <filename>/etc/modprobe.d/kvm_amd.conf</filename> ファイルを作成して、下記のような行を記述します:</para>
    <screen>options kvm_amd nested=Y</screen>
   </listitem>
  </itemizedlist>

  <para>L0 ホストが入れ子型の仮想化に対応していれば、 L1 ゲストに下記のいずれかの修正を加えることで、 L1 内で仮想化ができるようになります:</para>

  <itemizedlist>
   <listitem>
    <para>&qemu; のコマンドラインオプションに <option>-cpu host</option> を追加します。</para>
   </listitem>
   <listitem>
    <para>&qemu; のコマンドラインオプションの <option>-cpu</option> 以下に、 <literal>vmx</literal> (Intel CPU の場合) もしくは <literal>svm</literal> (AMD CPU の場合) を追加します。これにより、仮想 CPU 内で仮想化ができるようになります。</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
