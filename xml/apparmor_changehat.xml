<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-apparmor-hat">
 <title>チェンジハット機能による Web アプリケーションのプロファイル作成</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>&aareg; のプロファイルは本来、個別のプログラムやプロセスに対するセキュリティポリシーを表わすものです。つまり、実行可能なプログラムに対してプロファイルを割り当てることになります。ところが、プログラムの一部では他の部分とは異なるアクセス許可が必要となることもあります。このような場合は、 <quote>チェンジハット</quote> の機能を利用して、メインのプログラムに対して適用されているものとは異なるセキュリティコンテキストを適用するように設定します。このような <quote>異なるセキュリティコンテキスト</quote> のことを、 <emphasis>ハット</emphasis> や <emphasis>サブプロファイル</emphasis> などと呼び、 <!-- NOTE: additional description begins --> これを変更する行為を <emphasis>チェンジハット</emphasis> と呼びます。<!-- NOTE: additional description ends --> </para>
 <para>チェンジハット機能は、 &aa; のプロファイルの中からプログラムに対して <emphasis>ハット</emphasis> を変更する機能を提供します。これにより、プロセスごとの制限よりもずっと精密なセキュリティを設定することができます。また、この機能はそれぞれのアプリケーションが <quote>チェンジハット対応</quote> として作られている必要があります。これはアプリケーションの実行時、特定のタイミングで &aa; のモジュールに要求を送信して、ドメインを切り替える処理のことを指します。チェンジハット対応のアプリケーションの例としては、 Apache Web サーバなどがあります。</para>
 <para>1 つのプロファイルに対しては、任意の数のサブプロファイルを作成することができますが、 2 段階までしか対応していないことに注意する必要があります。つまり、サブプロファイルから更に子となるプロファイルを作成することはできません。また、サブプロファイルは個別のプロファイルとして作成する必要があります。サブプロファイルの名前は、元々のプロファイルの名前の末尾に <literal>^</literal> を付け、その後ろにサブプロファイルそのものの名前を指定します。</para>
 <para>サブプロファイルは親のプロファイル内に含まれていてもかまいませんし、個別のファイルとして存在していてもかまいません。特に多数のハットを必要とするようなサイトであれば、後者のほうがお勧めです。これにより、ハット単位でポリシーキャッシュ機能が働くため、サブプロファイル側の変更を行なった場合に処理を減らすことができるためです。逆にすべてのハットが親のプロファイル内に含まれている場合、親プロファイル全体を再コンパイルしなければならなくなります。</para>
 <para>ハットとして使用する予定の外部サブプロファイルがある場合、そのサブプロファイルの冒頭には <literal>hat</literal> もしくは <literal>^</literal> 文字で始まらなければなりません。</para>
 <para>下記の 2 つのサブプロファイルは、いずれもハットとして使用 <emphasis>できない</emphasis> ものです:</para>
<screen>/foo//bar { }</screen>
 <para>"\n  <!-- NOTE: nothing needed for Japanese -->\n"</para>
<screen>profile /foo//bar { }</screen>
 <para>逆に、下記の 2 つはいずれもハットとして扱われます:</para>
<screen>^/foo//bar { }</screen>
 <para>"\n  <!-- NOTE: nothing needed for Japanese -->\n"</para>
<screen>hat /foo//bar { } # (vim では、この書式はハイライト表示されません)</screen>
 <para>なお、ハットを使用する場合のセキュリティは、完全なプロファイルを使用する場合に比べると、比較的弱くなることに注意してください。プログラム内に特定の種類のバグが存在した場合、攻撃者はプロファイル内に含まれるハットに退避することができてしまいます。これは、ハットのセキュリティがプロセス側で保持される機密鍵のみによって成り立っているためで、ハット側内のコードからは鍵に対するアクセスを許可してはならないことによるものです。そのためチェンジハット機能は、プロセス内に含まれるメモリに対して直接的にアクセスする手段のない、インタプリタ型の言語 (Perl, PHP, Java など) で作成されたアプリケーションサーバに対して、最も便利な仕組みとなっています。</para>
 <para>本章の以下の項目では、 Apache でのチェンジハット機能の使用方法について説明しています。この Apache では <literal>mod_perl</literal> および <literal>mod_php</literal> を利用して、 Web サーバコンポーネントを動作させているものとします。同様のアプローチで、 Apache における <literal>mod_apparmor</literal> と同様 (詳しくは <xref linkend="sec-apparmor-hat-config-directives"/> で説明しています) に、その他のアプリケーションサーバでもチェンジハット機能を利用することができます。</para>
 <tip>
  <title>さらなる情報について</title>
  <para>更に詳しい情報をご希望の場合は、 <command>change_hat</command> のマニュアルページをお読みください。</para>
 </tip>
 <sect1 xml:id="sec-apparmor-hat-config" role="General">
  <title><systemitem>mod_apparmor</systemitem> を利用するための Apache の設定</title>

  <para>&aa; には、 Apache Web サーバ <phrase os="sled"> (&sls; のみに含まれています)</phrase> 向けの <literal>mod_apparmor</literal> (<systemitem class="resource">apache2-mod-apparmor</systemitem> パッケージ) が提供されています。このモジュールを使用することで、 Apache Web サーバをチェンジハット対応にすることができます。 Apache Web サーバと共にインストールしてください。</para>

  <para>Apache がチェンジハット対応になることで、受信したそれぞれの URI に対して、下記のような &aa; セキュリティプロファイルが存在していないかどうかを調べます。</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>URI 固有のハット。例: <filename>^www_app_name/templates/classic/images/bar_left.gif</filename></para>
   </listitem>
   <listitem>
    <para><literal>DEFAULT_URI</literal></para>
   </listitem>
   <listitem>
    <para><literal>HANDLING_UNTRUSTED_INPUT</literal></para>
   </listitem>
  </itemizedlist>

  <note>
   <title>Apache の設定について</title>
   <para><systemitem class="resource">apache2-mod-apparmor</systemitem> をインストールしたあとは、モジュールを有効化してから、下記のように実行して Apache を再起動します:</para>
<screen>&prompt.user;a2enmod apparmor &amp;&amp; sudo systemctl reload apache2</screen>
  </note>

  <para>Apache は純粋なテキスト形式の設定ファイルにディレクティブを配置することで、設定を行なうことができます。メインとなる設定ファイルは <filename>/etc/apache2/httpd.conf</filename> です。 Apache を独自にコンパイルして使用している場合は、コンパイル時の設定にあわせてファイルを選択してください。ディレクティブは Apache の動作を変更するためのもので、設定ファイル内の任意の場所に配置することができます。メインの設定ファイルを変更したあとは、 <command>sudo systemctl reload apache2</command> を実行することで、変更点を反映させることができます。</para>

  <sect2 xml:id="sec-apparmor-hat-config-vhost">
   <title>仮想ホストのディレクティブ</title>
   <para>&lt;VirtualHost&gt; と &lt;/VirtualHost&gt; のディレクティブを利用して、特定の仮想ホストにのみ適用されるディレクティブの範囲を指定します。 Apache における仮想ホストの設定方法について、詳しくは <link xlink:href="http://httpd.apache.org/docs/2.4/ja/mod/core.html#virtualhost"/> をお読みください。</para>
   <para>チェンジハット機能固有の設定キーワードは <literal>AADefaultHatName</literal> です。これは <literal>AAHatName</literal> に似た設定で、 <literal>AADefaultHatName My_Funky_Default_Hat</literal> のように指定します。</para>
   <para>これを設定することで、仮想ホストやその他の Apache サーバディレクティブに対して、使用すべき既定のハットを設定することができます。もちろん仮想ホストごとに異なる既定のハットを設定することもできます。この設定は <literal>AAHatName</literal> で上書きすることができます。逆に言えば、該当する　<literal>AAHatName</literal> や URI でのハットに当てはまるものが存在しない場合の、既定のハットとなります。 <literal>AADefaultHatName</literal> でのハット指定が存在しない場合は、 <literal>DEFAULT_URI</literal> ハット (存在すれば) を使用するようになります。</para>
   <para>全くどのハットも設定されていない場合は、 <quote>親</quote> プロセスである Apache のハットが適用されます。</para>
  </sect2>

  <sect2 xml:id="sec-apparmor-hat-config-directives">
   <title>Location ディレクティブと Directory ディレクティブ</title>
   <para>設定ファイル内の Location および Directory のディレクティブの中でハット名を指定することで、 Apache が URI やディレクトリを処理する際、指定したセキュリティプロファイルを適用するようになります。 Apache における Location および Directory ディレクティブの使い方について、詳しくは <link xlink:href="http://httpd.apache.org/docs/2.4/ja/sections.html"/> をお読みください。</para>
   <para>下記に示す Location ディレクティブでは、指定した場所に対して、 <literal>mod_apparmor</literal> が特定のハットを使用するように指定しています:</para>
<screen>&lt;Location /foo/&gt;
  AAHatName MY_HAT_NAME
&lt;/Location&gt;
</screen>
   <para>上記のように設定することで、 <filename>/foo/</filename> で始まる URI ( <filename>/foo/</filename> , <filename>/foo/bar</filename> , <filename>/foo/cgi/path/blah_blah/blah</filename> など) にアクセスが行なわれた際、 <literal>MY_HAT_NAME</literal> というハットを使用するようになります。</para>
   <para>Directory ディレクティブも上記と同様ですが、こちらのディレクティブはファイルシステム内のディレクトリを指定する点が異なることに注意してください:</para>
<screen>&lt;Directory "/srv/www/www.example.org/docs"&gt;
  # 末尾にスラッシュが無いことに注意
  AAHatName example.org
&lt;/Directory&gt;</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-apparmor-hat-apache-managing">
  <title>チェンジハット対応のアプリケーションの管理</title>

  <para>前の章では <literal>mod_apparmor</literal> に関する情報と、特定の Web アプリケーションのセキュリティを向上させる方法について学んできました。この章では、 Web アプリケーションに対してハットを作成するための現実的な例と、 &aa; のチェンジハット機能の使用方法について説明しています。なお、本章では &aa; のコマンドラインツールを利用して説明を行なっていますが、これは &yast; の &aa; モジュールではすべての機能を提供しているわけではないためのものです。</para>

  <sect2>
   <title>&aa; のコマンドラインツールによる方法</title>
  <para>本章では、例として <emphasis>Adminer</emphasis> ( <link xlink:href="http://www.adminer.org/ja/"/> ) と呼ばれる Web アプリケーションのセキュリティを向上させます。これは PHP で書かれた完全機能の SQL データベース管理ツールで、たった 1 つの PHP ファイルだけで作られています。 Adminer を動作させるには、まず Apache Web サーバと PHP のほか、 PHP の Apache モジュールと PHP に対応したデータベースドライバを用意する必要があります。今回は &mysql; を利用することにします。必要なパッケージをインストールするには、下記のように入力して実行します:</para>

<screen>zypper in apache2 apache2-mod_apparmor apache2-mod_php5 php5 php5-mysql
</screen>

  <para>Adminer を動作させるための Web 環境の構築は、下記のようにして行ないます:</para>

  <procedure>
   <title>Web サーバ環境の設定</title>
   <step>
    <para>まずは Apache 向けの <literal>apparmor</literal> と <literal>php5</literal> のモジュールを有効化します。有効化を行なうには、下記のように実行します:</para>
<screen>&prompt.user;a2enmod apparmor php5</screen>
    <para>あとは Apache を再起動します:</para>
<screen>&prompt.sudo;systemctl restart apache2</screen>
   </step>
   <step>
    <para>&mysql; が動作していることを確認します。動作しているかどうかが分からない場合は、下記を実行して再起動します:</para>
<screen>&prompt.sudo;systemctl restart mariadb</screen>
    <remark>taroth 2014-02-26: at the moment, there is no mariadb.service, starting
     mysql seems to be the right way - wrote
     mail to mhrusecky to ask if this is bound to change anytime soon for SLE
     12 - taroth 2020-06-04: this is fixed meanwhile, see jsc#SLE-9450, comment by
     kstreitova</remark>
   </step>
   <step>
    <para><link xlink:href="http://www.adminer.org"/> から Adminer をダウンロードして、 <filename>/srv/www/htdocs/adminer/</filename> にコピーしたあと、ファイル名を <filename>adminer.php</filename> に変更します。スクリプトのフルパスは <filename>/srv/www/htdocs/adminer/adminer.php</filename> であることになります。</para>
   </step>
   <step>
    <para>Web ブラウザを起動して URI 欄に <literal>http://localhost/adminer/adminer.php</literal> と入力し、 Adminer の動作確認を行ないます。 Adminer をリモートのサーバにインストールしている場合は、 <literal>localhost</literal> の部分をサーバのホスト名に置き換えてください。</para>
    <figure>
     <title>Adminer のログインページ</title>
     <mediaobject>
      <imageobject role="fo">
       <imagedata format="PNG" fileref="aa_changehat_adminer.png" width="75%"/>
      </imageobject>
      <imageobject role="html">
       <imagedata fileref="aa_changehat_adminer.png" width="40%" format="PNG"/>
      </imageobject>
     </mediaobject>
    </figure>
    <tip>
     <para>Adminer のログインページの表示時に何らかの問題が発生した場合は、まず <filename>/var/log/apache2/error.log</filename> にある Apache のエラーログファイルをご覧になることをお勧めします。 Web ページにアクセスできない理由として考えられる理由としては、既に Apache が &aa; の制御下にあり、適用されているプロファイルが Adminer を動作させるには厳しすぎることも考えられます。この場合は、 <command>aa-status</command> を実行して確認を行ない、必要であれば下記を実行し、 Apache を一時的に不平モードに設定してください:</para>
<screen>&prompt.root;sudo aa-complain usr.sbin.httpd2-prefork</screen>
    </tip>
   </step>
  </procedure>

  <para>Adminer を動作させるための Web 環境が整ったら、次に Apache の <literal>mod_apparmor</literal> を設定します。これにより、 &aa; が Adminer に対するアクセスを検知して、固有の <quote>ハット</quote> に対する変更を行なうことができるようになります。</para>

  <procedure>
   <title><literal>mod_apparmor</literal> の設定</title>
   <step>
    <para>Apache には、 <filename>/etc/apache2/</filename> と <filename>/etc/apache2/conf.d/</filename> という設定ファイルのディレクトリが存在しています。どちらのディレクトリ内でもかまいませんので、テキストエディタを利用してファイルを作成してください。この例では、 <command>vim</command> エディタを利用して設定ファイル <filename>/etc/apache2/conf.d/apparmor.conf</filename> を作成することにします。</para>
<screen>&prompt.sudo;vim /etc/apache2/conf.d/apparmor.conf</screen>
   </step>
   <step>
    <para>テキストエディタ内で、下記のとおり入力します。</para>
<screen>&lt;Directory /srv/www/htdocs/adminer&gt;
  AAHatName adminer
&lt;/Directory&gt;</screen>
    <para>上記の設定を追加することで、 Apache に対して <filename>/adminer</filename> のディレクトリ (およびそれ以下のサブディレクトリやファイル) 宛のアクセスがあった際、 &aa; 側でチェンジハットを行なうことを指示します。このディレクトリ内には、既に <filename>adminer.php</filename> があるはずです。</para>
   </step>
   <step>
    <para>ファイルを保存して、テキストエディタを終了します。あとは下記のように実行して Apache を再起動します:</para>
<screen>&prompt.sudo;systemctl restart apache2</screen>
   </step>
  </procedure>

  <para>これで Apache に対する Adminer の設定が完了し、 Adminer の実行時には <quote>ハット</quote> を変更することができるようになります。あとは &aa; の設定で、 Adminer 向けのハットを作成することになります。この時点までに &aa; のプロファイルを作成していない場合は、以下の手順を実施する前に作成しておいてください。 Apache のメインバイナリは <filename>/usr/sbin/httpd2-prefork</filename> ですから、対応するプロファイルは <filename>/etc/apparmor.d/usr.sbin.httpd2-prefork</filename> というファイル名で存在しているはずです。</para>

  <procedure>
   <title>Adminer 向けのハットの作成</title>
   <step>
    <para>テキストエディタを利用して、 <filename>/etc/apparmor.d/usr.sbin.httpd2-prefork</filename> というファイル名のファイルを開いて (存在していない場合は作成して) ください。ファイルの内容は下記のようになっているはずです:</para>
<screen>#include &lt;tunables/global&gt;

/usr/sbin/httpd2-prefork {
  #include &lt;abstractions/apache2-common&gt;
  #include &lt;abstractions/base&gt;
  #include &lt;abstractions/php5&gt;

  capability kill,
  capability setgid,
  capability setuid,

  /etc/apache2/** r,
  /run/httpd.pid rw,
  /usr/lib{,32,64}/apache2*/** mr,
  /var/log/apache2/** rw,

  ^DEFAULT_URI {
    #include &lt;abstractions/apache2-common&gt;
    /var/log/apache2/** rw,
  }

  ^HANDLING_UNTRUSTED_INPUT {
    #include &lt;abstractions/apache2-common&gt;
    /var/log/apache2/** w,
  }
}</screen>
   </step>
   <step>
    <para>末尾の閉じ中括弧 ( <literal>}</literal> ) の前に、下記のような行を挿入します:</para>
<screen>^adminer flags=(complain) {
}</screen>
    <para>ここでは、ハット名の後ろに <literal>(complain)</literal> を指定していることに注意してください。これにより、 &aa; での <systemitem>adminer</systemitem> ハットを不平モードに設定することになります。これは、この時点では Adminer のアクセス要件がわかっていないため、それを調べるための設定です。 <remark>@cboltz: i did it this way myself and it worked perfectly</remark></para>
   </step>
   <step>
    <para>ファイルを保存して &aa; を再起動し、 Apache を再起動します。</para>
<screen>&prompt.sudo;systemctl reload apparmor apache2</screen>
   </step>
   <step>
    <para>続いて <systemitem>adminer</systemitem> ハットが正しく不平モードになっていることを確認します。</para>
<screen>&prompt.sudo;aa-status
apparmor module is loaded.
39 profiles are loaded.
37 profiles are in enforce mode.
[...]
   /usr/sbin/httpd2-prefork
   /usr/sbin/httpd2-prefork//DEFAULT_URI
   /usr/sbin/httpd2-prefork//HANDLING_UNTRUSTED_INPUT
[...]
2 profiles are in complain mode.
   /usr/bin/getopt
   /usr/sbin/httpd2-prefork//adminer
[...]
</screen>
    <para>上記のとおり、 <literal>httpd2-prefork//adminer</literal> が不平モードになっていることがわかります。</para>
   </step>
  </procedure>

  <para>あとは <systemitem>adminer</systemitem> ハットに対して、必要なアクセス権限を見つけ出していく作業になります。この時点では <systemitem>adminer</systemitem> ハットは不平モードに設定されているため、ログ内にポリシーへの違反が記録されているものの、実際の拒否は発動されていません。そのため、 Web ブラウザから <filename>adminer.php</filename> の機能を一通り試して、必要な権限を収集していってください。収集が終わったら、 <command>aa-logprof</command> を実行することで、ハットのプロファイルの作成支援を行ないます。</para>

  <procedure>
   <title><systemitem>adminer</systemitem> ハット向けのルールの生成</title>
   <step>
    <para>Adminer を Web ブラウザで開きます。ローカルにインストールした場合は、 URI は <literal>http://localhost/adminer/adminer.php</literal> になるはずです。</para>
   </step>
   <step>
    <para>まずは使用するデータベースエンジン (ここでは &mysql;) を選択し、既存のデータベースにユーザ名とパスワードを入力してログインします。なお、データベース名については、ログイン後に指定することもできますので、指定する必要はありません。あとは Adminer の機能を一通り試してください。新しいデータベースを作成したり、新しいテーブルを作成したり、ユーザ権限を設定したりなどです。</para>
   </step>
   <step>
    <para>ひととおり Adminer のユーザインターフェイスをテストしたら、コンソールに戻って収集したログの調査を行ないます。</para>
    <screen>&prompt.sudo;aa-logprof
Reading log entries from /var/log/audit/audit.log.
Updating AppArmor profiles in /etc/apparmor.d.
Complain-mode changes:

Profile:  /usr/sbin/httpd2-prefork^adminer
Path:     /dev/urandom
Mode:     r
Severity: 3

  1 - #include &lt;abstractions/apache2-common&gt;
[...]
 [8 - /dev/urandom]

[(A)llow] / (D)eny / (G)lob / Glob w/(E)xt / (N)ew / Abo(r)t / (F)inish / (O)pts</screen>
    <para><command>aa-logprof</command> のメッセージによると、下記のとおり <systemitem>adminer</systemitem> のハットが正しく認識されていることが分かります:</para>
<screen>Profile:  /usr/sbin/httpd2-prefork^adminer</screen>
    <para><command>aa-logprof</command> は、検出されたそれぞれの &aa; イベントから、適切なルールを選択するよう依頼します。使用したいルールを指定したあと <guimenu>Allow</guimenu> を選択します。 <command>aa-genprof</command> と <command>aa-logprof</command> の使用方法について、詳しくは <xref linkend="sec-apparmor-commandline-profiling-summary-genprof"/> をお読みください。</para>
    <tip>
     <para><command>aa-logprof</command> では通常、特定のイベントに対して複数のルール候補を提示して選択を求めます。場合によっては <emphasis>抽象</emphasis> と呼ばれる、特定の目的向けのルールセットをまとめた仕組みを提案することもあります。このような場合は、直接のルールではなく抽象を選択したほうが便利な場合があります:</para>
<screen> 1 - #include &lt;abstractions/php5&gt;
 [2 - /var/lib/php5/sess_3jdmii9cacj1e3jnahbtopajl7p064ai242]</screen>
     <para>上記の例では、 <guimenu>1</guimenu> を押して <guimenu>A</guimenu> を押すことで、抽象の取り込みを設定することができます。</para>
    </tip>
   </step>
   <step>
    <para>最後に、下記のとおり保存を行なうかどうかを尋ねられます。</para>
<screen>The following local profiles were changed. Would you like to save them?
 [1 - /usr/sbin/httpd2-prefork]

 (S)ave Changes / [(V)iew Changes] / Abo(r)t</screen>
    <para><guimenu>S</guimenu> を押して変更を保存してください。</para>
   </step>
   <step>
    <para>変更が終わったら、 <command>aa-enforce</command> を実行してプロファイルを強制モードに設定します:</para>
<screen>&prompt.sudo;aa-enforce usr.sbin.httpd2-prefork</screen>
    <para><command>aa-status</command> で状態を確認します:</para>
<screen>&prompt.sudo;aa-status
apparmor module is loaded.
39 profiles are loaded.
38 profiles are in enforce mode.
[...]
   /usr/sbin/httpd2-prefork
   /usr/sbin/httpd2-prefork//DEFAULT_URI
   /usr/sbin/httpd2-prefork//HANDLING_UNTRUSTED_INPUT
   /usr/sbin/httpd2-prefork//adminer
[...]</screen>
    <para>上記のとおり、 <literal>//adminer</literal> のハットが <emphasis>complain</emphasis> (不平) から <emphasis>enforce</emphasis> (強制) モードに切り替えられています。</para>
   </step>
   <step>
    <para>あとは再度 Adminer を Web ブラウザで開いて動作を確認してください。何らかの問題を見つけた場合は、不平モードに戻して手順を繰り返し、 <command>aa-logprof</command> でプロファイルを更新してください。</para>
   </step>
  </procedure>

  <note>
   <title>ハットと親プロファイルの関係性について</title>
   <para><filename>^adminer</filename> プロファイルは、親プロファイルである <filename>usr.sbin.httpd2-prefork</filename> の中で動作するプロセスから見た場合にのみ利用することができます。</para>
  </note>
  </sect2>
  <sect2 xml:id="sec-apparmor-hat-apache-managing-add">
   <title>&yast; によるハットと項目の追加方法</title>
   <para><guimenu><!-- NOTE: not "Edit Profile" --> 既存のプロファイルを管理</guimenu> (手順に関する詳細は <xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-yast-edit"/> を参照) を使用するか、もしくは <guimenu>手作業でプロファイルを追加</guimenu> (手順に関する詳細は <xref xrefstyle="SectTitleOnPage" linkend="sec-apparmor-yast-add"/> を参照) を使用することで、 &aa; のプロファイル内にハット (サブプロファイル) を追加することができます。 <guimenu>&aa; プロファイルダイアログ</guimenu> ウインドウ内でチェンジハットのサブプロファイルを追加するには、下記のようにして行ないます。</para>
   <informalfigure>
    <mediaobject>
     <textobject role="description"><phrase>&aa; プロファイルダイアログ</phrase></textobject>
     <imageobject role="fo">
      <imagedata format="PNG" fileref="hats_in_profiles.png" width="75%"/>
     </imageobject>
     <imageobject role="html">
      <imagedata fileref="hats_in_profiles.png" width="75%" format="PNG"/>
     </imageobject>
    </mediaobject>
   </informalfigure>
   <procedure>
    <step>
     <para><guimenu>&aa; プロファイルダイアログ</guimenu> のウインドウ内で、 <guimenu>項目の追加</guimenu> を押し、 <guimenu>ハット</guimenu> を選択します。 <guimenu>追加するハット名</guimenu> のダイアログが表示されます:</para>
     <informalfigure>
      <mediaobject>
       <textobject role="description"><phrase>ハット名の入力</phrase></textobject>
       <imageobject role="fo">
        <imagedata format="PNG" fileref="hat_createhat.png" width="50%"/>
       </imageobject>
       <imageobject role="html">
        <imagedata fileref="hat_createhat.png" width="35%" format="PNG"/>
       </imageobject>
      </mediaobject>
     </informalfigure>
    </step>
    <step>
     <para>&aa; プロファイルに追加したいハットの名前を入力します。名前はアクセス時の URI を指定します。</para>
    </step>
    <step>
     <para><guimenu>ハットの作成</guimenu> を押します。すると <guimenu>&aa; プロファイルダイアログ</guimenu> 画面に戻ります。</para>
    </step>
    <step>
     <para>新しいハットを追加したら、 <guimenu>完了</guimenu> を押して閉じます。</para>
    </step>
   </procedure>
  </sect2>
 </sect1>
</chapter>
