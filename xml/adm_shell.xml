<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-adm-shell">
<!-- Better Title? -->
 <title>bash と bash スクリプト</title>
 <info>
  <abstract>
   <para>今となっては、多くの人々が &gnome; のようなグラフィカルユーザインターフェイス (GUI) を使用するようになっています。 GUI は多数の機能が提供されているものの、特に自動化という側面においては、限られた用途でしか使用できません。シェルは GUI を補完する仕組みで、本章で示している bash シェルの使い方を覚えれば、より効率的に作業を進めることができるようになります。</para>
  </abstract>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
<!-- Better Title? -->
 <sect1 xml:id="sec-adm-whatistheshell">
  <title><quote>シェル</quote> とは</title>

<!--<para>A shell is fundamental to Linux system operation: Its
      interface allows users to enter commands that execute different
      tasks, like listing directories, showing files, or searching
      the directory tree for files with the wildcard operator.</para>-->

  <para>伝統的には、 <emphasis>シェル</emphasis> といえば bash (Bourne again Shell) のことを指します。本章でもそれにならい、 <quote>シェル</quote> を bash の意味で使用します。実際には bash 以外の様々なシェル (ash, csh, ksh, zsh, &hellip;) がありますが、それぞれ少しずつ異なる機能と動作が提供されています。他のシェルについて詳しく知りたい場合は、 &yast; で <emphasis>shell</emphasis> を検索してください。</para>

  <sect2 xml:id="sec-adm-configfiles">
   <title>bash の設定ファイル</title>
   <para>シェルは下記のいずれかの方式で起動することができます:</para>
   <orderedlist spacing="normal">
    <listitem>
     <formalpara>
      <title>対話的なログインシェル</title>
      <para>マシンに対してログインした際に使用されるシェルで、 bash には　<option>--login</option> というパラメータが追加されます。これは、 SSH などでリモートからログインした場合にも使用されるものです。</para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title><quote>通常の</quote> 対話的なシェル</title>
      <para>xterm, konsole, gnome-terminal など、コマンドラインインターフェイス (CLI) ツールを通じて bash を開始した場合は、こちらのシェルになります。</para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>非対話型のシェル</title>
      <para>コマンドラインでシェルスクリプトを実行すると、こちらのシェルになります。</para>
     </formalpara>
    </listitem>
   </orderedlist>
   <para>使用しているシェルの種類によって、それぞれ異なる設定ファイルが読み込まれます。下記の表では、ログインシェルの場合と非ログインシェルの場合で、読み込まれる設定ファイルを示しています。</para>
   <table xml:id="tab-adm-shell-config-loginshells">
    <title>ログインシェルで使用する際の bash 設定ファイル</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>ファイル</para>
       </entry>
       <entry>
        <para>説明</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para><filename>/etc/profile</filename></para>
       </entry>
       <entry>
        <para>このファイルは変更してはなりません。パッケージ側で管理されているファイルであるため、更新を行なうと変更した内容が上書きされてしまいます。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>/etc/profile.local</filename></para>
       </entry>
       <entry>
        <para><filename>/etc/profile</filename> に対して何らかの項目を追加したい場合は、こちらのファイルに記述してください</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>/etc/profile.d/</filename></para>
       </entry>
       <entry>
        <para>特定のプログラムに対するシステム全体の設定ファイルが含まれています</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>~/.profile</filename></para>
       </entry>
       <entry>
        <para>ログインシェルでユーザ固有の設定を行ないたい場合は、こちらに記述してください</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>なお、ログインシェルの場合は、 <xref linkend="tab-adm-shell-configs-nonloginshells"/> にある設定ファイルもあわせて読み込みます。</para>
   <table xml:id="tab-adm-shell-configs-nonloginshells">
    <title>非ログインシェルで使用する際の bash 設定ファイル</title>
    <tgroup cols="2">
     <tbody>
      <row>
       <entry>
        <para><filename>/etc/bash.bashrc</filename></para>
       </entry>
       <entry>
        <para>このファイルは変更してはなりません。パッケージ側で管理されているファイルであるため、更新を行なうと変更した内容が上書きされてしまいます。</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>/etc/bash.bashrc.local</filename></para>
       </entry>
       <entry>
        <para>bash のみに対して、システム全体に反映すべき設定があれば、こちらのファイルに記述してください</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>~/.bashrc</filename></para>
       </entry>
       <entry>
        <para>ユーザ固有の設定を行ないたい場合は、こちらに記述してください</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <para>これらに加えて、 bash では下記のようなファイルを使用します:</para>
   <table>
    <title>bash での特殊ファイル</title>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>
        <para>ファイル</para>
       </entry>
       <entry>
        <para>説明</para>
       </entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>
        <para><filename>~/.bash_history</filename></para>
       </entry>
       <entry>
        <para>これまでに入力したコマンドラインの履歴一覧</para>
       </entry>
      </row>
      <row>
       <entry>
        <para><filename>~/.bash_logout</filename></para>
       </entry>
       <entry>
        <para>ログアウト時に実行するスクリプトです</para>
       </entry>
       </row>
       <row>
       <entry>
        <para><filename>~/.alias</filename></para>
       </entry>
       <entry>
        <para>よく使用するコマンドに対して、別名を定義することができるファイルです。別名の定義方法について、詳しくは <command>man 1 alias</command> を実行してお読みください。</para>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
   <bridgehead>非ログインシェル</bridgehead>
   <para>システムに対してログインを許可したくないユーザの場合は、ログインシェルとして <systemitem>/bin/false</systemitem> もしくは <systemitem>/sbin/nologin</systemitem> を指定すると、ログインを拒否できるようになります。いずれの場合も、ユーザがシステムにログインしようとすると、特に何もメッセージが表示されることなく終了します。これは主にシステムユーザとして作成するユーザに対して設定するためのものですが、 Linux オペレーティングシステムには PAM や AppArmor など、システムへのアクセスをより効率的に制御することのできるツールが存在していることを覚えておいてください。</para>
   <para>&slea; の既定では、一般ユーザには <systemitem>/bin/bash</systemitem> が、システムユーザには <systemitem>/bin/false</systemitem> もしくは <systemitem>/sbin/nologin</systemitem> が設定されます。なお、 <systemitem class="username">nobody</systemitem> ユーザに対しては、歴史上の経緯から <systemitem>/bin/bash</systemitem> が割り当てられていますが、これはシステムユーザが最小限の権限を持ったユーザとして使用するために作成されているためです。しかしながら、 <systemitem class="username">nobody</systemitem> ユーザは複数のシステムユーザが共有しているものであることから、できる限りセキュリティを強固なものにしておきたい場合は、 <systemitem>/sbin/nologin</systemitem> に変更してもかまいません。ただし、サービスやアプリケーションに影響がある場合がありますので、変更後にはテストをしておくこをお勧めします。</para>
   <para>下記のコマンドを実行すると、各システムユーザおよび一般ユーザに対して割り当てられたシェルを表示することができます。これは <filename>/etc/passwd</filename> ファイルに書かれた内容を表示するもので、お使いのシステムによって出力されるユーザは異なりますが、下記のようになります:</para>
<screen>&prompt.user;sort -t: -k 7 /etc/passwd |  awk -F: '{print $1"\t" $7}' | column -t
&exampleuser_plain;               /bin/bash
nobody            /bin/bash
root              /bin/bash
avahi             /bin/false
chrony            /bin/false
dhcpd             /bin/false
dnsmasq           /bin/false
ftpsecure         /bin/false
lightdm           /bin/false
mysql             /bin/false
postfix           /bin/false
rtkit             /bin/false
sshd              /bin/false
tftp              /bin/false
unbound           /bin/false
bin               /sbin/nologin
daemon            /sbin/nologin
ftp               /sbin/nologin
lp                /sbin/nologin
mail              /sbin/nologin
man               /sbin/nologin
nscd              /sbin/nologin
polkitd           /sbin/nologin
pulse             /sbin/nologin
qemu              /sbin/nologin
radvd             /sbin/nologin
rpc               /sbin/nologin
statd             /sbin/nologin
svn               /sbin/nologin
systemd-coredump  /sbin/nologin
systemd-network   /sbin/nologin
systemd-timesync  /sbin/nologin
usbmux            /sbin/nologin
vnc               /sbin/nologin
wwwrun            /sbin/nologin
messagebus        /usr/bin/false
scard             /usr/sbin/nologin</screen>
  </sect2>

  <xi:include href="fs_structure_i.xml"/>
 </sect1>
 <sect1 xml:id="sec-adm-shellscripts">
  <title>シェルスクリプトの作成</title>

  <para>シェルスクリプトは、幅広い処理を実行することができる便利な仕組みです。データの収集やファイル内の単語や語句の検索など、様々な処理を行なうことができます。下記の例では、テキストを出力する簡単なシェルスクリプトを示しています:</para>

  <example>
   <title>テキストを出力するシェルスクリプト</title>
<screen>#!/bin/sh <co xml:id="co-adm-shell-shebang"/>
# 下記の行を出力します: <co xml:id="co-adm-shell-comment"/>
echo "Hello World" <co xml:id="co-adm-shell-echo"/></screen>
   <calloutlist>
    <callout arearefs="co-adm-shell-shebang">
     <para>最初の行は <emphasis>シェバン</emphasis> と呼ばれる文字列 ( <literal>#!</literal> ) で始まっています。これは、このファイルがスクリプトであることを示す文字列です。スクリプトは、シェバンの後ろに書かれたインタプリタを利用して実行されます。この例の場合は、 <command>/bin/sh</command> になっています。</para>
    </callout>
    <callout arearefs="co-adm-shell-comment">
     <para>2 行目はハッシュ記号で始まるコメント文です。スクリプト内で何をやっているのかがわかりにくいような場合に、書いておいたほうがよいものです。適切にコメントを記述することで、各行の目的や意味を覚えておくことができます。また、自分以外の読み手に対しても、スクリプトの理解をより深めることができるようになります。開発コミュニティ内では、コメントはよりよい実践手段として認められています。</para>
    </callout>
    <callout arearefs="co-adm-shell-echo">
     <para>3 行目は内蔵コマンド <command>echo</command> を実行する箇所で、後ろに書かれた文字列を出力しています。</para>
    </callout>
   </calloutlist>
  </example>

  <para>スクリプトを実行するにあたっては、下記の要件を満たす必要があります:</para>

  <orderedlist spacing="normal">
   <listitem>
    <para>スクリプトには、上記の例のようにシェバンを書いておくべきです。シェバンが書かれていないと、実行のたびにインタプリタを手作業で指定しなければならなくなります。</para>
   </listitem>
   <listitem>
    <para>スクリプトは任意の場所に保存することができますが、一般的にはシェルから見つけやすい場所においておくことをお勧めします。シェルでパスを検索する際は、 <envar>PATH</envar> という環境変数の内容を参照します。ただし、一般ユーザは <filename>/usr/bin</filename> に書き込むことができないのが通常ですので、スクリプトはホームディレクトリ以下の <filename>~/bin/</filename> などに保存しておくとよいでしょう。上記のファイルは、 <filename>hello.sh</filename> というファイル名で保存しているものとします。</para>
   </listitem>
   <listitem>
    <para>スクリプトには実行のアクセス権が必要です。下記の通り実行して、実行権限を付与してください:</para>
<screen>&prompt.user;chmod +x ~/bin/hello.sh</screen>
   </listitem>
  </orderedlist>

  <para>上記の要件を全て満たしたら、あとは下記のいずれかの方式でスクリプトを実行します:</para>

  <orderedlist spacing="normal">
   <listitem>
    <formalpara>
     <title>絶対パス</title>
     <para>スクリプトは絶対パスで実行することができます。今回の例の場合は、 <command>~/bin/hello.sh</command> と入力すると、実行することができます。</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>任意の場所</title>
     <para><envar>PATH</envar> 環境変数にはスクリプトの存在しうるディレクトリが並べられています。このディレクトリ内のどこかに <filename>hello.sh</filename> を配置していれば、 <command>hello.sh</command> と入力するだけで実行することができます。</para>
    </formalpara>
   </listitem>
  </orderedlist>
 </sect1>
 <sect1 xml:id="sec-adm-shell-redirect">
  <title>コマンドイベントのリダイレクト</title>

  <para>それぞれのコマンドには、入力や出力のための計 3 種類のチャンネルが用意されています:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <formalpara>
     <title>標準出力</title>
     <para>既定の出力チャンネルです。コマンドが何らかの出力を行なうと、それは標準出力に書き出されます。</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>標準入力</title>
     <para>ユーザから、もしくは他のコマンドからの入力が必要な場合、このチャンネルを使用します。</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>標準エラー出力</title>
     <para>コマンドは、エラー報告を行なう際、このチャンネルを使用します。</para>
    </formalpara>
   </listitem>
  </itemizedlist>

  <para>これらのチャンネルをリダイレクト (転送) するには、下記のいずれかの方法があります:</para>

  <variablelist>
   <varlistentry>
    <term><literal>コマンド &gt; ファイル</literal></term>
    <listitem>
     <para>コマンドの出力をファイルに保存します。ただし、既存のファイルは削除されることに注意してください。たとえば <command>ls</command> コマンドの出力を <filename>listing.txt</filename> ファイルに保存するには、下記のようにして行ないます:</para>
<screen>&prompt.user;ls &gt; listing.txt</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>コマンド &gt;&gt; ファイル</literal></term>
    <listitem>
     <para>コマンドの出力をファイルに追記します。たとえば <command>ls</command> コマンドの出力を <filename>listing.txt</filename> ファイルに追記するには、下記のようにして行ないます:</para>
<screen>&prompt.user;ls &gt;&gt; listing.txt</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>コマンド &lt; ファイル</literal></term>
    <listitem>
     <para>指定したコマンドに対して、ファイルの内容を入力として設定します。たとえば <command>read</command> というコマンドを利用して、ファイルの内容を変数に取り込むには、下記のように実行します:</para>
<screen>&prompt.user;read a &lt; foo</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>コマンド_1 | コマンド_2</literal></term>
    <listitem>
     <para>左側のコマンドの出力を右側のコマンドの入力として使用します。たとえば <command>cat</command> コマンドで <filename>/proc/cpuinfo</filename> ファイルの内容を出力し、その出力を <command>grep</command> コマンドでフィルタして、 <literal>cpu</literal> という文字列を含む行だけを取り出すには、下記のように実行します:</para>
<screen>&prompt.user;cat /proc/cpuinfo | grep cpu</screen>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>それぞれのチャンネルには <emphasis>ファイルディスクリプタ</emphasis> が割り当てられています。 0 (ゼロ) が標準入力、 1 が標準出力、 2 が標準エラー出力です。これらの数字を <literal>&lt;</literal> や <literal>&gt;</literal> の前に指定することで、それぞれの入出力を自在に扱うことができるようになります。たとえば <filename>foo</filename> で始まるファイルを検索するものの、エラー出力については、 <filename>/dev/null</filename> にリダイレクトしたい場合は、下記のように実行します:</para>

<screen>&prompt.user;find / -name "foo*" 2&gt;/dev/null</screen>
 </sect1>
 <sect1 xml:id="sec-adm-alias">
  <title>別名定義の使用</title>

  <para>別名定義は、 1 つまたは複数のコマンドのショートカットです。別名定義の書式は下記の通りです:</para>

<screen>alias <replaceable>名前</replaceable>=<replaceable>定義</replaceable></screen>

  <para>たとえば下記の行を実行すると、 <command>lt</command> という名前で、長い形式の出力 (<option>-l</option> オプション) を行ない、かつ更新日時順に並べ替え ( <option>-t</option> ) 、並び順を逆順とする ( <option>-r</option> ) 別名を定義することができます:</para>

<screen>&prompt.user;alias lt='ls -ltr'</screen>

  <para>全ての別名定義を一覧で表示するには、 <command>alias</command> とだけ入力して実行します。また、別名定義を削除するには、 <command>unalias</command> に続いて別名を指定します。</para>
 </sect1>
 <sect1 xml:id="sec-adm-variables">
  <title>bash 内での変数の使用</title>

  <para>シェルでは変数をローカルかグローバルに設定することができます。グローバル変数は環境変数とも呼ばれ、全てのシェルからアクセスすることができます。逆にローカル変数は、現在のシェルからしかアクセスできないものを指します。</para>

  <para>全ての環境変数を出力するには、 <command>printenv</command> を使用します。変数の値を知りたい場合は、コマンドの後ろに変数名を指定します:</para>

<screen>&prompt.user;printenv PATH</screen>

  <para>グローバル変数でもローカル変数でも、  <command>echo</command> コマンドを使用すれば値を出力することができます:</para>

<screen>&prompt.user;echo $PATH</screen>

  <para>ローカル変数を設定するには、変数名に続いてイコール記号を付け、その後ろに値を記述します:</para>

<screen>&prompt.user;PROJECT="SLED"</screen>

  <para>なお、イコール記号の後には空白 (スペース) を入れないでください。空白を入れてしまうと、エラーになってしまいます。環境変数を設定したい場合は、 <command>export</command> というコマンドを使用します:</para>

<screen>&prompt.user;export NAME="tux"</screen>

  <para>変数を削除するには、 <command>unset</command> コマンドを使用します:</para>

<screen>&prompt.user;unset NAME</screen>

  <para>下記の表には、シェルスクリプト内でよく使用される、いくつかの一般的な環境変数を示しています:</para>

  <table xml:id="tab-adm-envars">
   <title>便利な環境変数</title>
   <tgroup cols="2">
    <tbody>
     <row>
      <entry>
       <para><envar>HOME</envar></para>
      </entry>
      <entry>
       <para>現在のユーザのホームディレクトリ</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><envar>HOST</envar></para>
      </entry>
      <entry>
       <para>現在のホスト名</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><envar>LANG</envar></para>
      </entry>
      <entry>
       <para>ツールがローカライズ (各国語に翻訳) されている場合、この環境変数を利用して言語を判断します。英語環境の場合は、 <literal>C</literal> に設定されていることがあります。</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><envar>PATH</envar></para>
      </entry>
      <entry>
       <para>シェルがプログラムを検索する際のパスの一覧です。コロン区切りでディレクトリを並べます</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><envar>PS1</envar></para>
      </entry>
      <entry>
       <para>各コマンドの前に表示される、一般ユーザ向けのプロンプト</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><envar>PS2</envar></para>
      </entry>
      <entry>
       <para>複数行のコマンドを実行する際に表示される、 2 行目以降のプロンプト</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><envar>PWD</envar></para>
      </entry>
      <entry>
       <para>現在の作業ディレクトリ</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><envar>USER</envar></para>
      </entry>
      <entry>
       <para>現在のユーザのユーザ名</para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <sect2 xml:id="sec-adm-variables-argument">
   <title>パラメータ変数の使用</title>
<!-- toms 2008-11-04: TODO: Argument Variables
        $0...$9  positional argument
        $*       all arguments
        $#       number of arguments
        $@       all arguments with spaces
      -->
   <para>たとえば <command>foo.sh</command> というスクリプトが存在する場合、下記のように実行することができます:</para>
<screen>&prompt.user;foo.sh "Tux Penguin" 2000</screen>
   <para>お使いのスクリプトで全てのパラメータにアクセスするには、位置パラメータを使用します。 <envar>$1</envar> が最初のパラメータ、 <envar>$2</envar> が 2 つめのパラメータ・・・と続きます。最大 9 個までのパラメータを読み込むことができます。なお、スクリプトのファイル名を取り出したい場合は、 <envar>$0</envar> を使用します。</para>
   <para>下記の <command>foo.sh</command> スクリプトは、パラメータのうち 1 個目から 4 個目までを表示します:</para>
<screen>#!/bin/sh
echo \"$1\" \"$2\" \"$3\" \"$4\"</screen>
   <para>上記のスクリプトを上記のコマンドラインで実行したとすると、下記のような出力になります:</para>
<screen>"Tux Penguin" "2000" "" ""</screen>
<!--
      <table id="tab-adm-shell-argvar">
        <title>Argument Variables</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>
                <para>Form</para>
              </entry>
              <entry>
                <para>Meaning</para>
              </entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>
                <screen>${VAR?message}</screen>
              </entry>
              <entry>
                <para>prints the message and complains, if variable
                  <replaceable>VAR</replaceable> is undefinied</para>
                <screen>echo ${FOO?'Not definied'}
bash: FOO: Not definied</screen>
              </entry>
            </row>
            <row>
              <entry>
                <screen>${VAR-default}</screen>
              </entry>
              <entry>
                <para>return a default value, if variable
                  <replaceable>VAR</replaceable> is undefinied but do
                  not define the variable</para>
                <screen>echo ${FOO-Hi}
Hi
echo Variable \"$FOO\"
Variable ""</screen>
              </entry>
            </row>
            <row>
              <entry>
                <screen>${VAR+value}</screen>
              </entry>
              <entry>
                <para>if the variable <replaceable>VAR</replaceable> is
                definied, return its new value but keep it unchanged</para>
                <screen>FOO=Hi
echo ${FOO+Hello}
Hello
echo $FOO
Hi</screen>
              </entry>
            </row>
            <row>
              <entry>
                <screen>${VAR=value}</screen>
              </entry>
              <entry>
                <para>if the variable <replaceable>VAR</replaceable> is
                undefinied, define it and assign the value to it:</para>
                <screen>unset FOO
echo ${FOO="Hello World"}
"Hello World"
x=2
echo ${x=3}
2</screen>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
 -->
  </sect2>

  <sect2 xml:id="sec-adm-shell-varsubst">
   <title>変数置換の使用</title>
   <para>変数置換は、変数の値に対して左側もしくは右側からパターンを適用する処理を行ないます。下記のような書式が用意されています:</para>
   <variablelist>
    <varlistentry>
     <term><literal>${変数#パターン}</literal></term>
     <listitem>
      <para>左側からパターンに該当する最短の部分を削除します:</para>
<screen>&prompt.user;file=/home/tux/book/book.tar.bz2
&prompt.user;echo ${file#*/}
home/tux/book/book.tar.bz2</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>${変数##パターン}</literal></term>
     <listitem>
      <para>左側からパターンに該当する最長の部分を削除します:</para>
<screen>&prompt.user;file=/home/tux/book/book.tar.bz2
&prompt.user;echo ${file##*/}
book.tar.bz2</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>${変数%パターン}</literal></term>
     <listitem>
      <para>右側からパターンに該当する最短の部分を削除します:</para>
<screen>&prompt.user;file=/home/tux/book/book.tar.bz2
&prompt.user;echo ${file%.*}
/home/tux/book/book.tar</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>${変数%%パターン}</literal></term>
     <listitem>
      <para>右側からパターンに該当する最長の部分を削除します:</para>
<screen>&prompt.user;file=/home/tux/book/book.tar.bz2
&prompt.user;echo ${file%%.*}
/home/tux/book/book</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>${変数/パターン_1/パターン_2}</literal></term>
     <listitem>
      <para><replaceable>変数</replaceable> の値のうち、<replaceable>PATTERN_1</replaceable> を <replaceable>PATTERN_2</replaceable> で置き換えます:</para>
<screen>&prompt.user;file=/home/tux/book/book.tar.bz2
&prompt.user;echo ${file/tux/wilber}
/home/wilber/book/book.tar.bz2</screen>
     </listitem>
    </varlistentry>
   </variablelist>
<!--
       toms 2008-11-04: TODO: Add variable substitution:
      ${V:-def}  $V, or "def" if unset
      ${V:+def}  if $V is empty, it stays empty, otherwise
                 replace it with "def"
      ${V:=def}  $V set to "def" if unset
      ${V:?err}  $V, or output "err" if unset
      ${V#pattern}
      ${V##pattern}
      ${V%pattern}
      ${V%%pattern}
      ${!V}  similar to \$${V}
    -->
  </sect2>
 </sect1>
 <sect1 xml:id="sec-adm-shell-grouping">
  <title>コマンドのグループ化と組み合わせ化</title>

  <para>シェルでは、条件分岐などのためにコマンドをグループ化したり組み合わせたりすることができます。それぞれのコマンドには終了コードが決められていて、操作が成功したのか失敗したのかが分かるようになっています。 0 (ゼロ) はコマンドが成功したことを、それ以外の場合は何らかの失敗があったことを示します (値の意味は、コマンドによって異なります) 。</para>

  <para>下記の表では、様々なグループ化の方法を示しています:</para>

  <variablelist>
   <varlistentry>
    <term><literal>コマンド_1 ; コマンド_2</literal></term>
    <listitem>
     <para>コマンドを順次実行します。終了コードについては何もチェックを行ないません。下記の例では、 <command>cat</command> コマンドでファイルの内容を出力したあと、終了コードをチェックせずに <command>ls</command> コマンドを実行し、ファイルの情報を出力します:</para>
<screen>&prompt.user;cat filelist.txt ; ls -l filelist.txt</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>コマンド_1 &amp;&amp; コマンド_2</literal></term>
    <listitem>
     <para>左側のコマンドが成功した場合にのみ、右側のコマンドを実行します (論理積) 。下記の例では、ファイルの内容を出力したあと、その出力が成功した場合にのみ、ファイルの情報を出力します:</para>
<screen>&prompt.user;cat filelist.txt &amp;&amp; ls -l filelist.txt</screen>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><literal>コマンド_1 || コマンド_2</literal></term>
    <listitem>
     <para>左側のコマンドが失敗した場合にのみ、右側のコマンドを実行します (論理和) 。下記の例では、 <filename>/home/tux/foo</filename> ディレクトリの作成が失敗した場合にのみ、 <filename>/home/wilber/bar</filename> ディレクトリを作成します:</para>
<screen>&prompt.user;mkdir /home/tux/foo || mkdir /home/wilber/bar</screen>
    </listitem>
   </varlistentry>
<!--<varlistentry>
        <term><literal>{ Command1 ; Command2 }</literal></term>
        <listitem>
          <para>group the commands in the curley brackets and run it in
            the current shell.</para>
        </listitem>
      </varlistentry>-->
   <varlistentry>
    <term><literal>関数名(){ ... }</literal></term>
    <listitem>
     <para>シェル関数を作成します。関数のパラメータは位置パラメータを使用して所得することができます。たとえば下記の例では、短いメッセージを出力する <literal>hello</literal> という関数を定義します:</para>
<screen>&prompt.user;hello() { echo "Hello $1"; }</screen>
     <para>関数の呼び出しは、下記のようにして行ないます:</para>
<screen>&prompt.user;hello Tux</screen>
     <para>上記を実行すると、下記のように出力されます:</para>
<screen>Hello Tux</screen>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect1>
 <sect1 xml:id="sec-adm-shell-commonconstructs">
  <title>一般的なフローの構築</title>

  <para>スクリプトの流れを制御するため、シェルには <command>while</command> , <command>if</command> , <command>for</command> , <command>case</command> の各要素が提供されています。</para>

<!-- toms: Explaining test expressions? -->

  <sect2 xml:id="sec-adm-shell-if">
   <title>制御コマンド - if</title>
   <para><command>if</command> コマンドは条件分岐を行なうことができるコマンドです。たとえば下記の例では、現在のユーザが Tux であるかどうかによって、出力されるメッセージが変わる仕組みを作っています:</para>
<screen>if test $USER = "tux"; then
  echo "Hello Tux."
else
  echo "You are not Tux."
fi</screen>
   <para>test 表現を使用することで、より複雑かつできるかぎりシンプルな構造を作成することができます。下記の例では、 <filename>foo.txt</filename> ファイルが存在しているかどうかを確認し、存在していればメッセージを出力します:</para>
<screen>if test -e /tmp/foo.txt ; then
  echo "Found foo.txt"
fi</screen>
   <para>test 表現は大括弧 [] で省略することができます:</para>
<screen>if [ -e /tmp/foo.txt ] ; then
  echo "Found foo.txt"
fi</screen>
   <para>さらに詳しい表記方法については、 <link xlink:href="https://bash.cyberciti.biz/guide/If..else..fi"/> をお読みください。</para>
  </sect2>

  <sect2 xml:id="sec-adm-shell-for">
   <title><command>for</command> コマンドによるループの作成</title>
   <para><command>for</command> は一連のコマンドを繰り返し実行するための表現です。下記の例では、カレントディレクトリ内にある PNG ファイルについて、その情報を出力しています:</para>
<screen>for i in *.png; do
 ls -l $i
done</screen>
  </sect2>
 </sect1>
 <sect1 xml:id="sec-adm-shell-moreinfo">
  <title>さらなる情報</title>

  <para>bash に関する重要な情報は、マニュアルページ内に書かれています。詳しくは <command>man bash</command> を実行してお読みください。また、このトピックに関して、さらなる情報をご希望の場合は、下記をお読みください:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para><link xlink:href="http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html"/> &mdash;Bash Guide for Beginners (英語)</para>
   </listitem>
   <listitem>
    <para><link xlink:href="http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html"/> &mdash;BASH Programming - Introduction HOW-TO (英語)</para>
   </listitem>
   <listitem>
    <para><link xlink:href="http://tldp.org/LDP/abs/html/index.html"/> &mdash;Advanced Bash-Scripting Guide (英語)</para>
   </listitem>
   <listitem>
    <para><link xlink:href="http://www.grymoire.com/Unix/Sh.html"/> &mdash;Sh - the Bourne Shell (英語)</para>
   </listitem>
  </itemizedlist>
 </sect1>
</chapter>
