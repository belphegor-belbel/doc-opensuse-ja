<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-systemd-coredump">
 <title>アプリケーションクラッシュ時の &systemdcd; の使用</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>&systemdcd; はアプリケーションのクラッシュを解析するために、カーネルのコアダンプ情報を採取して表示できる仕組みです。特定のプロセス (もしくはアプリケーションに属する複数のプロセス) がクラッシュした場合、既定では &systemd; のジャーナル内に、可能であればバックトレースを含めてコアダンプを記録します。コアダンプの既定の出力先は <filename>/var/lib/systemd/coredump</filename> になっています。この出力されたコアダンプをもとに、 <command>gdb</command> や <command>crash</command> (詳しくは <xref linkend="cha-tuning-kdump-analyze"/> をお読みください) を利用して解析を行うことができます。このほか、コアダンプを保存せず、ジャーナル内にのみ記録を残す設定を行うこともできます。これは収集される情報を最小限に絞る目的や、機密情報をストレージ内に残さないようにする目的で使用します。</para>
 <sect1 xml:id="sect-sys-coredump-default">
  <title>使用と設定</title>

  <para>&systemdcd; は既定で有効化され、すぐに使用できるようになっています。既定の設定ファイルは <filename>/etc/systemd/coredump.conf</filename> 内に存在しています:</para>

<screen>[Coredump]
#Storage=external
#Compress=yes
#ProcessSizeMax=2G
#ExternalSizeMax=2G
#JournalSizeMax=767M
#MaxUse=
#KeepFree=
</screen>

  <para>下記の例では、 vim を利用して SEGFAULT を発生させ、ジャーナルとコアダンプを出力させるテスト方法を説明しています。</para>

  <procedure xml:id="pro-test-coredump">
   <title>vim を利用したコアダンプの作成</title>
    <step>
   <para>まずは <systemitem>debuginfo-pool</systemitem> および <systemitem>debuginfo-update</systemitem> の各リポジトリを有効化します</para>
   </step>
   <step>
    <para><package>vim-debuginfo</package> をインストールします</para>
   </step>
   <step>
    <para><command>vim testfile</command> と入力して実行し、文字を入力します</para>
   </step>
   <step>
    <para>PID を取得して SEGFAULT を発生させます:</para>
<screen>&prompt.user;ps ax | grep vim
2345 pts/3    S+     0:00 vim testfile               
                 
&prompt.root;kill -s SIGSEGV 2345</screen>
<para>vim は下記のようなエラーメッセージを出力するはずです:</para>
<screen>Vim: Caught deadly signal SEGV
Vim: Finished.
Segmentation fault (コアダンプ)</screen>
   </step>
   <step>
    <para>生成されたコアダンプファイルを調査します:</para>
<screen>&prompt.root;coredumpctl
TIME                        PID  UID  GID SIG PRESENT EXE
Wed 2019-11-12 11:56:47 PST 2345 1000 100 11  *       /bin/vim

&prompt.root;coredumpctl info
PID: 2345 (vim)
UID: 0 (root)
GID: 0 (root)
Signal: 11 (SEGV)
Timestamp: Wed 2019-11-12 11:58:05 PST
Command Line: vim testfile
Executable: /bin/vim
Control Group: /user.slice/user-1000.slice/session-1.scope
    Unit: session-1.scope
    Slice: user-1000.slice
    Session: 1
    Owner UID: 1000 (tux)
    Boot ID: b5c251b86ab34674a2222cef102c0c88
    Machine ID: b43c44a64696799b985cafd95dc1b698
    Hostname: linux-uoch
    Coredump: /var/lib/systemd/coredump/core.vim.0.b5c251b86ab34674a2222cef102
    Message: Process 2345 (vim) of user 0 dumped core.
                
         Stack trace of thread 2345:
         #0  0x00007f21dd87e2a7 kill (libc.so.6)
         #1  0x000000000050cb35 may_core_dump (vim)
         #2  0x00007f21ddbfec70 __restore_rt (libpthread.so.0)
         #3  0x00007f21dd92ea33 __select (libc.so.6)
         #4  0x000000000050b4e3 RealWaitForChar (vim)
         #5  0x000000000050b86b mch_inchar (vim)
[...]                                             
</screen>
   </step>
  </procedure>

  <para>複数のコアダンプが生成されている場合は、 <command>coredumpctl info</command> と入力することで、全てのものを表示することができます。このほか、 <literal>PID</literal> , <literal>COMM</literal> (コマンド), <literal>EXE</literal> (実行ファイルのフルパス) などで絞り込むこともできます。たとえば vim に対する全てのコアダンプを表示したい場合は、下記のように入力して実行します:</para>

<screen>&prompt.root;coredumpctl info /bin/vim</screen>

  <para>特定の <literal>PID</literal> が生成したコアダンプを表示したい場合は、下記のように入力して実行します:</para>

<screen>
&prompt.root;coredumpctl info 2345</screen>

  <para>選択したコアダンプを <command>gdb</command> に出力します:</para>

<screen>
&prompt.root;coredumpctl gdb 2345</screen>

  <para><literal>PRESENT</literal> 列にアスタリスク記号が表示されている場合、これは選択したコアダンプが存在していることを表します。この列に何も書かれていない場合はコアダンプが存在していないため、 <command>coredumpctl</command> はジャーナルから情報を採取するようになります。この動作は、 <filename>/etc/systemd/coredump.conf</filename> ファイル内の <literal>Storage</literal> セクションの項目を編集することで、変更することができます:</para>

  <itemizedlist>
   <listitem>
    <para><literal>Storage=none</literal>: コアダンプをジャーナル内に記録しますが、保存を行わないようにします。これは General Data Protection Regulation (GDPR) の規則に準拠するなどの目的で収集される情報を最小限に絞ったり、機密情報を記録したりしないようにするための選択肢です。</para>
   </listitem>
   <listitem>
    <para><literal>Storage=external</literal>: コアダンプを <filename>/var/lib/systemd/coredump</filename> 内に記録するようにします。</para>
   </listitem>
   <listitem>
    <para><literal>Storage=journal</literal>: コアダンプを &systemd; のジャーナル内に記録するようにします。</para>
   </listitem>
  </itemizedlist>

  <para>それぞれコアダンプが出力されるたびに &systemdcd; の新しいインスタンスが起動するようになっていますので、設定を変更したあとにサービスの再起動を行う必要はありません。次回のコアダンプから新しい設定が適用されます。</para>

  <para>なお、システムを再起動してしまうと、コアダンプは消去されてしまいます。恒久的にコアダンプを保存したい場合でも、 <command>coredumpctl</command> 側で対応することができます。下記の例では、指定した <literal>PID</literal> のコアダンプを <filename>vim.dump</filename> ファイル内に保存しています:</para>

<screen>&prompt.root;coredumpctl -o vim.dump dump 2345</screen>

  <para>コマンドの詳しい説明やオプションの一覧について、詳しくは <command>man systemd-coredump</command> , <command>man coredumpctl</command> , <command>man coredump.conf</command> をそれぞれお読みください。</para>
 </sect1>
</chapter>
