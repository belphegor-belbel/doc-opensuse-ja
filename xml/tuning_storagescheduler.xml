<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tuning-io">
  
 <title>I/O 性能のチューニング</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>I/O スケジューリングの制御とは、ストレージに対して送信される入出力操作をどのような順序にするのかを決めるものです。 &productname; では <literal>エレベータ</literal> と呼ばれる様々な I/O アルゴリズムに対応しています。これにより、様々な使用環境に対応することができるようになっています。エレベータはシーク操作を減らすためのものであるほか、 I/O 要求に対する優先順位付けとしても使用されます。</para>
 <para>最適な I/O エレベータを選択するにあたって、その根拠となるのは負荷だけではなく、ハードウエアの仕様も含みます。たとえば単一の ATA ディスクと SSD, RAID アレイやネットワークストレージシステムでは、それぞれ異なるチューニング戦略が必要となります。</para>
 
 <sect1 xml:id="cha-tuning-io-switch">
  <title>I/O スケジューリングの切り替え</title>

  <para>&productname; では起動時に既定の I/O スケジューラを選択しますが、 I/O スケジューラはデバイス単位で即時に変更することができます。これにより、システムパーティションを含んでいるデバイスと、データベースを含んでいるデバイスで別々のアルゴリズムを設定したりすることができるようになっています。</para>


  <para>既定の I/O スケジューラは、回転型のディスクであるかどうかによって異なります。回転型のディスクの場合は <systemitem class="resource">BFQ</systemitem> I/O スケジューラが使用されます。それ以外の場合は、 <systemitem class="resource">MQ-DEADLINE</systemitem> か <systemitem class="resource">NONE</systemitem> のいずれかが使用されます。</para>

  <para>動作中のシステム内で、特定のデバイスに対するエレベータを変更したい場合は、下記のコマンドを実行します:</para>

<screen>&prompt.sudo;echo <replaceable>スケジューラ</replaceable> &gt; /sys/block/<replaceable>デバイス名</replaceable>/queue/scheduler</screen>

  <para>ここで、 <replaceable>スケジューラ</replaceable> には <option>bfq</option> , <option>none</option> , <option>kyber</option> , <option>mq-deadline</option> のいずれかを指定します。また <replaceable>デバイス名</replaceable> には、ブロックデバイスのデバイス名 (例: <systemitem>sda</systemitem>) を指定します。ただし、この手順で変更を行なった場合、システムを再起動すると既定値に戻ってしまうことに注意してください。特定のデバイスに対して I/O スケジューラを恒久的に変更したい場合は、起動時に実行されるスクリプトの中で上記を実行するように設定するか、もしくは <filename>/lib/udev/rules.d/</filename> 内に適切な udev ルールを記述してください。この方法によるチューニングについて、詳しくは <filename>/lib/udev/rules.d/60-ssd-scheduler.rules</filename> をお読みください。</para>

  <note os="sles" arch="zseries">
   <title>&zseries; での既定のスケジューラについて</title>
   <para>&zseries; 環境では、既定の I/O スケジューラはデバイスドライバ側で設定されます。</para>
  </note>

  <note os="sles" arch="x86_64">
   <title><literal>elevator</literal> 起動パラメータの削除について</title>
   <para><literal>elevator</literal> 起動パラメータは削除されています。 blk-mq I/O パスが cfq を置き換えており、 <literal>elevator</literal> 起動パラメータは含まれなくなっています。</para>
  </note>

 </sect1>

 <sect1 xml:id="cha-tuning-io-schedulers-blkmq">
   <title>blk-mq I/O パスで利用可能な I/O エレベータ</title>
     <para>下記の表には、 &productname; で blk-mq I/O パスを使用する場合に、利用可能なエレベータの一覧を示しています。それぞれのエレベータにはさらに細かくチューニングを行なうためのチューナブルパラメータが存在していますが、これらは下記のようなコマンドを実行することで、設定することができます:</para>

<screen>echo <replaceable>値</replaceable> &gt; /sys/block/<replaceable>デバイス名</replaceable>/queue/iosched/<replaceable>チューナブル名</replaceable></screen>

  <para>ここで、 <replaceable>値</replaceable> には <replaceable>チューナブル名</replaceable> に対応する値を、 <replaceable>デバイス名</replaceable> にはブロックデバイス名をそれぞれ指定します。</para>

  <para>また、デバイス (例: <systemitem>sda</systemitem>) に対して利用可能なエレベータを確認したい場合は、下記のようなコマンドを入力して実行します (なお、現在選択されているエレベータが [] で括られて出力されます):</para>

<screen>&prompt.user;cat /sys/block/sda/queue/scheduler
[mq-deadline] kyber bfq none</screen>

  <note os="sles" arch="x86_64">
    <title>従来のブロックパスから blk-mq I/O パスに切り替えた場合のスケジューラオプションについて</title>
    <para>特定のデバイスを従来のブロックパスから blk-mq I/O パスに切り替えた場合、 <option>none</option> オプションは <option>noop</option> と、 <option>mq-deadline</option> は <option>deadline</option> と、 <option>bfq</option> は <option>cfq</option> とほぼ同等の動作になります。</para>
  </note>

  <sect2 xml:id="sec-tuning-io-schedulers-mqdeadline">
   <title><systemitem class="resource">MQ-DEADLINE</systemitem></title>
   <para><systemitem class="resource">MQ-DEADLINE</systemitem> は遅延を重視した I/O スケジューラです。 <systemitem class="resource">MQ-DEADLINE</systemitem> には下記のようなチューナブルパラメータが用意されています:</para>

   <table xml:id="tab-tunables-mq-deadline">
     <title><systemitem class="resource">MQ-DEADLINE</systemitem> でのチューナブルパラメータ</title>
     <tgroup cols="2">
       <colspec colnum="1" colname="1" colwidth="3000*"/>
       <colspec colnum="2" colname="2" colwidth="7000*"/>
       <thead>
	 <row>
	   <entry><para>ファイル</para></entry>
	   <entry><para>説明</para></entry>
	 </row>
       </thead>
       <tbody>
	 <row>
	   <entry><para><filename>writes_starved</filename></para></entry>
	   <entry><para>書き込み回数に対する読み込み回数の推奨値を制御します。たとえば <literal>3</literal> という値であれば、同じ選択範囲のディスクに対して、書き込み 1 回に対して読み込みを 3 回まで実施できるようになります。</para><para>既定値は <literal>3</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>read_expire</filename></para></entry>
	   <entry><para>ミリ秒単位で読み込み処理の期限 (現在時刻からの経過時間) を指定します。</para><para>既定値は <literal>500</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>write_expire</filename></para></entry>
	   <entry><para>ミリ秒単位で書き込み処理の期限 (現在時刻からの経過時間) を指定します。</para><para>既定値は <literal>5000</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>front_merges</filename></para></entry>
	   <entry><para>フロントマージ要求の試行を行なう (1) か行なわない (0) かを指定します。</para><para>既定値は <literal>1</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>fifo_batch</filename></para></entry>
	   <entry><para>一括 (バッチ) 処理時の最大要求数を設定します (期限の判断がその単位で行なわれます) 。このパラメータは遅延とスループットのバランスを取るために使用されるもので、たとえば <literal>1</literal> に設定する (一括処理で 1 つずつ処理する) と、 "最初に到着したものを最初に処理する" 動作になり、最も遅延を少なくすることができます。逆により大きな数値にすると、一般にスループットを改善することができます。</para><para>既定値は <literal>16</literal> です。</para></entry>
	 </row>
       </tbody>
     </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec-tuning-io-schedulers-none">
   <title><systemitem class="resource">NONE</systemitem></title>
   <para>blk-mq 向けの I/O エレベータとして <systemitem class="resource">NONE</systemitem> を選択した場合、 I/O スケジューラでは何も行なわず、デバイスに対してそのまま I/O リクエストが渡されるようになります。</para>
   <para>NVM Express デバイスに対しては、 <systemitem class="resource">NONE</systemitem> が既定値となっています。他の I/O エレベータオプションとは異なり、オーバーヘッドが存在しないため、これらのデバイスに対して最も高速に I/O リクエストを送信できるようになっています。</para>
   <para><systemitem class="resource">NONE</systemitem> に対するチューナブルパラメータはありません。</para>
  </sect2>

  <sect2 xml:id="sec-tuning-io-schedulers-bfq">
   <title><systemitem class="resource">BFQ</systemitem> (Budget Fair Queueing)</title>
   <para><systemitem class="resource">BFQ</systemitem> は公平性を重視したスケジューラです。大まかに説明すると、 "CFQ のスライス単位のサービス方式をベースにした、比例分配型のストレージ I/O スケジューリングアルゴリズム" であると言えるものです。ただし、 BFQ では CFQ のようなタイムスライスではなく、セクタ数をベースに割り当てを設定します (ソースコード: <!-- This is a permalink for https://github.com/torvalds/linux/blob/v4.12/block/bfq-iosched.c#L31 --> <link xlink:href="https://github.com/torvalds/linux/blob/6f7da290413ba713f0cdd9ff1a2a9bb129ef4f6c/block/bfq-iosched.c#L31">linux-4.12/block/bfq-iosched.c</link>) 。</para>
   <para><systemitem class="resource">BFQ</systemitem> では、スケジューリングの決定に対して影響を及ぼすことのできる、 I/O 優先順位を設定することができます (詳しくは <xref linkend="cha-tuning-resources-disk-ionice"/> をお読みください) 。</para>
   <para><systemitem class="resource">BFQ</systemitem> には下記のようなチューナブルパラメータが用意されています:</para>
   <table xml:id="tab-tunables-bfq">
     <title><systemitem class="resource">BFQ</systemitem> でのチューナブルパラメータ</title>
     <tgroup cols="2">
       <colspec colnum="1" colname="1" colwidth="3000*"/>
       <colspec colnum="2" colname="2" colwidth="7000*"/>
       <thead>
	 <row>
	   <entry><para>ファイル</para></entry>
	   <entry><para>説明</para></entry>
	 </row>
       </thead>
       <tbody>
	 <row>
	   <entry><para><filename>slice_idle</filename></para></entry>
	   <entry><para>空のキューに対して次のリクエストが届くまでに待機する時間を、ミリ秒単位で指定します。</para><para>既定値は <literal>8</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>slice_idle_us</filename></para></entry>
	   <entry><para><filename>slice_idle</filename> と同じ意味ですが、こちらはマイクロ秒単位で指定します。</para><para>既定値は <literal>8000</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>low_latency</filename></para></entry>
	   <entry><para><systemitem class="resource">BFQ</systemitem> を低遅延モードで動作させる (1) か動作させない (0) かを設定します。低遅延モードで動作させると、特定のアプリケーション (たとえば対話的なアプリケーション) を低遅延で動作させることができるようになります。</para><para>既定値は <literal>1</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>back_seek_max</filename></para></entry>
	   <entry><para>後方シーク処理に対する最大値 (キロバイト単位) を指定します。</para><para>既定値は <literal>16384</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>back_seek_penalty</filename></para></entry>
	   <entry><para>後方シーク処理でのコスト値の算出に使用する値です。</para><para>既定値は <literal>2</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>fifo_expire_async</filename></para></entry>
	   <entry><para>非同期リクエストの期限切れを設定する際に使用する値 (ミリ秒単位) です。</para><para>既定値は <literal>250</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>fifo_expire_sync</filename></para></entry>
	   <entry><para>同期リクエストの期限切れを設定する際に使用する値 (ミリ秒単位) です。</para><para>既定値は <literal>125</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>timeout_sync</filename></para></entry>
	   <entry><para>タスク (キュー) が選択されてから処理されるまでの最大時間をミリ秒単位で指定します。</para><para>既定値は <literal>124</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>max_budget</filename></para></entry>
	   <entry><para><literal>timeout_sync</literal> 内で処理する最大セクタ数を制限するための設定です。この値を <literal>0</literal> に設定すると、 <systemitem class="resource">BFQ</systemitem> は <filename>timeout_sync</filename> の値と予測されるピークレートを元に内部計算を行なうようになります。</para><para>既定値は <literal>0</literal> (自動チューニング) です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>strict_guarantees</filename></para></entry>
	   <entry><para><systemitem class="resource">BFQ</systemitem> において、特定の条件下で帯域の共有をより厳密に行なうための処理を行なう (1) か行なわない (0) かを設定します。</para><para>既定値は <literal>0</literal> です。</para></entry>
	 </row>
       </tbody>
     </tgroup>
   </table>
  </sect2>

  <sect2 xml:id="sec-tuning-io-schedulers-kyber">
   <title><systemitem class="resource">KYBER</systemitem></title>
   <para><systemitem class="resource">KYBER</systemitem> は遅延時間の削減を重視した I/O スケジューラです。読み込みや同期書き込みに対して遅延の目標値を設定し、この目標値に適合するように I/O リクエストの流量を調整します。</para>
   <table xml:id="tab-tunables-kyber">
     <title><systemitem class="resource">KYBER</systemitem> でのチューナブルパラメータ</title>
     <tgroup cols="2">
       <colspec colnum="1" colname="1" colwidth="3000*"/>
       <colspec colnum="2" colname="2" colwidth="7000*"/>
       <thead>
	 <row>
	   <entry><para>ファイル</para></entry>
	   <entry><para>説明</para></entry>
	 </row>
       </thead>
       <tbody>
	 <row>
	   <entry><para><filename>read_lat_nsec</filename></para></entry>
	   <entry><para>読み込み処理での遅延目標値をナノ秒単位で指定します。</para><para>既定値は <literal>2000000</literal> です。</para></entry>
	 </row>
	 <row>
	   <entry><para><filename>write_lat_nsec</filename></para></entry>
	   <entry><para>書き込み処理での遅延目標値をナノ秒単位で指定します。</para><para>既定値は <literal>10000000</literal> です。</para></entry>
	 </row>
       </tbody>
     </tgroup>
   </table>

  </sect2>
 </sect1>
 
 <sect1 xml:id="cha-tuning-io-barrier">
  <title>I/O バリアのチューニング</title>

  <para>ext3, ext4 などのファイルシステムでは、 fsync やトランザクションのコミット時に、ディスクに対して書き込みバリアを送信します。書き込みバリアは書き込みの順序を保証するための仕組みで、これによって揮発性のあるディスクの書き込みキャッシュを安全に使用できるようにしています (ただし、これによって少しの性能劣化があります) 。お使いのディスクに何らかの方式によるバッテリーが搭載されている場合、バリアを無効化しても、安全に性能を改善することができます。</para>

  <important>
  <title><option>nobarrier</option> is deprecated in XFS</title>
  <para>
  Note that the <option>nobarrier</option> option has been completely deprecated
  for XFS, and it is not a valid mount option in &sle; 15 SP2 and upward. Any
  XFS mount command that explicitly specifies the flag will fail to mount the
  file system. To prevent this from happening, make sure that no scripts and
  fstab entries contain the <option>nobarrier</option> option.
  </para>
  </important>

  <para>書き込みバリア送信の無効化は、 <option>nobarrier</option> マウントオプションで行なうことができます。</para>

  <warning>
   <title>バリアの無効化によるデータ損失の危険性について</title>
   <para>電源障害時にキャッシュからディスクへの書き込みが正しく保証されない環境でバリアを無効化すると、ファイルシステムの破壊やデータ損失が発生することがあります。</para>
  </warning>
 </sect1>

</chapter>
