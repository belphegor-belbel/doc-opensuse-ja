<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<!-- FATE#320468 [DOCU] Create a network teaming (teamd) section in
                 administration guide doc
     Compare to sec.network.iface-bonding
-->
<sect1 xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:id="sec-network-iface-teaming">
 <title>&netteam; によるチームデバイス (チーミング／ボンディング) の設定</title>

 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

 <remark>toms 2016-06-16: FATE#320468</remark>

 <para><quote>リンクアグリゲーション</quote> とは、複数のネットワーク接続を組み合わせて (もしくは束ねて) 1 つの論理レイヤを提供する一般的な用語です。そのほかにも、 <quote>チャンネルチーミング</quote> , <quote>イーサネットボンディング</quote> , <quote>ポートトランケーティング</quote> などと呼ばれることもありますが、いずれも同じような意味であり、同じような意図で作られている仕組みです。</para>

 <para>これらの考え方は一般に <quote>ボンディング</quote> として知られているもので、元々は Linux カーネル内に組み込まれている機能を意味します (ボンディングについての詳細は、 <xref linkend="sec-network-iface-bonding"/> をお読みください) 。 <emphasis>&netteam;</emphasis> という用語は、この考え方をさらに進化させた実装を意味しています。</para>

 <para>ボンディングと &netteam; の大きな違いとして挙げられるのは、チーミングは teamd のインスタンスに対してインターフェイスを提供するための小さなカーネルモジュールが複数存在するという点です。それ以外の処理は全てユーザスペース側で行います。ボンディングはこれとは異なり、全ての機能をカーネル側で行っています。詳しい比較については、 <xref linkend="tab-team-comparison"/> をお読みください。</para>

 <table xml:id="tab-team-comparison">
  <title>ボンディングとチーミングの機能比較</title>
  <tgroup cols="3">
   <colspec colname="c1"/>
   <colspec colname="c2"/>
   <colspec colname="c3"/>
   <thead>
    <row>
     <entry>機能</entry>
     <entry>ボンディング</entry>
     <entry>チーミング</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>ブロードキャスト型／ラウンドロビン型送信ポリシー</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>アクティブ-バックアップ型送信ポリシー</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>LACP (802.3ad) サポート</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>ハッシュベースの送信ポリシー</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>ユーザ側でのハッシュ関数の設定</entry>
     <entry>いいえ</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>送信負荷分散 (TLB) サポート</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>LACP 向けの送信負荷分散サポート</entry>
     <entry>いいえ</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>ethtool リンク監視</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>ARP リンク監視</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>NS/NA (IPV6) リンク監視</entry>
     <entry>いいえ</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>TX/RX パスにおける RCU ロッキング</entry>
     <entry>いいえ</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>ポートの優先順位と固着設定</entry>
     <entry>いいえ</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>個別／ポート別リンク監視設定</entry>
     <entry>いいえ</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>複数リンクの監視設定</entry>
     <entry>制限あり</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>VLAN サポート</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry>複数デバイスのスタック</entry>
     <entry>はい</entry>
     <entry>はい</entry>
    </row>
    <row>
     <entry namest="c1" nameend="c3">情報源: <link xlink:href="https://libteam.org/files/teamdev.pp.pdf"/></entry>
    </row>
   </tbody>
  </tgroup>
 </table>

 <para>ボンディングと &netteam; の実装は、同時に使用することもできます。また、 &netteam; は既存のボンディングに対する代替としても使用することができますが、置き換えるようなものではありません。</para>

 <para>&netteam; には様々な用途があります。本章では下記にある最も重要な 2 つの用途を説明しています:</para>

 <itemizedlist>
  <listitem>
   <para>異なるネットワークデバイス間の負荷分散</para>
  </listitem>
  <listitem>
   <para>デバイスに障害が発生した場合の、一方から他方へのネットワークデバイスの切り替え</para>
  </listitem>
 </itemizedlist>

 <para><remark>toms 2016-06-21: FATE#320947 for Teaming in/with YaST</remark> 現時点では、チーミングデバイスを作成するための &yast; モジュールは用意されていません。 &netteam; をご利用になる場合は、手作業で設定を行う必要があります。なお、下記には全ての &netteam; 設定で利用することのできる、一般的な手順を説明しています:</para>

 <procedure xml:id="pro-team-general">
  <title>一般的な手順</title>
  <step>
   <para>まずは <package>libteam-tools</package> パッケージをインストールします:</para>
<screen>&prompt.sudo;<command>zypper in libteam-tools</command></screen>
  </step>
  <step>
   <para>次に <filename>/etc/sysconfig/network/</filename> ディレクトリ内に設定ファイルを作成します。一般的には <filename>ifcfg-team0</filename> のようなファイル名で作成します。複数の &netteam; デバイスを作成する場合は、末尾の数字を 1 つずつ増やしながら作成してください。</para>
   <para>この設定ファイルには、マニュアルページで説明されている各種の指定を記述します。詳しくは <command>man ifcfg</command> および <command>man ifcfg-team</command> をお読みください。また、お使いのシステム内には、設定ファイルのサンプル (<filename>/etc/sysconfig/network/ifcfg.template</filename>) も用意されていますので、こちらもあわせてお読みください。</para>
  </step>
  <step>
   <para>チーミングデバイス内に組み込むインターフェイスの設定ファイルを削除します。たとえば <filename>ifcfg-eth0</filename> や <filename>ifcfg-eth1</filename> などを削除してください。</para>
   <para>なお、いずれのファイルとも、バックアップを取ってから削除することをお勧めします。 Wicked 側では、チーミングに必要なパラメータで設定ファイルを再作成します。</para>
  </step>
  <step>
   <para>なお、必要であれば Wicked の設定ファイルとして取り込まれていることを確認します:</para>
<screen>&prompt.sudo;<command>wicked show-config</command></screen>
  </step>
  <step>
   <para>&netteam; デバイス <systemitem class="service">team0</systemitem> を開始するため、下記のコマンドを実行します:</para>
<screen>&prompt.sudo;<command>wicked ifup team0</command></screen>
   <para>デバッグ情報を取得する必要がある場合は、 <command>all</command> サブコマンドの後ろに  <option>--debug all</option> を指定してください。</para>
  </step>
  <step>
   <para>&netteam; デバイスの状態を確認します。具体的には下記のコマンドを実行します:</para>
   <itemizedlist>
    <listitem>
     <para>まずは Wicked の teamd インスタンスの状態を確認します:</para>
<screen>&prompt.sudo;<command>wicked ifstatus --verbose team0</command></screen>
    </listitem>
    <listitem>
     <para>インスタンス全体の状態を確認します:</para>
<screen>&prompt.sudo;<command>teamdctl team0 state</command></screen>
    </listitem>
    <listitem>
     <para>teamd インスタンスの systemd の状態を確認します:</para>
<screen>&prompt.sudo;<command>systemctl status teamd@team0</command></screen>
    </listitem>
   </itemizedlist>
   <para>それぞれは、お使いの環境によって出力が少しずつ異なります。</para>
  </step>
  <step>
   <para>何らかの理由で <filename>ifcfg-team0</filename> を書き換える必要がある場合は、書き換えた後に下記のコマンドを実行して、設定ファイルを再読み込みさせてください:</para>
<screen>&prompt.sudo;<command>wicked ifreload team0</command></screen>
  </step>
 </procedure>

 <para>ただし、チーミングデバイスの開始や停止に際しては、 <command>systemctl</command> を <emphasis>使用しないでください</emphasis> 。代わりに、上述のとおり <command>wicked</command> コマンドを使用してください。</para>

 <para>チーミングデバイスを削除するには、下記の手順で行います:</para>
 <procedure>
  <title>チーミングデバイスの削除</title>
  <step>
   <para>まずは &netteam; デバイス (例: <systemitem class="service">team0</systemitem>) を停止します:</para>
   <screen>&prompt.sudo;<command>wicked ifdown team0</command></screen>
  </step>
  <step>
   <para>設定ファイル <filename>/etc/sysconfig/network/ifcfg-team0</filename> を <filename>/etc/sysconfig/network/.ifcfg-team0</filename> のように名前変更します。ファイル名の冒頭にドットを入れることで、 wicked からは読み込みができなくなります。完全に不要になった段階で、ファイルを削除してください。</para>
  </step>
  <step>
   <para>設定を再読み込みします:</para>
   <screen>&prompt.sudo;<command>wicked ifreload all</command></screen>
  </step>
 </procedure>

 <sect2 xml:id="sec-network-iface-teaming-lb">
  <title>使用例: &netteam; による負荷分散</title>
  <para>負荷分散は帯域を増やすための仕組みです。下記のような設定で &netteam; デバイスを作成すると、負荷分散の機能を設定することができます。デバイスの開始や停止、設定ファイルの配置などについては、 <xref linkend="pro-team-general"/> をお読みください。また、設定後は <command>teamdctl</command> の出力もご確認ください。</para>
  <example xml:id="ex-team-lb">
   <title>&netteam; による負荷分散の設定例</title>
<screen>STARTMODE=auto <co xml:id="co-team-lb-startmode"/>
BOOTPROTO=static <co xml:id="co-team-lb-boot-and-ip"/>
IPADDRESS="&exampledomain1ip;.1/24" <xref linkend="co-team-lb-boot-and-ip"/>
IPADDR6="fd00:deca:fbad:50::1/64" <xref linkend="co-team-lb-boot-and-ip"/>

TEAM_RUNNER="loadbalance" <co xml:id="co-team-lb-loadbalance"/>
TEAM_LB_TX_HASH="ipv4,ipv6,eth,vlan"
TEAM_LB_TX_BALANCER_NAME="basic"
TEAM_LB_TX_BALANCER_INTERVAL="100"

TEAM_PORT_DEVICE_0="eth0" <co xml:id="co-team-lb-dev"/>
TEAM_PORT_DEVICE_1="eth1" <xref linkend="co-team-lb-dev"/>

TEAM_LW_NAME="ethtool" <co xml:id="co-team-lb-name"/>
TEAM_LW_ETHTOOL_DELAY_UP="10" <co xml:id="co-team-lb-ethtool-delay"/>
TEAM_LW_ETHTOOL_DELAY_DOWN="10" <xref linkend="co-team-lb-ethtool-delay"/></screen>
<!-- Sync this calloutlist with the second example. Mostly the
        explanations are the same.
   -->
   <calloutlist>
    <callout arearefs="co-team-lb-startmode">
     <para>チーミングデバイスの開始方法を制御しています。 <literal>auto</literal> はインターフェイスを自動起動する意味になり、システムの起動時にネットワークサービスが開始されると、インターフェイスが自動的に設定され開始されます。</para>
     <para>デバイスを自動起動せず、手動で起動する必要がある場合は、 <varname>STARTMODE</varname> の値を <literal>manual</literal> にしてください。</para>
    </callout>
    <callout arearefs="co-team-lb-boot-and-ip">
     <para>固定の IP アドレスを設定しています (ここでは IPv4 アドレスとして <systemitem class="ipaddress">&exampledomain1ip;.1</systemitem> を、 IPv6 アドレスとして <systemitem class="ipaddress">fd00:deca:fbad:50::1</systemitem> をそれぞれ設定しています) 。</para>
     <para>&netteam; デバイスで動的な IP アドレスを使用する場合は、 <literal>BOOTPROTO="dhcp"</literal> を追加したあと、 <varname>IPADDRESS</varname> と <varname>IPADDR6</varname> の行を削除 (もしくはコメントアウト) してください。</para>
    </callout>
    <callout arearefs="co-team-lb-loadbalance">
     <para><varname>TEAM_RUNNER</varname> の値を <literal>loadbalance</literal> に設定することで、負荷分散モードを有効化しています。</para>
    </callout>
    <callout arearefs="co-team-lb-dev">
     <para>&netteam; デバイスを構成する 1 つ以上のデバイスを指定しています。</para>
    </callout>
    <callout arearefs="co-team-lb-name">
     <para>従属するデバイスの状態を開始するためのリンク監視機構を定義しています。既定値の <literal>ethtool</literal> では、デバイスのリンクと存在のみを監視します。通常はこの設定で問題ありませんが、デバイスから本当にパケットを送受信できるかどうかはチェックしていないことに注意してください。</para>
     <para>この接続の信頼性を高めたい場合は、 <literal>arp_ping</literal> オプションを設定してください。これは特定のホスト (ホストは <varname>TEAM_LW_ARP_PING_TARGET_HOST</varname> で設定します) に対して ping を送信するための仕組みで、この ping が成功することをもって、ネットワークが正常に接続されていると判断します。</para>
    </callout>
    <callout arearefs="co-team-lb-ethtool-delay">
     <para>リンクが確立し (もしくはリンクが外れ) てから、リンク監視機構がそれを確認するまでの時間をミリ秒単位で指定します。</para>
    </callout>
   </calloutlist>
  </example>
 </sect2>

 <sect2 xml:id="sec-network-iface-teaming-failover">
  <title>使用例: &netteam; による冗長構成</title>
  <para>冗長構成は &netteam; デバイスで高可用性を実現するための仕組みで、予備のネットワークデバイスを用意して障害に耐える仕組みを作るものです。予備のネットワークデバイスは常に動作し続け、メインのデバイスに障害が発生すると通信を引き継ぐようになります。</para>
  <para>下記のような設定で &netteam; デバイスを作成すると、冗長構成の機能を設定することができます。デバイスの開始や停止、設定ファイルの配置などについては、 <xref linkend="pro-team-general"/> をお読みください。また、設定後は <command>teamdctl</command> の出力もご確認ください。</para>
  <example xml:id="ex-team-failover">
   <title>&netteam; デバイスに対する冗長構成 <!-- DHCP?? --> の設定例</title>
<screen>STARTMODE=auto <co xml:id="co-team-failover-startmode"/>
BOOTPROTO=static <co xml:id="co-team-failover-boot-and-ip"/>
IPADDR="&exampledomain1ip;.2/24" <xref linkend="co-team-failover-boot-and-ip"/>
IPADDR6="fd00:deca:fbad:50::2/64" <xref linkend="co-team-failover-boot-and-ip"/>

TEAM_RUNNER=activebackup <co xml:id="co-team-failover-activebackup"/>
TEAM_PORT_DEVICE_0="eth0" <co xml:id="co-team-failover-dev"/>
TEAM_PORT_DEVICE_1="eth1" <xref linkend="co-team-failover-dev"/>

TEAM_LW_NAME=ethtool <co xml:id="co-team-failover-name"/>
TEAM_LW_ETHTOOL_DELAY_UP="10" <co xml:id="co-team-failover-ethtool-delay"/>
TEAM_LW_ETHTOOL_DELAY_DOWN="10" <xref linkend="co-team-failover-ethtool-delay"/></screen>
   <calloutlist>
    <callout arearefs="co-team-failover-startmode">
     <para>チーミングデバイスの開始方法を制御しています。 <literal>auto</literal> はインターフェイスを自動起動する意味になり、システムの起動時にネットワークサービスが開始されると、インターフェイスが自動的に設定され開始されます。</para>
     <para>デバイスを自動起動せず、手動で起動する必要がある場合は、 <varname>STARTMODE</varname> の値を <literal>manual</literal> にしてください。</para>
    </callout>
    <callout arearefs="co-team-failover-boot-and-ip">
     <para>固定の IP アドレスを設定しています (ここでは IPv4 アドレスとして <systemitem class="ipaddress">&exampledomain1ip;.2</systemitem> を、 IPv6 アドレスとして <systemitem class="ipaddress">fd00:deca:fbad:50::2</systemitem> をそれぞれ設定しています) 。</para>
     <para>&netteam; デバイスで動的な IP アドレスを使用する場合は、 <literal>BOOTPROTO="dhcp"</literal> を追加したあと、 <varname>IPADDRESS</varname> と <varname>IPADDR6</varname> の行を削除 (もしくはコメントアウト) してください。</para>
    </callout>
    <callout arearefs="co-team-failover-activebackup">
     <para><varname>TEAM_RUNNER</varname> の値を <literal>activebackup</literal> に設定することで、冗長構成モードを有効化しています。</para>
    </callout>
    <callout arearefs="co-team-failover-dev">
     <para>&netteam; デバイスを構成する 1 つ以上のデバイスを指定しています。</para>
    </callout>
    <callout arearefs="co-team-failover-name">
     <para>従属するデバイスの状態を開始するためのリンク監視機構を定義しています。既定値の <literal>ethtool</literal> では、デバイスのリンクと存在のみを監視します。通常はこの設定で問題ありませんが、デバイスから本当にパケットを送受信できるかどうかはチェックしていないことに注意してください。</para>
     <para>この接続の信頼性を高めたい場合は、 <literal>arp_ping</literal> オプションを設定してください。これは特定のホスト (ホストは <varname>TEAM_LW_ARP_PING_TARGET_HOST</varname> で設定します) に対して ping を送信するための仕組みで、この ping が成功することをもって、ネットワークが正常に接続されていると判断します。</para>
    </callout>
    <callout arearefs="co-team-failover-ethtool-delay">
     <para>リンクが確立し (もしくはリンクが外れ) てから、リンク監視機構がそれを確認するまでの時間をミリ秒単位で指定します。</para>
    </callout>
   </calloutlist>
  </example>
 </sect2>

 <sect2 xml:id="sec-network-iface-teaming-vlan">
  <title>使用例: チーミングデバイスでの VLAN</title>
  <!-- From doccomment#33334 -->
  <para>VLAN とは <emphasis>仮想ローカルエリアネットワーク (Virtual Local Area Network)</emphasis> の略で、複数の <emphasis>論理</emphasis> イーサネットを単一の物理イーサネットで賄う仕組みです。この仕組みにより、 1 つのネットワークを複数の異なるネットワークに分割して、スイッチ側では同じ VLAN 同士の通信のみを中継するような動作を実現することができます。</para>
  <para>下記の使用例では、チーミングデバイスから 2 つの固定 VLAN を作成します:</para>
  <itemizedlist>
   <listitem>
     <para><systemitem class="other" otherclass="device">vlan0</systemitem>: IP アドレス=<systemitem class="ipaddress">&subnetI;0.1</systemitem></para>
   </listitem>
   <listitem>
     <para><systemitem class="other" otherclass="device">vlan1</systemitem>: IP アドレス=<systemitem class="ipaddress">&subnetII;0.1</systemitem></para>
   </listitem>
  </itemizedlist>

  <para>下記の手順で行います:</para>
  <procedure>
   <step>
    <para>まずはスイッチ側で VLAN タグ機能を有効化します。また、チーミングデバイスで負荷分散を実施している場合は、 <emphasis>Link Aggregation Control Protocol</emphasis> (LACP) (802.3ad) に対応したスイッチでなければなりません。詳しくはハードウエアのマニュアルをお読みください。</para>
   </step>
   <!--
   <step>
    <para>
     Enable the kernel module <systemitem>8021q</systemitem>.
    </para>
   </step>
   -->
   <step>
    <para>次にチーミングデバイスで負荷分散や冗長構成を使用するかどうかを決めます。それぞれの設定を行うには、 <xref linkend="sec-network-iface-teaming-lb"/> や <xref linkend="sec-network-iface-teaming-failover"/> をお読みください。</para>
   </step>
   <step>
    <para><filename>/etc/sysconfig/network</filename> ディレクトリ内に <filename>ifcfg-vlan0</filename> という設定ファイルを作成し、下記の内容を記述します:</para>
    <screen>STARTMODE="auto"
BOOTPROTO="static" <co xml:id="co-team-vlan-bootproto"/>
IPADDR='&subnetI;0.1/24' <co xml:id="co-team-vlan-ipaddr"/>
ETHERDEVICE="team0" <co xml:id="co-team-vlan-etherdevice"/>
VLAN_ID="0" <co xml:id="co-team-vlan-vlan-id"/>
VLAN='yes'</screen>
    <calloutlist>
     <callout arearefs="co-team-vlan-bootproto">
      <para>固定の IP アドレスである旨を指定しています (実際のアドレスは <varname>IPADDR</varname> で指定します) 。</para>
     </callout>
     <callout arearefs="co-team-vlan-ipaddr">
      <para>IP アドレスとネットマスクを指定しています。</para>
     </callout>
     <callout arearefs="co-team-vlan-etherdevice">
      <para>VLAN インターフェイスに使用する実インターフェイスを指定しています。ここではチーミングデバイス ( <systemitem>team0</systemitem> ) を指定しています。</para>
     </callout>
     <callout arearefs="co-team-vlan-vlan-id">
      <para>VLAN のユニーク ID を指定します。なお、ファイル名と <varname>VLAN_ID</varname> の値は、 <filename>ifcfg-vlan<replaceable>VLAN_ID の値</replaceable></filename> のように対応させておくことをお勧めします。この例では <varname>VLAN_ID</varname> を <literal>0</literal> に設定していますので、ファイル名は <filename>ifcfg-vlan0</filename> のようになります。</para>
     </callout>
     <!--<callout arearefs="co-team-vlan">
      <para>

      </para>
     </callout>-->
    </calloutlist>
   </step>
   <step>
    <para>設定ファイル <filename>/etc/sysconfig/network/ifcfg-vlan0</filename> を <filename>/etc/sysconfig/network/ifcfg-vlan1</filename> にコピーして、コピーした先のファイルを下記のとおり変更します:</para>
    <itemizedlist>
     <listitem>
      <para><varname>IPADDR</varname> の値を <systemitem class="ipaddress">&subnetI;0.1/24</systemitem> から <systemitem class="ipaddress">&subnetII;0.1/24</systemitem> に変更します。</para>
     </listitem>
     <listitem>
      <para><varname>VLAN_ID</varname> を <literal>0</literal> から <literal>1</literal> に変更します。</para>
     </listitem>
    </itemizedlist>
   </step>
   <step>
    <para>あとは 2 つの VLAN を開始します:</para>
    <screen>&prompt.root;<command>wicked</command> ifup vlan0 vlan1</screen>
   </step>
   <step>
    <para><command>ifconfig</command> の出力を確認します:</para>
    <screen>&prompt.root;<command>ifconfig</command> -a
[...]
vlan0     Link encap:Ethernet  HWaddr 08:00:27:DC:43:98
          inet addr:&subnetI;0.1 Bcast:&subnetI;0.255 Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fedc:4398/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:816 (816.0 b)

vlan1     Link encap:Ethernet  HWaddr 08:00:27:DC:43:98
          inet addr:&subnetII;0.1 Bcast:&subnetII;0.255 Mask:255.255.255.0
          inet6 addr: fe80::a00:27ff:fedc:4398/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:0 (0.0 b)  TX bytes:816 (816.0 b)</screen>
   </step>
   <!-- I feel, there is anything missing here... -->
  </procedure>
 </sect2>
</sect1>
