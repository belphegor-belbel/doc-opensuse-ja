<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "generic-entities.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-libvirt-overview">
  <title>&libvirt; デーモン</title>
  <info>
    <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
      <dm:bugtracker/>
      <dm:translation>yes</dm:translation>
    </dm:docmanager>
  </info>
  <para>&kvm; や &xen; の機能を提供する &libvirt; を使用するにあたっては、 1 つまたは複数のデーモンをインストールして有効化しておく必要があります。また &libvirt; には、モノリシック型とモジュール型という 2 種類の利用形態があります。モノリシック型の場合、 &libvirt; に標準で付属する &libvirtd; という単一のデーモンを使用します。ここには主要なハイパーバイザドライバのほか、ストレージやネットワーク、ノードデバイスの管理機能など、必要な全てのセカンダリドライバも用意されています。またモノリシック型の場合、 &libvirtd; は外部クライアントからの機密を保持したリモートアクセス機能も提供します。もう一方のモジュール型はしばらく後に作られた仕組みで、この場合それらの機能はそれぞれ別々のデーモンとして起動します。これにより、 &libvirt; のインストールをカスタマイズすることができるようになっています。既定ではモジュール型のデーモンが有効化されますが、個別のデーモンを無効化して &libvirtd; を有効化することで、従来のモノリシック型に切り替えることもできます。</para>
  <para>モジュール型のデーモンは、最小限の &libvirt; 機能のみを使用したい場合に有用です。たとえば仮想マシンで &libvirt; 以外が提供するストレージとネットワークを利用したい場合、 <package>libvirt-daemon-driver-storage</package> や <package>libvirt-daemon-driver-network</package> などのパッケージは不要になります。典型的な例が &kube; で、ネットワークやストレージ、 cgroup やネームスペース統合などの機能は &kube; 側が処理します。そのためモジュール型の場合は、 <systemitem class="daemon">virtqemud</systemitem> を提供する <package>libvirt-daemon-driver-&qemu;</package> パッケージのみが必須となります。モジュール型は、実際に使用するコンポーネントの種類が少ない場合に &libvirt; のインストールを最小化できる仕組みです。</para>

  <sect1 xml:id="libvirt-modular-daemon">
    <title>モジュール型デーモンの開始と停止</title>

    <para>モジュール型デーモンの場合、 <quote>virt<replaceable>ドライバ名</replaceable>d</quote> の形式でそれぞれのデーモンが提供されています。これらは <filename>/etc/libvirt/virt<replaceable>ドライバ名</replaceable>d.conf</filename> という設定ファイルで制御することができます。 &suse; では <systemitem class="daemon">virtqemud</systemitem> と <systemitem class="daemon">virtxend</systemitem> のハイパーバイザデーモンをサポートしているほか、下記に示すセカンダリデーモンをサポートしています:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>virtnetworkd</emphasis> - &libvirt; の仮想ネットワーク管理 API を提供する仮想ネットワーク管理デーモンです。たとえば virtnetworkd は、仮想マシンが使用する NAT 仮想ネットワークの作成機能などを提供します。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtnodedevd</emphasis> - &libvirt; のノードデバイス管理 API を提供するホスト物理デバイス管理デーモンです。たとえば virtnodedevd は、仮想マシンが使用する PCI デバイスをホストから切り離す機能などを提供します。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtnwfilterd</emphasis> - &libvirt; のファイアウオール管理 API を提供するホストファイアウオール管理デーモンです。たとえば virtnwfilterd は、仮想マシンに対するネットワークトラフィックのフィルタ機能などを提供します。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtsecretd</emphasis> - &libvirt; の機密管理 API を提供するホスト機密管理デーモンです。たとえば virtsecretd は、 LUKS ボリュームの鍵を保存する機能などを提供します。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtstoraged</emphasis> - &libvirt; のストレージ管理 API を提供するホストストレージ管理デーモンです。たとえば virtstoraged は、様々な種類のストレージプールを作成する機能のほか、作成したプール内にボリュームを作成する機能なども提供します。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtinterfaced</emphasis> - &libvirt; のネットワークインターフェイス管理 API を提供するホスト側 NIC 管理デーモンです。たとえば virtinterfaced は、ホスト側のボンディングデバイスの作成機能などを提供します。ただし &suse; では、 wicked や &nm; などのネットワーク管理ツールを使用するのが一般的であることから、本デーモンの使用は非推奨としております。そのため virtinterfaced についても無効化しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtproxyd</emphasis> - 従来型の &libvirtd; ソケットとモジュール型のデーモンソケットとの仲介を行うデーモンです。 &libvirt; をモジュール型で使用する場合、 virtproxyd を介することで、モノリシック型の &libvirtd; に似た API を利用できるようになります。モノリシック型の &libvirtd; ソケットに接続するクライアントからも使用することができます。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtlogd</emphasis> - 仮想マシンのコンソールに出力されるログを収集するデーモンです。 virtlogd はモノリシック型の &libvirtd; でも使用されているデーモンですが、 virtqemud の &systemd; ユニットファイルから virtlogd を開始するように設定していることから、モジュール型の &libvirtd; では明示的に開始する必要はありません。</para>
      </listitem>
      <listitem>
        <para><emphasis>virtlockd</emphasis> - ディスクなどの仮想マシンリソースに対して施錠 (ロック) を行うためのデーモンです。 virtlockd はモノリシック型の &libvirtd; でも使用されているデーモンですが、 virtqemud や virtxend の &systemd; ユニットファイルから virtlockd を開始するように設定していることから、モジュール型の &libvirtd; では明示的に開始する必要はありません。</para>
      </listitem>
    </itemizedlist>

    <para><systemitem class="daemon">virtlogd</systemitem> と <systemitem class="daemon">virtlockd</systemitem> はモノリシック型の &libvirtd; でも使用されます。また、これらのデーモンはセキュリティ上の理由から、 &libvirtd; とは分離されているためです。</para>

    <para>既定では、モジュール型デーモンは <filename>/var/run/libvirt/virt<replaceable>ドライバ名</replaceable>d-sock</filename> および <filename>/var/run/libvirt/virt<replaceable>ドライバ名</replaceable>d-sock-ro</filename> の 2 種類の UNIX ドメインソケットで待ち受けを行います。クライアントライブラリは通常、従来型の <filename>/var/run/libvirt/libvirtd-sock</filename> という UNIX ソケットファイルにアクセスしますが、これらのクライアント向けに virtproxyd というデーモンが提供されています。</para>

    <para>また、 <systemitem class="daemon">virtqemud</systemitem> と <systemitem class="daemon">virtxend</systemitem> は、 &systemd; の事前設定で有効化されているほか、 <systemitem class="daemon">virtnetworkd</systemitem> , <systemitem class="daemon">virtnodedevd</systemitem> , <systemitem class="daemon">virtnwfilterd</systemitem> , <systemitem class="daemon">virtstoraged</systemitem> , <systemitem class="daemon">virtsecretd</systemitem> の各デーモンも、対応するパッケージがインストールされていれば事前に有効化されます。これらは利便性向上のために設定されているものですが、モジュール型のデーモンはそれぞれ個別に管理することができます:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>virt<replaceable>ドライバ名</replaceable>d.service</emphasis> - <replaceable>ドライバ名</replaceable> に対応する仮想化デーモンを開始するためのメインのユニットファイルです。ホストの起動時に VM を開始する必要がある場合は、こちらを起動時に開始するように設定しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>virt<replaceable>ドライバ名</replaceable>d.socket</emphasis> - 読み書き可能な UNIX ソケットである <filename>/var/run/libvirt/virt<replaceable>ドライバ名</replaceable>d-sock</filename> に対応するユニットファイルです。こちらは起動時に開始するよう有効化しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>virt<replaceable>DRIVER</replaceable>d-ro.socket</emphasis> - 読み込み専用の UNIX ソケットである <filename>/var/run/libvirt/virt<replaceable>ドライバ名</replaceable>d-sock-ro</filename> に対応するユニットファイルです。こちらも起動時に開始するよう有効化しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>virt<replaceable>DRIVER</replaceable>d-admin.socket</emphasis> - 管理用の UNIX ソケットである <filename>/var/run/libvirt/virt<replaceable>ドライバ名</replaceable>d-admin-sock</filename> に対応するユニットファイルです。こちらも起動時に開始するよう有効化しておくことをお勧めします。</para>
      </listitem>
    </itemizedlist>

    <para>&systemd; で各種のソケットを有効化すると、 virt<replaceable>ドライバ名</replaceable>d.conf に設定されたソケット関連の設定が無視されるようになります。無視される設定と対応するユニットファイルは下記のとおりです:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>unix_sock_group</emphasis> - UNIX ソケットのグループ所有者を設定します。この設定は <filename>virt<replaceable>ドライバ名</replaceable>d.socket</filename> および <filename>virt<replaceable>ドライバ名</replaceable>d-ro.socket</filename> ユニットファイル内の <option>SocketGroup</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_ro_perms</emphasis> - 読み込み専用の UNIX ソケットのアクセス許可を設定します。この設定は <filename>virt<replaceable>ドライバ名</replaceable>d-ro.socket</filename> ユニットファイル内の <option>SocketMode</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_rw_perms</emphasis> - 読み書き可能な UNIX ソケットのアクセス許可を設定します。この設定は <filename>virt<replaceable>ドライバ名</replaceable>d.socket</filename> ユニットファイル内の <option>SocketMode</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_admin_perms</emphasis> - 管理用の UNIX ソケットのアクセス許可を設定します。この設定は <filename>virt<replaceable>ドライバ名</replaceable>d-admin.socket</filename> ユニットファイル内の <option>SocketMode</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_dir</emphasis> - 全ての UNIX ソケットが作成されるディレクトリを指定します。この設定は <filename>virt<replaceable>ドライバ名</replaceable>d.socket</filename> , <filename>virt<replaceable>ドライバ名</replaceable>d-ro.socket</filename> , <filename>virt<replaceable>ドライバ名</replaceable>d-admin.socket</filename> の各ユニットファイル内の <option>ListenStream</option> で個別に設定します。</para>
      </listitem>
    </itemizedlist>
  </sect1>
  <sect1 xml:id="libvirt-monolithic-daemon">
    <title>モノリシック型デーモンの開始と停止</title>

    <para>モノリシック型デーモンは &libvirtd; と呼ばれ、 <filename>/etc/libvirt/libvirtd.conf</filename> ファイルで設定を行います。 &libvirtd; はいくつかの &systemd; から構成されています:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>libvirtd.service</emphasis> - &libvirtd; を起動するためのメインとなる &systemd; ユニットファイルです。ホストの起動時に VM を開始する必要がある場合は、 <filename>libvirtd.service</filename> を起動時に開始するように設定しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>libvirtd.socket</emphasis> - 読み書き可能な UNIX ソケット <filename>/var/run/libvirt/libvirt-sock</filename> に対応するユニットファイルです。こちらも起動時に開始するよう有効化しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>libvirtd-ro.socket</emphasis> - こちらは読み込み専用の UNIX ソケットである <filename>/var/run/libvirt/libvirt-sock-ro</filename> に対応するユニットファイルです。こちらも起動時に開始するよう有効化しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>libvirtd-admin.socket</emphasis> - 管理用の UNIX ソケットである <filename>/var/run/libvirt/libvirt-admin-sock</filename> に対応するユニットファイルです。こちらも起動時に開始するよう有効化しておくことをお勧めします。</para>
      </listitem>
      <listitem>
        <para><emphasis>libvirtd-tcp.socket</emphasis> - 非 TLS リモートアクセスのための TCP ポート 16509 に対応するユニットファイルです。こちらは管理者が適切な認証機構を設定している場合を除き、起動時に開始するように設定すべきではありません。</para>
      </listitem>
      <listitem>
        <para><emphasis>libvirtd-tls.socket</emphasis> - TLS リモートアクセスのための TCP ポート 16509 に対応するユニットファイルです。管理者が x509 証明書と適切な認証機構を設定するまでは、起動時に開始するように設定すべきではありません。</para>
      </listitem>
    </itemizedlist>

    <para>&systemd; で各種のソケットを有効化すると、 <filename>libvirtd.conf</filename> に設定されたソケット関連の設定が無視されるようになります。無視される設定と対応するユニットファイルは下記のとおりです:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>listen_tcp</emphasis> - TCP 接続は <filename>libvirtd-tcp.socket</filename> ユニットファイルで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>listen_tls</emphasis> - TLS 接続は <filename>libvirtd-tls.socket</filename> ユニットファイルで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>tcp_port</emphasis> - 非 TLS 向け TCP ポートを設定します。こちらは <filename>libvirtd-tcp.socket</filename> ユニットファイル内の <option>ListenStream</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>tls_port</emphasis> - TLS 向け TCP ポートを設定します。こちらは <filename>libvirtd-tls.socket</filename> ユニットファイル内の <option>ListenStream</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>listen_addr</emphasis> - 待ち受ける IP アドレスを設定します。この設定は <filename>libvirtd-tcp.socket</filename> または <filename>libvirtd-tls.socket</filename> ユニットファイル内の <option>ListenStream</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_group</emphasis> - UNIX ソケットのグループ所有者を設定します。この設定は <filename>libvirtd.socket</filename> および <filename>libvirtd-ro.socket</filename> ユニットファイル内の <option>SocketGroup</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_ro_perms</emphasis> - 読み込み専用の UNIX ソケットのアクセス許可を設定します。この設定は <filename>libvirtd-ro.socket</filename> ユニットファイル内の <option>SocketMode</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_rw_perms</emphasis> - 読み書き可能な UNIX ソケットのアクセス許可を設定します。この設定は <filename>libvirtd.socket</filename> ユニットファイル内の <option>SocketMode</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_admin_perms</emphasis> - 管理用の UNIX ソケットのアクセス許可を設定します。この設定は <filename>libvirtd-admin.socket</filename> ユニットファイル内の <option>SocketMode</option> パラメータで設定します。</para>
      </listitem>
      <listitem>
        <para><emphasis>unix_sock_dir</emphasis> - 全ての UNIX ソケットが作成されるディレクトリを指定します。この設定は <filename>libvirtd.socket</filename> , <filename>libvirtd-ro.socket</filename> , <filename>libvirtd-admin.socket</filename> の各ユニットファイル内の <option>ListenStream</option> で個別に設定します。</para>
      </listitem>
    </itemizedlist>

    <important>
      <title>矛盾関係にある &libvirtd; と <systemitem class="daemon">xendomains</systemitem> のサービスについて</title>
      <para>&libvirtd; を開始してもエラーになってしまう場合は、まず <systemitem class="daemon">xendomains</systemitem> サービスが開始されていないかどうかを確認してください:</para>
<screen>&prompt.user;systemctl is-active xendomains active</screen>
      <para>上記のコマンドが <literal>active</literal> を返した場合、 &libvirtd; を開始するには、事前に <systemitem class="daemon">xendomains</systemitem> を停止させる必要があります。また、システムの起動時に &libvirtd; を開始したい場合は、これに加えて <systemitem class="daemon">xendomains</systemitem> が自動的に開始されないように設定する必要もあります。具体的には、下記のように入力して実行してください:</para>
<screen>
&prompt.sudo;systemctl stop xendomains
&prompt.sudo;systemctl disable xendomains
&prompt.sudo;systemctl start libvirtd
</screen>
      <para><systemitem class="daemon">xendomains</systemitem> と &libvirtd; は同一のサービスを提供するものであり、同時に使用しようとすると、互いに競合する結果になります。たとえば &libvirtd; によって domU が起動されている場合でも、 <systemitem class="daemon">xendomains</systemitem> を開始すると、 domU を再度起動しようとしてしまいます。</para>
    </important>
  </sect1>
  <sect1 xml:id="libvirt-switch-daemons">
    <title>モノリシック型デーモンへの切り替え</title>

    <para>モジュール型のデーモンからモノリシック型のデーモンに切り替えたい場合は、いくつかのサービスに対して変更を行う必要があります。なお、切り替えに際しては事前に動作中の仮想マシンを停止させるか、別のホストに移行しておくことをお勧めします。</para>

    <procedure>
      <step>
        <para>まずはモジュール型のデーモンとソケットをそれぞれ停止します。下記の例では、 &kvm; 向けの &qemu; といくつかのセカンダリデーモンをそれぞれ停止しています。</para>
<screen>
for drv in qemu network nodedev nwfilter secret storage
do
 &prompt.sudo;systemctl stop virt${drv}d.service
 &prompt.sudo;systemctl stop virt${drv}d{,-ro,-admin}.socket
done
</screen>
      </step>
      <step>
        <para>次回のシステム起動時にモジュール型のデーモンが開始しないように設定します</para>
<screen>
for drv in qemu network nodedev nwfilter secret storage
do
 &prompt.sudo;systemctl disable virt${drv}d.service
 &prompt.sudo;systemctl disable virt${drv}d{,-ro,-admin}.socket
done
</screen>
      </step>
      <step>
        <para>あとはモノリシック型の &libvirtd; のサービスとソケットを有効化します</para>
<screen>
&prompt.sudo;systemctl enable libvirtd.service
&prompt.sudo;systemctl enable libvirtd{,-ro,-admin}.socket
</screen>
      </step>
      <step>
        <para>最後にモノリシック型の &libvirtd; ソケットを開始します</para>
<screen>
&prompt.sudo;systemctl start libvirtd{,-ro,-admin}.socket
</screen>
      </step>
    </procedure>
  </sect1>
</chapter>
