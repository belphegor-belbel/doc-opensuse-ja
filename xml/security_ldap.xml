<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-security-ldap">
 <title>LDAP ディレクトリサービス</title>
 <info>
      <abstract>
        <para>軽量ディレクトリアクセスプロトコル (Lightweight Directory Access Protocol (LDAP)) は情報ディレクトリへのアクセスや管理に使用するプロトコルです。 LDAP はユーザやグループのほか、システム設定の管理やアドレスの管理などにも使用することができます。 &productname; &productnumbershort; では、 &ds389; が提供する LDAP サービスを使用することができます。これは従来の OpenLDAP の代替として提供されているものです。</para>
      </abstract>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>

  <para>実際には、中央のサーバがディレクトリ内にデータを保管しておき、全てのクライアントに対しては明確に定義されたプロトコルで配布を行ないます。構造化されたデータの仕組みにより、様々なアプリケーションがそれらのデータにアクセスできるようになります。中央のサーバ (リポジトリとも呼びます) を用意することで管理の手間を省き、 LDAP のようなオープンで標準化されたプロトコルを使用することで、そこで管理されている情報にアクセスするプログラムをできる限り多く用意することができます。</para>
  <para>なお、本章での <quote>ディレクトリ</quote> とは、読み込みや検索の速度や効率性の点で最適化されたデータベースを意味します。ディレクトリ内に保存されたデータは長期にわたって保存され、あまり変更が発生しないものとされます。通常のデータベースシステムであれば、短い時間内にデータの書き込みが多数発生する前提で最適化が行なわれますが、 LDAP サービスは読み込みに対して大きく最適化されたデータベースとなります。</para>

 <sect1 xml:id="sec-security-ldap-tree">
  <title>LDAP のディレクトリツリー構造</title>
<!--
  taroth 2019-02-27: acc. to wbrown the content of this section is still correct,
  but the section should be revised in the future - for input, see
  https://fy.blackhats.net.au/blog/html/pages/ldap_guide_part_1_foundations.html
-->
   <para>本章では、 LDAP ディレクトリツリーの基本的な配置と、 LDAP に関する基本的な用語を説明しています。 <phrase os="sles;osuse">既に LDAP に関する知識をお持ちの場合は、 <xref linkend="sec-security-ldap-server"/> からお読みください。 </phrase></para>

  <para>LDAP ディレクトリはツリー型の構造になっています。ディレクトリ内の全ての項目 (オブジェクトと呼びます) は、この階層構造内での位置が決められています。この階層構造を <emphasis>ディレクトリ情報ツリー</emphasis> (Directory Information Tree (DIT)) と呼びます。また、特定の項目に対して、それを正確に識別するためのパス情報を、 <emphasis>識別名</emphasis> (Distinguished Name (DN)) と呼びます。またツリー内にあるオブジェクトは <emphasis>相対識別名</emphasis> (Relative Distinguished Name (RDN)) でお互いを区別します。 <emphasis>識別名</emphasis> は、その項目に対する全ての <emphasis>相対識別名</emphasis> から構成されています。</para>

  <para>LDAP ディレクトリツリーの構造を図に表わすと、 <xref linkend="fig-ldap-tree"/> のようになります。</para>

  <figure xml:id="fig-ldap-tree">
   <title>LDAP ディレクトリの構造</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata fileref="ldap_tree.svg" width="85%"/>
    </imageobject>
    <imageobject role="html">
     <imagedata fileref="ldap_tree.png" width="85%" format="PNG"/>
    </imageobject>
   </mediaobject>
  </figure>

  <para>上記は架空のディレクトリ情報ツリーを表わしています。そのうち、 3 階層分の項目のみを図示しています。図の中では、各項目を 1 つの箱として表わしています。たとえば架空の従業員である <systemitem class="username">Geeko Linux</systemitem> に対する完全な <emphasis>識別名 (DN)</emphasis> は、 <literal>cn=Geeko Linux,ou=doc,dc=example,dc=com</literal> となります。これは相対識別名である <literal>cn=Geeko Linux</literal> に対して、階層構造上の親である <literal>ou=doc,dc=example,dc=com</literal> を追加することによります。</para>

<!-- ke: yes, these things are called "Schema" -->

  <para>ディレクトリ情報ツリー (DIT) 内に保管できるオブジェクトの種類は、 <emphasis>スキーマ</emphasis> と呼ばれるものに従って設定されます。オブジェクトの種類は <emphasis>オブジェクトクラス</emphasis> と呼ばれ、それに対応するスキーマで、そのオブジェクトが設定しなければならない値や、設定できる値が示されます。そのためスキーマには、 LDAP サーバ内で使用される全てのオブジェクトクラスや属性の定義を含んでいることになります。一方の属性は、構造化されたデータ型です。それらの書式や順序などの情報も、スキーマ内に記述されています。 LDAP サーバには幅広い環境で動作することができるよう、中枢 (コア) スキーマセットが用意されています。必要であれば、独自のスキーマをアップロードすることもできます。</para>

  <para><xref linkend="tab-ldap-schema"/> には、 <filename>00core.ldif</filename> や <filename>06inetorgperson.ldif</filename> で規定されているオブジェクトクラスの一部と、それらで必須とされている属性、そして属性値の書式を紹介しています。 <systemitem>389-ds</systemitem> パッケージをインストールしている環境であれば、これらは <filename>usr/share/dirsrv/schema</filename> 内に存在しています。 <!-- intro abbrev "Req. Attr." too shorten the table header --></para>

  <table xml:id="tab-ldap-schema">
   <title>よく使用されるオブジェクトクラスと属性</title>
   <tgroup cols="4">
    <colspec colname="c1" colwidth="30*"/>
    <colspec colname="c2" colwidth="40*"/>
    <colspec colname="c3" colwidth="16*"/>
    <colspec colname="c4" colwidth="14*"/>
    <thead>
     <row>
      <entry>
       <para>オブジェクトクラス</para>
      </entry>
      <entry>
       <para>意味</para>
      </entry>
      <entry>
       <para>値の例</para>
      </entry>
      <entry>
       <para>必須の属性</para>
      </entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>
       <para><literal>domain</literal></para>
      </entry>
      <entry>
       <para>ドメインの名前パート</para>
      </entry>
      <entry>
       <para>example</para>
      </entry>
      <entry>
       <para>displayName</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>organizationalUnit</literal></para>
      </entry>
      <entry>
       <para>組織単位</para>
      </entry>
      <entry>
       <para>doc</para>
      </entry>
      <entry>
       <para>ou</para>
      </entry>
     </row>
     <row>
      <entry>
       <para><literal>nsPerson</literal></para>
      </entry>
      <entry>
       <para>イントラネットもしくはインターネットの個人関連データ</para>
      </entry>
      <entry>
       <para>Geeko Linux</para>
      </entry>
      <entry>
       <para>cn</para>
      </entry>
     </row>
    </tbody>
   </tgroup>
  </table>

  <para>また <xref linkend="aus-ldap-schema-help"/> では、スキーマ定義の例を示しています。</para>

  <example xml:id="aus-ldap-schema-help">
   <title>CN=schema からの抜粋</title>
<screen>attributetype (1.2.840.113556.1.2.102 NAME 'memberOf' <co xml:id="co-ldap-schema-core-att-type"/>
       DESC 'Group that the entry belongs to' <co xml:id="co-ldap-schema-core-desc"/>
       SYNTAX 1.3.6.1.4.1.1466.115.121.1.12 <co xml:id="co-ldap-schema-core-syntax"/>
       X-ORIGIN 'Netscape Delegated Administrator') <co xml:id="co-ldap-schema-core-xorigin"/>

objectclass (2.16.840.1.113730.3.2.333 NAME 'nsPerson' <co xml:id="co-ldap-schema-core-oc"/>
       DESC 'A representation of a person in a directory server' <co xml:id="co-ldap-schema-core-desc-oc"/>
       SUP top STRUCTURAL <co xml:id="co-ldap-schema-core-sup-oc"/>
       MUST ( displayName $ cn ) <co xml:id="co-ldap-schema-core-must-oc"/>
       MAY ( userPassword $ seeAlso $ description $ legalName $ mail \
             $ preferredLanguage ) <co xml:id="co-ldap-schema-core-may-oc"/>
       X-ORIGIN '389 Directory Server Project'
  ...</screen>
  </example>
  <calloutlist>
   <callout arearefs="co-ldap-schema-core-att-type">
    <para>属性の名前とユニークな OID (<emphasis>オブジェクト識別子 (Object Identifier)</emphasis>) (数字) 、そして属性の略称を表わしています。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-desc">
    <para><literal>DESC</literal> では属性に対する簡潔な説明を記します。定義の元となった RFC などがあれば、それも記述されます。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-syntax">
    <para>属性内に保持できるデータの型。この場合、大文字と小文字を区別しない文字列であることを示しています。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-xorigin">
    <para>スキーマ要素のソース (たとえばプロジェクト名) 。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-oc">
    <para>オブジェクトクラス <literal>nsPerson</literal> の定義の始まりです。オブジェクトクラスの定義は属性の定義と同じで、 OID とオブジェクトクラスの名前をそれぞれ記します。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-desc-oc">
    <para>そのオブジェクトクラスに対する簡潔な説明です。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-sup-oc">
    <para><literal>SUP top</literal> と書くことで、このオブジェクトクラスの上位に存在するオブジェクトクラスが存在していないことを表わしています。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-must-oc">
    <para><literal>MUST</literal> 以下には、 <literal>nsPerson</literal> のオブジェクトクラスで、設定されなければならない全ての属性種類を記します。</para>
   </callout>
   <callout arearefs="co-ldap-schema-core-may-oc">
    <para><literal>MAY</literal> 以下には、そのオブジェクトクラスで設定することのできる全ての属性種類を記します。</para>
   </callout>
  </calloutlist>
 </sect1>

 <sect1 xml:id="sec-security-ldap-server-install">
  <title>&ds389; 向けのソフトウエアのインストール</title>
   <para><systemitem>389-ds</systemitem> パッケージには、 &ds389; と管理ツールが含まれています。下記のコマンドを入力して実行し、インストールを行なってください:</para>
    <screen>&prompt.sudo;zypper install 389-ds</screen>
    <para>インストールを行なった後は、サーバの設定を行なってください <phrase os="sles;osuse">(詳しくは <xref linkend="sec-security-ldap-server" xrefstyle="select:label"/> をお読みください)</phrase> <!-- し、 &yast; で非常に基本的な設定を行なってもかまいません <phrase os="sles;osuse"&lt;(詳しくは <xref linkend="sec-security-ldap-server-yast" xrefstyle="select:label"/&lt; をお読みください)</phrase> 。 --></para>
 </sect1>

 <sect1 xml:id="sec-security-ldap-server">
  <title>&ds389; のテスト／開発用インスタンスの構築</title>
  <para><command>dscreate</command> コマンドを使用することで、 &ds389; のインスタンスを作成したりきれいに削除したりすることができます。</para>
  <para>インスタンスの作成方法には 2 つの種類があります。 1 つめは設定ファイルを使用する方法、もう 1 つは自動生成されたテンプレート (雛型) ファイルを使用する方法です。なお、自動生成されたテンプレートファイルを使用して本番環境を作成する場合は、内容をよく読んで注意深く設定してください。</para>
  <para>インスタンスを作成したら、あとは管理者用のアカウントを作成して、必要なユーザとグループを管理してサービスを動作させてください。</para>
  <para>下記の手順を実施することで、いくつかのサンプル用エントリを含むテスト目的や開発目的のインスタンスを構築することができます。</para>
  <procedure>
   <step>
    <para><!--inf ファイルからのディレクトリサーバインスタンスの作成--> <xref linkend="sec-security-ldap-server-instance" xrefstyle="select:title"/></para>
   </step>
   <step>
    <para><!--テンプレートからのディレクトリサーバインスタンスの作成--> <xref linkend="sec-security-ldap-server-template" xrefstyle="select:title"/></para>
   </step>
    <!-- <step>
  <para>
     Using CA Certificates for TLS Connections
      <xref linkend="sec-security-ldap-server-ca" xrefstyle="select:title"/>
    </para>
    </step> -->
   <step>
    <para><!--ローカルアクセス用の管理者の設定--> <xref linkend="sec-security-ldap-server-credentials" xrefstyle="select:title"/></para>
   </step>
   <step>
    <para><!--ユーザとグループの設定--> <xref linkend="sec-security-ldap-server-users" xrefstyle="select:title"/></para>
   </step>
   <step>
    <para><!--SSSD の設定--> <xref linkend="sec-security-ldap-server-sssd" xrefstyle="select:title"/></para>
   </step>
  </procedure>
  <para><remark>taroth 2019-06-19: some topics like 'configuring other applications' and 'backup and restore' to be added later on</remark></para>
   <!--
    *  configuring other applications (showing "dsidm instance client_config display")
    * backup and restore
   -->
   <para>&ds389; は主に 3 つのコマンドで制御します:</para>
  <variablelist>
   <varlistentry>
    <term><command>dsctl</command></term>
    <listitem>
     <para>ローカルのインスタンス管理に使用するコマンドで、 &rootuser; の権限が必要となります。なお、このコマンドを実行するには、ディレクトリサーバインスタンスの動作しているサーバ内にいなければなりません。起動や停止、データベースのバックアップなどを行なうことができます。</para>
    </listitem>
   </varlistentry>
    <varlistentry>
     <term><command>dsconf</command></term>
     <listitem>
      <para>サーバの管理や設定を行なうための主要なツールです。外部インターフェイスを介してインスタンスの設定を管理することができます。このコマンドを使用することで、インスタンスをリモートから設定変更することができます。</para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><command>dsidm</command></term>
     <listitem>
      <para>識別子 (ユーザ／グループ／パスワードなど) を管理するために使用します。なお、アクセス制御機能で許可を得ておく必要があります。一般ユーザの場合、自分自身のパスワードのリセットや詳細情報の変更などを行なうことができます。</para>
     </listitem>
    </varlistentry>
  </variablelist>
 
    <sect2 xml:id="sec-security-ldap-server-instance">
  <title>独自の設定ファイルを利用した &ds389; インスタンスの作成</title>
    <para>シンプルな設定ファイルを使用することで、新しい &ds389; インスタンスを作成することができます。このファイルは INF と呼ばれる形式でなければなりませんが、ファイル名に関しては任意の名前を使用することができます。</para>
    <para>既定のインスタンス名は <literal>localhost</literal> です。インスタンス名は作成後に変更することができませんので、混乱を避けるとともに、動作を良く理解できるよう、既定値ではなく独自の名前を指定しておくことをお勧めします。</para>
    <para><xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/> には新しい &ds389; インスタンスを作成する際の設定ファイルの例が示されています。この内容をそのまま利用してもかまいませんが、パスワードについては独自のものを設定しておいてください。</para>
   <procedure>
    <step>
     <para>下記の内容をホームディレクトリ内の <filename>ldap1.inf</filename> というファイルに保存します:</para>
     <example xml:id="ex-ldap-389-ds-inf">
      <title>&ds389; を構築するための最小限のインスタンス設定ファイル</title>
      <screen># <replaceable>ldap1.inf</replaceable>
        
[general]
config_version = 2 <co xml:id="co-ldap-389-ds-config-version"/>

[slapd]
root_password = <replaceable>password</replaceable><co xml:id="co-ldap-389-ds-rootpasswd"/>
self_sign_cert = True <co xml:id="co-ldap-389-ds-cert"/>
instance_name = <replaceable>ldap1</replaceable>

[backend-userroot]
sample_entries = yes <co xml:id="co-ldap-389-ds-sample-entries"/>
suffix = <replaceable>dc=ldap1,dc=com</replaceable></screen>

      <calloutlist>
       <callout arearefs="co-ldap-389-ds-config-version">
        <para>この行は必ず指定しておいてください。ここでは INF ファイルのバージョンが 2 であることを示しています。</para>
       </callout>
       <callout arearefs="co-ldap-389-ds-rootpasswd">
        <para><literal>cn=Directory Manager</literal> という LDAP ユーザに対するパスワードを、 <varname>root_password</varname> で指定しています。このユーザは、ディレクトリサービスに接続 (バインド) するために使用するものです。</para>
       </callout>
       <callout arearefs="co-ldap-389-ds-cert">
        <para>自己署名型のサーバ証明書を <filename>/etc/dirsrv/slapd-<replaceable>インスタンス名</replaceable></filename> に作成することを宣言しています。</para>
       </callout>
       <callout arearefs="co-ldap-389-ds-sample-entries">
        <para>サンプルユーザとサンプルグループをそれぞれ新しいインスタンス内に作成するよう指示しています。</para>
       </callout>       
      </calloutlist>
     </example>
   </step>
   <step>
    <para><xref linkend="ex-ldap-389-ds-inf" xrefstyle="select:label"/> から &ds389; のインスタンスを作成するには、下記を実行します:</para>
    <screen>&prompt.sudo;dscreate -v from-file <replaceable>ldap1.inf</replaceable> | tee <replaceable>ldap1-output.txt</replaceable></screen>
    <para>上記のコマンドを実行するとインスタンスが作成され、作成の際に出力された様々な情報が <filename>389ds-test-output.txt</filename> に書き込まれます。出力されたテキストファイルには様々な情報が含まれています。このファイルを作成したくない場合は、上記のコマンドラインのうち、 <literal>| tee 389ds-test-output.txt</literal> の部分を削除してください。</para>
   </step>
   <step>
    <para><command>dscreate</command> コマンドの実行が失敗した場合には、メッセージ内にその理由が示されますので、その原因を解決してからいったんインスタンスを削除 (詳しくは <xref linkend="sec-security-ldap-server-remove"/> をお読みください) してから、インスタンスを作成し直してください。</para>
   </step>
   <step>
    <para>インスタンスの作成が成功すると、 " <literal>Completed installation for ldap1</literal> " というメッセージが出力されます。あとは作成したインスタンスの状態を確認します:</para>
    <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> status
Instance "ldap1" is running</screen>
   </step>
   <step xml:id="sec-security-ldap-server-remove">
    <para>下記のコマンドはインスタンスをきれいに削除するためのコマンドです。前者のコマンドでは削除が正しくできるかどうかを確認 (ドライラン) し、後者のコマンドで実際の削除を行なっています。後者のコマンドでは、 <command>--do-it</command> オプションを忘れずに指定してください:</para>
    <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> remove
Not removing: if you are sure, add --do-it

&prompt.sudo;dsctl <replaceable>ldap1</replaceable> remove --do-it</screen>
    <para>このコマンドを実行することで、部分的にインストールが完了していたり、壊れてしまったりしたインスタンスを削除することもできます。インスタンスの作成も削除も、必要に応じて何度でも実行することができます。</para>
   </step>
  </procedure>
  <para>インスタンス名を忘れてしまった場合は、 <command>dsctl</command> コマンドを実行して全てのインスタンスを表示させてください:</para>
  <screen>&prompt.user;/usr/sbin/dsctl -l
slapd-ldap1</screen>    
 </sect2>
 
 <sect2 xml:id="sec-security-ldap-server-template">
   <title>テンプレートからの &ds389; インスタンスの作成</title>
   <para><command>dscreate</command> コマンドを使用することで、テンプレート (雛型) を自動生成することができます。このコマンドでは、そのまま使用できる形でテンプレートが作成されますので、あとは必要に応じて様々な箇所を修正するだけでインスタンスを作成することができます。なお、全ての設定に対する既定値はテンプレートファイル内のコメントとして説明 (英語) が書かれています。設定を変更する場合は既定値のコメント文字 (<literal>'</literal> を外して、必要な値を記入していってください。いずれのオプションに対しても詳しく説明が書かれています。</para>
   <para>下記のコマンドを入力して実行すると、設定例を標準出力に出力することができます:</para>
   <screen>&prompt.user;dscreate create-template</screen>
   <para>上記のコマンドを実行すると標準出力にテンプレートが出力されますが、このままでは使用できません。下記のようにして任意のファイル名を指定して、そのファイル内にテンプレートを出力してください:</para>
   <screen>&prompt.user;dscreate create-template <replaceable>ldap1-template.txt</replaceable></screen>
   <para>下記は出力されたテンプレートの抜粋です:</para>
   <screen># full_machine_name (str)
# Description: Sets the fully qualified hostname (FQDN) of this system. When 
# installing this instance with GSSAPI authentication behind a load balancer, set 
# this parameter to the FQDN of the load balancer and, additionally, set 
# "strict_host_checking" to "false".
# Default value: ldapserver1.test.net
;full_machine_name = ldapserver1.test.net

# selinux (bool)
# Description: Enables SELinux detection and integration during the installation 
# of this instance. If set to "True", dscreate auto-detects whether SELinux is 
# enabled. Set this parameter only to "False" in a development environment.
# Default value: True 
;selinux = True</screen>

   <para>既存の環境からの既定値を自動的に設定している様子がわかるかと思います。あとはこのファイルを何も変更せずそのまま利用して、新しいインスタンスを作成してみます:</para>
   <screen>&prompt.sudo;dscreate from-file <replaceable>ldap1-template.txt</replaceable></screen>
   <para>これにより、 <literal>localhost</literal> という名前の新しいインスタンスが作成され、作成が完了すると自動的に開始されます:</para>
   <screen>&prompt.sudo;dsctl <replaceable>localhost</replaceable> status
Instance "localhost" is running</screen>
    <para>既定値のままインスタンスを作成しても問題なく動作しますが、いくつかの設定値を変更しておくことで、より本番に近い環境を作成することができます。</para>
    <para>インスタンス名は作成後に変更することができませんので、混乱を避けるとともに、動作を良く理解できるよう、既定値ではなく独自の名前を指定しておくことをお勧めします。インスタンス名を変更するには、 <literal>;instance_name = localhost</literal> の行のコメント文字 (<literal>;</literal>) を外して、 <literal>localhost</literal> を任意の名前に変更してください。ここでは <replaceable>ldap1</replaceable> という名前を使用しています。</para>
    <para>また、もう 1 つ変更すべき箇所として、ユーザ例とグループ例の作成機能があります。必要であれば <literal>;sample_entries = no</literal> の箇所のコメント文字を外して、 <literal>no</literal> を <literal>yes</literal> にしてください。</para>
    <para>このほか <literal>;root_password</literal> の行のコメント文字 (;) を外して、設定したいパスワードを入力してもかまいません。</para>
    <para>また、テンプレート内には既定のサフィックス (LDAP での既定のドメイン名) を指定していませんので、下記のようにして <literal>suffix</literal> 行で指定を行なうことができます:</para>    
    <screen>suffix = <replaceable>dc=ldap1,dc=com</replaceable></screen>
    <para>作成したインスタンスをきれいに削除してやり直すには、 <command>dsctl</command> で下記のようなコマンドを入力して実行します:</para>
    <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> remove --do-it</screen>
 </sect2>
 
 <sect2 xml:id="sec-security-ldap-server-stop-start">
     <title>&ds389; の起動と停止</title>
     <para>&ds389; サーバのインスタンスを管理するには、 &systemd; を使用します。まずはサービスの状態を表示するには、下記のように入力して実行します:</para>
     <screen>&prompt.user;systemctl status --no-pager --full <replaceable>dirsrv@ldap1.service</replaceable>       
   ● dirsrv@ldap1.service - 389 Directory Server ldap1.
     Loaded: loaded (/usr/lib/systemd/system/dirsrv@.service; enabled; vendor preset: disabled)
     Active: active (running) since Thu 2021-03-11 08:55:28 PST; 2h 7min ago
    Process: 4451 ExecStartPre=/usr/lib/dirsrv/ds_systemd_ask_password_acl /etc/dirsrv/slapd-ldap1/dse.ldif (code=exited, status=0/SUCCESS)
   Main PID: 4456 (ns-slapd)
     Status: "slapd started: Ready to process requests"
      Tasks: 26
     CGroup: /system.slice/system-dirsrv.slice/dirsrv@ldap1.service
             └─4456 /usr/sbin/ns-slapd -D /etc/dirsrv/slapd-ldap1 -i /run/dirsrv/slapd-ldap1.pid
</screen>
   <para>サービスの起動と停止を行なうには、それぞれ下記のように入力して実行します:</para>
   <screen>&prompt.sudo;systemctl start <replaceable>dirsrv@ldap1.service</replaceable>
&prompt.sudo;systemctl stop <replaceable>dirsrv@ldap1.service</replaceable></screen>
   <para><command>systemctl</command> の使用方法について、詳しくは <xref linkend="cha-systemd"/> をお読みください。</para>
   <para>なお、 <command>dsctl</command> コマンドでもサービスの起動と停止を行なうことができます:</para>
   <screen>&prompt.sudo;dsctl <replaceable>ldap1</replaceable> status
&prompt.sudo;dsctl <replaceable>ldap1</replaceable> stop
&prompt.sudo;dsctl <replaceable>ldap1</replaceable> restart
&prompt.sudo;dsctl <replaceable>ldap1</replaceable> start
</screen>
</sect2>

 <sect2 xml:id="sec-security-ldap-server-credentials">
  <title>ローカル管理用の管理者認証情報の設定</title>
   <para>&ds389; のローカル管理を行なう目的で、 <filename>/root</filename> ディレクトリ内に <filename>.dsrc</filename> 設定ファイルを作成することができます。これにより、管理者 (root) や sudo 経由で管理権限を取得したユーザが、わざわざ &ds389; の管理者情報を入力したりすることなく管理できるようになります。 <xref linkend="ex-security-ldap-server-credentials-local" xrefstyle="select:label"/> には、サーバをローカル管理する場合の例が示されています。下記はインスタンス名が ldap1 、マシンのドメイン名が test3.com である場合の例です。</para>
   <para><filename>/root/.dsrc</filename> ファイルを作成したら、あとは新しいユーザを作成していきます (詳しくは <xref linkend="sec-security-ldap-server-users"/> をお読みください) 。</para>
   <example xml:id="ex-security-ldap-server-credentials-local">
    <title>ローカル管理用の <filename>.dsrc</filename>　ファイル</title>
     <screen># ldap1 インスタンスを管理するための /root/.dsrc ファイルの例
         
[<replaceable>ldap1</replaceable>] <co xml:id="co-ldap-server-dsrc-instance-name"/>

uri = ldapi://<replaceable>%%2fvar%%2frun%%2fslapd-ldap1.socket</replaceable> <co xml:id="co-ldap-server-dsrc-remote-ldapi"/>
basedn = <replaceable>dc=ldap1,dc=com</replaceable>
binddn = cn=Directory Manager
</screen>
   <calloutlist>
    <callout arearefs="co-ldap-server-dsrc-instance-name">
      <para>ここには管理対象のインスタンス名を指定します。</para>
    </callout>       
    <callout arearefs="co-ldap-server-dsrc-remote-ldapi">
      <para><literal>ldapi</literal> は接続しようとしているユーザの UID や GID を検出することができるプロトコルで、 UID/GID が <literal>0/0</literal> もしくは <literal>dirsrv:dirsrv</literal> であった場合、ディレクトリサーバに対して管理者 (つまり <literal>cn=Directory Manager</literal>) でログインできるようになります。</para>
      <para>なお URI の指定では、スラッシュを <literal>%%2f</literal> に置き換える必要があります。この例では、 <filename>/var/run/slapd-ldap1.socket</filename> というパスを表わしています。</para> 
    </callout>
   </calloutlist>
  </example>
 </sect2>
 
 <sect2 xml:id="sec-security-ldap-firewall">
  <title>ファイアウオールの設定</title>
  <para>&ds389; の既定の TCP ポートは 389 と 636 です。 TCP:389 は暗号化を行なわない接続および STARTTLS を使用する接続向けに、 TCP:636 は TLS での暗号化を行なう接続向けに使用します。</para>
  <para>&firewalld; は &sle; における既定のファイアウオールマネージャです。下記のコマンドを実行すると、 <literal>ldap</literal> および <literal>ldaps</literal> の各サービスを有効化することができます:</para>
  <screen>&prompt.sudo;firewall-cmd --add-service=ldap --zone=<replaceable>ゾーン名</replaceable>
&prompt.sudo;firewall-cmd --add-service=ldaps --zone=<replaceable>ゾーン名</replaceable>
&prompt.sudo;firewall-cmd --runtime-to-permanent
</screen>
  <para>なお、 zone 以下の値はお使いのサーバに合わせて設定してください。なお、 TLS での接続の暗号化に関する詳細は <xref linkend="sec-security-ldap-server-ca"/> を、 &firewalld; に関する詳細は <xref linkend="sec-security-firewall-fw"/> をそれぞれお読みください。</para>
</sect2>

 <sect2 xml:id="sec-security-ldap-server-users">
  <title>LDAP ユーザとグループの作成</title>
   <para>ユーザとグループは <command>dsidm</command> コマンドで作成および管理を行ないます。このコマンドは対話的に動作させることができるほか、コマンドラインでパラメータを指定して実行することもできます。</para>
   <para>現時点で設定済みのユーザとグループの一覧を表示するには、下記のように入力して実行します:</para>
   <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> user list
&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group list</screen>
   <para>特定のユーザに対する全ての情報を表示させるには、下記のように入力して実行します:</para>
   <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> user get <replaceable>ユーザ名</replaceable></screen>
   <para>特定のグループに対する全ての情報を表示させるには、下記のように入力して実行します:</para>
      <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group get <replaceable>グループ名</replaceable></screen>
   <para>グループのメンバー一覧を表示するには、下記のように入力して実行します:</para>
   <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group members <replaceable>グループ名</replaceable></screen>
   <para>下記の例では 2 人のユーザ &exampleuserII; と &exampleuserIII; を作成します。このとき、必要なデータはコマンドラインパラメータで指定し、サーバインスタンスは <literal>ldap1</literal> 、サフィックスは <literal>dc=ldap1,dc=com</literal> であるものとします。</para>
  <procedure xml:id="pro-security-ldap-server-users">
   <title>LDAP ユーザの作成</title>
   <para>LDAP ユーザは一般的なユーザアカウントを表わすもので、ログイン時に使用できるものであるほか、ホームディレクトリも設定することができます。 LDAP サーバにユーザを追加することで、ネットワーク内のユーザアカウントを統一的に管理できるようになります。なお、ユーザを作成するにあたっては、誤った情報を設定しないように注意してください。誤った情報を設定してしまうと、その情報をもとにログインできるようになってしまうためです。設定されている情報を確認したい場合は、 <command>id</command> コマンドで確認してください。下記の例では &exampleuserIIfull; というユーザに対する情報を確認しています:</para>
   <screen>&prompt.user;id &exampleuserIII;
uid=1001(wilber) gid=100(users) groups=100(users)</screen>   
   <step>
    <para>&exampleuserII; という LDAP ユーザを作成したい場合は、下記のように入力して実行します:</para>
    <screen>&prompt.sudo;<command>dsidm</command> <replaceable>ldap1</replaceable> user create --uid &exampleuserII; \
  --cn &exampleuserII; --displayName '&exampleuserIIfull;' --uidNumber 1001 --gidNumber 100 \
  --homeDirectory /home/&exampleuserII;</screen>
   </step>
   <step>
    <para>ユーザの <literal>distinguished name</literal> (DN) 名 (ディレクトリオブジェクトに対する完全修飾名、つまり唯一性の保証された名前) を参照するには、下記のように入力して実行します:</para>
    <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> user get &exampleuserII;
dn: uid=&exampleuserII;,ou=people,dc=ldap1,dc=com
[...]</screen>
    <para>ユーザのパスワード変更などの処理を行なうには、 <literal>distinguished name</literal> (DN) を指定する必要があります。</para>
   </step>
   <step>
    <para>&exampleuserII; ユーザに対するパスワードを作成するには、下記のように入力して実行します:</para>
    <substeps>
      <step>
       <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> account reset_password \
  uid=&exampleuserII;,ou=people,dc=ldap1,dc=com</screen>
      </step>
      <step>
       <para>あとは &exampleuserII; に設定するパスワードを 2 回入力します。</para>
       <para>パスワードの設定が完了すると、下記のようなメッセージが表示されるはずです:</para>
       <screen>reset password for uid=&exampleuserII;,ou=people,dc=ldap1,dc=com</screen>
       <para>設定済みのパスワードを変更したい場合も、同じコマンドで行なうことができます。</para>
      </step>
    </substeps>
   </step>
   <step>
    <para>続いて &exampleuserIII; ユーザを作成します:</para>
    <screen>&prompt.sudo;<command>dsidm</command> <replaceable>ldap1</replaceable> user create --uid &exampleuserIII;\
  --cn &exampleuserIII; --displayName '&exampleuserIIIfull;' \
  --uidNumber 1001 --gidNumber 100 --homeDirectory /home/&exampleuserIII;
  
&prompt.sudo;dsidm <replaceable>ldap1</replaceable> account reset_password \
  uid=&exampleuserIII;,ou=people,dc=ldap1,dc=com</screen>
   </step>
      <step>
    <para>認証が正しく動作することを確認します:</para>
   <screen>&prompt.user;ldapwhoami -D uid=wilber,ou=people,dc=ldap1,dc=com -W
Enter LDAP Password: 
dn: uid=wilber,ou=people,dc=ldap1,dc=com    
     </screen>
   </step>
  </procedure>
  
  <procedure xml:id="pro-security-ldap-server-groups">
   <title>LDAP グループの作成とユーザの割り当て</title>
   <para>下記の手順では <systemitem class="groupname">server_admins</systemitem> という名前のグループを作成し、そのグループに &exampleuserII; ユーザを所属させます。このとき、インスタンス名は <literal>ldap1</literal> 、サフィックスは <literal>dc=ldap1,dc=com</literal> であるものとします。</para>
   <step>
    <para>まずはグループを作成します:</para>
    <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group create</screen>
    <para>すると、グループ名の入力を求められます。下記のように入力します:</para>
    <screen>Enter value for cn : <replaceable>server_admins</replaceable></screen>
   </step>
   <step>
    <para>&exampleuserII; ユーザをグループに追加します:</para>
    <screen>&prompt.sudo;dsidm <replaceable>ldap1</replaceable> group add_member <replaceable>server_admins</replaceable> uid=&exampleuserII;,ou=people,<replaceable>dc=ldap1,dc=com</replaceable>
added member: uid=&exampleuserII;,ou=people,<replaceable>dc=ldap1,dc=com</replaceable></screen>
   </step>
  </procedure>
 </sect2>

 <sect2 xml:id="sec-security-ldap-server-sssd">
  <title>SSSD の設定</title>
  <para>SSSD (System Security Services Daemon) はリモートの識別子プロバイダとの通信を行ない、 <literal>pam</literal> や <literal>nsswitch</literal> にデータを渡すことのできるデーモンです。 SSSD には複数のバックエンドを設定することができるほか、ユーザとグループのキャッシュ機能や、 SSH の鍵配布などの機能に対応しています。</para>
  <procedure>
   <step>
     <para>まずは別のサーバに <systemitem>sssd</systemitem> パッケージをインストールします:</para>
    <screen>&prompt.sudo;zypper in sssd</screen>
   </step>
   <step>
    <para><systemitem class="daemon">sssd</systemitem> と衝突してしまうことから、 <systemitem class="daemon">nscd</systemitem> デーモンを無効化して停止します:</para>
    <screen>&prompt.sudo;systemctl disable nscd &amp;&amp; systemctl stop nscd</screen>
   </step>
   <step>
    <para>SSSD の設定ファイルを作成して、 <xref linkend="pro-security-ldap-server-groups" xrefstyle="select:label"/> で作成しておいた <systemitem class="groupname">server_admins</systemitem> グループのメンバーのみがログインできるように設定します:</para>
    <tip>
     <para>なお、 <literal>memberOf</literal> プラグインを有効化しておく必要があります。これにより、クライアントはログインと認可を行なうことができるようになります。</para>
    </tip>
    <screen>&prompt.sudo;dsidm localhost client_config sssd.conf server_admins</screen>
   </step>
   <step>
    <para>出力内容を確認して、内容を <filename>/etc/sssd/sssd.conf</filename> に貼り付けます。必要であれば、ここから設定ファイルを調整してもかまいません。</para>
   </step>
   <step>
    <para>お使いのクライアントで証明書を設定するには、 LDAP サーバからクライアントに対して、 <filename>ca.crt</filename> をコピーします:</para>
    <screen>&prompt.sudo;mkdir -p /etc/openldap/certs
cp [...]&gt;/ca.crt /etc/openldap/certs/
/usr/bin/c_rehash /etc/openldap/certs</screen>
   </step>
   <step>
    <para>SSSD を有効化して開始します:</para>
    <screen>&prompt.sudo;systemctl enable sssd
systemctl start sssd</screen>
   </step>
   <step>
    <para>SSSD を PAM と NSS の一部として動作させる場合は、 <link xlink:href="https://www.port389.org/docs/389ds/howto/howto-sssd.html"/> にある <citetitle>Configure PAM (&suse;)</citetitle> と <citetitle>Configure NSS (&suse;)</citetitle> の手順に従って作業を行なってください。</para>
   </step>
   <step>
    <para><!-- NOTE: inappropriate?: Your user must have their own SSH key pair, and SSH access to your SSSD server. -->全ての設定が完了すると、 &exampleuserII; は &ds389; の情報をもとに、 SSH を介して SSSD を設定したマシンにログインできるようになります。 &exampleuserII; がログインできない場合は、 <xref linkend="pro-security-ldap-server-groups" xrefstyle="select:label"/> の手順で示した <literal>server_admins</literal> グループへの所属をご確認ください。</para>
   </step>
  </procedure>
 </sect2>
</sect1>

<!-- default installation uses self-signed cert -->
 <sect1 xml:id="sec-security-ldap-server-ca">
 <title>TLS 向けの CA (証明機関) 証明書の使用</title>
 <para>&ds389; 向けの CA 証明書の管理にあたっては、下記に示すコマンドラインツールを使用することができます: <command>certutil</command> , <command>openssl</command> , <command>pk12util</command></para>
 <para>テスト用に証明書を作成したい場合は、 <command>dscreate</command> コマンドで自己署名証明書を作成することができます。証明書は <filename>/etc/dirsrv/slapd-localhost/ca.crt</filename> にあるものとして扱われます。リモートから管理を行なう場合は、証明書を読み取り可能な場所にコピーしておいてください。本番環境の場合は、ご利用の証明機関にお問い合わせのうえ、サーバ証明書とクライアント証明書、そしてルート証明書をそれぞれ取得してください。</para>
 <para>下記の手順を実行する前に、まずは以下の要件を全て満たしていることをご確認ください:</para>
 <itemizedlist>
  <listitem>
   <para>TLS 接続時に使用するサーバ証明書と、それに対応する機密鍵を保持していること。</para>
  </listitem>
  <listitem>
   <para>NSS (Network Security Services) データベースを設定してあること (例: <command>certutil</command> コマンド) 。</para>
  </listitem>
 </itemizedlist>

 <procedure>
  <para>NSS (Network Security Services) データベース内に機密鍵と証明書を取り込む場合には、あらかじめ機密鍵とサーバ証明書をひとまとめにしておく必要があります。ひとまとめにしたファイルは <filename>*.p12</filename> (PKCS12 形式) というファイル名になります。</para>
  <important>
  <title><filename>*.p12</filename> ファイルとフレンドリ名について</title>
  <para>PKCS12 形式のバンドルファイル (<filename>*.p12</filename>) を作成する場合、鍵と証明書の対に対してフレンドリ名を設定しなければなりません。</para>
  <para>本手順で TLS 接続を有効化する場合は、フレンドリ名を <literal>Server-Cert</literal> に設定してください。それ以外の名前を使用してしまうと、 &ds389; が証明書を検出することができず、 TLS 接続ができなくなってしまいます。</para>
  <para>また、 NSS データベースに <filename>*.p12</filename> ファイルを取り込んでしまうと、フレンドリ名は変更できなくなりますのでご注意ください。</para>
 </important>
 <step>
  <para>PKCS12 バンドルファイルを指定のフレンドリ名で作成するには、下記のように入力して実行します:</para>
 <screen>&prompt.root;openssl pkcs12 -export -in <replaceable>SERVER.crt</replaceable> \
  -inkey <replaceable>SERVER.key</replaceable> -out <replaceable>SERVER.p12</replaceable> \
  -name Server-Cert</screen>
  <para>ここで、 <replaceable>SERVER.crt</replaceable> にはサーバの証明書として使用するファイルを、 <replaceable>SERVER.key</replaceable> には対応する機密鍵のファイルをそれぞれ指定します。なお、 <option>-out</option> では <filename>*.p12</filename> ファイルのファイル名を指定します。 <option>-name</option> はフレンドリ名を指定する箇所で、ここは必ず <literal>Server-Cert</literal> のままにしておいてください。</para>
 </step>
 <step>
   <para>ファイルを NSS データベースに取り込むにあたっては、ファイルのパスワードを指定する必要があります。パスワードを指定するには、下記のようなコマンドを入力して実行します:</para>
<screen>pk12util -i <replaceable>SERVER.p12_ファイルのパス</replaceable> -d sql:<replaceable>NSS_データベースのパス</replaceable> -n Server-cert -W <replaceable>SERVER.p12_ファイルのパスワード</replaceable></screen>
   <para>パスワードを設定すると、 <replaceable>NSS_データベースのパス</replaceable> で指定したディレクトリ内に <filename>pwdfile.txt</filename> ファイルが作成されます。</para>
 </step>
 <step>
  <para>あとは <replaceable>SERVER.p12</replaceable> ファイルを NSS データベース内に取り込みます:</para>
  <screen>pk12util -i <replaceable>SERVER.p12</replaceable> -d <replaceable>NSS_データベースのパス</replaceable></screen>
 </step>
 </procedure>
 </sect1> 

<sect1 xml:id="sec-security-ldap-info">
  <title>さらなる情報</title>
  <para>&ds389; に関する詳細については、提供元のドキュメンテーションをお読みください。ドキュメンテーションは <link xlink:href="https://www.port389.org/docs/389ds/documentation.html"/> にあります。</para>
 </sect1>
</chapter>
