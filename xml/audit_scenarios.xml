<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-audit-scenarios">
 <title>監査ルールセットの紹介</title>
 <info>
      <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
        <dm:bugtracker>
          </dm:bugtracker>
      </dm:docmanager>
    </info>
    <para>下記の設定例では、どのようにして監査システムからお使いのシステムを監視することができるのかについて説明しています。また、 Controlled Access Protection Profile (CAPP) で指定されている監査対象のイベントをカバーするのに必要な項目について、主なものを紹介しています。</para>
 <para>ルールセットの例は下記のようなパーツから構成されています:</para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>基本的な監査設定 ( <xref linkend="sec-audit-scenbasic"/> )</para>
  </listitem>
  <listitem>
   <para>監査ログファイルと監査設定ファイルに対する監視 ( <xref linkend="sec-audit-scenauconf"/> )</para>
  </listitem>
  <listitem>
   <para>ファイルシステムオブジェクトに対する操作の監視 ( <xref linkend="sec-audit-scenfs"/> )</para>
  </listitem>
  <listitem>
   <para>セキュリティデータベースの監視 ( <xref linkend="sec-audit-scensecurity"/> )</para>
  </listitem>
  <listitem>
   <para>その他のシステムコールの監視 ( <xref linkend="sec-audit-scenmisc"/> )</para>
  </listitem>
  <listitem>
   <para>システムコールのパラメータのフィルタリング ( <xref linkend="sec-audit-scenipc"/> )</para>
  </listitem>
 </itemizedlist>
 <para>下記に示す設定例を、実際に使用する設定ファイルに変換するには、下記の手順を実施してください:</para>
 <procedure>
  <step>
   <para>まずはお使いの環境に合った設定を選んで、必要に応じて調整を行ってください。</para>
  </step>
  <step>
   <para>下記の設定例から、 <filename>/etc/audit/audit.rules</filename> ファイルに対してルールを追加していってください。このとき、必要に応じてルールを変更してもかまいません。</para>
  </step>
 </procedure>
 <note>
  <title>監査ログレベルの調整について</title>
  <para>お使いの環境の要件にあわせることなく、設定例をそのまま使用して監査を行うことは避けてください。まずは何を監査するのか、どの範囲まで監査するのかを決定してから実施してください。</para>
 </note>
 <para><filename>audit.rules</filename> ファイルは <command>auditctl</command> コマンドの集合体であると考えられます。このファイルの各行は、それぞれ <command>auditctl</command> のコマンドラインとして解釈されます。そのため、このルールファイル内で使用する文法は、 <command>auditctl</command> のコマンドラインと同じです。</para>
 <sect1 xml:id="sec-audit-scenbasic">
  <title>基本的な監査設定パラメータの追加</title>

<screen>-D<co xml:id="co-auctld"/>
-b 8192<co xml:id="co-auctlb"/>
-f 2<co xml:id="co-auctlf"/></screen>

  <calloutlist>
   <callout arearefs="co-auctld">
    <para>新しくルールセットを定義するため、既存のルールを全て削除しています。</para>
   </callout>
   <callout arearefs="co-auctlb">
    <para>監査メッセージを受け付けるためのバッファ数を指定しています。お使いのシステムにおける監査ログの量に応じて、増やしたり減らしたりしてください。</para>
   </callout>
   <callout arearefs="co-auctlf">
    <para>カーネルが致命的なエラーを処理する際に使用する、失敗フラグを指定しています。指定可能な値は <literal>0</literal> (何もしない), <literal>1</literal> (printk (失敗メッセージを表示する)), <literal>2</literal> (パニックモード、システムを停止する) のいずれかです。</para>
   </callout>
  </calloutlist>

  <para><option>-D</option> オプションを指定してルールキューをいったん空にすることで、それまでに設定されていたルールによる影響を受けることなく、このファイル内に書かれているルールを正しく適用することができるようになります。また、バッファ数の指定 ( <option>-b</option> ) は、監査システムの負荷を上昇させすぎてシステムに障害が発生したりしないようにするために重要な設定です。このほか、失敗フラグ <option>-f 2</option> の選択は、お使いのシステムに対して致命的なエラーが発生した際、監査レコードを保全するために必要な設定です。致命的なエラーの際にシステムをシャットダウンすることで、監査から外れたプロセスが現れないようにすることができるためです。このような要件が無い場合は、 1 ( <option>printk</option> ) を選択してください。</para>

  <important>
   <title>失敗フラグの選択について</title>
   <para>本番環境にお使いの監査ルールを適用するにあたっては、あらかじめテスト環境で <emphasis>想定される最大の負荷</emphasis> をかけて、監査が正しく動作することをご確認ください。また、 <option>-f 2</option> フラグを指定しておくことも重要です。この設定は、何らかの閾値を超過した場合に、カーネルをパニック状態 (書き込み待ちのデータを書き込むことなくシステムを即時に停止させる) にすることができる設定です。ただし、 <option>-f 2</option> の設定は、セキュリティを最重要視する環境でのみお使いください。</para>
  </important>
 </sect1>
 <sect1 xml:id="sec-audit-scenauconf">
  <title>監査ログファイルと設定ファイルに対する監視の追加</title>

  <para>ご利用の監査設定ファイルとログファイルに対して監視を設定して、設定ファイルやログファイルに対して改ざんを試みた形跡や、不正に読み取ろうとした形跡を記録するようにしておいてください。</para>

  <note>
   <title>ディレクトリとファイルの作成に対する監視について</title>
   <para>ディレクトリに対する監視は、ファイルアクセスに対するイベントだけが必要な環境では、特に設定を行う必要はありません。ディレクトリアクセスのイベントは、メタデータの変更を伴うディレクトリの inode 変更の際にのみ発行されるためです。ファイルアクセスに対してイベントを発生させたい場合は、各ファイルを監視対象にしてください。</para>
  </note>

<screen>-w /var/log/audit/ <co xml:id="co-auctllog"/>
-w /var/log/audit/audit.log

-w /var/log/audit/audit_log.1
-w /var/log/audit/audit_log.2
-w /var/log/audit/audit_log.3
-w /var/log/audit/audit_log.4

-w /etc/audit/auditd.conf -p wa<co xml:id="co-auctlconf"/>
-w /etc/audit/audit.rules -p wa
-w /etc/libaudit.conf -p wa</screen>

  <calloutlist>
   <callout arearefs="co-auctllog">
    <para>監査ログの存在するディレクトリに対して監視を設定しています。このディレクトリに対してアクセスが試みられると、どのような種類のアクセスであってもイベントが発生します。ログのローテーションを使用している場合は、その際にもイベントが発生します。</para>
   </callout>
   <callout arearefs="co-auctlconf">
    <para>監査の設定ファイルに対して監視を設定しています。このファイルに対する書き込みと、属性変更が記録されるようになります。</para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenfs">
  <title>ファイルシステムオブジェクトの監視</title>

  <para>システムコールに対する監査を行うことで、アプリケーションレベルよりも細かく、お使いのシステムにおける動作を追跡することができるようになります。ファイルシステム関連のシステムコールを追跡することで、お使いのアプリケーションがどのようなシステムコールを使用しているのかを判断することができるほか、その使用が適切であるかどうかを確認することもできます。また、マウントやマウント解除の操作を追跡することで、外部リソース (リムーバブルメディアやリモートのファイルシステムなど) の使用についても追跡を行うことができます。</para>

  <important>
   <title>システムコールの監査について</title>
   <para>システムコールの監査を行うと、ログを頻繁に書き込むことになります。そのため、カーネルに対しても重い負荷を与えることになります。監査を行った結果、通常よりも応答が遅くなったと感じた場合は、おそらくシステムのバックログ設定と流量制限の設定を超過したものと思われます。この場合は、監査ルール内にどのシステムコールを含めるのかを慎重に確認し、ログ設定についても調整を行ってください。 <xref linkend="sec-audit-auditd"/> では、関連する設定を調整する方法について説明しています。</para>
  </important>

<screen>-a entry,always -S chmod -S fchmod -S chown -S chown32 -S fchown -S fchown32 -S lchown -S lchown32<co xml:id="co-auctlfso"/>

-a entry,always -S creat -S open -S truncate -S truncate64 -S ftruncate -S ftruncate64<co xml:id="co-auctlmod"/>

-a entry,always -S mkdir -S rmdir<co xml:id="co-auctlfsdir"/>

-a entry,always -S unlink -S rename -S link -S symlink<co xml:id="co-auctlfsmov"/>

-a entry,always -S setxattr<co xml:id="co-auctlfsea"/>
-a entry,always -S lsetxattr
-a entry,always -S fsetxattr
-a entry,always -S removexattr
-a entry,always -S lremovexattr
-a entry,always -S fremovexattr

-a entry,always -S mknod<co xml:id="co-auctlfssf"/>

-a entry,always -S mount -S umount -S umount2<co xml:id="co-auctlfsfso"/></screen>

  <calloutlist>
   <callout arearefs="co-auctlfso">
    <para>ファイルの所有権とパーミッションを変更する操作に関連するシステムコールに対して、監査コンテキストを有効化しています。お使いのハードウエアアーキテクチャによっても異なりますが、 <literal>*32</literal> のルールが必要となる環境と不要な環境があります。 &x86-64; のような 64 ビットシステムでは、 <literal>*32</literal> のルールは削除する必要があります。</para>
   </callout>
   <callout arearefs="co-auctlmod">
    <para>ファイルの内容変更に関連するシステムコールに対して、監査コンテキストを有効化しています。お使いのハードウエアアーキテクチャによっても異なりますが、 <literal>*64</literal> のルールが必要となる環境と不要な環境があります。 &x86-64; のような 64 ビットシステムでは、 <literal>*64</literal> のルールは削除する必要があります。</para>
   </callout>
   <callout arearefs="co-auctlfsdir">
    <para>ディレクトリの作成や削除など、ディレクトリ操作に対する監査コンテキストを有効化しています。</para>
   </callout>
   <callout arearefs="co-auctlfsmov">
    <para>シンボリックリンクの作成やハードリンクの作成、削除や名前変更などのリンク操作に対して、監査コンテキストを有効化しています。</para>
   </callout>
   <callout arearefs="co-auctlfsea">
    <para>ファイルシステムの属性操作に関する監査コンテキストを有効化しています。</para>
   </callout>
   <callout arearefs="co-auctlfssf">
    <para>デバイスファイルを作成するための <command>mknod</command> システムコールに対して、監査コンテキストを有効化しています。</para>
   </callout>
   <callout arearefs="co-auctlfsfso">
    <para>マウントやマウント解除の操作に対して、監査コンテキストを有効化しています。 &x86; アーキテクチャの場合は <literal>umount</literal> のルールを、 &intel64; アーキテクチャの場合は <literal>umount2</literal> のルールをそれぞれ無効化してください。</para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scensecurity">
  <title>セキュリティ設定ファイルとデータベースの監視</title>

  <para>お使いのシステムに対して望ましくない行為をさせないようにするため、 <systemitem>cron</systemitem> や <systemitem>at</systemitem> の設定ファイルのほか、ジョブスケジュールの変更を行おうとする行為を追跡しておくことをお勧めします。このほか、ユーザやグループ、パスワードやログインデータベースやアクセスログなどへの書き込みアクセスについても追跡することで、お使いのシステムのユーザデータベースを改ざんしようとする行為を検出できるようになります。</para>

  <para>また、お使いのシステムにおける設定 (カーネル, サービス, 時刻など) に対する変更を追跡しておくことで、お使いのシステムにおける重要な機能の改ざんを防ぐことができます。特に PAM の設定ファイルの変更は、認証スタックの設定変更は管理者以外から行われるべきではないことから、監視対象としておくべきです。また、アプリケーション側からの PAM の使用状況や用途についても、ログに記録を行っておくべきです。このほか、機密を確保しておくべき認証や通信にかかわる設定ファイルについても、同様に監視対象としておくのがよいでしょう。</para>

<screen><co xml:id="co-audit-at"/>
-w /var/spool/atspool
-w /etc/at.allow
-w /etc/at.deny

-w /etc/cron.allow -p wa
-w /etc/cron.deny -p wa
-w /etc/cron.d/ -p wa
-w /etc/cron.daily/ -p wa
-w /etc/cron.hourly/ -p wa
-w /etc/cron.monthly/ -p wa
-w /etc/cron.weekly/ -p wa
-w /etc/crontab -p wa
-w /var/spool/cron/root

<co xml:id="co-audit-security"/>
-w /etc/group -p wa
-w /etc/passwd -p wa
-w /etc/shadow

-w /etc/login.defs -p wa
-w /etc/securetty
-w /var/log/lastlog

<co xml:id="co-audit-nw"/>
-w /etc/hosts -p wa
-w /etc/sysconfig/
w /etc/init.d/
w /etc/ld.so.conf -p wa
w /etc/localtime -p wa
w /etc/sysctl.conf -p wa
w /etc/modprobe.d/
w /etc/modprobe.conf.local -p wa
w /etc/modprobe.conf -p wa
<co xml:id="co-audit-pam"/>
w /etc/pam.d/
<co xml:id="co-audit-pfix"/>
-w /etc/aliases -p wa
-w /etc/postfix/ -p wa

<co xml:id="co-audit-ssh"/>
-w /etc/ssh/sshd_config

-w /etc/stunnel/stunnel.conf
-w /etc/stunnel/stunnel.pem

-w /etc/vsftpd.ftpusers
-w /etc/vsftpd.conf

<co xml:id="co-audit-misc"/>
-a exit,always -S sethostname
-w /etc/issue -p wa
-w /etc/issue.net -p wa</screen>

  <calloutlist>
   <callout arearefs="co-audit-at">
    <para><systemitem>at</systemitem> や <systemitem>cron</systemitem> の設定ファイルと、ジョブのスケジュール設定、そしてそれらのイベントに対するラベルの割り当てに対して、それぞれ監視を設定しています。</para>
    <remark>jsegitz 2014-07-23: no labels get assigned</remark>
   </callout>
   <callout arearefs="co-audit-security">
    <para>ユーザ, グループ, パスワード, ログインデータベースに対して監視を設定しているほか、たとえばログインの失敗など、ログイン関連のイベントを記録し、ラベルでわかりやすく識別するように設定しています。</para>
   </callout>
   <callout arearefs="co-audit-nw">
    <para>まずはホスト名の設定を行っている <filename>/etc/hosts</filename> に対して、監視を設定しラベルを指定しています。また、 <filename>/etc/sysconfig</filename> というシステム設定ディレクトリに対しても、変更を追跡しています。それぞれのファイルイベントを追跡したい場合は、ファイルごとの監視を設定してください。さらに、 <!--taroth 2014-03-07: /etc/inittab no longer exists: <filename>/etc/inittab</filename> and--><filename>/etc/init.d</filename> ディレクトリ内にある起動設定の変更に対しても、監視を設定しラベルを指定しています。こちらについても同様に、それぞれのファイルイベントを追跡したい場合は、ファイルごとの監視を設定してください。また、 <filename>/etc/ld.so.conf</filename> というリンカの設定ファイル、 <filename>/etc/localtime</filename> というローカル時刻の設定ファイルについても、監視とラベルを設定しています。このほか、 <filename>/etc/sysctl.conf</filename> , <filename>/etc/modprobe.d/</filename> , <filename>/etc/modprobe.conf.local</filename> , <filename>/etc/modprobe.conf</filename> にあるカーネルの設定ファイルに対しても、監視とラベルを設定しています。</para>
   </callout>
   <callout arearefs="co-audit-pam">
    <para>PAM の設定ファイルのディレクトリに対して監視を設定しています。このディレクトリ内にあるファイルを監視したい場合は、それぞれのファイルに対して監視を設定してください。</para>
   </callout>
   <callout arearefs="co-audit-pfix">
    <para>postfix の設定ファイルに対して監視を設定し、書き込みや属性変更を行おうとした場合に、後から検索できるようラベルを指定して記録を行っています。</para>
   </callout>
   <callout arearefs="co-audit-ssh">
    <para>SSH, <command>stunnel</command> , <command>vsftpd</command> の各設定ファイルに対して、後から検索できるようラベルを指定して監視を設定しています。</para>
   </callout>
   <callout arearefs="co-audit-misc">
    <para><systemitem>sethostname</systemitem> システムコールに対して監査を設定するほか、 <filename>/etc/issue</filename> と <filename>/etc/issue.net</filename> にあるシステムの識別情報の設定ファイルに対して、後から検索できるようラベルを指定して監視を設定しています。</para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenmisc">
  <title>その他のシステムコールに対する監視</title>

  <para><xref linkend="sec-audit-scenfs"/> で説明しているファイルシステム関連のシステムコールの監査だけでなく、その他のシステムコールに対しても追跡を行うことができます。たとえばタスク (プロセス) の作成を追跡することで、アプリケーションの振る舞いを理解する手助けになったりすることがあります。また、 <systemitem>umask</systemitem> システムコールを監査することで、プロセスがどのような作成マスクを使用しているのかを調べたりすることもできます。また、システム時刻の変更に関わるシステムコールを追跡することで、誰かがシステムの時刻を改ざんしようとしていないかどうかを確認することもできます。</para>

<screen><co xml:id="co-audit-attrib"/>
-a entry,always -S clone -S fork -S vfork

<co xml:id="co-audit-umask"/>
-a entry,always -S umask

<co xml:id="co-audit-time"/>
-a entry,always -S adjtimex -S settimeofday</screen>

  <calloutlist>
   <callout arearefs="co-audit-attrib">
    <para>タスク (プロセス) の作成を追跡する設定です。</para>
   </callout>
   <callout arearefs="co-audit-umask">
    <para>umask システムコールに対して監査コンテキストを追加しています。</para>
   </callout>
   <callout arearefs="co-audit-time">
    <para>システム時刻の変更に関わるシステムコールの追跡です。 <literal>adjtimex</literal> はシステムの時刻調節の設定を行うためのシステムコールで、 <literal>settimeofday</literal> は絶対時刻を設定するためのシステムコールです。</para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenipc">
  <title>システムコールのパラメータでのフィルタリング</title>

  <para><xref linkend="sec-audit-scenfs"/> や <xref linkend="sec-audit-scenmisc"/> で説明しているシステムコールの監査に加えて、さらに高度にアプリケーションの動作を追跡することができます。具体的にはフィルタを設定することで、監査の範囲を絞り込むことができるようになります。本章では、多重化を伴わないシステムコールのほか、 socketcall や ipc などのように、多重化を伴うシステムコールのパラメータに対して、フィルタリングを設定する方法を紹介しています。なお、 &x86-64; など、 64 ビット環境では、 socketcall も ipc も多重化されません。</para>

  <important>
   <title>システムコールの監査について</title>
   <para>システムコールの監査を行うと、ログを頻繁に書き込むことになります。そのため、カーネルに対しても重い負荷を与えることになります。監査を行った結果、通常よりも応答が遅くなったと感じた場合は、おそらくシステムのバックログ設定と流量制限の設定を超過したものと思われます。この場合は、監査ルール内にどのシステムコールを含めるのかを慎重に確認し、ログ設定についても調整を行ってください。 <xref linkend="sec-audit-auditd"/> では、関連する設定を調整する方法について説明しています。</para>
  </important>

  <para>access システムコールは、ファイルやファイルシステムのオブジェクトに対して、読み込みや書き込み、存在のチェックの機能を提供するシステムコールです。 <option>-F</option> フィルタフラグを設定することで、特定の条件に該当するシステムコールのみを記録することができるようになります。具体的な書式は <option>-F a1=<replaceable>アクセスモード</replaceable></option> です。 access システムコールにおけるパラメータについて、詳しくは <filename>/usr/include/fcntl.h</filename> ファイルをお読みください。</para>

<screen>-a entry,always -S access -F a1=4<co xml:id="co-audit-accessr"/>
-a entry,always -S access -F a1=6<co xml:id="co-audit-accessrw"/>
-a entry,always -S access -F a1=7<co xml:id="co-audit-accessrwx"/></screen>

  <calloutlist>
   <callout arearefs="co-audit-accessr">
    <para>access システムコールに対して監査を設定していますが、システムコールの 2 番目のパラメータ ( <literal>モード</literal> ) が <literal>4</literal> ( <literal>R_OK</literal> )の場合にのみ、監査を行う指定です。このルールフィルタでは、ユーザやプロセスがアクセスしようとしているファイルやファイルシステムのオブジェクトが、読み込みのための権限を持っているかどうかをテストする際に、監査を行う指定です。</para>
   </callout>
   <callout arearefs="co-audit-accessrw">
    <para>access システムコールに対して監査を設定していますが、システムコールの 2 番目のパラメータ ( <literal>モード</literal> ) が <literal>6</literal> 、つまり <literal>4</literal> (<literal>R_OK</literal>) および <literal>2</literal> (<literal>W_OK</literal>) の場合にのみ、監査を行う指定です。このルールフィルタでは、読み込みおよび書き込みのための権限を持っているかどうかをテストする際に、監査を行う指定です。</para>
   </callout>
   <callout arearefs="co-audit-accessrwx">
    <para>access システムコールに対して監査を設定していますが、システムコールの 2 番目のパラメータ ( <literal>モード</literal> ) が <literal>7</literal> 、つまり <literal>4</literal> (<literal>R_OK</literal>) および <literal>2</literal> (<literal>W_OK</literal>) および <literal>1</literal> (<literal>X_OK</literal>) の場合にのみ、監査を行う指定です。このルールフィルタでは、読み込みおよび書き込み、そして実行のための権限を持っているかどうかをテストする際に、監査を行う指定です。</para>
   </callout>
  </calloutlist>

  <para>socketcall システムコールは多重化型のシステムコールです。多重化とは複数のシステムコールを 1 つのシステムコールで賄う仕組みで、 libc 側で実際のシステムコールを最初のパラメータ ( <literal>a0</literal> ) として設定する仕組みです。 socketcall で利用できるシステムコールについては、マニュアルページをお読みください。また、パラメータの値とシステムコールの名前の一覧については、 <filename>/usr/src/linux/include/linux/net.h</filename> ファイルをお読みください。監査システムでは、 <option>-F a0=<replaceable>システムコール番号</replaceable></option> の形式で、システムコールを指定することができます。</para>

<screen>-a entry,always -S socketcall -F a0=1 -F a1=10<co xml:id="co-audit-socket1"/>
## x86_64, ia64 アーキテクチャの場合は下記をお使いください
#-a entry,always -S socket -F a0=10

-a entry,always -S socketcall -F a0=5<co xml:id="co-audit-socket2"/>
## x86_64, ia64 アーキテクチャの場合は下記をお使いください
#-a entry, always -S accept</screen>

  <calloutlist>
   <callout arearefs="co-audit-socket1">
    <para>socket(PF_INET6) システムコールを監査しています。 <option>-F a0=1</option> は socket システムコールを指し、 <option>-F a1=10</option> は IPv6 プロトコルファミリ (PF_INET6) を指定した場合を意味するパラメータになります。最初のパラメータ ( <literal>a0</literal> ) に対応する値は <filename>/usr/include/linux/net.h</filename> ファイルを、 2 つ目のパラメータ ( <literal>a1</literal> ) に対応する値は <filename>/usr/src/linux/include/linux/socket.h</filename> ファイルをそれぞれお読みください。 &x86-64; などの 64 ビットプラットフォームでは、 socketcall システムコールによる多重化は行っていませんので、これらの環境ではシステムコール名を直接指定してください。</para>
   </callout>
   <callout arearefs="co-audit-socket2">
    <para>上記と同様に socketcall システムコールを監査していますが、 <option>a0=5</option> は accept システムコールを意味しています (詳しくは <filename>/usr/include/linux/net.h</filename> をお読みください) 。 &x86-64; などの 64 ビットプラットフォームでは、 socketcall システムコールによる多重化は行っていませんので、これらの環境ではシステムコール名を直接指定してください。</para>
   </callout>
  </calloutlist>

  <para>ipc システムコールは多重化されるシステムコールのもう 1 つの例となります。実際のシステムコールは ipc システムコールの 1 つ目のパラメータとして指定されます。このようにしてフィルタを設定することで、特定の ipc システムコールのみを監査することができます。値の意味について、詳しくは <filename>/usr/include/linux/ipc.h</filename> をお読みください。</para>

<screen><co xml:id="co-audit-mqueue"/>
## msgctl
-a entry,always -S ipc -F a0=14
## msgget
-a entry,always -S ipc -F a0=13
## x86_64, ia64 アーキテクチャの場合は下記をお使いください
#-a entry,always -S msgctl
#-a entry,always -S msgget

<co xml:id="co-audit-semaph"/>
## semctl
-a entry,always -S ipc -F a0=3
## semget
-a entry,always -S ipc -F a0=2
## semop
-a entry,always -S ipc -F a0=1
## semtimedop
-a entry,always -S ipc -F a0=4
## x86_64, ia64 アーキテクチャの場合は下記をお使いください
#-a entry,always -S semctl
#-a entry,always -S semget
#-a entry,always -S semop
#-a entry,always -S semtimedop

<co xml:id="co-audit-sharedmem"/>
## shmctl
-a entry,always -S ipc -F a0=24
## shmget
-a entry,always -S ipc -F a0=23
## x86_64, ia64 アーキテクチャの場合は下記をお使いください
#-a entry,always -S shmctl
#-a entry,always -S shmget</screen>

  <calloutlist>
   <callout arearefs="co-audit-mqueue">
    <para>IPC SYSV メッセージキューに関連するシステムコールを監査しています。この場合、 <literal>a0</literal> の値は msgctl ( <literal>14</literal> ) と msgget (<literal>13</literal> ) のシステムコールを指しています。 &x86-64; などの 64 ビットプラットフォームでは、 ipc システムコールによる多重化は行っていませんので、これらの環境ではシステムコール名を直接指定してください。</para>
   </callout>
   <callout arearefs="co-audit-semaph">
    <para>IPC SYSV メッセージセマフォに関連するシステムコールを監査しています。この場合、 <literal>a0</literal> の値は semctl ( <literal>3</literal> ), semget ( <literal>2</literal> ), semop ( <literal>1</literal> ), semtimedop ( <literal>4</literal> ) の各システムコールを指しています。上記と同様に、 &x86-64; などの 64 ビットプラットフォームでは、 ipc システムコールによる多重化は行っていませんので、これらの環境ではシステムコール名を直接指定してください。</para>
   </callout>
   <callout arearefs="co-audit-sharedmem">
    <para>IPC SYSV 共有メモリに関連するシステムコールを監査しています。この場合、 <literal>a0</literal> の値は shmctl ( <literal>24</literal> ), shmget ( <literal>23</literal> ) の各システムコールを指しています。これまでと同様に、 &x86-64; などの 64 ビットプラットフォームでは、 ipc システムコールによる多重化は行っていませんので、これらの環境ではシステムコール名を直接指定してください。</para>
   </callout>
  </calloutlist>
 </sect1>
 <sect1 xml:id="sec-audit-scenkeys">
  <title>キーを利用した監査イベントレコードの管理</title>

  <para>イベントを生成するためのルールを複数設定し、ログに出力するようにした場合、ログには一般に多くの項目が出力されることになり、必要なものを識別するだけでも手間がかかってしまいます。 <command>ausearch</command> コマンドを使用することで、様々な条件を指定して検索を行うことができます。たとえば <command>ausearch</command> <option>-m <replaceable>メッセージの種類</replaceable></option> のように指定すると、メッセージの種類を指定して検索を行うことができます。しかしながら、同じようなメッセージを出力するようなルールが複数あって、それらを区別して扱いたい場合、 <filename>/etc/audit/audit.rules</filename> ファイルのルール内に、あらかじめ何らかの検索用のキーを指定しておくことができます。このキーはその条件に合致してログを出力する際、必ず書き込まれる仕組みになっています。そのため、ログを記録したあとから <command>ausearch</command> <option>-k <replaceable>キー名</replaceable></option> のようにして検索することで、特定のキーが設定されたイベントのみを抽出することができるようになります。</para>

  <para>例として、下記のようなルールをルールセットに追加したものします:</para>

<screen>-w /etc/audit/audit.rules -p wa</screen>

  <para>キーを指定しない場合、まずは <literal>SYSCALL</literal> や <literal>PATH</literal> のイベントのみを抽出してから、さらに grep などのツールを利用して必要な項目を抜き出すような処理が必要になります。そのため、下記のように <option>-k</option> オプションを指定して、キーを書き込むように設定します:</para>

<screen>-w /etc/audit/audit.rules -p wa -k CFG_audit.rules</screen>

  <para>キーには任意の文字列を指定することができます。また、上記の例のように、<literal>CFG</literal> は設定ファイル用、 <literal>LOG</literal> はログファイル用等のように設定し、その後ろに実際のファイル名を続けるようにして、わかりやすくするとよいでしょう。上記のようなキーを設定した場合、検索は下記のようになります:</para>

<screen><command>ausearch -k CFG_audit.rules</command>
----
time-&gt;Thu Feb 19 09:09:54 2009
type=PATH msg=audit(1235030994.032:8649): item=3 name="audit.rules~" inode=370603 dev=08:06 mode=0100640 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=2 name="audit.rules" inode=370603 dev=08:06 mode=0100640 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=1  name="/etc/audit" inode=368599 dev=08:06 mode=040750 ouid=0 ogid=0 rdev=00:00
type=PATH msg=audit(1235030994.032:8649): item=0  name="/etc/audit" inode=368599 dev=08:06 mode=040750 ouid=0 ogid=0 rdev=00:00
type=CWD msg=audit(1235030994.032:8649):  cwd="/etc/audit"
type=SYSCALL msg=audit(1235030994.032:8649): arch=c000003e syscall=82 success=yes exit=0 a0=7deeb0 a1=883b30 a2=2 a3=ffffffffffffffff items=4 ppid=25400 pid=32619 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=pts1 ses=1164 comm="vim" exe="/bin/vim-normal" key="CFG_audit.rules"</screen>
 </sect1>
</chapter>
