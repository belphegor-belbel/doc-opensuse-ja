<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" role="General" xml:id="cha-autoyast-create-control-file">
 <title>&ay; 制御ファイルの作成</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

  <sect1 xml:id="Autoinstallation-collectInfo">
   <title>情報の収集</title>

   <para>制御ファイルを作成するには、まずインストールしたいシステムに関して情報の収集を行なう必要があります。この情報収集にはハードウエアデータやネットワーク情報などが含まれます。まずはインストール予定のマシンに対して、下記のような情報を収集してください:</para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>ハードディスクの種類とサイズ</para>
    </listitem>
    <listitem>
     <para>グラフィカルなインターフェイスと接続されているモニタ (もしあれば)</para>
    </listitem>
    <listitem>
     <para>既知であればネットワークインターフェイスと MAC アドレスの情報 (特に DHCP を使用するような場合)</para>
    </listitem>
   </itemizedlist>
   <para>なお、 <package>autoyast2-installation</package> および <package>autoyast2</package> の両パッケージがインストールされていることも確認しておいてください。</para>
  </sect1>
  
  <sect1 xml:id="CreateProfile-CMS">
   <title>設定管理システム (Configuration Management System; CMS) の使用</title>

   <para>1 台もしくは複数台のコンピュータに対して制御ファイルを作成する目的で、 &yast; をベースにした設定インターフェイスが提供されています。このシステムは、 &productname; を通常の手順でインストールしたり設定したりする際に使用する、既存のモジュールをベースにして作られています。</para>

   <para>設定管理システムを使用することで、制御ファイルを簡単に作成することができるほか、複数のクライアントからアクセスすることができるようにするため、ネットワーク環境内で設定のリポジトリを管理したりすることもできます。</para>

   <figure os="sles;sled">
    <title>設定システム</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="autoyast2-maindialog.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="autoyast2-maindialog.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <figure os="osuse">
    <title>設定システム</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="autoyast2-maindialog_kde.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="autoyast2-maindialog_kde.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <sect2 xml:id="CreateProfile-CMS-new">
    <title>新しい制御ファイルの作成</title>
     <para>&ay; のプロファイルを作成するのに最も簡単な方法は、既存の &productname; システムを雛形として使用することです。既にインストール済みのシステムから <menuchoice> <guimenu>&yast;</guimenu> <guimenu>その他</guimenu> <guimenu>自動インストールの設定</guimenu></menuchoice> を選択して、メニューバーから <menuchoice><guimenu>ツール</guimenu> <guimenu>参照プロファイルの作成</guimenu> </menuchoice> を選択してください。あとはプロファイル内に含めたいシステムコンポーネントを選択するだけです。それ以外にも、 <menuchoice><guimenu>&yast;</guimenu><guimenu>その他</guimenu><guimenu>自動インストール向けのシステム複製</guimenu></menuchoice> を選択するか、もしくはコマンドラインから <command>sudo yast clone_system</command> を実行すると、現在のシステムの設定全てを含むプロファイルを作成することもできます。</para>

     <para>いずれの方法とも <filename>/root/autoinst.xml</filename> ファイルを作成することになります。システム複製でプロファイルを作成した場合は、作成したマシンと全く同じクローンを作成するプロファイルになります。ただし、通常は全く同じシステムを構成するのではなく、少しずつ異なるシステムを構築するのが一般的であるため、お使いの XML エディタなどで細かい微調整を行なうことになります。</para>

     <warning>
     <title>プロファイル内の機密情報について</title>
      <para>プロファイル内には、たとえばパスワードハッシュや登録キーなど、機密情報が含まれる可能性があることに注意してください。</para>
      <para>また、出力されたプロファイルはよくご確認のうえ、ファイルのパーミッションを適切に設定するようにしてください。</para>
     </warning>

    <para>いくつかの例外を除いて、ほぼ全ての制御ファイルのリソースは、設定管理システムを利用することで設定することができます。システムは柔軟に作られていて、設定を作成する際の手順も、通常の &yast; コントロールセンターと同じユーザインターフェイスになっています。既存のものと同じユーザインターフェイスであるだけでなく、パーティション設定や汎用オプション、ソフトウエアなど、特殊で複雑な設定を作成するための新しいインターフェイスも提供されています。</para>
    <para>これに加えて、 CMS では生成された制御ファイルの正当性を確認する仕組みも備えていますので、生成された制御ファイルをそのまま自動インストールに使用することができます。</para>
    <para>まずは設定管理システム (<systemitem class="resource">autoyast2</systemitem> パッケージ) がインストールされていることを確認し、 &yast; コントロールセンターから起動を行なうか、もしくは root で下記のコマンドを実行します (なお、グラフィカルな表示を行ないたい場合は、 <envar>DISPLAY</envar> 環境変数を正しく設定していることを確認してから実行してください):</para>
<screen>/sbin/yast2 autoyast</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="CreateProfile-Manual">
   <title>手作業による制御ファイルの作成および編集</title>

   <para>制御ファイルを手作業で編集する場合は、まず書式が正しいことを確認する必要があります。書式を確認するには、お使いのディストリビューションに既に用意されているツールをお使いください。たとえばファイルの書式が正しいこと (XML の構造に間違いがないこと) を確認したい場合は、 <systemitem>libxml2</systemitem> パッケージ内に含まれる <command>xmllint</command> ユーティリティを使用します:</para>

<screen>xmllint &lt;制御ファイル&gt;</screen>

   <para>制御ファイルの書式に問題が見つかると (たとえばタグが正しく閉じられていないなど) 、 <command>xmllint</command> はエラーを報告します。</para>


   <para>制御ファイルの内容を確認したい場合は、同じパッケージ内に含まれる <command>jing</command> ツールをお使いください。確認の際、タグの配置の誤りのほか、必須のタグや属性の確認や属性値の確認も行なわれます。 <phrase os="sles">なお、 <package>jing</package> パッケージは &sdk; 内に含まれています。</phrase></para>

<screen>jing /usr/share/YaST2/schema/autoyast/rng/profile.rng &lt;制御ファイル&gt;</screen>

   <para><literal>/usr/share/YaST2/schema/autoyast/rng/profile.rng</literal> ファイルは <literal>yast2-schema</literal> パッケージ内に含まれています。このファイルには、 &ay; プロファイルの書式とクラスに関する情報が書かれています。</para>

   <note>
    <title>スキーマの拡張について</title>

    <para>&ay; は多の製品やモジュールを利用することで拡張を行なうことができますが、スキーマ側にはそれらの拡張に対応するための仕様が含まれていません。そのため &ay; に対して拡張を使用するプロファイルを指定した場合、プロファイルが正しくないものとして扱われてしまう場合があります。</para>

    <para>このような事情から、 &productname; <phrase os="osuse">15.3</phrase> <phrase os="sles;sled">SP3</phrase> およびそれ以降では、 &ay; はトップレベルに未知のセクションが存在していても、それらを無視するようになっています。たとえば下記の例でいえば、 <literal>&lt;sap-inst&gt;</literal> 内は検証されず無視されるものの、残りの箇所は通常通り検証が行なわれます。</para>

    <screen>&lt;general&gt;
  &lt;mode&gt;
    &lt;confirm config:type="boolean"&gt;true&lt;/confirm&gt;
  &lt;/mode&gt;
&lt;/general&gt;

&lt;sap-inst&gt;
  &lt;!-- this section is not validated --&gt;&gt;
&lt;/sap-inst&gt;
</screen>
   </note>

   <para>自動インストールを行なう前に、これらのチェックで表示されたエラーを全て修正してください。制御ファイルの書式や形式が正しくない場合、自動インストールの処理を開始することはできません。</para>

   <para>制御ファイルの編集にあたっては、任意の XML エディタのほか、 XML に対応した任意のテキストエディタ (例: Emacs, Vim) を使用することができます。ただし、多数のマシンに対して制御ファイルを作成する場合は最適な選択であるとは言えないため、自動インストールエンジンと設定管理システム (CMS) の中間で使用することをお勧めします。</para>

   <tip>
    <title>XML エディタとしての emacs の使用について</title>
    <para>Emacs に内蔵された nxml-mode を使用すると、タグの補完機能や検証機能も存在する、完全機能の XML エディタとして使用することができます。 nxml-mode の設定方法について、詳しくは Emacs のヘルプをお読みください。</para>
   </tip>
  </sect1>
  <sect1 xml:id="CreateProfile-XSLT">
   <title>XSLT を利用したスクリプト経由での制御ファイルの作成</title>

   <para>雛形となる制御ファイルが既に存在していて、その中の一部をスクリプトやコマンドラインで修正したい場合は、 <literal>xsltproc</literal> のような XSLT プロセッサを使用することをお勧めします。たとえば &ay; の制御ファイル内のホスト名を、スクリプトを介して修正したいような場合がそれにあたります (ホスト名を設定するような場合は、それをスクリプト化することをお勧めします) 。</para>

   <para>まずは XSL ファイルを作成します:</para>

   <example>
    <title>スクリプトでホスト名やドメイン名を置き換える場合の例</title>
<screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:y2="http://www.suse.com/1.0/yast2ns"
  xmlns:config="http://www.suse.com/1.0/configns"
  xmlns="http://www.suse.com/1.0/yast2ns"
  version="1.0"&gt;
  &lt;xsl:output method="xml" encoding="UTF-8" indent="yes" omit-xml-declaration="no" cdata-section-elements="source"/&gt;

  &lt;!-- パラメータ名 --&gt;
  &lt;xsl:param name="hostname"/&gt;
  &lt;xsl:param name="domain"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates select="@*|node()"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="y2:dns"&gt;
    &lt;xsl:copy&gt;
      &lt;!-- where to copy the parameters --&gt;
      &lt;domain&gt;&lt;xsl:value-of select="string($domain)"/&gt;&lt;/domain&gt;
      &lt;hostname&gt;&lt;xsl:value-of select="string($hostname)"/&gt;&lt;/hostname&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;


  &lt;xsl:template match="@*|node()" &gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</screen>
   </example>

   <para>このファイルでは、ホスト名とドメイン名をパラメータとして求めるようになっています。</para>

<screen>&lt;xsl:param name="hostname"/&gt;
&lt;xsl:param name="domain"/&gt;</screen>

   <para>これらの情報は、同じ制御ファイル内の DNS セクション内に書かれているものと同じです。つまり、 DNS セクション内に既にドメイン要素が存在する場合、ここにもう 1 つの設定を記述することになってしまいます。これでは期待通りの動作にならないことがあります。</para>


<!-- FIXME: rewrite these sections using xsltproc
   <para>
    To create a new &ay; control file now from the template plus
    the XSL file, run the following command:
   </para>

<screen>sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain  template.xml</screen>

   <para>
    You will then get a filled out &ay; control file on STDOUT.
   </para>

   <para>
    If you have multiple XSL files you want to apply to a template, do the
    following:
   </para>

<screen>sabcmd add_hd_vg.xsl \$device=/dev/sda \$partition=p2 \$vg=system \
        | sabcmd add_harddisk.xsl \$device=/dev/system \$lvm=true \
        | sabcmd ....
        | sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain</screen>

   <para>
    Pipe the output of each sabcmd to the next sabcmd.
   </para>
-->

   <para>XSLT に関する詳細については、公式 Web ページ <link xlink:href="http://www.w3.org/TR/xslt">www.w3.org/TR/xslt</link> (英語) をお読みください。</para>
  </sect1>

  <sect1 xml:id="check-profile">
   <title>制御ファイルのチェック</title>

   <para>用途にもよりますが、 &ay; のプロファイルを作成する作業は、特に <link xlink:href="part-dynamic-profiles">ルールやクラス、 ERB テンプレートや事前スクリプト</link> を使用する必要が生じた場合は、複雑なものになってしまいます。このような複雑なプロファイルのテストやデバッグの作業を簡単にするため、 &ay; には <literal>check-profile</literal> と呼ばれるコマンドが用意されています。これは取得や構築のほか、必要であれば発生しうる問題を検出するためのプロファイル取り込みにも対応しています。</para>

   <note>
    <para>このコマンドはインストール処理と同じアプローチを使用して動作しますが、現在のシステムにインストールされている &yast; のパッケージバージョンやアーキテクチャなどが、インストールメディアにインストールされているものと異なる場合、処理結果が異なる場合があります。</para>
   </note>

   <warning>
    <para>また、事前スクリプトや ERB のコードは <literal>root</literal> ユーザとして実行されることから、信頼できるプロファイルのみを使用するようにしてください。</para>
   </warning>

   <sect2>
    <title>基本的なチェック</title>

    <para>このコマンドの最も簡単な使用方法は、プロファイルを読み込んで検証する処理です:</para>

<screen>&prompt.sudo; yast2 autoyast check-profile filename=autoinst.xml output=result.xml</screen>

    <para><filename>result.xml</filename> ファイルには、プロファイルを評価した結果が書き込まれます。ただし、高度な機能を使用していなかった場合であっても、 <filename>autoinst.xml</filename> と <filename>result.xml</filename> の内容は異なる場合があることに注意してください。これは、 &ay; がプロファイルを処理する際に、いくつかのクリーンアップ処理を実施するためです。</para>

    <para><literal>check-profile</literal> はリモートのファイルを扱うこともできます:</para>

<screen>&prompt.sudo; yast2 autoyast check-profile filename=http://192.168.1.100/autoinst.xml output=result.xml</screen>

   </sect2>

   <sect2>
    <title>事前スクリプトの実行</title>

    <para>必要であれば、 &ay; はプロファイル内にスクリプトを内蔵させて実行することができます。また、その実行時に検出されたエラーを報告することもできます。これは特に、事前スクリプト内でプロファイルを修正しているような場合に有用な仕組みです。この機能を有効化するには、 <literal>run-scripts</literal> オプションを <literal>true</literal> にします。</para>

<screen>&prompt.sudo; yast2 autoyast check-profile filename=http://192.168.1.100/autoinst.xml output=result.xml run-scripts=true</screen>

    <warning>
     <para>なお、 <literal>run-scripts</literal> オプションでスクリプトの実行を許可すると、スクリプトは root 権限で実行されることになりますので、現在お使いのシステムに悪い影響が発生する可能性があることに注意してください。</para>
    </warning>
   </sect2>

   <sect2>
    <title>プロファイルの取り込み</title>

    <para>プロファイルの内容が正しい場合であっても、プロファイルの取り込み時に何らかの問題が発生することがあります。これは &ay; がプロファイルを取得して構築し、検証する処理で、論理的なチェックまでは行なっていないことによるものです。</para>

    <para>このような問題の発生を予想させたい場合は、 <literal>check-profile</literal> コマンドでプロファイルの取り込みを実行し、検出された問題を報告するようにしてください。この処理にはしばらくの時間がかかりますので、 <literal>import-all</literal> オプションを <literal>false</literal> に設定して、この処理を無効化することもできます。</para>

<screen>&prompt.sudo; yast2 autoyast check-profile filename=http://192.168.1.100/autoinst.xml output=result.xml import-all=false</screen>

    <para>なお、プロファイルの取り込みは安全な処理であり、取り込みを実行するシステムに影響を与えることはありません。</para>
   </sect2>
  </sect1>
 </chapter>
