<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter [
<!ENTITY % entities SYSTEM "entity-decl.ent">
%entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" role="General" xml:id="cha-autoyast-create-control-file">
 <title>&ay; 制御ファイルの作成</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>

  <sect1 xml:id="Autoinstallation-collectInfo">
   <title>情報の収集</title>

   <para>制御ファイルを作成するには、まずインストールしたいシステムに関して情報の収集を行なう必要があります。この情報収集にはハードウエアデータやネットワーク情報などが含まれます。まずはインストール予定のマシンに対して、下記のような情報を収集してください:</para>

   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>ハードディスクの種類とサイズ</para>
    </listitem>
    <listitem>
     <para>グラフィカルなインターフェイスと接続されているモニタ (もしあれば)</para>
    </listitem>
    <listitem>
     <para>既知であればネットワークインターフェイスと MAC アドレスの情報 (特に DHCP を使用するような場合)</para>
    </listitem>
   </itemizedlist>
   <para>
    Also verify that both <package>autoyast2-installation</package> and 
    <package>autoyast2</package> are installed.
   </para>
  </sect1>
  
  <sect1 xml:id="CreateProfile-CMS">
   <title>設定管理システム (Configuration Management System; CMS) の使用</title>

   <para>1 台もしくは複数台のコンピュータに対して制御ファイルを作成する目的で、 &yast; をベースにした設定インターフェイスが提供されています。このシステムは、 &productname; を通常の手順でインストールしたり設定したりする際に使用する、既存のモジュールをベースにして作られています。</para>

   <para>設定管理システムを使用することで、制御ファイルを簡単に作成することができるほか、複数のクライアントからアクセスすることができるようにするため、ネットワーク環境内で設定のリポジトリを管理したりすることもできます。</para>

   <figure os="sles;sled">
    <title>設定システム</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="autoyast2-maindialog.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="autoyast2-maindialog.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <figure os="osuse">
    <title>設定システム</title>
    <mediaobject>
     <imageobject role="html">
      <imagedata fileref="autoyast2-maindialog_kde.png"/>
     </imageobject>
     <imageobject role="fo">
      <imagedata fileref="autoyast2-maindialog_kde.png" width="75%"/>
     </imageobject>
    </mediaobject>
   </figure>

   <sect2 xml:id="CreateProfile-CMS-new">
    <title>新しい制御ファイルの作成</title>
     <para>
      The easiest way to create an &ay; profile is to use an existing
      &productname; system
      as a template. On an already installed system, start <menuchoice>
      <guimenu>&yast;</guimenu> <guimenu>Miscellaneous</guimenu>
      <guimenu>Autoinstallation</guimenu></menuchoice>. Now select <menuchoice>
      <guimenu>Tools</guimenu> <guimenu>Create Reference Profile</guimenu>
      </menuchoice> from the menu. Choose the system components you want
      to include in the profile. Alternatively, create a profile containing
      the complete system configuration by running <command>sudo yast
      clone_system</command> from the command line.
     </para>
     <para>
      Both methods will create the file
      <filename>/root/autoinst.xml</filename>. The version created on the
      command line can be used to set up an identical clone of the system on
      which the profile was created. However, usually you will want to adjust
      the file to make it possible to install several machines that are very
      similar, but not identical. This can be done by adjusting the profile
      using your favorite text/XML editor.
     </para>
    <para>いくつかの例外を除いて、ほぼ全ての制御ファイルのリソースは、設定管理システムを利用することで設定することができます。システムは柔軟に作られていて、設定を作成する際の手順も、通常の &yast; コントロールセンターと同じユーザインターフェイスになっています。既存のものと同じユーザインターフェイスであるだけでなく、パーティション設定や汎用オプション、ソフトウエアなど、特殊で複雑な設定を作成するための新しいインターフェイスも提供されています。</para>
    <para>これに加えて、 CMS では生成された制御ファイルの正当性を確認する仕組みも備えていますので、生成された制御ファイルをそのまま自動インストールに使用することができます。</para>
    <para>まずは設定管理システム (<systemitem class="resource">autoyast2</systemitem> パッケージ) がインストールされていることを確認し、 &yast; コントロールセンターから起動を行なうか、もしくは root で下記のコマンドを実行します (なお、グラフィカルな表示を行ないたい場合は、 <envar>DISPLAY</envar> 環境変数を正しく設定していることを確認してから実行してください):</para>
<screen>/sbin/yast2 autoyast</screen>
   </sect2>
  </sect1>
  <sect1 xml:id="CreateProfile-Manual">
   <title>手作業による制御ファイルの作成および編集</title>

   <para>制御ファイルを手作業で編集する場合は、まず書式が正しいことを確認する必要があります。書式を確認するには、お使いのディストリビューションに既に用意されているツールをお使いください。たとえばファイルの書式が正しいこと (XML の構造に間違いがないこと) を確認したい場合は、 <systemitem>libxml2</systemitem> パッケージ内に含まれる <command>xmllint</command> ユーティリティを使用します:</para>

<screen>xmllint &lt;制御ファイル&gt;</screen>

   <para>制御ファイルの書式に問題が見つかると (たとえばタグが正しく閉じられていないなど) 、 <command>xmllint</command> はエラーを報告します。</para>


   <para>制御ファイルの内容を確認したい場合は、同じパッケージ内に含まれる <command>jing</command> ツールをお使いください。確認の際、タグの配置の誤りのほか、必須のタグや属性の確認や属性値の確認も行なわれます。 <phrase os="sles">なお、 <package>jing</package> パッケージは &sdk; 内に含まれています。</phrase></para>

<screen>jing /usr/share/YaST2/schema/autoyast/rng/profile.rng &lt;制御ファイル&gt;</screen>

   <para><literal>/usr/share/YaST2/schema/autoyast/rng/profile.rng</literal> ファイルは <literal>yast2-schema</literal> パッケージ内に含まれています。このファイルには、 &ay; プロファイルの書式とクラスに関する情報が書かれています。</para>


   <para>自動インストールを行なう前に、これらのチェックで表示されたエラーを全て修正してください。制御ファイルの書式や形式が正しくない場合、自動インストールの処理を開始することはできません。</para>

   <para>制御ファイルの編集にあたっては、任意の XML エディタのほか、 XML に対応した任意のテキストエディタ (例: Emacs, Vim) を使用することができます。ただし、多数のマシンに対して制御ファイルを作成する場合は最適な選択であるとは言えないため、自動インストールエンジンと設定管理システム (CMS) の中間で使用することをお勧めします。</para>

   <tip>
    <title>XML エディタとしての emacs の使用について</title>
    <para>Emacs に内蔵された nxml-mode を使用すると、タグの補完機能や検証機能も存在する、完全機能の XML エディタとして使用することができます。 nxml-mode の設定方法について、詳しくは Emacs のヘルプをお読みください。</para>
   </tip>
  </sect1>
  <sect1 xml:id="CreateProfile-XSLT">
   <title>XSLT を利用したスクリプト経由での制御ファイルの作成</title>

   <para>雛形となる制御ファイルが既に存在していて、その中の一部をスクリプトやコマンドラインで修正したい場合は、 <literal>xsltproc</literal> のような XSLT プロセッサを使用することをお勧めします。たとえば &ay; の制御ファイル内のホスト名を、スクリプトを介して修正したいような場合がそれにあたります (ホスト名を設定するような場合は、それをスクリプト化することをお勧めします) 。</para>

   <para>まずは XSL ファイルを作成します:</para>

   <example>
    <title>スクリプトでホスト名やドメイン名を置き換える場合の例</title>
<screen>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:y2="http://www.suse.com/1.0/yast2ns"
  xmlns:config="http://www.suse.com/1.0/configns"
  xmlns="http://www.suse.com/1.0/yast2ns"
  version="1.0"&gt;
  &lt;xsl:output method="xml" encoding="UTF-8" indent="yes" omit-xml-declaration="no" cdata-section-elements="source"/&gt;

  &lt;!-- パラメータ名 --&gt;
  &lt;xsl:param name="hostname"/&gt;
  &lt;xsl:param name="domain"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates select="@*|node()"/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="y2:dns"&gt;
    &lt;xsl:copy&gt;
      &lt;!-- where to copy the parameters --&gt;
      &lt;domain&gt;&lt;xsl:value-of select="string($domain)"/&gt;&lt;/domain&gt;
      &lt;hostname&gt;&lt;xsl:value-of select="string($hostname)"/&gt;&lt;/hostname&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;


  &lt;xsl:template match="@*|node()" &gt;
    &lt;xsl:copy&gt;
      &lt;xsl:apply-templates select="@*|node()"/&gt;
    &lt;/xsl:copy&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</screen>
   </example>

   <para>このファイルでは、ホスト名とドメイン名をパラメータとして求めるようになっています。</para>

<screen>&lt;xsl:param name="hostname"/&gt;
&lt;xsl:param name="domain"/&gt;</screen>

   <para>これらの情報は、同じ制御ファイル内の DNS セクション内に書かれているものと同じです。つまり、 DNS セクション内に既にドメイン要素が存在する場合、ここにもう 1 つの設定を記述することになってしまいます。これでは期待通りの動作にならないことがあります。</para>


<!-- FIXME: rewrite these sections using xsltproc
   <para>
    To create a new &ay; control file now from the template plus
    the XSL file, run the following command:
   </para>

<screen>sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain  template.xml</screen>

   <para>
    You will then get a filled out &ay; control file on STDOUT.
   </para>

   <para>
    If you have multiple XSL files you want to apply to a template, do the
    following:
   </para>

<screen>sabcmd add_hd_vg.xsl \$device=/dev/sda \$partition=p2 \$vg=system \
        | sabcmd add_harddisk.xsl \$device=/dev/system \$lvm=true \
        | sabcmd ....
        | sabcmd add_hostname.xsl \$hostname=myHost \$domain=my.domain</screen>

   <para>
    Pipe the output of each sabcmd to the next sabcmd.
   </para>
-->

   <para>XSLT に関する詳細については、公式 Web ページ <link xlink:href="http://www.w3.org/TR/xslt">www.w3.org/TR/xslt</link> (英語) をお読みください。</para>
  </sect1>
 </chapter>
