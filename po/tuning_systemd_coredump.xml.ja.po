# translation of tuning_systemd_coredump.xml.po to Japanese
# Japanese translations for PACKAGE package
# PACKAGE パッケージに対する英訳.
#
# Automatically generated, 2019.
# Yasuhiko Kamata <belphegor@belbel.or.jp>, 2019, 2020, 2021, 2022, 2023.
msgid ""
msgstr ""
"Project-Id-Version: tuning_systemd_coredump.xml\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2025-08-04 22:05+0000\n"
"PO-Revision-Date: 2023-08-09 17:26+0900\n"
"Last-Translator: Yasuhiko Kamata <belphegor@belbel.or.jp>\n"
"Language-Team: Japanese <opensuse-ja@opensuse.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: tuning_systemd_coredump.xml:8
#, no-c-format
msgid "Using &systemdcd; to debug application crashes"
msgstr "アプリケーションクラッシュ時の &systemdcd; の使用"

#. Tag: date
#: tuning_systemd_coredump.xml:16
#, no-c-format
msgid "2023-08-08"
msgstr "2023-08-08"

#. Tag: para
#: tuning_systemd_coredump.xml:23
#, no-c-format
msgid "&systemdcd; collects and displays core dumps, for analyzing application crashes. The core dump contains an image of the process's memory at the time of termination. By default, when a process crashes (or all processes belonging to an application), it stores the core dump in the <filename>/var/lib/systemd/coredump</filename> file and logs the core dump to the &systemd; journal, including a backtrace if possible. You also have the option to examine the dump file with other tools such as <command>gdb</command> or <command>crash</command> (see <xref linkend=\"cha-tuning-kdump-analyze\"/> )."
msgstr "&systemdcd; はアプリケーションのクラッシュを解析するため、コアダンプ情報を採取して表示できる仕組みです。コアダンプ内にはアプリケーションがクラッシュした時点でのメモリイメージが含まれています。既定では、プロセス (もしくはアプリケーションに属する複数のプロセス) がクラッシュした場合、可能であればバックトレースを含めて <filename>/var/lib/systemd/coredump</filename> にコアダンプを保存して、 &systemd; のジャーナル内にその旨を記録します。この出力されたコアダンプをもとに、 <command>gdb</command> や <command>crash</command> (詳しくは <xref linkend=\"cha-tuning-kdump-analyze\"/> をお読みください) を利用して解析することができます。"

#. Tag: para
#: tuning_systemd_coredump.xml:33
#, no-c-format
msgid "Core dumps stored in <filename>/var/lib/systemd/coredump</filename> are deleted after three days (see the <literal>d /var/lib/systemd/coredump</literal> line in <filename>/usr/lib/tmpfiles.d/systemd.conf</filename> )."
msgstr "なお、 <filename>/var/lib/systemd/coredump</filename> 内に保存されたコアダンプは、 3 日間が経過すると自動的に削除されます (詳しくは <filename>/usr/lib/tmpfiles.d/systemd.conf</filename> ファイル内の <literal>d /var/lib/systemd/coredump</literal> の行をお読みください) 。"

#. Tag: para
#: tuning_systemd_coredump.xml:39
#, no-c-format
msgid "There is an option to not store core dumps, but to log only to the journal, which may be useful to minimize the collection and storage of sensitive information."
msgstr "また、コアダンプを全く保存せず、ジャーナルにのみ記録を行うように設定することもできます。これは、収集によるディスク容量の圧迫と機密情報の保存を防ぐ目的で有用です。"

#. Tag: title
#: tuning_systemd_coredump.xml:45
#, no-c-format
msgid "Use and configuration"
msgstr "使用と設定"

#. Tag: para
#: tuning_systemd_coredump.xml:47
#, no-c-format
msgid "&systemdcd; is enabled and ready to run by default. The default configuration is in <filename>/etc/systemd/coredump.conf</filename> :"
msgstr "&systemdcd; は既定で有効化され、すぐに使用できるようになっています。既定の設定ファイルは <filename>/etc/systemd/coredump.conf</filename> 内に存在しています:"

#. Tag: screen
#: tuning_systemd_coredump.xml:52
#, no-c-format
msgid ""
"[Coredump]\n"
"#Storage=external\n"
"#Compress=yes\n"
"#ProcessSizeMax=2G\n"
"#ExternalSizeMax=2G\n"
"#JournalSizeMax=767M\n"
"#MaxUse=\n"
"#KeepFree=\n"
msgstr ""
"[Coredump]\n"
"#Storage=external\n"
"#Compress=yes\n"
"#ProcessSizeMax=2G\n"
"#ExternalSizeMax=2G\n"
"#JournalSizeMax=767M\n"
"#MaxUse=\n"
"#KeepFree=\n"

#. Tag: para
#: tuning_systemd_coredump.xml:62
#, no-c-format
msgid "Size units are B, K, M, G, T, P, and E. <literal>ExternalSizeMax</literal> also supports a value of <literal>infinity</literal> . <!-- see https://github.com/systemd/systemd/pull/21371/files, c schroder 2022-09-15 -->"
msgstr "サイズを指定する箇所では、それぞれ B (バイト), K (キロバイト), M (メガバイト), G (ギガバイト), T (テラバイト), P (ペタバイト), E (エクサバイト) の接尾辞を設定することができるほか、 <literal>infinity</literal> (無制限) を指定することもできます。 <!-- see https://github.com/systemd/systemd/pull/21371/files, c schroder 2022-09-15 -->"

#. Tag: para
#: tuning_systemd_coredump.xml:68
#, no-c-format
msgid "The following example shows how to use Vim for simple testing, by creating a segfault to generate journal entries and a core dump."
msgstr "下記の例では、 vim を利用して SEGFAULT を発生させ、ジャーナルとコアダンプを出力させるテスト方法を説明しています。"

#. Tag: title
#: tuning_systemd_coredump.xml:74
#, no-c-format
msgid "Creating a core dump with Vim"
msgstr "vim を利用したコアダンプの作成"

#. Tag: para
#: tuning_systemd_coredump.xml:76
#, no-c-format
msgid "Enable the <systemitem>debuginfo-pool</systemitem> and <systemitem>debuginfo-update</systemitem> repositories"
msgstr "まずは <systemitem>debuginfo-pool</systemitem> および <systemitem>debuginfo-update</systemitem> の各リポジトリを有効化します"

#. Tag: para
#: tuning_systemd_coredump.xml:82
#, no-c-format
msgid "Install <package>vim-debuginfo</package>"
msgstr "<package>vim-debuginfo</package> をインストールします"

#. Tag: para
#: tuning_systemd_coredump.xml:87
#, no-c-format
msgid "Launch <command>vim testfile</command> and type a few characters"
msgstr "<command>vim testfile</command> と入力して実行し、文字を入力します"

#. Tag: para
#: tuning_systemd_coredump.xml:92
#, no-c-format
msgid "Get the PID and generate a segfault:"
msgstr "PID を取得して SEGFAULT を発生させます:"

#. Tag: screen
#: tuning_systemd_coredump.xml:95
#, no-c-format
msgid ""
"&prompt.user;ps ax | grep vim\n"
"2345 pts/3    S+     0:00 vim testfile\n"
"\n"
"&prompt.root;kill -s SIGSEGV 2345"
msgstr ""
"&prompt.user;ps ax | grep vim\n"
"2345 pts/3    S+     0:00 vim testfile\n"
"\n"
"&prompt.root;kill -s SIGSEGV 2345"

#. Tag: para
#: tuning_systemd_coredump.xml:99
#, no-c-format
msgid "Vim emits error messages:"
msgstr "vim は下記のようなエラーメッセージを出力するはずです:"

#. Tag: screen
#: tuning_systemd_coredump.xml:102
#, no-c-format
msgid ""
"Vim: Caught deadly signal SEGV\n"
"Vim: Finished.\n"
"Segmentation fault (core dumped)"
msgstr ""
"Vim: Caught deadly signal SEGV\n"
"Vim: Finished.\n"
"Segmentation fault (コアダンプ)"

#. Tag: para
#: tuning_systemd_coredump.xml:107
#, no-c-format
msgid "List your core dumps, then examine them:"
msgstr "生成されたコアダンプファイルを調査します:"

#. Tag: screen
#: tuning_systemd_coredump.xml:110
#, no-c-format
msgid ""
"&prompt.root;coredumpctl\n"
"TIME                        PID  UID  GID SIG PRESENT EXE\n"
"Wed 2019-11-12 11:56:47 PST 2345 1000 100 11  *       /bin/vim\n"
"\n"
"&prompt.root;coredumpctl info\n"
"PID: 2345 (vim)\n"
"UID: 0 (root)\n"
"GID: 0 (root)\n"
"Signal: 11 (SEGV)\n"
"Timestamp: Wed 2019-11-12 11:58:05 PST\n"
"Command Line: vim testfile\n"
"Executable: /bin/vim\n"
"Control Group: /user.slice/user-1000.slice/session-1.scope\n"
"    Unit: session-1.scope\n"
"    Slice: user-1000.slice\n"
"    Session: 1\n"
"    Owner UID: 1000 (tux)\n"
"    Boot ID: b5c251b86ab34674a2222cef102c0c88\n"
"    Machine ID: b43c44a64696799b985cafd95dc1b698\n"
"    Hostname: linux-uoch\n"
"    Coredump: /var/lib/systemd/coredump/core.vim.0.b5c251b86ab34674a2222cef102\n"
"    Message: Process 2345 (vim) of user 0 dumped core.\n"
"\n"
"         Stack trace of thread 2345:\n"
"         #0  0x00007f21dd87e2a7 kill (libc.so.6)\n"
"         #1  0x000000000050cb35 may_core_dump (vim)\n"
"         #2  0x00007f21ddbfec70 __restore_rt (libpthread.so.0)\n"
"         #3  0x00007f21dd92ea33 __select (libc.so.6)\n"
"         #4  0x000000000050b4e3 RealWaitForChar (vim)\n"
"         #5  0x000000000050b86b mch_inchar (vim)\n"
"[...]\n"
msgstr ""
"&prompt.root;coredumpctl\n"
"TIME                        PID  UID  GID SIG PRESENT EXE\n"
"Wed 2019-11-12 11:56:47 PST 2345 1000 100 11  *       /bin/vim\n"
"\n"
"&prompt.root;coredumpctl info\n"
"PID: 2345 (vim)\n"
"UID: 0 (root)\n"
"GID: 0 (root)\n"
"Signal: 11 (SEGV)\n"
"Timestamp: Wed 2019-11-12 11:58:05 PST\n"
"Command Line: vim testfile\n"
"Executable: /bin/vim\n"
"Control Group: /user.slice/user-1000.slice/session-1.scope\n"
"    Unit: session-1.scope\n"
"    Slice: user-1000.slice\n"
"    Session: 1\n"
"    Owner UID: 1000 (tux)\n"
"    Boot ID: b5c251b86ab34674a2222cef102c0c88\n"
"    Machine ID: b43c44a64696799b985cafd95dc1b698\n"
"    Hostname: linux-uoch\n"
"    Coredump: /var/lib/systemd/coredump/core.vim.0.b5c251b86ab34674a2222cef102\n"
"    Message: Process 2345 (vim) of user 0 dumped core.\n"
"\n"
"         Stack trace of thread 2345:\n"
"         #0  0x00007f21dd87e2a7 kill (libc.so.6)\n"
"         #1  0x000000000050cb35 may_core_dump (vim)\n"
"         #2  0x00007f21ddbfec70 __restore_rt (libpthread.so.0)\n"
"         #3  0x00007f21dd92ea33 __select (libc.so.6)\n"
"         #4  0x000000000050b4e3 RealWaitForChar (vim)\n"
"         #5  0x000000000050b86b mch_inchar (vim)\n"
"[...]\n"

#. Tag: para
#: tuning_systemd_coredump.xml:145
#, no-c-format
msgid "When you have multiple core dumps, <command>coredumpctl info</command> displays all of them. Filter them by <literal>PID</literal> , <literal>COMM</literal> (command), or <literal>EXE</literal> (full path to the executable). For example, all core dumps for Vim:"
msgstr "複数のコアダンプが生成されている場合は、 <command>coredumpctl info</command> と入力することで、全てのものを表示することができます。このほか、 <literal>PID</literal> , <literal>COMM</literal> (コマンド), <literal>EXE</literal> (実行ファイルのフルパス) などで絞り込むこともできます。たとえば vim に対する全てのコアダンプを表示したい場合は、下記のように入力して実行します:"

#. Tag: screen
#: tuning_systemd_coredump.xml:152
#, no-c-format
msgid "&prompt.root;coredumpctl info /bin/vim"
msgstr "&prompt.root;coredumpctl info /bin/vim"

#. Tag: para
#: tuning_systemd_coredump.xml:154
#, no-c-format
msgid "See a single core dump by <literal>PID</literal> :"
msgstr "特定の <literal>PID</literal> が生成したコアダンプを表示したい場合は、下記のように入力して実行します:"

#. Tag: screen
#: tuning_systemd_coredump.xml:158
#, no-c-format
msgid "\n"
"&prompt.root;coredumpctl info 2345"
msgstr "\n"
"&prompt.root;coredumpctl info 2345"

#. Tag: para
#: tuning_systemd_coredump.xml:161
#, no-c-format
msgid "Output the selected core to <command>gdb</command> :"
msgstr "選択したコアダンプを <command>gdb</command> に出力します:"

#. Tag: screen
#: tuning_systemd_coredump.xml:165
#, no-c-format
msgid "\n"
"&prompt.root;coredumpctl gdb 2345"
msgstr "\n"
"&prompt.root;coredumpctl gdb 2345"

#. Tag: para
#: tuning_systemd_coredump.xml:168
#, no-c-format
msgid "The asterisk in the <literal>PRESENT</literal> column indicates that a stored core dump is present. If the field is empty there is no stored core dump, and <command>coredumpctl</command> retrieves crash information from the journal. You can control this behavior in <filename>/etc/systemd/coredump.conf</filename> with the <literal>Storage</literal> option:"
msgstr "<literal>PRESENT</literal> 列にアスタリスク記号が表示されている場合、これは選択したコアダンプが存在していることを表します。この列に何も書かれていない場合はコアダンプが存在していないため、 <command>coredumpctl</command> はジャーナルから情報を採取するようになります。この動作は、 <filename>/etc/systemd/coredump.conf</filename> ファイル内の <literal>Storage</literal> セクションの項目を編集することで、変更することができます:"

#. Tag: para
#: tuning_systemd_coredump.xml:179
#, no-c-format
msgid "<literal>Storage=none</literal> &mdash;core dumps are logged in the journal, but not stored. This is useful to minimize collecting and storing sensitive information, for example for General Data Protection Regulation (GDPR) compliance."
msgstr "<literal>Storage=none</literal>: コアダンプをジャーナル内に記録しますが、保存を行わないようにします。これは General Data Protection Regulation (GDPR) の規則に準拠するなどの目的で収集される情報を最小限に絞ったり、機密情報を記録したりしないようにするための選択肢です。"

#. Tag: para
#: tuning_systemd_coredump.xml:187
#, no-c-format
msgid "<literal>Storage=external</literal> &mdash;cores are stored in <filename>/var/lib/systemd/coredump</filename>"
msgstr "<literal>Storage=external</literal>: コアダンプを <filename>/var/lib/systemd/coredump</filename> 内に記録するようにします。"

#. Tag: para
#: tuning_systemd_coredump.xml:193
#, no-c-format
msgid "<literal>Storage=journal</literal> &mdash;cores are stored in the &systemd; journal"
msgstr "<literal>Storage=journal</literal>: コアダンプを &systemd; のジャーナル内に記録するようにします。"

#. Tag: para
#: tuning_systemd_coredump.xml:200
#, no-c-format
msgid "A new instance of &systemdcd; is invoked for every core dump, so configuration changes are applied with the next core dump, and there is no need to restart any services."
msgstr "それぞれコアダンプが出力されるたびに &systemdcd; の新しいインスタンスが起動するようになっていますので、設定を変更したあとにサービスの再起動を行う必要はありません。次回のコアダンプから新しい設定が適用されます。"

#. Tag: para
#: tuning_systemd_coredump.xml:206
#, no-c-format
msgid "Core dumps are not preserved after a system restart. You may save them permanently with <command>coredumpctl</command> . The following example filters by the <literal>PID</literal> and stores the core in <filename>vim.dump</filename> :"
msgstr "なお、システムを再起動してしまうと、コアダンプは消去されてしまいます。恒久的にコアダンプを保存したい場合でも、 <command>coredumpctl</command> 側で対応することができます。下記の例では、指定した <literal>PID</literal> のコアダンプを <filename>vim.dump</filename> ファイル内に保存しています:"

#. Tag: screen
#: tuning_systemd_coredump.xml:213
#, no-c-format
msgid "&prompt.root;coredumpctl -o vim.dump dump 2345"
msgstr "&prompt.root;coredumpctl -o vim.dump dump 2345"

#. Tag: para
#: tuning_systemd_coredump.xml:215
#, no-c-format
msgid "See <command>man systemd-coredump</command> , <command>man coredumpctl</command> , <command>man core</command> , and <command>man coredump.conf</command> for complete command and option listings."
msgstr "コマンドの詳しい説明やオプションの一覧について、詳しくは <command>man systemd-coredump</command> , <command>man coredumpctl</command> , <command>man core</command> , <command>man coredump.conf</command> をそれぞれお読みください。"

