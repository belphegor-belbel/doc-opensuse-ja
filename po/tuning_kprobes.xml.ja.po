# translation of tuning_kprobes.xml.po to Japanese
# Japanese translations for PACKAGE package
# PACKAGE パッケージに対する英訳.
#
# Automatically generated, 2018.
# Yasuhiko Kamata <belphegor@belbel.or.jp>, 2019, 2021.
msgid ""
msgstr ""
"Project-Id-Version: tuning_kprobes.xml\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2021-06-15 22:05+0000\n"
"PO-Revision-Date: 2021-06-16 07:18+0900\n"
"Last-Translator: Yasuhiko Kamata <belphegor@belbel.or.jp>\n"
"Language-Team: Japanese <opensuse-ja@opensuse.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: tuning_kprobes.xml:13
#, no-c-format
msgid "Kernel probes"
msgstr "カーネルプローブ"

#. Tag: para
#: tuning_kprobes.xml:20
#, no-c-format
msgid ""
"Kernel probes are a set of tools to collect Linux kernel debugging and "
"performance information. Developers and system administrators usually use "
"them either to debug the kernel, or to find system performance bottlenecks. "
"The reported data can then be used to tune the system for better performance."
msgstr ""
"カーネルプローブは Linux カーネルのデバッグや性能に関する情報を収集するための"
"ツール集です。開発者やシステム管理者は、これらを利用してカーネルのデバッグを"
"行ったり、システムにおける性能のボトルネックを発見したりすることができます。"
"また、収集したデータをシステムの性能改善のために使用することもできます。"

#. Tag: para
#: tuning_kprobes.xml:27
#, no-c-format
msgid ""
"You can insert these probes into any kernel routine, and specify a handler "
"to be invoked after a particular break-point is hit. The main advantage of "
"kernel probes is that you no longer need to rebuild the kernel and reboot "
"the system after you make changes in a probe."
msgstr ""
"カーネルプローブは任意のカーネルルーチン内に設定し、カーネル処理内の特定の箇"
"所 (ブレークポイント) に到達した後に、指定したハンドラを実行することができる"
"ようになります。カーネルプローブの主な利点としては、カーネルの再構築が不要で"
"あることと、プローブの変更後にシステムの再起動が不要になっている点です。"

#. Tag: para
#: tuning_kprobes.xml:33
#, no-c-format
msgid ""
"To use kernel probes, you typically need to write or obtain a specific "
"kernel module. Such modules include both the <emphasis>init</emphasis> and "
"the <emphasis>exit</emphasis> function. The init function (such as "
"<systemitem>register_kprobe()</systemitem> ) registers one or more probes, "
"while the exit function unregisters them. The registration function defines "
"<emphasis>where</emphasis> the probe will be inserted and <emphasis>which "
"handler</emphasis> will be called after the probe is hit. To register or "
"unregister a group of probes at one time, you can use relevant "
"<literal>register_&lt;<replaceable>PROBE_TYPE</replaceable>&gt;probes()</"
"literal> or <literal>unregister_&lt;<replaceable>PROBE_TYPE</replaceable>&gt;"
"probes()</literal> functions."
msgstr ""
"カーネルプローブを使用するには、まずは必要なカーネルモジュールを作成する必要"
"があります。このモジュール内には <emphasis>初期化</emphasis> と <emphasis>終"
"了</emphasis> の各関数を用意する必要があります。初期化の関数 (たとえば "
"<systemitem>register_kprobe()</systemitem>) では 1 つ以上のプローブを設定し、"
"終了の関数ではそれらの登録を解除します。登録処理ではカーネル内の <emphasis>ど"
"こ</emphasis> にプローブを挿入するかと、そのプローブに到達した際に <emphasis>"
"どのようなハンドラ</emphasis> を実行するのかを定義します。複数のプローブを一"
"括で登録もしくは登録解除するには、対応する <literal>register_&lt;"
"<replaceable>プローブの種類</replaceable>&gt;probes()</literal> や "
"<literal>unregister_&lt;<replaceable>プローブの種類</replaceable>&gt;"
"probes()</literal> を使用する必要があります。"

#. Tag: para
#: tuning_kprobes.xml:48
#, no-c-format
msgid ""
"Debugging and status messages are typically reported with the "
"<systemitem>printk</systemitem> kernel routine. <systemitem>printk</"
"systemitem> is a kernel space equivalent of a user space <systemitem>printf</"
"systemitem> routine. For more information on <systemitem>printk</"
"systemitem> , see <link xlink:href=\"https://www.win.tue.nl/~aeb/linux/lk/"
"lk-2.html#ss2.8\">Logging kernel messages</link> . Normally, you can view "
"these messages by inspecting the output of the &systemd; journal (see <xref "
"linkend=\"cha-journalctl\"/> ). For more information on log files, see <xref "
"linkend=\"cha-tuning-logfiles\"/> ."
msgstr ""
"デバッグや状態を表すメッセージは一般に、 <systemitem>printk</systemitem> "
"カーネルルーチンを利用して行います。 <systemitem>printk</systemitem> はユーザ"
"スペースでの <systemitem>printf</systemitem> と等価なカーネルルーチンです。 "
"<systemitem>printk</systemitem> に関する詳細については、 <link xlink:href="
"\"https://www.win.tue.nl/~aeb/linux/lk/lk-2.html#ss2.8\">Logging kernel "
"messages</link> (英語) をお読みください。通常、このカーネルルーチンで出力され"
"たメッセージは、 &systemd; ジャーナルで読むことができます (詳しくは <xref "
"linkend=\"cha-journalctl\"/> をお読みください) 。なお、ログファイルに関する詳"
"細については、 <xref linkend=\"cha-tuning-logfiles\"/> をお読みください。"

#. Tag: title
#: tuning_kprobes.xml:61
#, no-c-format
msgid "Supported architectures"
msgstr "対応するアーキテクチャ"

#. Tag: para
#: tuning_kprobes.xml:63
#, no-c-format
msgid ""
"Kernel probes are <emphasis>fully</emphasis> implemented on the following "
"architectures:"
msgstr ""
"カーネルプローブは、下記のアーキテクチャ向けに <emphasis>完全</emphasis> 実装"
"されています:"

#. Tag: para
#: tuning_kprobes.xml:70
#, no-c-format
msgid "&x86;"
msgstr "&x86;"

#. Tag: para
#: tuning_kprobes.xml:75
#, no-c-format
msgid "&x86-64;"
msgstr "&x86-64;"

#. Tag: para
#: tuning_kprobes.xml:80
#, no-c-format
msgid "&arm;"
msgstr "&arm;"

#. Tag: para
#: tuning_kprobes.xml:85
#, no-c-format
msgid "&ppc;"
msgstr "&ppc;"

#. Tag: para
#: tuning_kprobes.xml:91
#, no-c-format
msgid ""
"Kernel probes are <emphasis>partially</emphasis> implemented on the "
"following architectures:"
msgstr ""
"カーネルプローブは、下記のアーキテクチャ向けに <emphasis>部分</emphasis> 実装"
"されています:"

#. Tag: para
#: tuning_kprobes.xml:98
#, no-c-format
msgid "IA64 (does not support probes on instruction <systemitem>slot1</systemitem> )"
msgstr ""
"IA64 (インストラクション <systemitem>slot1</systemitem> に対するプローブには"
"対応していません)"

#. Tag: para
#: tuning_kprobes.xml:104
#, no-c-format
msgid "sparc64 (return probes not yet implemented)"
msgstr "sparc64 (return probe が実装されていません)"

#. Tag: title
#: tuning_kprobes.xml:111
#, no-c-format
msgid "Types of kernel probes"
msgstr "カーネルプローブの種類"

#. Tag: para
#: tuning_kprobes.xml:113
#, no-c-format
msgid ""
"There are three types of kernel probes: <emphasis>Kprobes</emphasis> , "
"<emphasis>Jprobes</emphasis> , and <emphasis>Kretprobes</emphasis> . "
"Kretprobes are sometimes called <emphasis>return probes</emphasis> . You can "
"find source code examples of all three type of probes in the Linux kernel. "
"See the directory <filename>/usr/src/linux/samples/kprobes/</filename> "
"(package <systemitem>kernel-source</systemitem> ). <remark>sknorr, "
"2014-08-21: that the words kprobes and kprobe are used interchangeably here "
"is slightly confusing. (Same goes for jprobes and jprobe)</remark>"
msgstr ""
"カーネルプローブには 3 種類のものがあります。具体的には <emphasis>Kprobes</"
"emphasis> , <emphasis>Jprobes</emphasis> , <emphasis>Kretprobes</emphasis> "
"の 3 種類です。 Kretprobes は <emphasis>return probes</emphasis> (返りプロー"
"ブ) とも呼ばれます。 3 種類のプローブの例については、 Linux カーネルのソース"
"コードをお読みください。 <filename>/usr/src/linux/samples/kprobes/</"
"filename> ディレクトリ内 (<systemitem>kernel-source</systemitem> パッケージ"
"内) にあります。 <remark>sknorr, 2014-08-21: that the words kprobes and "
"kprobe are used interchangeably here is slightly confusing. (Same goes for "
"jprobes and jprobe)</remark>"

#. Tag: title
#: tuning_kprobes.xml:127
#, no-c-format
msgid "&kprobes;"
msgstr "&kprobes;"

#. Tag: para
#: tuning_kprobes.xml:128
#, no-c-format
msgid ""
"&kprobes; can be attached to any instruction in the Linux kernel. When "
"&kprobes; is registered, it inserts a break-point at the first byte of the "
"probed instruction. When the processor hits this break-point, the processor "
"registers are saved, and the processing passes to &kprobes;. First, a "
"<emphasis>pre-handler</emphasis> is executed, then the probed instruction is "
"stepped, and, finally a <emphasis>post-handler</emphasis> is executed. The "
"control is then passed to the instruction following the probe point."
msgstr ""
"&kprobes; は Linux カーネル内の任意のインストラクション (命令) に接続すること"
"ができる仕組みです。 &kprobes; を登録すると、対象となるインストラクションの最初の"
"バイト位置にブレークポイントが設定されます。プロセッサがそのブレークポイント"
"に到達すると、プロセッサレジスタを保存して、処理を &kprobes; に渡します。その"
"後 <emphasis>pre-handler</emphasis> (事前ハンドラ) を実行し、対象のインストラ"
"クションをステップ実行したのち、最後に <emphasis>post-handler</emphasis> "
" (事後ハンドラ) を実行します。あとはプローブポイント後の位置に制御が移り、"
"元の動作に戻ることになります。"

#. Tag: title
#: tuning_kprobes.xml:141
#, no-c-format
msgid "Jprobes"
msgstr "Jprobes"

#. Tag: para
#: tuning_kprobes.xml:142
#, no-c-format
msgid ""
"Jprobes is implemented through the &kprobes; mechanism. It is inserted on a "
"function's entry point and allows direct access to the arguments of the "
"function which is being probed. Its handler routine must have the same "
"argument list and return value as the probed function. To end it, call the "
"<systemitem>jprobe_return()</systemitem> function."
msgstr ""
"Jprobes は &kprobes; の仕組みを利用して実装されているものです。関数の開始位置"
"に挿入され、プローブ対象の関数のパラメータに対して、直接アクセスできるように"
"なります。ハンドラルーチンにはプローブ対象の関数と全く同じパラメータリストを"
"指定しなければならず、かつ返り値も同じ型でなければなりません。これを終了する"
"には、 <systemitem>jprobe_return()</systemitem> 関数を呼び出します。"

#. Tag: para
#: tuning_kprobes.xml:150
#, no-c-format
msgid ""
"When a jprobe is hit, the processor registers are saved, and the instruction "
"pointer is directed to the jprobe handler routine. The control then passes "
"to the handler with the same register contents as the function being probed. "
"Finally, the handler calls the <systemitem>jprobe_return()</systemitem> "
"function, and switches the control back to the control function."
msgstr ""
"JProbes が設定された関数を到達すると、プロセッサレジスタを保存したあと、イン"
"ストラクションポインタは JProbes のハンドラルーチンに転送されます。その後、制"
"御は ハンドラ内に移り、プローブ対象の関数と同じレジスタ状態になります。最後に、"
"ハンドラは <systemitem>jprobe_return()</systemitem> を呼び出し、制御が元の関数に"
"戻るようになります。"

#. Tag: para
#: tuning_kprobes.xml:158
#, no-c-format
msgid ""
"In general, you can insert multiple probes on one function. Jprobe is, "
"however, limited to only one instance per function."
msgstr ""
"一般的には、 1 つの関数に対して複数のプローブを設定することができますが、 "
"Jprobes については 1 つの関数に対して 1 つのインスタンスのみに制限されます。"

#. Tag: title
#: tuning_kprobes.xml:165
#, no-c-format
msgid "Return probe"
msgstr "Return Probe"

#. Tag: para
#: tuning_kprobes.xml:166
#, no-c-format
msgid ""
"Return probes are also implemented through &kprobes;. When the "
"<systemitem>register_kretprobe()</systemitem> function is called, a kprobe "
"is attached to the entry of the probed function. After hitting the probe, "
"the kernel probes mechanism saves the probed function return address and "
"calls a user-defined return handler. The control is then passed back to the "
"probed function."
msgstr ""
"Return Probe も &kprobes; を介して実装されています。 "
"<systemitem>register_kretprobe()</systemitem> を呼び出すと、 &kprobes; はプ"
"ローブ対象の関数の開始位置に設定されます。 プローブ位置に到達すると、"
"カーネルはプローブ対象の関数の返りアドレスを保存して、ユーザが指定した返りハ"
"ンドラを呼び出します。あとは制御が元の関数に戻ります。"

#. Tag: para
#: tuning_kprobes.xml:174
#, no-c-format
msgid ""
"Before you call <systemitem>register_kretprobe()</systemitem> , you need to "
"set a <systemitem>maxactive</systemitem> argument, which specifies how many "
"instances of the function can be probed at the same time. If set too low, "
"you will miss a certain number of probes."
msgstr ""
"<systemitem>register_kretprobe()</systemitem> を呼び出す場合は、 "
"<systemitem>maxactive</systemitem> パラメータを指定する必要があります。これは"
"この関数を同時にいくつまでプローブするのかを指定するパラメータで、値が小さす"
"ぎるとプローブが失敗します。"

#. Tag: title
#: tuning_kprobes.xml:183
#, no-c-format
msgid "&kprobes; API"
msgstr "&kprobes; API"

#. Tag: para
#: tuning_kprobes.xml:185
#, no-c-format
msgid ""
"The programming interface of &kprobes; consists of functions which are used "
"to register and unregister all used kernel probes, and associated probe "
"handlers. For a more detailed description of these functions and their "
"arguments, see the information sources in <xref linkend=\"cha-tuning-kprobes-"
"moreinfo\"/> ."
msgstr ""
"&kprobes; のプログラミングインターフェイスは、使用するカーネルプローブと対応"
"するプローブハンドラの登録と登録解除に使用する関数から構成されています。これ"
"らの関数とパラメータに対する詳しい説明については、 <xref linkend=\"cha-"
"tuning-kprobes-moreinfo\"/> にある情報源を参照してください。"

#. Tag: term
#: tuning_kprobes.xml:195
#, no-c-format
msgid "<systemitem>register_kprobe()</systemitem>"
msgstr "<systemitem>register_kprobe()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:198
#, no-c-format
msgid ""
"Inserts a break-point on a specified address. When the break-point is hit, "
"the <systemitem>pre_handler</systemitem> and <systemitem>post_handler</"
"systemitem> are called."
msgstr ""
"指定したアドレスにブレークポイントを挿入します。ブレークポイントに到達する"
"と、 <systemitem>pre_handler</systemitem> (事前ハンドラ) と "
"<systemitem>post_handler</systemitem> (事後ハンドラ) がそれぞれ呼び出されま"
"す。"

#. Tag: term
#: tuning_kprobes.xml:206
#, no-c-format
msgid "<systemitem>register_jprobe()</systemitem>"
msgstr "<systemitem>register_jprobe()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:209
#, no-c-format
msgid ""
"Inserts a break-point in the specified address. The address needs to be the "
"address of the first instruction of the probed function. When the break-"
"point is hit, the specified handler is run. The handler should have the same "
"argument list and return type as the probed."
msgstr ""
"指定したアドレスにブレークポイントを挿入します。アドレスは、プローブ対象となる関"
"数内で最初のインストラクションのアドレスである必要があります。ブレークポイン"
"トに到達すると、指定したハンドラを実行します。ハンドラはプローブ対象の関数と"
"同じパラメータリストでなければならず、かつ返り値も同じデータ型でなければなり"
"ません。"

#. Tag: term
#: tuning_kprobes.xml:218
#, no-c-format
msgid "<systemitem>register_kretprobe()</systemitem>"
msgstr "<systemitem>register_kretprobe()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:221
#, no-c-format
msgid ""
"Inserts a return probe for the specified function. When the probed function "
"returns, a specified handler is run. This function returns 0 on success, or "
"a negative error number on failure."
msgstr ""
"指定した関数に return probe を挿入します。プローブ対象の関数が終了して値を返"
"す際、指定したハンドラが呼び出されます。この関数は 0 を返すと成功の意味に、負"
"の数のエラー番号である場合は失敗の意味になります。"

#. Tag: term
#: tuning_kprobes.xml:229
#, no-c-format
msgid ""
"<systemitem>unregister_kprobe()</systemitem> , "
"<systemitem>unregister_jprobe()</systemitem> , "
"<systemitem>unregister_kretprobe()</systemitem>"
msgstr ""
"<systemitem>unregister_kprobe()</systemitem> , "
"<systemitem>unregister_jprobe()</systemitem> , "
"<systemitem>unregister_kretprobe()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:232
#, no-c-format
msgid ""
"Removes the specified probe. You can use it any time after the probe has "
"been registered."
msgstr ""
"指定したプローブを削除します。これらの関数は、プローブの登録後であれば任意の"
"タイミングで使用することができます。"

#. Tag: term
#: tuning_kprobes.xml:239
#, no-c-format
msgid ""
"<systemitem>register_kprobes()</systemitem> , "
"<systemitem>register_jprobes()</systemitem> , "
"<systemitem>register_kretprobes()</systemitem>"
msgstr ""
"<systemitem>register_kprobes()</systemitem> , "
"<systemitem>register_jprobes()</systemitem> , "
"<systemitem>register_kretprobes()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:242
#, no-c-format
msgid "Inserts each of the probes in the specified array."
msgstr "指定した配列内にあるそれぞれのプローブを挿入します。"

#. Tag: term
#: tuning_kprobes.xml:248
#, no-c-format
msgid ""
"<systemitem>unregister_kprobes()</systemitem> , "
"<systemitem>unregister_jprobes()</systemitem> , "
"<systemitem>unregister_kretprobes()</systemitem>"
msgstr ""
"<systemitem>unregister_kprobes()</systemitem> , "
"<systemitem>unregister_jprobes()</systemitem> , "
"<systemitem>unregister_kretprobes()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:251
#, no-c-format
msgid "Removes each of the probes in the specified array."
msgstr "指定した配列内にあるそれぞれのプローブを削除します。"

#. Tag: term
#: tuning_kprobes.xml:257
#, no-c-format
msgid ""
"<systemitem>disable_kprobe()</systemitem> , <systemitem>disable_jprobe()</"
"systemitem> , <systemitem>disable_kretprobe()</systemitem>"
msgstr ""
"<systemitem>disable_kprobe()</systemitem> , <systemitem>disable_jprobe()</"
"systemitem> , <systemitem>disable_kretprobe()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:260
#, no-c-format
msgid "Disables the specified probe temporarily."
msgstr "指定したプローブを一時的に無効化します。"

#. Tag: term
#: tuning_kprobes.xml:266
#, no-c-format
msgid ""
"<systemitem>enable_kprobe()</systemitem> , <systemitem>enable_jprobe()</"
"systemitem> , <systemitem>enable_kretprobe()</systemitem>"
msgstr ""
"<systemitem>enable_kprobe()</systemitem> , <systemitem>enable_jprobe()</"
"systemitem> , <systemitem>enable_kretprobe()</systemitem>"

#. Tag: para
#: tuning_kprobes.xml:269
#, no-c-format
msgid "Temporarily enables disabled probes."
msgstr "指定したプローブを一時的に有効化します。"

#. Tag: title
#: tuning_kprobes.xml:277
#, no-c-format
msgid "<systemitem>debugfs</systemitem> Interface"
msgstr "<systemitem>debugfs</systemitem> インターフェイス"

#. Tag: para
#: tuning_kprobes.xml:279
#, no-c-format
msgid ""
"In recent Linux kernels, the &kprobes; instrumentation uses the kernel's "
"<systemitem>debugfs</systemitem> interface. It can list all registered "
"probes and globally switch all probes on or off."
msgstr ""
"新しい Linux カーネルでは、 &kprobes; はカーネルの <systemitem>debugfs</"
"systemitem> インターフェイスを利用して制御することができます。ここでは登録済"
"みのプローブの一覧や、全てのプローブの一括有効化／無効化を行うことができま"
"す。"

#. Tag: title
#: tuning_kprobes.xml:286
#, no-c-format
msgid "Listing registered kernel probes"
msgstr "登録済みのカーネルプローブの一覧表示"

#. Tag: para
#: tuning_kprobes.xml:287
#, no-c-format
msgid ""
"The list of all currently registered probes is in the <filename>/sys/kernel/"
"debug/kprobes/list</filename> file."
msgstr ""
"現時点で登録されている全てのプローブの一覧は、 <filename>/sys/kernel/debug/"
"kprobes/list</filename> 内に書かれています。"

#. Tag: screen
#: tuning_kprobes.xml:291
#, no-c-format
msgid ""
"&wsIIIname;:~ # cat /sys/kernel/debug/kprobes/list\n"
"c015d71a  k  vfs_read+0x0   [DISABLED]\n"
"c011a316  j  do_fork+0x0\n"
"c03dedc5  r  tcp_v4_rcv+0x0"
msgstr ""
"&wsIIIname;:~ # cat /sys/kernel/debug/kprobes/list\n"
"c015d71a  k  vfs_read+0x0   [DISABLED]\n"
"c011a316  j  do_fork+0x0\n"
"c03dedc5  r  tcp_v4_rcv+0x0"

#. Tag: para
#: tuning_kprobes.xml:295
#, no-c-format
msgid ""
"The first column lists the address in the kernel where the probe is "
"inserted. The second column prints the type of the probe: <literal>k</"
"literal> for kprobe, <literal>j</literal> for jprobe, and <literal>r</"
"literal> for return probe. The third column specifies the symbol, offset and "
"optional module name of the probe. The following optional columns include "
"the status information of the probe. If the probe is inserted on a virtual "
"address which is not valid anymore, it is marked with <literal>[GONE]</"
"literal> . If the probe is temporarily disabled, it is marked with "
"<literal>[DISABLED]</literal> ."
msgstr ""
"左から最初の列には、プローブを挿入したカーネル内のアドレスが書かれています。 "
"2 番目の列にはプローブの種類が書かれています (<literal>k</literal> (kprobe), "
"<literal>j</literal> (jprobe), <literal>r</literal> (return probe)) 。 3 番目"
"の列はシンボルとオフセット、そしてプローブのモジュール名 (もしあれば) が書か"
"れています。また、それ以降の列は必要に応じて現れる箇所で、プローブの状態が"
"書かれています。挿入済みのプローブが無効なアドレスを指している場合は "
"<literal>[GONE]</literal> 、対象のプローブが一時的に無効化されて居る場合は "
"<literal>[DISABLED]</literal> と書かれます。"

#. Tag: title
#: tuning_kprobes.xml:309
#, no-c-format
msgid "Globally enabling/disabling kernel probes"
msgstr "指定したプローブの全体的な有効化／無効化"

#. Tag: para
#: tuning_kprobes.xml:310
#, no-c-format
msgid ""
"The <filename>/sys/kernel/debug/kprobes/enabled</filename> file represents a "
"switch with which you can globally and forcibly turn on or off all the "
"registered kernel probes. To turn them off, simply enter"
msgstr ""
"<filename>/sys/kernel/debug/kprobes/enabled</filename> ファイルは、登録済みの"
"全てのカーネルプローブに対して、一括でかつ強制的に有効化および無効化を行うス"
"イッチになっています。全てのカーネルプローブを無効化したい場合は、 "
"&rootuser; で下記のように入力して実行します:"

#. Tag: screen
#: tuning_kprobes.xml:315
#, no-c-format
msgid "&prompt.root;echo \"0\" &gt; /sys/kernel/debug/kprobes/enabled"
msgstr "&prompt.root;echo \"0\" &gt; /sys/kernel/debug/kprobes/enabled"

#. Tag: para
#: tuning_kprobes.xml:316
#, no-c-format
msgid "on the command line as &rootuser;. To turn them on again, enter"
msgstr "再度有効化したい場合は、 &rootuser; で下記のように入力して実行します:"

#. Tag: screen
#: tuning_kprobes.xml:319
#, no-c-format
msgid "&prompt.root;echo \"1\" &gt; /sys/kernel/debug/kprobes/enabled"
msgstr "&prompt.root;echo \"1\" &gt; /sys/kernel/debug/kprobes/enabled"

#. Tag: para
#: tuning_kprobes.xml:320
#, no-c-format
msgid ""
"Note that this way you do not change the status of the probes. If a probe is "
"temporarily disabled, it will not be enabled automatically but will remain "
"in the <literal>[DISABLED]</literal> state after entering the latter command."
msgstr ""
"なお、この方法ではプローブごとの状態変更を行うことはできません。特定のプロー"
"ブが一時的に無効化されている場合、後者のコマンドを入力して実行しても、 "
"<literal>[DISABLED]</literal> (無効) のままになります。"

#. Tag: title
#: tuning_kprobes.xml:329
#, no-c-format
msgid "More information"
msgstr "さらなる情報"

#. Tag: para
#: tuning_kprobes.xml:331
#, no-c-format
msgid ""
"To learn more about kernel probes, look at the following sources of "
"information:"
msgstr "カーネルプローブに関する詳細については、下記の情報源をご覧ください:"

#. Tag: para
#: tuning_kprobes.xml:338
#, no-c-format
msgid ""
"Thorough but more technically oriented information about kernel probes is in "
"<filename>/usr/src/linux/Documentation/kprobes.txt</filename> (package "
"<systemitem>kenrel-source</systemitem> )."
msgstr ""
"カーネルプローブに関する技術寄りの情報については、 <filename>/usr/src/linux/"
"Documentation/kprobes.txt</filename> ファイル ( <systemitem>kenrel-source</"
"systemitem> パッケージ内に含まれています) をお読みください。"

#. Tag: para
#: tuning_kprobes.xml:345
#, no-c-format
msgid ""
"Examples of all three types of probes (together with related "
"<filename>Makefile</filename> ) are in the <filename>/usr/src/linux/samples/"
"kprobes/</filename> directory (package <systemitem>kenrel-source</"
"systemitem> )."
msgstr ""
"3 種類のプローブに関する例 (および対応する <filename>Makefile</filename>) に"
"ついては、 <filename>/usr/src/linux/samples/kprobes/</filename> ディレクトリ"
"内 ( <systemitem>kenrel-source</systemitem> パッケージ内に含まれています) を"
"お読みください。"

#. Tag: para
#: tuning_kprobes.xml:353
#, no-c-format
msgid ""
"In-depth information about Linux kernel modules and <systemitem>printk</"
"systemitem> kernel routine can be found at <link xlink:href=\"http://tldp."
"org/LDP/lkmpg/2.6/html/lkmpg.html\">The Linux Kernel Module Programming "
"Guide</link>"
msgstr ""
"Linux のカーネルモジュールや <systemitem>printk</systemitem> カーネルルーチン"
"に関する詳細については、 <link xlink:href=\"http://tldp.org/LDP/lkmpg/2.6/"
"html/lkmpg.html\">The Linux Kernel Module Programming Guide</link> (英語) 内"
"に説明が書かれています。"

