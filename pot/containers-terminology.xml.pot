# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2020-08-25 10:44+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <someuser@example.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/x-po; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: containers-terminology.xml:11
#, no-c-format
msgid "Terminology"
msgstr ""

#. Tag: term
#: containers-terminology.xml:14
#, no-c-format
msgid "Container"
msgstr ""

#. Tag: para
#: containers-terminology.xml:16
#, no-c-format
msgid "A <emphasis>container</emphasis> is a running instance based on a particular &docker; <xref linkend=\"Docker-Image\"/> . Each <emphasis>container</emphasis> can be distinguished by a unique container ID."
msgstr ""

#. Tag: term
#: containers-terminology.xml:25
#, no-c-format
msgid "Control groups"
msgstr ""

#. Tag: para
#: containers-terminology.xml:27
#, no-c-format
msgid "<emphasis>Control groups</emphasis> , also called <literal>cgroups</literal> , is a Linux kernel feature that allows aggregating or partitioning tasks (processes) and all their children into hierarchically organized groups to isolate resources."
msgstr ""

#. Tag: term
#: containers-terminology.xml:36
#, no-c-format
msgid "&deng;"
msgstr ""

#. Tag: para
#: containers-terminology.xml:38
#, no-c-format
msgid "&deng; is a server-client type application that performs all tasks related to containers. &deng; comprises the following:"
msgstr ""

#. Tag: title
#: containers-terminology.xml:45
#, no-c-format
msgid "Daemon:"
msgstr ""

#. Tag: para
#: containers-terminology.xml:46
#, no-c-format
msgid "The server side of &deng;, which manages all &docker; objects (images, containers, network connections used by containers, etc.)."
msgstr ""

#. Tag: title
#: containers-terminology.xml:54
#, no-c-format
msgid "REST API:"
msgstr ""

#. Tag: para
#: containers-terminology.xml:55
#, no-c-format
msgid "Applications can use this API to communicate directly with the daemon."
msgstr ""

#. Tag: title
#: containers-terminology.xml:62
#, no-c-format
msgid "CLI Client:"
msgstr ""

#. Tag: para
#: containers-terminology.xml:63
#, no-c-format
msgid "Enables you to communicate with the daemon. If the daemon is running on a different machine than the CLI client, the CLI client can communicate by using network sockets or the REST API provided by &deng;."
msgstr ""

#. Tag: term
#: containers-terminology.xml:74
#, no-c-format
msgid "Dockerfile"
msgstr ""

#. Tag: para
#: containers-terminology.xml:76
#, no-c-format
msgid "A <emphasis>Dockerfile</emphasis> stores changes made on top of the base image. <xref linkend=\"Docker-engine\"/> reads instructions in the <emphasis>Dockerfile</emphasis> and builds a new image according to the instructions."
msgstr ""

#. Tag: term
#: containers-terminology.xml:85
#, no-c-format
msgid "Image"
msgstr ""

#. Tag: para
#: containers-terminology.xml:87
#, no-c-format
msgid "An <emphasis>image</emphasis> is a read-only template used to create a <emphasis>container</emphasis> on the host server. A &docker; image is made by a series of layers built one over the other. Each layer corresponds to a permanent change, for example an update of an application. The changes are stored in a file called a <emphasis>Dockerfile</emphasis> . For more details, see <link xlink:href=\"http://docs.docker.com/engine/reference/glossary#image\">the official Docker documentation</link> ."
msgstr ""

#. Tag: term
#: containers-terminology.xml:100
#, no-c-format
msgid "Container Image"
msgstr ""

#. Tag: para
#: containers-terminology.xml:102
#, no-c-format
msgid "A <emphasis>container image</emphasis> is an unchangeable, static file that includes executable code so it can run an isolated process on IT infrastructure. The image is comprised of system libraries, system tools, and other platform settings a program needs to run on a containerization platform. A container image is compiled from file system layers built on top of a parent or base image."
msgstr ""

#. Tag: term
#: containers-terminology.xml:113
#, no-c-format
msgid "Base Image"
msgstr ""

#. Tag: para
#: containers-terminology.xml:115
#, no-c-format
msgid "A <emphasis>base image</emphasis> is an minimal initial image. In a Dockerfile, a base image is identified by the <literal>FROM scratch</literal> directive."
msgstr ""

#. Tag: term
#: containers-terminology.xml:123
#, no-c-format
msgid "Parent Image"
msgstr ""

#. Tag: para
#: containers-terminology.xml:125
#, no-c-format
msgid "The image that served the basis for another container image. In other words, if an image is not a base image, it is derived from a parent image. In a Dockerfile, the <literal>FROM</literal> directive is pointing to the parent image. Most &docker; containers are created using parent images."
msgstr ""

#. Tag: term
#: containers-terminology.xml:134
#, no-c-format
msgid "Namespaces"
msgstr ""

#. Tag: para
#: containers-terminology.xml:136
#, no-c-format
msgid "&deng; uses <emphasis>namespaces</emphasis> for its containers, which isolates resources reserved for particular containers."
msgstr ""

#. Tag: term
#: containers-terminology.xml:143
#, no-c-format
msgid "Orchestration"
msgstr ""

#. Tag: para
#: containers-terminology.xml:145
#, no-c-format
msgid "In a production environment, you typically need a cluster with many containers on each cluster node. The containers must cooperate and you need a framework that enables you to automatically manage the containers. The act of automatic container management is called container orchestration and is typically handled by Kubernetes."
msgstr ""

#. Tag: term
#: containers-terminology.xml:155
#, no-c-format
msgid "Registry"
msgstr ""

#. Tag: para
#: containers-terminology.xml:157
#, no-c-format
msgid "A <emphasis>registry</emphasis> is storage for already created images. It typically contains several <emphasis>repositories</emphasis> There are two types of registries:"
msgstr ""

#. Tag: para
#: containers-terminology.xml:164
#, no-c-format
msgid "public registry: Any (usually registered) user can download and use images. A typical example of a public registry is <link xlink:href=\"https://hub.docker.com/\">Docker Hub</link> ."
msgstr ""

#. Tag: para
#: containers-terminology.xml:171
#, no-c-format
msgid "private registry: Access is restricted to particular users, or from a particular private network."
msgstr ""

#. Tag: term
#: containers-terminology.xml:180
#, no-c-format
msgid "Repository"
msgstr ""

#. Tag: para
#: containers-terminology.xml:182
#, no-c-format
msgid "A <emphasis>repository</emphasis> is storage in a <emphasis>registry</emphasis> that stores a different version of a particular image. You can pull images from, or push them to, a repository."
msgstr ""

