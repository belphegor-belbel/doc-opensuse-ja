# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2024-06-26 01:40+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <someuser@example.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/x-po; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: slemicro_health_checker.xml:8
#, no-c-format
msgid "Health checker"
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:15
#, no-c-format
msgid "Health checker is a program delivered with &slema; that checks whether services are running properly during booting of your system."
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:19
#, no-c-format
msgid "During the boot process, <literal>systemd</literal> calls Health checker, which in turn calls its plugins. Each plugin checks a particular service or condition. If each check passes, a status file ( <filename>/var/lib/misc/health-check.state</filename> ) is created. The status file marks the current root file system as correct."
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:26
#, no-c-format
msgid "If any of the health checker plugins reports an error, the action taken depends on a particular condition, as described below:"
msgstr ""

#. Tag: term
#: slemicro_health_checker.xml:32
#, no-c-format
msgid "<emphasis>The snapshot is booted for the first time.</emphasis>"
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:34
#, no-c-format
msgid "If the current snapshot is different from the last one that worked properly, an automatic rollback to the last working snapshot is performed. This means that the last change performed to the file system broke the snapshot."
msgstr ""

#. Tag: term
#: slemicro_health_checker.xml:43
#, no-c-format
msgid "<emphasis>The snapshot has already booted correctly in the past.</emphasis>"
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:45
#, no-c-format
msgid "There could be just a temporary problem, and the system is rebooted automatically."
msgstr ""

#. Tag: term
#: slemicro_health_checker.xml:52
#, no-c-format
msgid "<emphasis>The reboot of a previously correctly booted snapshot has failed.</emphasis>"
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:54
#, no-c-format
msgid "If there was already a problem during boot and automatic reboot has been triggered, but the problem still persists, then the system is kept running to enable to the administrator to fix the problem. The services that are tested by the health checker plugins are stopped if possible."
msgstr ""

#. Tag: title
#: slemicro_health_checker.xml:64
#, no-c-format
msgid "Adding custom plugins"
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:65
#, no-c-format
msgid "Health checker supports the addition of your own plugins to check services during the boot process. Each plugin is a bash script that must fulfill the following requirements:"
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:72
#, no-c-format
msgid "Plugins are located within a specific directory&mdash; <filename>/usr/libexec/health-checker</filename>"
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:78
#, no-c-format
msgid "The service that will be checked by the particular plugin must be defined in the <literal>Unit</literal> section of the <filename>/usr/lib/systemd/system/health-checker.service</filename> file. For example, the <literal>etcd</literal> service is defined as follows:"
msgstr ""

#. Tag: screen
#: slemicro_health_checker.xml:84
#, no-c-format
msgid "\n"
      "[Unit]\n"
      "...\n"
      "After=etcd.service\n"
      "...\n"
      ""
msgstr ""

#. Tag: para
#: slemicro_health_checker.xml:92
#, no-c-format
msgid "Each plugin must have functions called <literal>run.checks</literal> and <literal>stop_services</literal> defined. The <literal>run.checks</literal> function checks whether a particular service has started properly. Bear in mind that service that has not been enabled by systemd, should be ignored. The function <literal>stop_services</literal> is called to stop the particular service in case the service has not been started properly. You can use the plugin template for your reference."
msgstr ""

