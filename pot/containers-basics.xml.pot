# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2020-09-15 22:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <someuser@example.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/x-po; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: containers-basics.xml:8
#, no-c-format
msgid "Introduction to Linux Containers"
msgstr ""

#. Tag: para
#: containers-basics.xml:14
#, no-c-format
msgid "Linux containers offer a lightweight virtualization method to run multiple virtual environments (containers) simultaneously on a single host. Unlike technologies like &xen; or &kvm;, where the processor simulates a complete hardware environment and controls virtual machines, containers provide virtualization at the operating system level, where the kernel controls the isolated containers."
msgstr ""

#. Tag: title
#: containers-basics.xml:23
#, no-c-format
msgid "Advantages of Using Containers"
msgstr ""

#. Tag: para
#: containers-basics.xml:25
#, no-c-format
msgid "Containers make it possible to isolate applications through self-contained units."
msgstr ""

#. Tag: para
#: containers-basics.xml:31
#, no-c-format
msgid "Containers provide near-native performance. Depending on the runtime, a container can use the host kernel directly, thus minimizing overhead."
msgstr ""

#. Tag: para
#: containers-basics.xml:37
#, no-c-format
msgid "It is possible to control network interfaces and apply resources inside containers through <xref linkend=\"gloss-vt-lxc-cgroups\"/> ."
msgstr ""

#. Tag: title
#: containers-basics.xml:44
#, no-c-format
msgid "Limitations of Containers"
msgstr ""

#. Tag: para
#: containers-basics.xml:46
#, no-c-format
msgid "Containers run on the host system's kernel, so they cannot use different kernels or different kernel versions."
msgstr ""

#. Tag: para
#: containers-basics.xml:52
#, no-c-format
msgid "Only Linux-based applications can be containerized."
msgstr ""

#. Tag: para
#: containers-basics.xml:57
#, no-c-format
msgid "Containers are not secure, and the overall security depends on the host system. Containerized applications can be secured through &aa; or &selnx; profile. Securing containers is harder than securing virtual machines due to the larger attack surface."
msgstr ""

#. Tag: title
#: containers-basics.xml:66
#, no-c-format
msgid "Key Concepts and Brief Introduction to &podman;"
msgstr ""

#. Tag: para
#: containers-basics.xml:68
#, no-c-format
msgid "Although &deng; is a popular choice for working with images and containers, &podman; provides a drop-in replacement for &docker; that offers several advantages. While <xref linkend=\"sec-build-tools-podman\"/> provides an in-depth information on &podman;, this chapter offers a quick introduction to key concepts and a basic procedure of creating a container image and using it to run a container."
msgstr ""

#. Tag: para
#: containers-basics.xml:77
#, no-c-format
msgid "The basic &podman; workflow is as follows:"
msgstr ""

#. Tag: para
#: containers-basics.xml:92
#, no-c-format
msgid "Running a container, either on a local machine or cloud service, usually involves the following steps:"
msgstr ""

#. Tag: para
#: containers-basics.xml:99
#, no-c-format
msgid "Fetch a base image by pulling it from a registry to your local machine"
msgstr ""

#. Tag: para
#: containers-basics.xml:104
#, no-c-format
msgid "Create a Dockerfile and use it to build a custom image on top of the base image"
msgstr ""

#. Tag: para
#: containers-basics.xml:110
#, no-c-format
msgid "Use the created image to start one or more containers"
msgstr ""

#. Tag: para
#: containers-basics.xml:116
#, no-c-format
msgid "To run a container, you need an image. An image includes all the dependencies needed to run the application. For example, the &slea; base image contains the &slea; distribution with a minimal package selection."
msgstr ""

#. Tag: para
#: containers-basics.xml:122
#, no-c-format
msgid "While it is possible to create an image from scratch, few applications would work in such an empty environment. Thus, using an existing base image is more practical in most situations. A base image has no parent, meaning it is not based on another image."
msgstr ""

#. Tag: para
#: containers-basics.xml:129
#, no-c-format
msgid "Although you can use a base image for running containers, the main purpose of base images is to serve as foundations for creating custom images that can run containers with specific applications, servers, services, and so on."
msgstr ""

#. Tag: para
#: containers-basics.xml:135
#, no-c-format
msgid "Both base and custom images are usually available through a repository of images called registry. Unless a registry is explicitly specified, &podman; pulls images from the Docker Hub registry."
msgstr ""

#. Tag: para
#: containers-basics.xml:141
#, no-c-format
msgid "After you pull a base image, you can use it as a starting point for building a custom image. For example, you can use the SLE base image to generate an image that is configured to run a specific application. To build a custom image, you need to create a special file called Dockerfile, containing building instructions. For example, a Dockerfile can contain instructions to update the system software, install the desired application, open specific network ports, run commands, etc."
msgstr ""

#. Tag: para
#: containers-basics.xml:151
#, no-c-format
msgid "Note that you can build images not only from base images, but also on top of custom images. So you can have an image consisting of multiple layers:"
msgstr ""

#. Tag: title
#: containers-basics.xml:168
#, no-c-format
msgid "Practical Example"
msgstr ""

#. Tag: para
#: containers-basics.xml:169
#, no-c-format
msgid "The following procedure shows how to build a custom &docker; image that can be used to run a container with a simple PHP application called <literal>example</literal> served using the built-in PHP development server."
msgstr ""

#. Tag: title
#: containers-basics.xml:176
#, no-c-format
msgid "Building an Image and Running a Container"
msgstr ""

#. Tag: para
#: containers-basics.xml:178
#, no-c-format
msgid "Install &podman;:"
msgstr ""

#. Tag: screen
#: containers-basics.xml:181
#, no-c-format
msgid "&prompt.sudo;zypper in podman"
msgstr ""

#. Tag: para
#: containers-basics.xml:184
#, no-c-format
msgid "Switch to the PHP project's directory and create a file named <filename>Dockerfile</filename> :"
msgstr ""

#. Tag: screen
#: containers-basics.xml:188
#, no-c-format
msgid "&prompt.user;cd example\n"
      "&prompt.user;touch Dockerfile"
msgstr ""

#. Tag: para
#: containers-basics.xml:192
#, no-c-format
msgid "Open the <filename>Dockerfile</filename> file for editing, and add the following:"
msgstr ""

#. Tag: screen
#: containers-basics.xml:196
#, no-c-format
msgid "\n"
      "FROM php:7.4-cli\n"
      "COPY . /usr/src/example\n"
      "WORKDIR /usr/src/example\n"
      "EXPOSE 8000\n"
      "CMD [ \"php\", \"-S\", \"0.0.0.0:8000\" ]"
msgstr ""

#. Tag: para
#: containers-basics.xml:204
#, no-c-format
msgid "Build a container image:"
msgstr ""

#. Tag: screen
#: containers-basics.xml:207
#, no-c-format
msgid "&prompt.sudo;podman build -t example ."
msgstr ""

#. Tag: para
#: containers-basics.xml:210
#, no-c-format
msgid "Run a container:"
msgstr ""

#. Tag: screen
#: containers-basics.xml:213
#, no-c-format
msgid "&prompt.sudo;podman run -it -p8000:8000 --rm example"
msgstr ""

#. Tag: para
#: containers-basics.xml:216
#, no-c-format
msgid "Point the browser to <literal>localhost:8000</literal> to access the application running in the container."
msgstr ""

#. Tag: para
#: containers-basics.xml:222
#, no-c-format
msgid "Note that &suse; does not provide support for third-party images, such as the one used in this example."
msgstr ""

