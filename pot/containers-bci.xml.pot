# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2022-07-14 22:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <someuser@example.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/x-po; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: containers-bci.xml:12
#, no-c-format
msgid "&bci;s"
msgstr ""

#. Tag: title
#: containers-bci.xml:15
#, no-c-format
msgid "Introduction to &bci;s"
msgstr ""

#. Tag: para
#: containers-bci.xml:17
#, no-c-format
msgid "&bci; (&bcia;) are minimal &sls; 15-based images that you can use to develop, deploy, and share applications. There are two types of &bcia;:"
msgstr ""

#. Tag: para
#: containers-bci.xml:24
#, no-c-format
msgid "General-purpose &bcia; can be used for building custom container images and for deploying applications."
msgstr ""

#. Tag: para
#: containers-bci.xml:30
#, no-c-format
msgid "Language stack &bcia; provide minimal environments for developing and deploying applications in specific programming languages."
msgstr ""

#. Tag: para
#: containers-bci.xml:37
#, no-c-format
msgid "In addition to that, we will provide Application Container Images based on &bcia; featuring popular containerized applications like Nginx, PostgreSQL, MariaDB and <link xlink:href=\"https://github.com/SUSE/rmt\">RMT</link> ."
msgstr ""

#. Tag: title
#: containers-bci.xml:44
#, no-c-format
msgid "Highlights"
msgstr ""

#. Tag: para
#: containers-bci.xml:47
#, no-c-format
msgid "&bcia; are fully compatible with &sls;, but <emphasis>they do not require a subscription to run and distribute them.</emphasis>"
msgstr ""

#. Tag: para
#: containers-bci.xml:53
#, no-c-format
msgid "&bcia; automatically run in FIPS-compatible mode when the host operating system is running in FIPS mode."
msgstr ""

#. Tag: para
#: containers-bci.xml:59
#, no-c-format
msgid "Each &bcia; includes the RPM database, which makes it possible to audit the contents of the container image. You can use the RPM database to determine the specific version of the RPM package any given file belongs to. This allows you to ensure that a container image is not susceptible to known and already fixed vulnerabilities."
msgstr ""

#. Tag: para
#: containers-bci.xml:68
#, no-c-format
msgid "All &bcia; (except for those without <systemitem>zypper</systemitem> ) come with the <systemitem>container-suseconnect</systemitem> service. This gives containers that run on a registered &slsa; host access to the full &slsa; repositories. <systemitem>container-suseconnect</systemitem> is invoked automatically when you run <systemitem>zypper</systemitem> for the first time, and the service adds the correct &slsa; repositories into the running container. On an unregistered &slsa; host or on a non-&slsa; host, the service does nothing."
msgstr ""

#. Tag: title
#: containers-bci.xml:83
#, no-c-format
msgid "General-purpose &bcia;"
msgstr ""

#. Tag: para
#: containers-bci.xml:84
#, no-c-format
msgid "There are four general purpose &bcia;, and each container image comes with a minimum set of packages to keep its size low. You can use a general purpose &bcia; either as a starting point for building custom container images, or as a platform for deploying specific software. For more information about general purpose &bcia;, see <xref linkend=\"sec-bci-variants\"/> ."
msgstr ""

#. Tag: title
#: containers-bci.xml:95
#, no-c-format
msgid "Language stack &bcia;"
msgstr ""

#. Tag: para
#: containers-bci.xml:96
#, no-c-format
msgid "Language stack &bcia; are built on top of the BCI-Base general-purpose &bcia;. Each container image comes with the <systemitem>zypper</systemitem> stack and the free <literal>SLE_BCI</literal> repository. Additionally, each image includes most common tools for building and deploying applications in the specific language environment. This includes tools like a compiler or interpreter as well as the language specific package manager. For more information about language stack &bcia;, see <xref linkend=\"sec-language-stack-bci\"/> ."
msgstr ""

#. Tag: title
#: containers-bci.xml:109
#, no-c-format
msgid "Important note on status and lifecycle"
msgstr ""

#. Tag: para
#: containers-bci.xml:110
#, no-c-format
msgid "All container images, except for base, are currently classified as tech preview, and SUSE doesn't provide official support for them. This information is visible on the web on <link xlink:href=\"https://registry.suse.com\">registry.suse.com</link> . In addition to that, it is also indicated via the <literal>com.suse.supportlevel</literal> label whether a container image still has the tech preview status. You can use the skopeo and jq utilities to check the status of the desired &bcia; as follows:"
msgstr ""

#. Tag: screen
#: containers-bci.xml:120
#, no-c-format
msgid "❯ skopeo inspect docker://registry.suse.com/bci/bci-micro:15.4 | jq '.Labels[\"com.suse.supportlevel\"]'\n"
      "\"techpreview\"\n"
      "\n"
      "❯ skopeo inspect docker://registry.suse.com/bci/bci-base:15.4 | jq '.Labels[\"com.suse.supportlevel\"]'\n"
      "\"l3\"\n"
      ""
msgstr ""

#. Tag: para
#: containers-bci.xml:126
#, no-c-format
msgid "In the example above, the <literal>com.suse.supportlevel</literal> label is set to <literal>techpreview</literal> in the <literal>bci-micro</literal> container image, indicating that the image still has the tech preview status. The <literal>bci-base</literal> container image on the other hand is fully l3 supported. Unlike like the general purpose &bcia;, the language stack &bcia; may not follow the lifecycle of the &slea; distribution: they are supported as long as the respective language stack receives support. In other words, new versions of &bcia; (indicated by the OCI tags) may be released during the lifecycle of a &slea; Service Pack, while older versions may become unsupported. Refer to <link xlink:href=\"https://suse.com/lifecycle\">suse.com/lifecycle</link> to find out whether the container in question is still under support."
msgstr ""

#. Tag: title
#: containers-bci.xml:143
#, no-c-format
msgid "Getting started"
msgstr ""

#. Tag: para
#: containers-bci.xml:144
#, no-c-format
msgid "The &bcia; are available as OCI-compatible container images directly from <link xlink:href=\"https://registry.suse.com\">registry.suse.com</link> and can be used like any other container image. For example, using one of the general purpose containers:"
msgstr ""

#. Tag: screen
#: containers-bci.xml:150
#, no-c-format
msgid "&prompt.user;podman run --rm -it registry.suse.com/bci/bci-base:15.4 grep '^NAME' /etc/os-release\n"
      "NAME=\"SLES\""
msgstr ""

#. Tag: para
#: containers-bci.xml:152
#, no-c-format
msgid "Alternatively, you can use &bcia; in Dockerfile as follows:"
msgstr ""

#. Tag: screen
#: containers-bci.xml:155
#, no-c-format
msgid "FROM registry.suse.com/bci/bci-base:15.4\n"
      "RUN zypper -n in python3 &amp;&amp; \\\n"
      "    echo \"Hello Green World!\" &gt; index.html\n"
      "ENTRYPOINT [\"/usr/bin/python3\", \"-m\", \"http.server\"]\n"
      "EXPOSE 8000"
msgstr ""

#. Tag: para
#: containers-bci.xml:160
#, no-c-format
msgid "You can then build container images using the <command>docker build .</command> or <command>buildah bud .</command> commands:"
msgstr ""

#. Tag: screen
#: containers-bci.xml:164
#, no-c-format
msgid "&prompt.user;docker build .\n"
      "Sending build context to Docker daemon  2.048kB\n"
      "Step 1/4 : FROM registry.suse.com/bci/bci-base:15.4\n"
      " ---&gt; e34487b4c4e1\n"
      "Step 2/4 : RUN zypper -n in python3 &amp;&amp;     echo \"Hello Green World!\" &gt; index.html\n"
      " ---&gt; Using cache\n"
      " ---&gt; 9b527dfa45e8\n"
      "Step 3/4 : ENTRYPOINT [\"/usr/bin/python3\", \"-m\", \"http.server\"]\n"
      " ---&gt; Using cache\n"
      " ---&gt; 953080e91e1e\n"
      "Step 4/4 : EXPOSE 8000\n"
      " ---&gt; Using cache\n"
      " ---&gt; 48b33ec590a6\n"
      "Successfully built 48b33ec590a6\n"
      " \n"
      "&prompt.user;docker run -p 8000:8000 --rm -d 48b33ec590a6\n"
      "575ad7edf43e11c2c9474055f7f6b7a221078739fc8ce5765b0e34a0c899b46a\n"
      " \n"
      "&prompt.user;curl localhost:8000\n"
      "Hello Green World!"
msgstr ""

#. Tag: title
#: containers-bci.xml:187
#, no-c-format
msgid "Why &bci;s"
msgstr ""

#. Tag: para
#: containers-bci.xml:189
#, no-c-format
msgid "&bcia;s offer a platform for creating &slea;-based custom container images and containerized applications that can be distributed freely. &bcia;s feature the same predictable enterprise lifecycle as &slsa;. The SLE_BCI 15 SP3 and SP4 repository (which is a subset of the &slea; repository) gives &bcia;s access to 4,000 packages available for the &x86-64;, &aarch64;, &ppc64le;, and s390x architectures. The packages in the repository have undergone quality assurance and security audits by &suse;. The container images are FIPS-compliant when running on a host in FIPS mode. In addition to that, &suse; can provide official support for &bcia;s through &suse; subscription plans."
msgstr ""

#. Tag: term
#: containers-bci.xml:204
#, no-c-format
msgid "Security"
msgstr ""

#. Tag: para
#: containers-bci.xml:206
#, no-c-format
msgid "Each package in the SLE_BCI repository undergoes security audits, and &bcia;s benefit from the same mechanism of dealing with CVEs as SLES. All discovered and fixed vulnerabilities are announced via e-mail, the dedicated <link xlink:href=\"https://www.suse.com/security/cve/\">CVE pages</link> , and as OVAL and CVRF data. To ensure a secure supply chain, all container images are signed with Notary v1, &podman;'s GPG signatures, and Sigstore Cosign."
msgstr ""

#. Tag: term
#: containers-bci.xml:218
#, no-c-format
msgid "Stability"
msgstr ""

#. Tag: para
#: containers-bci.xml:220
#, no-c-format
msgid "Since &bcia;s are based on &slea;, they feature the same level of stability and quality assurance as &sls;. Similar to &slsa;, &bcia;s receive maintenance updates that provide bug fixes, improvements, and security patches."
msgstr ""

#. Tag: term
#: containers-bci.xml:229
#, no-c-format
msgid "Tooling and integration"
msgstr ""

#. Tag: para
#: containers-bci.xml:231
#, no-c-format
msgid "&bcia;s are designed to provide drop-in replacements for popular container images available on hub.docker.com. You can use the general-purpose &bcia;s and the tools they put at your disposal to create custom container images, while the language stack &bcia;s provide a foundation and the required tooling for building containerized applications."
msgstr ""

#. Tag: term
#: containers-bci.xml:242
#, no-c-format
msgid "Redistribution"
msgstr ""

#. Tag: para
#: containers-bci.xml:244
#, no-c-format
msgid "BCIs are covered by a permissive <link xlink:href=\"https://www.suse.com/de-de/licensing/eula/#bci\">EULA</link> that allows you to redistribute custom container images based on a BCI."
msgstr ""

#. Tag: title
#: containers-bci.xml:254
#, no-c-format
msgid "BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox"
msgstr ""

#. Tag: para
#: containers-bci.xml:256
#, no-c-format
msgid "&suse; offers several general-purpose &bci;s that are intended as deployment targets or as foundations for creating customized images: BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox. These images share the common &slsa; base, and none of them ship with a specific language or an application stack. All images feature the RPM database (even if the specific image does not include the RPM package manager) that can be used to verify the provenance of every file in the image. Each image includes the &slsa; certificate bundle, which allows the deployed applications to use the system's certificates to verify TLS connections."
msgstr ""

#. Tag: title
#: containers-bci.xml:269
#, no-c-format
msgid "Quick overview"
msgstr ""

#. Tag: para
#: containers-bci.xml:270
#, no-c-format
msgid "The table below provides a quick overview of the differences between BCI-Base, BCI-Minimal, BCI-Micro, and BCI-BusyBox."
msgstr ""

#. Tag: title
#: containers-bci.xml:287
#, no-c-format
msgid "BCI-Base and BCI-Init: When you need flexibility"
msgstr ""

#. Tag: para
#: containers-bci.xml:288
#, no-c-format
msgid "This &bcia; comes with the Zypper package manager and a free SLE-BCI repository. This allows you to install software available in the repository and customize the image during the build. The downside is the size of the image. It is the largest of the general-purpose &bcia;s, so it is not always the best choice for a deployment image."
msgstr ""

#. Tag: para
#: containers-bci.xml:295
#, no-c-format
msgid "A variant of BCI-Base called BCI-Init comes with systemd preinstalled. The BCI-Init container image can be useful in scenarios requiring systemd for managing services in a single container."
msgstr ""

#. Tag: title
#: containers-bci.xml:303
#, no-c-format
msgid "BCI-Minimal: When you do not need Zypper"
msgstr ""

#. Tag: para
#: containers-bci.xml:304
#, no-c-format
msgid "This is a stripped-down version of the BCI-Base image. BCI-Minimal comes without Zypper, but it does have the RPM package manager installed. This significantly reduces the size of the image. However, while RPM can install and remove packages, it lacks support for repositories and automated dependency resolution. The BCI-Minimal image is therefore intended for creating deployment containers, and then installing the desired RPM packages inside the containers. Although you can install the required dependencies, you need to download and resolve them manually. However, this approach is not recommended as it is prone to errors."
msgstr ""

#. Tag: title
#: containers-bci.xml:318
#, no-c-format
msgid "BCI-Micro: When you need to deploy static binaries"
msgstr ""

#. Tag: para
#: containers-bci.xml:319
#, no-c-format
msgid "This image is similar to BCI-Minimal but without the RPM package manager. The primary use case for the image is deploying static binaries produced externally or during multi-stage builds. As there is no straightforward way to install additional dependencies inside the container image, we recommend deploying a project using the BCI-Minimal image only when the final build artifact bundles all dependencies and has no external runtime requirements (like Python or Ruby)."
msgstr ""

#. Tag: title
#: containers-bci.xml:331
#, no-c-format
msgid "BCI-BusyBox: When you need the smallest and GPLv3-free image"
msgstr ""

#. Tag: para
#: containers-bci.xml:332
#, no-c-format
msgid "Similar to BCI-Micro, the BCI-BusyBox image comes with the most basic tools only. However, these tools are provided by the BusyBox project. This has the benefit of further size reduction. Furthermore, the image contains no GPLv3 licensed software. When using the image, keep in mind that there are certain differences between the BusyBox tools and the GNU Coreutils. So scripts written for a system that uses GNU Coreutils may require modification to work with BusyBox."
msgstr ""

#. Tag: title
#: containers-bci.xml:344
#, no-c-format
msgid "Approximate sizes"
msgstr ""

#. Tag: para
#: containers-bci.xml:345
#, no-c-format
msgid "For your reference, the list below provides an approximate size of each &bcia;. Keep in mind that the provided numbers are rough estimations."
msgstr ""

#. Tag: para
#: containers-bci.xml:351
#, no-c-format
msgid "<literal>BCI-Base</literal> ~94&nbsp;MB"
msgstr ""

#. Tag: para
#: containers-bci.xml:356
#, no-c-format
msgid "<literal>BCI-Minimal</literal> ~42&nbsp;MB"
msgstr ""

#. Tag: para
#: containers-bci.xml:361
#, no-c-format
msgid "<literal>BCI-Micro</literal> ~26&nbsp;MB"
msgstr ""

#. Tag: para
#: containers-bci.xml:366
#, no-c-format
msgid "<literal>BCI-BusyBox</literal> ~14&nbsp;MB"
msgstr ""

#. Tag: title
#: containers-bci.xml:374
#, no-c-format
msgid "Language stack &bci;s"
msgstr ""

#. Tag: para
#: containers-bci.xml:376
#, no-c-format
msgid "If you have a working knowledge of containers, you will not have any difficulties using &bcia;s. However, there are certain features that set &bcia;s apart from similar offerings, like images based on Debian or Alpine Linux. And understanding the specifics can help you to get the most out of &bcia;s in the shortest time possible."
msgstr ""

#. Tag: title
#: containers-bci.xml:385
#, no-c-format
msgid "Language stack &bcia;s"
msgstr ""

#. Tag: para
#: containers-bci.xml:386
#, no-c-format
msgid "Language stack &bcia; are built on top of BCI-Base. Below is an overview of the available language stack &bcia;s."
msgstr ""

#. Tag: term
#: containers-bci.xml:392
#, no-c-format
msgid "python"
msgstr ""

#. Tag: para
#: containers-bci.xml:396
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/python\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:402
#, no-c-format
msgid "Tags: 3.6, 3.9, 3.10"
msgstr ""

#. Tag: para
#: containers-bci.xml:407
#, no-c-format
msgid "Ships with the <package>python3</package> version from the tag and <package>pip3</package> , <package>curl</package> , <package>git</package> tools."
msgstr ""

#. Tag: term
#: containers-bci.xml:417
#, no-c-format
msgid "node"
msgstr ""

#. Tag: para
#: containers-bci.xml:421
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/nodejs\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:427
#, no-c-format
msgid "Tags: 12, 14, 16"
msgstr ""

#. Tag: para
#: containers-bci.xml:432
#, no-c-format
msgid "Comes with <package>nodejs</package> version from the tag, <package>npm</package> and <package>git</package> . The <package>yarn</package> package manager can be installed with the <command>npm install -g yarn</command> command."
msgstr ""

#. Tag: term
#: containers-bci.xml:443
#, no-c-format
msgid "openjdk"
msgstr ""

#. Tag: para
#: containers-bci.xml:447
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/openjdk\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:458
#, no-c-format
msgid "Ships with the OpenJDK runtime. Designed for deploying Java applications."
msgstr ""

#. Tag: term
#: containers-bci.xml:467
#, no-c-format
msgid "openjdk-devel"
msgstr ""

#. Tag: para
#: containers-bci.xml:471
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/openjdk-devel\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:477
#, no-c-format
msgid "Tags: 11, 17"
msgstr ""

#. Tag: para
#: containers-bci.xml:482
#, no-c-format
msgid "Includes the development part of OpenJDK in addition to the OpenJDK runtime. Instead of Bash, the default entry point is the <systemitem>jshell</systemitem> shell."
msgstr ""

#. Tag: term
#: containers-bci.xml:492
#, no-c-format
msgid "ruby"
msgstr ""

#. Tag: para
#: containers-bci.xml:496
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/ruby\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:502
#, no-c-format
msgid "Tags: 2.5"
msgstr ""

#. Tag: para
#: containers-bci.xml:507
#, no-c-format
msgid "A standard development environment based on Ruby 2.5, featuring <package>ruby</package> , <package>gem</package> and <package>bundler</package> as well as <package>git</package> and <package>curl</package> ."
msgstr ""

#. Tag: term
#: containers-bci.xml:518
#, no-c-format
msgid "golang"
msgstr ""

#. Tag: para
#: containers-bci.xml:522
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/golang\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:528
#, no-c-format
msgid "Tags: 1.16, 1.17, 1.18"
msgstr ""

#. Tag: para
#: containers-bci.xml:533
#, no-c-format
msgid "Ships with the <package>go</package> compiler version specified in the tag."
msgstr ""

#. Tag: term
#: containers-bci.xml:542
#, no-c-format
msgid "dotnet-runtime"
msgstr ""

#. Tag: para
#: containers-bci.xml:546
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/dotnet-runtime\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:557
#, no-c-format
msgid "Includes the .NET runtime from Microsoft and the Microsoft .NET repository."
msgstr ""

#. Tag: term
#: containers-bci.xml:566
#, no-c-format
msgid "dotnet-aspnet"
msgstr ""

#. Tag: para
#: containers-bci.xml:570
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/dotnet-aspnet\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:581
#, no-c-format
msgid "Ships with the ASP.NET runtime from Microsoft and the Microsoft .NET repository."
msgstr ""

#. Tag: term
#: containers-bci.xml:590
#, no-c-format
msgid "dotnet-sdk"
msgstr ""

#. Tag: para
#: containers-bci.xml:594
#, no-c-format
msgid "URL: <link xlink:href=\"https://registry.suse.com/static/bci/dotnet-sdk\"/>"
msgstr ""

#. Tag: para
#: containers-bci.xml:600
#, no-c-format
msgid "Tags: 3.1, 5.0, 6.0"
msgstr ""

#. Tag: para
#: containers-bci.xml:605
#, no-c-format
msgid "Comes with the .NET and ASP.NET SDK from Microsoft as well as the Microsoft .NET repository."
msgstr ""

#. Tag: title
#: containers-bci.xml:642
#, no-c-format
msgid "Package manager"
msgstr ""

#. Tag: para
#: containers-bci.xml:643
#, no-c-format
msgid "The default package manager in &sle; is Zypper. Similar to APT in Debian and APK in Alpine Linux, Zypper offers a command-line interface for all package management tasks. Below is brief overview of commonly used container-related Zypper commands."
msgstr ""

#. Tag: term
#: containers-bci.xml:651
#, no-c-format
msgid "Install packages"
msgstr ""

#. Tag: para
#: containers-bci.xml:653
#, no-c-format
msgid "<command>zypper --non-interactive install <replaceable>PACKAGE_NAME</replaceable></command>"
msgstr ""

#. Tag: term
#: containers-bci.xml:660
#, no-c-format
msgid "Add a repository"
msgstr ""

#. Tag: para
#: containers-bci.xml:662
#, no-c-format
msgid "<command>zypper --non-interactive addrepo <replaceable>REPOSITORY_URL</replaceable>;</command> <command>zypper --non-interactive refresh</command>"
msgstr ""

#. Tag: term
#: containers-bci.xml:670
#, no-c-format
msgid "Update all packages"
msgstr ""

#. Tag: para
#: containers-bci.xml:672
#, no-c-format
msgid "<command>zypper --non-interactive update</command>"
msgstr ""

#. Tag: term
#: containers-bci.xml:678
#, no-c-format
msgid "Remove a package"
msgstr ""

#. Tag: para
#: containers-bci.xml:680
#, no-c-format
msgid "<command>zypper --non-interactive remove --clean-deps <replaceable>PACKAGE_NAME</replaceable></command> (the <option>--clean-deps</option> flag ensures that no longer required dependencies are removed as well)"
msgstr ""

#. Tag: term
#: containers-bci.xml:689
#, no-c-format
msgid "Clean up temporary files"
msgstr ""

#. Tag: para
#: containers-bci.xml:691
#, no-c-format
msgid "<command>zypper clean</command>"
msgstr ""

#. Tag: para
#: containers-bci.xml:697
#, no-c-format
msgid "For more information on using Zypper, refer to <link xlink:href=\"https://documentation.suse.com/sles-15/html/SLES-all/cha-sw-cl.html#sec-zypper\"/> ."
msgstr ""

#. Tag: para
#: containers-bci.xml:701
#, no-c-format
msgid "All the described commands use the <option>--non-interactive</option> flag to skip confirmations, since you cannot approve these manually during container builds. Keep in mind that you must use the flag with any command that modifies the system. Also note that <option>--non-interactive</option> is not a \"yes to all\" flag. Instead, <option>--non-interactive</option> confirms what is considered to be the intention of the user. For example, an installation command with the <option>--non-interactive</option> option fails if it needs to import new repository signing keys, as that is something that the user should verify themselves."
msgstr ""

#. Tag: title
#: containers-bci.xml:715
#, no-c-format
msgid "Common patterns"
msgstr ""

#. Tag: para
#: containers-bci.xml:716
#, no-c-format
msgid "Here are a few examples that can give you an idea how to accomplish certain tasks in &bcia; compared to Debian."
msgstr ""

#. Tag: term
#: containers-bci.xml:722
#, no-c-format
msgid "Remove orphaned packages"
msgstr ""

#. Tag: para
#: containers-bci.xml:726
#, no-c-format
msgid "Debian: <command>apt-get autoremove -y</command>"
msgstr ""

#. Tag: para
#: containers-bci.xml:731
#, no-c-format
msgid "&bcia;: Not required as long as you remove installed packages using the <command>zypper --non-interactive remove --clean-deps <replaceable>PACKAGE_NAME</replaceable></command>"
msgstr ""

#. Tag: term
#: containers-bci.xml:741
#, no-c-format
msgid "Obtain container's architecture"
msgstr ""

#. Tag: para
#: containers-bci.xml:745
#, no-c-format
msgid "Debian: <command>dpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"</command>"
msgstr ""

#. Tag: para
#: containers-bci.xml:751
#, no-c-format
msgid "&bcia;: <command>arch=\"$(uname -p|sed 's/x86_64/amd64/')\"</command>"
msgstr ""

#. Tag: term
#: containers-bci.xml:759
#, no-c-format
msgid "Install packages required for compilation"
msgstr ""

#. Tag: para
#: containers-bci.xml:763
#, no-c-format
msgid "Debian: <command>apt-get install -y build-essential</command>"
msgstr ""

#. Tag: para
#: containers-bci.xml:768
#, no-c-format
msgid "&bcia;: <command>zypper -n in gcc gcc-c++ make</command>"
msgstr ""

#. Tag: term
#: containers-bci.xml:776
#, no-c-format
msgid "Verify GnuPG signatures"
msgstr ""

#. Tag: para
#: containers-bci.xml:780
#, no-c-format
msgid "Debian: <command>gpg --batch --verify <replaceable>SIGNATURE_URL</replaceable> <replaceable>FILE_TO_VERIFY</replaceable></command>"
msgstr ""

#. Tag: para
#: containers-bci.xml:787
#, no-c-format
msgid "&bcia;: <command>zypper -n in dirmngr; gpg --batch --verify <replaceable>SIGNATURE_URL</replaceable> <replaceable>FILE_TO_VERIFY</replaceable>; zypper -n remove --clean-deps dirmngr; zypper -n clean</command>"
msgstr ""

#. Tag: title
#: containers-bci.xml:801
#, no-c-format
msgid "Package naming conventions"
msgstr ""

#. Tag: para
#: containers-bci.xml:802
#, no-c-format
msgid "&sle; package naming conventions differ from Debian, Ubuntu, and Alpine, and they are closer to those of &rhel;. The main difference is that development packages of libraries (that is, packages containing headers and build description files) are named <package><replaceable>PACKAGE</replaceable>-devel</package> in &sle;, as opposed to <package><replaceable>PACKAGE</replaceable>-dev</package> as they are in Debian and Ubuntu. When in doubt, search for the package directly using the following command: <command>docker run --rm registry.suse.com/bci/bci-base:<replaceable>OS_VERSION</replaceable> zypper search <replaceable>PACKAGE_NAME</replaceable></command> (replace <replaceable>OS_VERSION</replaceable> with the appropriate service version number, for example: <literal>15.3</literal> or <literal>15.4</literal> )."
msgstr ""

#. Tag: title
#: containers-bci.xml:820
#, no-c-format
msgid "Adding GPG signing keys"
msgstr ""

#. Tag: para
#: containers-bci.xml:821
#, no-c-format
msgid "Adding external repositories to a container or container image normally requires importing the GPG key used for signing the packages. This can be done with the <command>rpm --import <replaceable>KEY_URL</replaceable></command> command. This adds the key to the RPM database, and all packages from the repository can be installed afterwards."
msgstr ""

