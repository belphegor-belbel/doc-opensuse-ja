# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2025-08-04 22:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <someuser@example.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/x-po; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: ay_erb_templates.xml:9
#, no-c-format
msgid "ERB templates"
msgstr ""

#. Tag: date
#: ay_erb_templates.xml:17
#, no-c-format
msgid "2025-07-07"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:24
#, no-c-format
msgid "ERB templates are for embedding Ruby code within an &ay; profile to modify the profile during the installation. With this approach, you can inspect the system and adjust the profile by setting values, adding or skipping sections, and so on."
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:30
#, no-c-format
msgid "To activate the ERB processing, the profile must have the extension <filename>.erb</filename> (for example, <filename>autoyast.xml.erb</filename> ). Hence, it is not possible to combine rules/classes and ERB templates."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:37
#, no-c-format
msgid "What is ERB?"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:39
#, no-c-format
msgid "ERB stands for <emphasis>Embedded Ruby</emphasis> . ERB uses the power of the Ruby programming language to generate different kinds of content. With ERB, you can include some Ruby code in your profiles to adapt them at runtime, depending on the installation system."
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:47
#, no-c-format
msgid "When using ERB, the Ruby code is enclosed between <literal>&lt;%</literal> and <literal>%&gt;</literal> signs. Use an equals sign, <literal>=</literal> , to include command output in the resulting profile."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:54
#, no-c-format
msgid "Including a file using ERB"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:55
#, no-c-format
msgid "&lt;bootloader&gt;\n"
      "  &lt;% require \"open-uri\" %&gt;\n"
      "  &lt;%= URI.open(\"http://192.168.1.1/profiles/bootloader-common.xml\").read %&gt;\n"
      "&lt;/bootloader&gt; &lt;!-- this line gets replaced with the content of bootloader-common.xml --&gt;\n"
      ""
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:62
#, no-c-format
msgid "You can use Ruby facilities to run arbitrary commands. If you want to get the output of a command, then enclose it between backticks. If you want to know whether a command was successful or not, run the command with the <literal>system</literal> function."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:69
#, no-c-format
msgid "Running commands with Ruby"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:70
#, no-c-format
msgid "\n"
      "&lt;% files = `ls` %&gt; &lt;!-- files contains the output of the command (for instance \"file1\\nfile2\\nfile3\") --&gt;\n"
      "&lt;% success = system(\"dmidecode | grep some-model\") %&gt; &lt;!-- success contains true or false --&gt;\n"
      ""
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:76
#, no-c-format
msgid "Also, you can use more advanced Ruby code structures such as conditions and loops."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:81
#, no-c-format
msgid "Using Ruby structures"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:82
#, no-c-format
msgid "\n"
      "&lt;% ip_forward = File.read(\"/proc/sys/net/ipv4/ip_forward\").strip %&gt;\n"
      "&lt;% if ip_forward == \"1\" %&gt;\n"
      "  &lt;!-- something --&gt;\n"
      "&lt;% end %&gt;\n"
      "\n"
      "&lt;% files = `ls /tmp/config/*.xml` %&gt;\n"
      "&lt;% files.split.each do |file| %&gt;\n"
      "  &lt;%= file.read %&gt;\n"
      "&lt;% end %&gt;\n"
      ""
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:95
#, no-c-format
msgid "&ay; offers a small set of <emphasis>helper functions</emphasis> to retrieve information from the underlying system, like <literal>disks</literal> or <literal>network_cards</literal> . You can check the list of helpers and their values in the <xref linkend=\"erb-helpers\"/> section."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:104
#, no-c-format
msgid "Template helpers"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:106
#, no-c-format
msgid "Template helpers are sets of Ruby methods that can be used in the profiles to retrieve information about the installation system."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:112
#, no-c-format
msgid "<literal>boot_efi?</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:113
#, no-c-format
msgid "<literal>boot_efi?</literal> is a boolean helper that returns whether the system is booted using EFI. In the example below, the profile configures the bootloader according to the current boot mode."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:120
#, no-c-format
msgid "Configuring the boot loader"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:121
#, no-c-format
msgid "\n"
      "&lt;% if env.boot_efi? %&gt;\n"
      "  &lt;loader_type&gt;grub2-efi&lt;/loader_type&gt;\n"
      "&lt;% else %&gt;\n"
      "  &lt;loader_type&gt;grub2&lt;/loader_type&gt;\n"
      "&lt;% end %&gt;\n"
      ""
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:132
#, no-c-format
msgid "<literal>disks</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:133
#, no-c-format
msgid "The <literal>disks</literal> helper returns a list of the detected disks. Each element of the list contains some basic information like the device name or the size."
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:172
#, no-c-format
msgid "Device kernel name (for example, <literal>sda</literal> )."
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:179
#, no-c-format
msgid "<literal>:model</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:189
#, no-c-format
msgid "Disk model"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:196
#, no-c-format
msgid "<literal>:serial</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:206
#, no-c-format
msgid "Serial number"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:213
#, no-c-format
msgid "<literal>:size</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:218
#, no-c-format
msgid "Integer"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:223
#, no-c-format
msgid "Disk size (is a count of disk sectors)"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:230
#, no-c-format
msgid "<literal>:udev_names</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:235
#, no-c-format
msgid "Array&lt;String&gt;"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:240
#, no-c-format
msgid "List of disk udev names. You can use any of them to refer to the device."
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:266
#, no-c-format
msgid "The profile in the example below installs the system on the largest disk. It sorts the list of existing disks by size and takes the last one. Then it uses the <literal>:device</literal> key as value for the <literal>device</literal> element."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:273
#, no-c-format
msgid "Using the largest disk"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:274
#, no-c-format
msgid "&lt;partitioning t=\"list\"&gt;\n"
      "  &lt;drive&gt;\n"
      "    &lt;% disk = disks.sort_by { |d| d[:size] }.last %&gt; &lt;!-- find the largest disk --&gt;\n"
      "    &lt;device&gt;&lt;%= disk[:device] %&gt;&lt;/device&gt; &lt;!-- print the disk device name --&gt;\n"
      "    &lt;initialize t=\"boolean\"&gt;true&lt;/initialize&gt;\n"
      "    &lt;use&gt;all&lt;/use&gt;\n"
      "  &lt;/drive&gt;\n"
      "&lt;/partitioning&gt;\n"
      "     "
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:287
#, no-c-format
msgid "<literal>network_cards</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:288
#, no-c-format
msgid "The <literal>network_cards</literal> helper returns a list of network cards, including their names, status information (for example, if they are connected or not)."
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:317
#, no-c-format
msgid "<literal>:device</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:327
#, no-c-format
msgid "Device name (for example, <literal>eth0</literal> or <literal>enp3s0</literal> )"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:335
#, no-c-format
msgid "<literal>:mac</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:345
#, no-c-format
msgid "MAC address"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:352
#, no-c-format
msgid "<literal>:active</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:362
#, no-c-format
msgid "Whether the device is active or not"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:369
#, no-c-format
msgid "<literal>:link</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:374
#, no-c-format
msgid "Boolean"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:379
#, no-c-format
msgid "Whether the device is connected or not"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:386
#, no-c-format
msgid "<literal>:vendor</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:396
#, no-c-format
msgid "Disk vendor's name"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:404
#, no-c-format
msgid "The following example finds the first network card that is connected to the network and configures it to use DHCP."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:409
#, no-c-format
msgid "Configure the connected network cards"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:410
#, no-c-format
msgid "&lt;interfaces t=\"list\"&gt;\n"
      "  &lt;% with_link = network_cards.sort_by { |n| n[:name] }.find { |n| n[:link] } %&gt;\n"
      "  &lt;% if with_link %&gt;\n"
      "    &lt;interface&gt;\n"
      "      &lt;device&gt;&lt;%= with_link[:device] %&gt;&lt;/device&gt;\n"
      "      &lt;startmode&gt;auto&lt;/startmode&gt;\n"
      "      &lt;bootproto&gt;dhcp&lt;/bootproto&gt;\n"
      "      &lt;/interface&gt;\n"
      "  &lt;% end %&gt;\n"
      "&lt;/interfaces&gt;\n"
      "    "
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:425
#, no-c-format
msgid "<literal>os_release</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:426
#, no-c-format
msgid "The <literal>os_release</literal> helper returns the operating system information, which is included in the <filename>/etc/os-release</filename> file."
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:436
#, no-c-format
msgid "Key"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:441
#, no-c-format
msgid "Type"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:446
#, no-c-format
msgid "Value"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:455
#, no-c-format
msgid "<literal>:id</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:465
#, no-c-format
msgid "Distribution ID ( <phrase os=\"sles;osuse\">for example, <literal>sles</literal>, <literal>opensuse-tumbleweed</literal></phrase> <phrase os=\"slemicro\"><literal>suse-microos</literal></phrase> )"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:474
#, no-c-format
msgid "<literal>:name</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:484
#, no-c-format
msgid "Distribution name ( <phrase os=\"sles;osuse\">for example, <literal>&slsa;</literal> or <literal>&opensuse; Tumbleweed</literal></phrase> <phrase os=\"slemicro\"><literal>&slem;</literal></phrase> )"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:493
#, no-c-format
msgid "<literal>:version</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:498
#, no-c-format
msgid "String"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:503
#, no-c-format
msgid "Distribution version ( <phrase os=\"sles;osuse\">for example, <literal>15.2</literal></phrase> <phrase os=\"slemicro\"><literal>5.1</literal></phrase> )"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:512
#, no-c-format
msgid "You might use this information to decide which product to install, using pretty much the same profile for all of them (&slea; or &opensuse; distributions)."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:518
#, no-c-format
msgid "Reusing the same profile for different distributions"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:519
#, no-c-format
msgid "&lt;products t=\"list\"&gt;\n"
      "  &lt;% if os_release[:id] == 'sle' %&gt;\n"
      "  &lt;product&gt;SLES&lt;/product&gt;\n"
      "  &lt;% else %&gt;\n"
      "  &lt;product&gt;openSUSE&lt;/product&gt;\n"
      "  &lt;% end %&gt;\n"
      "&lt;/products&gt;"
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:530
#, no-c-format
msgid "<literal>hardware</literal>"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:531
#, no-c-format
msgid "The <literal>hardware</literal> helper provides additional hardware information. It returns all the information from the <literal>hwinfo</literal> command. You can use this helper as a fallback for those cases in which the information available through the described helpers is not enough. In the next example, the <literal>hardware</literal> helper is used to filter USB devices. Check <xref linkend=\"erb-running-helpers\"/> to learn how to inspect all the information provided by the <literal>hardware</literal> helper."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:542
#, no-c-format
msgid "Filtering USB devices"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:543
#, no-c-format
msgid "\n"
      "&lt;% usb_disks = hardware[\"disk\"].select { |d| d[\"driver\"] != \"usb-storage\" } %&gt;\n"
      ""
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:551
#, no-c-format
msgid "Running ERB helpers"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:553
#, no-c-format
msgid "You can use the Ruby console to run &ay; ERB helpers and find out what they offer. All ERB helpers are accessed through an instance of the <literal>Y2Autoinstallation::Y2ERB::TemplateEnvironment</literal> class. Start the Ruby interactive interpreter by running, as root: <literal>irb -ryast -rautoinstall/y2erb</literal> ."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:563
#, no-c-format
msgid "Running helpers"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:564
#, no-c-format
msgid "\n"
      "irb &gt; env = Y2Autoinstallation::Y2ERB::TemplateEnvironment.new  # the env variable gives access to the helpers\n"
      "\n"
      "irb &gt; env.disks\n"
      "=&gt;\n"
      "[{:vendor=&gt;\"WDC\", :device=&gt;\"sda\", ...},\n"
      " {:vendor=&gt;\"TOSHIBA\", :device=&gt;\"sdb\", ...},\n"
      "...]\n"
      "\n"
      "irb &gt; env.hardware.keys\n"
      "=&gt;\n"
      "[\"architecture\",\n"
      " \"bios\",\n"
      " \"bios_video\",\n"
      " ...]\n"
      "\n"
      "irb &gt; env.hardware[\"architecture\"]\n"
      "=&gt;\n"
      "\"x86_64\"\n"
      ""
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:588
#, no-c-format
msgid "Rendering ERB profiles"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:590
#, no-c-format
msgid "The &ay; command line provides a <literal>check-profile</literal> command that can be used to generate a profile from an ERB file. This command asks &ay; to parse, run the ERB code, and generate the resulting profile. You can inspect the rendered profile to check that everything worked as expected. See the command help for all the options it supports: <literal>autoyast check-profile --help</literal> . In the following example, <literal>check-profile</literal> asks &ay; to download and parse the profile, interpret the ERB code and run the pre-scripts. The result will be dumped to the <literal>result.xml</literal> file."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:602
#, no-c-format
msgid "Rendering profile"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:603
#, no-c-format
msgid "\n"
      " &prompt.sudo;yast2 autoyast check-profile filename=<replaceable>http://192.168.1.100</replaceable>/autoinst.erb output=result.xml run-scripts=true run-erb=true\n"
      ""
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:608
#, no-c-format
msgid "<literal>check-profile</literal> permissions"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:609
#, no-c-format
msgid "In most cases, <literal>check-profile</literal> requires root permissions, so be careful when running pre-installation scripts and ERB profiles as root. Use only profiles that you trust."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:618
#, no-c-format
msgid "Debugging ERB profiles"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:620
#, no-c-format
msgid "For those cases in which you want to stop the ERB evaluation and check what is happening, &yast; offers integration with the <literal>byebug</literal> debugger. Install the <literal>rubygem(byebug)</literal> package and set the <literal>Y2DEBUGGER</literal> environment variable to 1."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:629
#, no-c-format
msgid "Preparing the debug environment"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:630
#, no-c-format
msgid "\n"
      "&prompt.sudo;zypper --non-interactive in \"rubygem(byebug)\"\n"
      "&prompt.sudo;Y2DEBUGGER=1 yast2 autoyast check-profile ...\n"
      ""
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:636
#, no-c-format
msgid "Adding breakpoints is as easy as adding &lt;% byebug %&gt; where you want to stop. For more information about <literal>byebug</literal> , see <link xlink:href=\"https://github.com/deivid-rodriguez/byebug\"/> ."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:643
#, no-c-format
msgid "Adding a breakpoint"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:644
#, no-c-format
msgid "\n"
      "&lt;% byebug %&gt;\n"
      "&lt;% if system(\"dmidecode | grep some-model\") %&gt;\n"
      "  &lt;!-- do something --&gt;\n"
      "%&lt;% end %&gt;\n"
      ""
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:654
#, no-c-format
msgid "ERB compared to rules and classes"
msgstr ""

#. Tag: para
#: ay_erb_templates.xml:656
#, no-c-format
msgid "Although both ERB and rules/classes enable generating profiles dynamically, in general ERB profiles are easier to read and understand. One important difference is that rules and classes can merge profiles, and ERB cannot. See more about merging profiles in <xref linkend=\"rulesandclass\"/> . On the other hand, ERB brings all the power of a high-level language, Ruby. Let's see an example using both. In the following example, we want to place <literal>/home</literal> directory in <literal>/dev/sdb</literal> if it exists."
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:669
#, no-c-format
msgid "Rules and classes"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:670
#, no-c-format
msgid "\n"
      "&lt;rule&gt;\n"
      "  &lt;custom1&gt;\n"
      "    &lt;script&gt;\n"
      "if blkid | grep /dev/sdb &gt; /dev/null; then\n"
      "echo -n \"yes\"\n"
      "else\n"
      "echo -n \"no\"\n"
      "fi;\n"
      "    &lt;/script&gt;\n"
      "    &lt;match&gt;yes&lt;/match&gt;\n"
      "    &lt;match_type&gt;exact&lt;/match_type&gt;\n"
      "  &lt;/custom1&gt;\n"
      "  &lt;result&gt;\n"
      "    &lt;profile&gt;classes/sdb_home.xml&lt;/profile&gt;\n"
      "    &lt;dont_merge config:type=\"list\"&gt;\n"
      "      &lt;element&gt;partition&lt;/element&gt;\n"
      "    &lt;/dont_merge&gt;\n"
      "  &lt;/result&gt;\n"
      "&lt;/rule&gt;\n"
      ""
msgstr ""

#. Tag: title
#: ay_erb_templates.xml:694
#, no-c-format
msgid "ERB"
msgstr ""

#. Tag: screen
#: ay_erb_templates.xml:695
#, no-c-format
msgid "\n"
      "&lt;% home_in_sdb = disks.map { |d| d[:device] }.include?(\"sdb\") %&gt;\n"
      "\n"
      "&lt;partitioning config:type=\"list\"&gt;\n"
      "  &lt;drive&gt;\n"
      "    ...\n"
      "  &lt;/drive&gt;\n"
      "  &lt;% if home_in_sdb %&gt;\n"
      "  &lt;drive&gt;\n"
      "    &lt;device&gt;sdb&lt;/device&gt;\n"
      "    &lt;disklabel&gt;none&lt;/disklabel&gt;\n"
      "    &lt;partitions t=\"list\"&gt;\n"
      "      &lt;partition&gt;\n"
      "        &lt;format t=\"boolean\"&gt;true&lt;/format&gt;\n"
      "        &lt;filesystem t=\"symbol\"&gt;xfs&lt;/filesystem&gt;\n"
      "        &lt;mount&gt;/home&lt;/mount&gt;\n"
      "      &lt;/partition&gt;\n"
      "    &lt;/partitions&gt;\n"
      "  &lt;/drive&gt;\n"
      "  &lt;% end %&gt;\n"
      "&lt;/partitioning&gt;\n"
      ""
msgstr ""

