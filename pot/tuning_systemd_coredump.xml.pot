# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: https://github.com/belphegor-belbel/doc-opensuse-ja\n"
"POT-Creation-Date: 2025-08-04 22:05+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <someuser@example.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/x-po; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: tuning_systemd_coredump.xml:8
#, no-c-format
msgid "Using &systemdcd; to debug application crashes"
msgstr ""

#. Tag: date
#: tuning_systemd_coredump.xml:16
#, no-c-format
msgid "2023-08-08"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:23
#, no-c-format
msgid "&systemdcd; collects and displays core dumps, for analyzing application crashes. The core dump contains an image of the process's memory at the time of termination. By default, when a process crashes (or all processes belonging to an application), it stores the core dump in the <filename>/var/lib/systemd/coredump</filename> file and logs the core dump to the &systemd; journal, including a backtrace if possible. You also have the option to examine the dump file with other tools such as <command>gdb</command> or <command>crash</command> (see <xref linkend=\"cha-tuning-kdump-analyze\"/> )."
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:33
#, no-c-format
msgid "Core dumps stored in <filename>/var/lib/systemd/coredump</filename> are deleted after three days (see the <literal>d /var/lib/systemd/coredump</literal> line in <filename>/usr/lib/tmpfiles.d/systemd.conf</filename> )."
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:39
#, no-c-format
msgid "There is an option to not store core dumps, but to log only to the journal, which may be useful to minimize the collection and storage of sensitive information."
msgstr ""

#. Tag: title
#: tuning_systemd_coredump.xml:45
#, no-c-format
msgid "Use and configuration"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:47
#, no-c-format
msgid "&systemdcd; is enabled and ready to run by default. The default configuration is in <filename>/etc/systemd/coredump.conf</filename> :"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:52
#, no-c-format
msgid "[Coredump]\n"
      "#Storage=external\n"
      "#Compress=yes\n"
      "#ProcessSizeMax=2G\n"
      "#ExternalSizeMax=2G\n"
      "#JournalSizeMax=767M\n"
      "#MaxUse=\n"
      "#KeepFree=\n"
      ""
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:62
#, no-c-format
msgid "Size units are B, K, M, G, T, P, and E. <literal>ExternalSizeMax</literal> also supports a value of <literal>infinity</literal> . <!-- see https://github.com/systemd/systemd/pull/21371/files, c schroder 2022-09-15 -->"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:68
#, no-c-format
msgid "The following example shows how to use Vim for simple testing, by creating a segfault to generate journal entries and a core dump."
msgstr ""

#. Tag: title
#: tuning_systemd_coredump.xml:74
#, no-c-format
msgid "Creating a core dump with Vim"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:76
#, no-c-format
msgid "Enable the <systemitem>debuginfo-pool</systemitem> and <systemitem>debuginfo-update</systemitem> repositories"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:82
#, no-c-format
msgid "Install <package>vim-debuginfo</package>"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:87
#, no-c-format
msgid "Launch <command>vim testfile</command> and type a few characters"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:92
#, no-c-format
msgid "Get the PID and generate a segfault:"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:95
#, no-c-format
msgid "&prompt.user;ps ax | grep vim\n"
      "2345 pts/3    S+     0:00 vim testfile\n"
      "\n"
      "&prompt.root;kill -s SIGSEGV 2345"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:99
#, no-c-format
msgid "Vim emits error messages:"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:102
#, no-c-format
msgid "Vim: Caught deadly signal SEGV\n"
      "Vim: Finished.\n"
      "Segmentation fault (core dumped)"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:107
#, no-c-format
msgid "List your core dumps, then examine them:"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:110
#, no-c-format
msgid "&prompt.root;coredumpctl\n"
      "TIME                        PID  UID  GID SIG PRESENT EXE\n"
      "Wed 2019-11-12 11:56:47 PST 2345 1000 100 11  *       /bin/vim\n"
      "\n"
      "&prompt.root;coredumpctl info\n"
      "PID: 2345 (vim)\n"
      "UID: 0 (root)\n"
      "GID: 0 (root)\n"
      "Signal: 11 (SEGV)\n"
      "Timestamp: Wed 2019-11-12 11:58:05 PST\n"
      "Command Line: vim testfile\n"
      "Executable: /bin/vim\n"
      "Control Group: /user.slice/user-1000.slice/session-1.scope\n"
      "    Unit: session-1.scope\n"
      "    Slice: user-1000.slice\n"
      "    Session: 1\n"
      "    Owner UID: 1000 (tux)\n"
      "    Boot ID: b5c251b86ab34674a2222cef102c0c88\n"
      "    Machine ID: b43c44a64696799b985cafd95dc1b698\n"
      "    Hostname: linux-uoch\n"
      "    Coredump: /var/lib/systemd/coredump/core.vim.0.b5c251b86ab34674a2222cef102\n"
      "    Message: Process 2345 (vim) of user 0 dumped core.\n"
      "\n"
      "         Stack trace of thread 2345:\n"
      "         #0  0x00007f21dd87e2a7 kill (libc.so.6)\n"
      "         #1  0x000000000050cb35 may_core_dump (vim)\n"
      "         #2  0x00007f21ddbfec70 __restore_rt (libpthread.so.0)\n"
      "         #3  0x00007f21dd92ea33 __select (libc.so.6)\n"
      "         #4  0x000000000050b4e3 RealWaitForChar (vim)\n"
      "         #5  0x000000000050b86b mch_inchar (vim)\n"
      "[...]\n"
      ""
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:145
#, no-c-format
msgid "When you have multiple core dumps, <command>coredumpctl info</command> displays all of them. Filter them by <literal>PID</literal> , <literal>COMM</literal> (command), or <literal>EXE</literal> (full path to the executable). For example, all core dumps for Vim:"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:152
#, no-c-format
msgid "&prompt.root;coredumpctl info /bin/vim"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:154
#, no-c-format
msgid "See a single core dump by <literal>PID</literal> :"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:158
#, no-c-format
msgid "\n"
      "&prompt.root;coredumpctl info 2345"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:161
#, no-c-format
msgid "Output the selected core to <command>gdb</command> :"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:165
#, no-c-format
msgid "\n"
      "&prompt.root;coredumpctl gdb 2345"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:168
#, no-c-format
msgid "The asterisk in the <literal>PRESENT</literal> column indicates that a stored core dump is present. If the field is empty there is no stored core dump, and <command>coredumpctl</command> retrieves crash information from the journal. You can control this behavior in <filename>/etc/systemd/coredump.conf</filename> with the <literal>Storage</literal> option:"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:179
#, no-c-format
msgid "<literal>Storage=none</literal> &mdash;core dumps are logged in the journal, but not stored. This is useful to minimize collecting and storing sensitive information, for example for General Data Protection Regulation (GDPR) compliance."
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:187
#, no-c-format
msgid "<literal>Storage=external</literal> &mdash;cores are stored in <filename>/var/lib/systemd/coredump</filename>"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:193
#, no-c-format
msgid "<literal>Storage=journal</literal> &mdash;cores are stored in the &systemd; journal"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:200
#, no-c-format
msgid "A new instance of &systemdcd; is invoked for every core dump, so configuration changes are applied with the next core dump, and there is no need to restart any services."
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:206
#, no-c-format
msgid "Core dumps are not preserved after a system restart. You may save them permanently with <command>coredumpctl</command> . The following example filters by the <literal>PID</literal> and stores the core in <filename>vim.dump</filename> :"
msgstr ""

#. Tag: screen
#: tuning_systemd_coredump.xml:213
#, no-c-format
msgid "&prompt.root;coredumpctl -o vim.dump dump 2345"
msgstr ""

#. Tag: para
#: tuning_systemd_coredump.xml:215
#, no-c-format
msgid "See <command>man systemd-coredump</command> , <command>man coredumpctl</command> , <command>man core</command> , and <command>man coredump.conf</command> for complete command and option listings."
msgstr ""

